Computing the Banzhaf Power Index 
content:
1 ABSTRACT :
1-1:Preference aggregation is used in a variety of multiagent applications, and as a result, voting theory has become an important topic in multiagent system research .
1-2:However, power indices (which reflect how much real power a voter has in a weighted voting system) have received relatively little attention, although they have long been studied in political science and economics .
1-3:The Banzhaf power index is one of the most popular; it is also well defined for any simple coalitional game .
1-4:In this paper, we examine the computational complexity of calculating the Banzhaf power index within a particular multiagent domain, a network flow game .
1-5:Agents control the edges of a graph; a coalition wins if it can send a flow of a given size from a source vertex to a target vertex .
1-6:The relative power of each edge agent reflects its significance in enabling such a flow, and in real world networks could be used, for example, to allocate resources for maintaining parts of the network .
1-7:We show that calculating the Banzhaf power index of each agent in this network flow domain is #P complete .
1-8:We also show that for some restricted network flow domains there exists a polynomial algorithm to calculate agents" Banzhaf power indices .
1-9:F.2 [Theory of Computation]: Analysis of Algorithms and .
2 INTRODUCTION :
2-1:Social choice theory can serve as an appropriate foundation upon which to build multiagent applications .
2-2:There is a rich literature on the subject of voting1 from political science, mathematics, and economics, with important theoretical results, and builders of automated agents can benefit from this work as they engineer systems that reach group consensus .
2-3:Interest in the theory of economics and social choice has in fact become widespread throughout computer science, because it is recognized as having direct implications on the building of systems comprised of multiple automated agents [16, 4, 22, 17, 14, 8, 15] .
2-4:What distinguishes computer science work in these areas is its concern for computational issues: how are results arrived at (e.g., equilibrium points)? What is the complexity of the process? Can complexity be used to guard against unwanted phenomena? Does complexity of computation prevent realistic implementation of a technique? The practical applications of voting among automated agents are already widespread .
2-5:Ghosh et al .
2-6:[6] built a movie recommendation system; a user"s preferences were represented as agents, and movies to be suggested were selected through agent voting .
2-7:Candidates in virtual elections have also been beliefs, joint plans [5], and schedules [7] .
2-8:In fact, to see the generality of the (automated) voting scenario, consider modern web searching .
2-9:One of the most massive preference aggregation schemes in existence is Google"s PageRank algorithm, which can be viewed as a vote among indexed web pages on candidates determined by a user input search string; winners are ranked (Tennenholtz and Altman [21] consider the axiomatic foundations of ranking systems such as this) .
2-10:In this paper, we consider a topic that has been less studied in the context of automated agent voting, namely power indices .
2-11:A power index is a measure of the power that a subgroup, or equivalently a voter in a weighted voting environment, has over decisions of a larger group .
2-12:The Banzhaf power index is one of the most popular measures of voting power, and although it has been used primarily for measuring power in weighted voting games, it is well defined for any simple coalitional game .
2-13:We look at some computational aspects of the Banzhaf power index in a specific environment, namely a network flow game .
2-14:In this game, a coalition of agents wins if it can send a flow of size k from a source vertex s to a target vertex t, with the relative power of each edge reflecting its significance in allowing such a flow .
2-15:We show that calculating the Banzhaf power index of each agent in this general network flow domain is #P complete .
2-16:We also show that for some restricted network flow domains (specifically, of con1 We use the term in its intuitive sense here, but in the social choice literature, preference aggregation and voting are basically synonymous .
2-17:335 978 81 904262 7 5 c 2007 IFAAMAS nectivity games on bounded layer graphs), there does exist a polynomial algorithm to calculate the Banzhaf power index of an agent .
2-18:There are implications in this scenario to real world networks; for example, the power index might be used to allocate maintenance resources (a more powerful edge being more critical), in order to maintain a given flow of data between two points .
2-19:The paper proceeds as follows .
2-20:In Section 2 we give some background concerning coalitional games and the Banzhaf power index, and in Section 3 we introduce our specific network flow game .
2-21:In Section 4 we discuss the Banzhaf power index in network flow games, presenting our complexity result in the general case .
2-22:In Section 5 we consider a restricted case of the network flow game, and present results .
2-23:In Section 6 we discuss related work, and we conclude in Section 7. .
3 TECHNICAL BACKGROUND :
3-1:A coalitional game is composed of a set of n agents, I, and a function mapping any subset (coalition) of the agents to a real value v : 2I → R .
3-2:In a simple coalitional game, v only gets values of 0 or 1 (v : 2I → {0, 1}) .
3-3:We say a coalition C ⊂ I wins if v(C) = 1, and say it loses if v(C) = 0 .
3-4:We denote the set of all winning coalitions as W(v) = {C ⊂ 2I |v(C) = 1} .
3-5:An agent i is a swinger (or pivot) in a winning coalition C if the agent"s removal from that coalition would make it a losing coalition: v(C) = 1, v(C \ {i}) = 0 .
3-6:A swing is a pair < i, S > such that agent i is a swinger in coalition S .
3-7:A question that arises in this context is that of measuring the influence a given agent has on the outcome of a simple game .
3-8:One approach to measuring the power of individual agents in simple coalitional games is the Banzhaf index .
3-9:2.1 The Banzhaf Index A common interpretation of the power an agent possesses is that of its a priori probability of having a significant role in the game .
3-10:Different assumptions about the formation of coalitions, and different definitions of having a significant role, have caused researchers to define different power indices, one of the most prominent of which is the Banzhaf index [1] .
3-11:This index has been widely used, though primarily for the purpose of measuring individual power in a weighted voting system .
3-12:However, it can also easily be applied to any simple coalitional game .
3-13:The Banzhaf index depends on the number of coalitions in which an agent is a swinger, out of all possible coalitions.2 The Banzhaf index is given by β(v) = (β1(v), ..., βn(v)) where βi(v) = 1 2n−1 S⊂N|i∈S [v(S) − v(S \ {i})] .
3-14:Different probabilistic models on the way a coalition is formed yield different appropriate power indices [20] .
3-15:The Banzhaf power index reflects the assumption that the agents are independent in their choices. .
4 NETWORK FLOW GAMES :
4-1:3.1 Motivation Consider a communication network, where it is crucial to be able to send a certain amount of information between two sites .
4-2:Given limited resources to maintain network links, which edges should get those resources? 2 Banzhaf actually considered the percentage of such coalitions out of all winning coalitions .
4-3:This is called the normalized Banzhaf index .
4-4:We model this problem by considering a network flow game .
4-5:The game consists of agents in a network flow graph, with a certain source vertex s and target vertex t .
4-6:Each agent controls one of the graph"s edges, and a coalition of agents controls all the edges its members control .
4-7:A coalition of agents wins the game if it manages to send a flow of at least k from source s to target t, and loses otherwise .
4-8:To ensure that the network is capable of maintaining the desired flow between s and t, we may choose to allocate our limited maintenance resources to the edges according to their impact on allowing this flow .
4-9:In other words, resources could be devoted to the links whose failure is most likely to cause us to lose the ability to send the required amount of information between the source and target .
4-10:Under a reasonable probabilistic model, the Banzhaf index provides us with a measure of the impact each edge has on enabling this amount of information to be sent between the sites, and thus provides a reasonable basis for allocation of scarce maintenance resources .
4-11:3.2 Formal Definition Formally, a network flow game is defined as follows .
4-12:The game consists of a network flow graph G =< V, E >, with capacities on the edges c : E → R, a source vertex s, a target vertex t, and a set I of agents, where agent i controls the edge ei .
4-13:Given a coalition C, which controls the edges EC = {ei|i ∈ C}, we can check whether the coalition allows a flow of k from s to t .
4-14:We define the simple coalitional game of network flow as the game where the coalition wins if it allows such a flow, and loses otherwise: v(C) = 1 if EC allows a flow of k from s to t; 0 otherwise; A simplified version of the network flow game is the connectivity game; in a connectivity game, a coalition wants to have some path from source to target .
4-15:More precisely, a connectivity game is a network flow game where each of the edges has identical capacity, c(e) = 1, and the target flow value is k = 1 .
4-16:In such a scenario, the goal of a coalition is to have at least one path from s to t: v(C) = 1 if EC contains a path from s to t; 0 otherwise; Given a network flow game (or a connectivity game), we can compute the power indices of the game .
4-17:When a coalition of edges is chosen at random, and each coalition is equiprobable, the appropriate index is the Banzhaf index.3 We can use the Banzhaf value of an agent i ∈ I (or the edge it controls, ei), βei (v) = βi(v), to measure its impact on allowing a given flow between s and t. .
5 THE BANZHAF INDEX IN NETWORK FLOW GAMES :
5-1:FLOW GAMES We now define the problem of calculating the Banzhaf index in the network flow game .
5-2:DEFINITION 1 .
5-3:NETWORK FLOW BANZHAF: We are given a network flow graph G =< V, E > with a source vertex s and a target vertex t, a capacity function c : E → R, and a target flow value k .
5-4:We consider the network flow game, as defined above in Section 3 .
5-5:We are given an agent i, controlling the edge ei, and are asked to calculate the Banzhaf index for that agent .
5-6:In the network 3 When each ordering of edges is equiprobable, the appropriate index is the Shapley Shubik index .
5-7:336 The Sixth Intl .
5-8:Joint Conf .
5-9:on Autonomous Agents and Multi Agent Systems (AAMAS 07) flow game, let Cei be the set of all subsets of E that contain ei: Cei = {C ⊂ E|ei ∈ C} .
5-10:In this game, the Banzhaf index of ei is: βi(v) = 1 2|E|−1 E ⊂Cei [v(E ) − v(E \ {ei})] .
5-11:Let W(Cei ) be the set of winning subsets of edges in Cei , i.e., the subsets E ∈ Cei where a flow of at least k can be sent from s to t using only the edges in E .
5-12:The Banzhaf index of ei is the proportion of subsets in W(Cei ) where ei is crucial to maintaining the k flow .
5-13:All the edge subsets in W(Cei ) contain ei and are winning, but only for some of them, E ∈ W(Cei ), do we have that v(E \ {ei}) = 0 (i.e., E is no longer winning if we remove ei) .
5-14:The Banzhaf index of ei is the proportion of such subsets .
5-15:4.1 #P Completeness of Calculating the Banzhaf Index in the Network Flow Game We now show that the general case of NETWORK FLOW BANZHAF is #P complete, by a reduction from #MATCHING .
5-16:First, we note that NETWORK FLOW BANZHAF is in #P .
5-17:There are several polynomial algorithms to calculate the maximal network flow, so it is easy to check if a certain subset of edges E ⊂ E contains ei and allows a flow of at least k from s to t .
5-18:It is also easy to check if a flow of at least k is no longer possible when we remove ei from E (again, by running a polynomial algorithm for calculating the maximal flow) .
5-19:The Banzhaf index of ei is exactly the number of such subsets E ⊂ E, so NETWORK FLOWBANZHAF is in #P .
5-20:To show that NETWORK FLOW BANZHAF is #P complete, we reduce a #MATCHING problem4 to a NETWORKFLOW BANZHAF problem .
5-21:DEFINITION 2 .
5-22:#MATCHING: We are given a bipartite graph G =< U, V, E >, such that |U| = |V | = n, and are asked to count the number of perfect matchings possible in G .
5-23:4.2 The Overall Reduction Approach The reduction is done as follows .
5-24:From the #MATCHING input, G =< U, V, E >, we build two inputs for the NETWORKFLOW BANZHAF problem .
5-25:The difference between the answers obtained from the NETWORK FLOW BANZHAF runs is the answer to the #MATCHING problem .
5-26:Both runs of the NETWORKFLOW BANZHAF problem are constructed with the same graph G =< V , E >, with the same source vertex s and target vertex t, and with the same edge ef for which to compute the Banzhaf index .
5-27:They differ only in the target flow value .
5-28:The first run is with a target flow of k, and the second run is with a target flow of k + .
5-29:A choice of subset Ec ⊂ E reflects a possible matching in the original graph .
5-30:G is a subgraph of the constructed G .
5-31:We identify an edge in G , e ∈ E , with the same edge in G .
5-32:This edge indicates a particular match between some vertex u ∈ U and another vertex v ∈ V .
5-33:Thus, if Ec ⊂ E is a subset of edges in G which contains only edges in the subgraph of G, we identify it with a subset of edges in G, or with some candidate of a matching .
5-34:We say Ec ⊂ E matches some vertex v ∈ V , if Ec contains some edge that connects to v, i.e., for some u ∈ U we have (u, v) ∈ Ec .
5-35:Ec is a possible matching if it does not match a vertex v ∈ V with more than one vertex in U, i.e., there are not two vertices u1 = u2 in U that both (u1, v) ∈ Ec and (u2, v) ∈ Ec .
5-36:A perfect matching matches all the vertices in V .
5-37:If Ec fails to match a vertex in V (the right side of the partition), the maximal possible flow that Ec allows in G is less than k .
5-38:If it matches all the vertices in V , a flow of k is possible .
5-39:If it matches 4 This is one of the most well known #P complete problems .
5-40:all the vertices in V , but matches some vertex in V more than once (which means this is not a true matching), a flow of k+ is possible .
5-41:is chosen so that if a single vertex v ∈ V is unmatched, the maximal possible flow would be less than |V |, even if all the other vertices are matched more than once .
5-42:In other words, is chosen so that matching several vertices in V more than once can never compensate for not matching some vertex in V , in terms of the maximal possible flow .
5-43:Thus, when we check the Banzhaf index of ef when the required flow is at least k, we get the number of subsets E ⊂ E that match all the vertices in V at least once .
5-44:When we check the Banzhaf index of ef with a required flow of at least k+ , we get the number of subsets E ⊂ E that match all the vertices in V at least once, and match at least one vertex v ∈ V more than once .
5-45:The difference between the two is exactly the number of perfect matchings in G .
5-46:Therefore, if there existed a polynomial algorithm for NETWORKFLOW BANZHAF, we could use it to build a polynomial algorithm for #MATCHING, so NETWORK FLOW BANZHAF is #Pcomplete .
5-47:4.3 Reduction Details The reduction takes the #MATCHING input, the bipartite graph G =< U, V, E >, where |U| = |V | = k .
5-48:It then generates a network flow graph G as follows .
5-49:The graph G is kept as a subgraph of G , and each edge in G is given a capacity of 1 .
5-50:A new source vertex s is added, along with a new vertex t and a new target vertex t .
5-51:Let = 1 k+1 so that · k < 1 .
5-52:The source s is connected to each of the vertices in U, the left partition of G, with an edge of capacity 1 + .
5-53:Each of the vertices in V is connected to t with an edge of capacity 1 + .
5-54:t is connected to t with an edge ef of capacity 1 + .
5-55:As mentioned above, we perform two runs of NETWORK FLOWBANZHAF, both checking the Banzhaf index of the edge ef in the flow network G .
5-56:We denote the network flow game defined on G with target flow k as v(G ,k) .
5-57:The first run is performed on the game with a target flow of k, v(G ,k), returning the index βef (v(G ,k)) .
5-58:The second run is performed on the game with a target flow of k + , v(G ,k+ ), returning the index βef (v(G ,k+ )) .
5-59:The number of perfect matchings in G is the difference between the answers in the two runs, βef (v(G ,k)) − βef (v(G ,k+ )) .
5-60:This is proven in Theorem 5 .
5-61:Figure 1 shows an example of constructing G from G .
5-62:On the left is the original graph G, and on the right is the constructed network flow graph G .
5-63:4.4 Proof of the reduction We now prove that the reduction above is correct .
5-64:In all of this section, we take the input to the #MATCHING problem to be G =< U, V, E > with |U| = |V | = k, the network flow graph constructed in the reduction to be G =< V , E > with capacities c : E → R as defined in Section 4.3, the edge for which to calculate the Banzhaf index to be ef , and target flow values of k and k + .
5-65:PROPOSITION 1 .
5-66:Let Ec ⊂ E be a subset of edges that lacks one or more edges of the following: .
6 The edges connected to s; :
6-1:.
7 The edges connected to t ; :
7-1:.
8 The edge ef = (t , t). :
8-1:We call such a subset a missing subset .
8-2:The maximal flow between s and t using only the edges in the missing subset Ec is less than k .
8-3:The Sixth Intl .
8-4:Joint Conf .
8-5:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 337 Figure 1: Reducing #MATCHING to NETWORK FLOW BANZHAF PROOF .
8-6:The graph is a layer graph, with s being the vertex in the first layer, U the vertices in the second layer, V the vertices in the third, t the vertex in the fourth, and t in the fifth .
8-7:Edges in G only go between consecutive layers .
8-8:The maximal flow in a layer graph is limited by the total capacity of the edges between every two consecutive layers .
8-9:If any of the edges between s and U is missing, the flow is limited by (|V | − 1)(1 + ) < k .
8-10:If any of the edges between V and t is missing, the flow is also limited by (|V | − 1)(1 + ) < k .
8-11:If the edge ef is missing, there are no edges going to the last layer, and the maximal flow is 0 .
8-12:Since such missing subsets of edges do not affect the Banzhaf index of ef (they add 0 to the sum), from now on we will consider only non missing subsets .
8-13:As explained in Section 4.2, we identify the edges in G that were copied from G (the edges between U and V in G ) with their counterparts in G .
8-14:Each such edge (u, v) ∈ E represents a match between u and v in G .
8-15:Ec is a perfect matching if it matches every vertex u to a single vertex v and vice versa .
8-16:PROPOSITION 2 .
8-17:Let Ec ⊂ E be a subset of edges that fails to match some vertex v ∈ V .
8-18:The maximal flow between s and t using only the edges in the missing subset Ec is less than k .
8-19:We call such a set sub matching, and it is not a perfect matching .
8-20:PROOF .
8-21:If Ec fails to match some vertex v ∈ V , the maximal flow that can reach the vertices in the V layer is (1+ )(k−1) < k, so this is also the maximal flow that can reach t .
8-22:PROPOSITION 3 .
8-23:Let Ec ⊂ E be a subset of edges that is a perfect matching in G .
8-24:Then the maximal flow between s and t using only the edges in Ec is exactly k .
8-25:PROOF .
8-26:A flow of k is possible .
8-27:We send a flow of 1 from s to each of the vertices in U, send a flow of 1 from each vertex u ∈ U to its match v ∈ V , and send a flow of 1 from each v ∈ V to t .
8-28:t gets a total flow of exactly k, and sends it to t .
8-29:A flow of more than k is not possible since there are exactly k edges of capacity 1 between the U layer and the V layer, and the maximal flow is limited by the total capacity of the edges between these two consecutive layers .
8-30:PROPOSITION 4 .
8-31:Let Ec ⊂ E be a subset of edges that contains a perfect matching M ⊂ E in G and at least one more edge ex between some vertex ua ∈ U and va ∈ V .
8-32:Then the maximal flow between s and t using only the edges in Ec is at least k+ .
8-33:We call such a set a super matching, and it is not a perfect matching .
8-34:PROOF .
8-35:A flow of k is possible, by using the edges of the perfect match as in Proposition 3 .
8-36:We send a flow of 1 from s to each of the vertices in U, send a flow of 1 from each vertex u ∈ U to its match v ∈ V , and send a flow of 1 from each v ∈ V to t .
8-37:t gets a total flow of exactly k, and sends it to t .
8-38:After using the edges of the perfect matching, we send a flow of from s to ua (this is possible since the capacity of the edge (s, ua) is 1 + and we have only used up 1) .
8-39:We then send a flow of from ua to va .
8-40:This is possible since we have not used this edge at all it is the edge which is not a part of the perfect matching .
8-41:We then send a flow of from va to t .
8-42:Again, this is possible since we have used 1 out of the total capacity of 1 + which that edge has .
8-43:Now t gets a total flow of k + , and sends it all to t, so we have achieved a total flow of k + .
8-44:Thus, the maximal possible flow is at least k + .
8-45:THEOREM 5 .
8-46:Consider a #MATCHING instance G =< U, V, E > reduced to a BANZHAF NETWORK FLOW instance G as explained in Section 4.3 .
8-47:Let v(G ,k) be the network flow game defined on G with target flow k, and v(G ,k+ ) be the game defined with a target flow of k+ .
8-48:Let the resulting index of the first run be βef (v(G ,k)), and βef (v(G ,k+ )) be the resulting index of the second run .
8-49:Then the number of perfect matchings in G is the difference between the answers in the two runs, βef (v(G ,k)) − βef (v(G ,k+ )) .
8-50:PROOF .
8-51:Consider the game v(G ,k) .
8-52:According to Proposition 1, in this game, the Banzhaf index of Ef does not count missing subsets Ec ∈ E , since they are losing in this game .
8-53:According to Proposition 2, it does not count subsets Ec ∈ E that are submatchings, since they are also losing .
8-54:According to Proposition 3, it adds 1 to the count for each perfect matching, since such subsets allow a flow of k and are winning .
8-55:According to Proposition 3, it adds 1 to the count for each super matching, since such subsets allow a flow of k (and more than k) and are winning .
8-56:Consider the game v(G ,k+ ) .
8-57:Again, according to Proposition 1, in this game the Banzhaf index of Ef does not count missing subsets Ec ∈ E , since they are losing in this game .
8-58:According to Proposition 2, it does not count subsets Ec ∈ E that are submatchings, since they are also losing .
8-59:According to Proposition 3, it adds 0 to the count for each perfect matching, since such subsets allow a flow of k but not k + , and are thus losing .
8-60:According to Proposition 3, it adds 1 to the count for each super matching, since such subsets allow a flow of k + and are winning .
8-61:Thus the difference between the two indices, βef (v(G ,k)) − βef (v(G ,k+ )), is exactly the number of perfect matchings in G .
8-62:We have reduced a #MATCHING problem to a NETWORKFLOW BANZHAF problem .
8-63:This means that given a polynomial 338 The Sixth Intl .
8-64:Joint Conf .
8-65:on Autonomous Agents and Multi Agent Systems (AAMAS 07) algorithm to calculate the Banzhaf index of an agent in a general network flow game, we can build an algorithm to solve the #MATCHING problem .
8-66:Thus, the problem of calculating the Banzhaf index of agents in general network flow games is also #P complete. .
9 CALCULATING THE BANZHAF INDEX IN BOUNDED LAYER GRAPH :
9-1:IN BOUNDED LAYER GRAPH CONNECTIVITY GAMES We here present a polynomial algorithm to calculate the Banzhaf index of an edge in a connectivity game, where the network is a bounded layer graph .
9-2:This positive result indicates that for some restricted domains of network flow games, it is possible to calculate the Banzhaf index in a reasonable amount of time .
9-3:DEFINITION 3 .
9-4:A layer graph is a graph G =< V, E >, with source vertex s and target vertex t, where the vertices of the graph are partitioned into n + 1 layers, L0 = {s}, L1, ..., Ln = {t} .
9-5:The edges run only between consecutive layers .
9-6:DEFINITION 4 .
9-7:A c bounded layer graph is a layer graph where the number of vertices in each layer is bounded by some constant number c .
9-8:Although there is no limit on the number of layers in a bounded layer graph, the structure of such graphs makes it possible to calculate the Banzhaf index of edges in connectivity games on such graphs .
9-9:The algorithm provided below is indeed polynomial in the number of vertices given that the network is a c bounded layer graph .
9-10:However, there is a constant factor to the running time, which is exponential in c .
9-11:Therefore, this method is only tractable for graphs where the bound c is small .
9-12:Bounded layer graphs may occur in networks when the nodes are located in several ordered segments, where nodes can be connected only between consecutive segments .
9-13:Let v be a vertex in layer Li .
9-14:We say an edge e occurs before v if it connects two vertices in v"s layer or a previous layer: e = (u, w) connects vertex u ∈ Lj to vertex w ∈ Lj+1 and j + 1 ≤ i .
9-15:Let Predv ⊂ E be the subset of edges that occur before v .
9-16:Consider a subset of these edges, E ⊂ Predv .
9-17:E may contain a path from s to v, or it may not .
9-18:We define Pv as the number of subsets E ⊂ Predv that contain a path from s to v .
9-19:Similarly, let Vi ∈ V be the subset of all the vertices in the same layer Li .
9-20:Let PredVi ⊂ E be the subset of edges that occur before Vi (all the vertices in Vi are in the same layer, so any edge that occurs before some v ∈ Vi occurs before any other vertex w ∈ Vi) .
9-21:Consider a subset of these edges, E ⊂ PredV .
9-22:Let Vi(E ) be the subset of vertices in Vi that are reachable from s using only the edges in E : Vi(E ) = {v ∈ Vi|E contains a path from s to v} .
9-23:We say E ∈ PredV connects exactly the vertices in Si ⊂ Vi if all the vertices in Si are reachable from s using the edges in E but no other vertices in Vi are reachable from s using E , so Vi(E ) = Si .
9-24:Let V ⊂ Vi be a subset of the vertices in layer Li .
9-25:We define PV as the number of subsets E ⊂ PredV that connect exactly the vertices in V : PV = |{E ⊂ PredV |Vi(E ) = V }| .
9-26:LEMMA 1 .
9-27:Let S1, S2 ⊂ Vi where S1 = S2 be two different subsets of vertices in the same layer .
9-28:Let E , E ⊂ PredVi be two sets of edge subsets, so that E connects exactly the vertices in S1 and E connects exactly the vertices in S2: Vi(E ) = S1 and Vi(E ) = S2 .
9-29:Then E and E do not contain the same edges: E = E .
9-30:PROOF .
9-31:If E = E then both sets of edges allow the same paths from s, so Vi(E ) = Vi(E ) .
9-32:Let Si ⊂ Vi be a subset of vertices in layer Li .
9-33:Let Ei ⊂ E be the set of edges between the vertices in layer Li and layer Li+1 .
9-34:Let E ⊂ Ei be some subset of these edges .
9-35:We denote by Dests(Si, E) the set of vertices in layer Li+1 that are connected to some vertex in Si by an edge in E: Dests(Si, E) = {v ∈ Vi+1|there exists some w ∈ Si and some e ∈ E that e = (w, v)} .
9-36:Let Si ⊂ Vi be a subset of vertices in Li and E ⊂ Ei be some subset of the edges between layer Li and layer Li+1 .
9-37:PSi counts the number of edge subsets in PredVi that connect exactly the vertices in Si .
9-38:Consider such a subset E counted in PSi .
9-39:E ∪ E is a subset of edges in PredVi+1 that connects exactly to Dest(Si, E) .
9-40:According to Lemma 1, if we iterate over the different Si"s in layer Li, the PSi "s count different subsets of edges, and thus every expansion using the edges in E is also different .
9-41:Algorithm 1 calculates Pt .
9-42:It iterates through the layers, and updates the data for the next layer given the data for the current layer .
9-43:For each layer Li and every subset of edges in that layer Si ⊂ Vi, it calculates PSi .
9-44:It does so using the values calculated in the previous layer .
9-45:The algorithm considers every subset of possible vertices in the current layer, and every possible subset of expanding edges to the next layer, and updates the value of the appropriate subset in the next layer .
9-46:Algorithm 1 1: procedure CONNECTING EXACTLY SUBSETS(G, v) 2: P{s} ← 1 Initialization 3: for all other subsets of vertices S do Initialization 4: PS ← 0 5: end for 6: for i ← 0 to n − 1 do Iterate through layers 7: for all vertex subsets Si in Li do 8: for all edge subsets E between Li, Li+1 do 9: D ← Dests(Si, E) subset in Li+1 10: PD ← PD + PSi 11: end for 12: end for 13: end for 14: end procedure A c bounded layer graph contains at most c vertices in each layer, so for each layer there are at most 2c different subsets of vertices in that layer .
9-47:There are also at most c2 edges between 2 consecutive layers, and thus at most 2(c2 ) edge subsets between two layers .
9-48:If the graph contains k layers, the running time of the algorithm is bounded by k·2c ·2(c2 ) .
9-49:Since c is a constant, this is a polynomial algorithm .
9-50:Consider the connectivity game on a layer graph G, with a single source vertex s and target vertex t .
9-51:The Banzhaf index of the edge e is the number of subsets of edges that allow a path between s and t, but do not allow such a path when e is removed (divided by a constant) .
9-52:We can calculate P{t} = P{t}(G) for G using the algorithm to count the number of subsets of edges that allow a path from s to t .
9-53:We can then remove e from G to obtain the graph G =< V, E \ {e} >, and calculate P{t} = P{t}(G ) .
9-54:The difference P{t}(G) − P{t}(G ) is the number of subsets of edges that contain a path from s to t but no longer contain such a path when e is removed .
9-55:The Banzhaf index for e is P{t}(G)−P{t}(G ) 2|E|−1 .
9-56:Thus, this algorithm allows us to calculate the Banzhaf index on an edge in the connectivity games on bounded layer graphs .
9-57:The Sixth Intl .
9-58:Joint Conf .
9-59:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 339 .
10 RELATED WORK :
10-1:Measuring the power of individual players in coalitional games has been studied for many years .
10-2:The most popular indices suggested for such measurement are the Banzhaf index [1] and the Shapley Shubik index [19] .
10-3:In his seminal paper, Shapley [18] considered coalitional games and the fair allocation of the utility gained by the grand coalition (the coalition of all agents) to its members .
10-4:The Shapley Shubik index [19] is the direct application of the Shapley value to simple coalitional games .
10-5:The Banzhaf index emerged directly from the study of voting in decision making bodies .
10-6:The normalized Banzhaf index measures the proportion of coalitions in which a player is a swinger, out of all winning coalitions .
10-7:This index is similar to the Banzhaf index discussed in Section 1, and is defined as: βi = βi(v) k∈N βk .
10-8:The Banzhaf index was mathematically analyzed in [3], where it was shown that this normalization lacks certain desirable properties, and the more natural Banzhaf index is introduced .
10-9:Both the Shapley Shubik and the Banzhaf indices have been widely studied, and Straffin [20] has shown that each index reflects specific conditions in a voting body .
10-10:[11] considers these two indices along with several others, and describes the axioms that characterize the different indices .
10-11:The naive implementation of an algorithm for calculating the Banzhaf index of an agent i enumerates all coalitions containing DIRECTIONS We have considered network flow games, where a coalition of agents wins if it manages to send a flow of more than some value k between two vertices .
10-12:We have assessed the relative power of each agent in this scenario using the Banzhaf index .
10-13:This power index may be used to decide how to allocate maintenance resources in real world networks, in order to maximize our ability to maintain a certain flow of information between two sites .
10-14:Although the Banzhaf index theoretically allows us to measure the power of the agents in the network flow game, we have shown that the problem of calculating the Banzhaf index in this domain in #P complete .
10-15:Despite this discouraging result for the general network flow domain, we have also provided a more encouraging result for a restricted domain .
10-16:In the case of connectivity games (where it is only required for a coalition to contain a path from the source to the destination) played on bounded layer graphs, it is possible to calculate the Banzhaf index of an agent in polynomial time .
10-17:It remains an open problem to find ways to tractably approximate the Banzhaf index in the general network flow domain .
10-18:It might also be possible to find other useful restricted domains where it is possible to exactly calculate the Banzhaf index .
10-19:We have only considered the complexity of calculating the Banzhaf index; it remains an open problem to find the complexity of calculating the Shapley Shubik or other indices in the network flow domain .
10-20:Finally, we believe that there are many additional interesting domains other than weighted voting games and network flow games, and it would be worthwhile to investigate the complexity of calculating the Banzhaf index or other power indices in such domains. .
11 ABSTRACT :
11-1:This work was partially supported by grant #898 05 from the Israel Science Foundation.
12 ABSTRACT :
12-1:J
12-2:F
12-3:Banzhaf
12-4:Weighted voting doesn"t work: a mathematical analysis
12-5:Rutgers Law Review, 19:317 343, 1965
12-6:X
12-7:Deng and C
12-8:H
12-9:Papadimitriou
12-10:On the complexity of cooperative solution concepts
12-11:Math
12-12:Oper
12-13:Res., 19(2):257 266, 1994
12-14:P
12-15:Dubey and L
12-16:Shapley
12-17:Mathematical properties of the Banzhaf power index
12-18:Mathematics of Operations Research, 4(2):99 131, 1979
12-19:E
12-20:Ephrati and J
12-21:S
12-22:Rosenschein
12-23:The Clarke Tax as a consensus mechanism among automated agents
12-24:In Proceedings of the Ninth National Conference on Artificial Intelligence, pages 173 178, Anaheim, California, July 1991
12-25:E
12-26:Ephrati and J
12-27:S
12-28:Rosenschein
12-29:A heuristic technique for multiagent planning
12-30:Annals of Mathematics and Artificial Intelligence, 20:13 67, Spring 1997
12-31:S
12-32:Ghosh, M
12-33:Mundhe, K
12-34:Hernandez, and S
12-35:Sen
12-36:Voting for movies: the anatomy of a recommender system
12-37:In Proceedings of the Third Annual Conference on Autonomous Agents, pages 434 435, 1999
12-38:T
12-39:Haynes, S
12-40:Sen, N
12-41:Arora, and R
12-42:Nadella
12-43:An automated meeting scheduling system that utilizes user preferences
12-44:In Proceedings of the First International Conference on Autonomous Agents, pages 308 315, 1997
12-45:E
12-46:Hemaspaandra, L
12-47:Hemaspaandra, and J
12-48:Rothe
12-49:Anyone but him: The complexity of precluding an alternative
12-50:In Proceedings of the 20th National Conference on Artificial Intelligence, Pittsburgh, July 2005
12-51:E
12-52:Kalai and E
12-53:Zemel
12-54:On totally balanced games and games of flow
12-55:Discussion Papers 413, Northwestern University, Center for Mathematical Studies in Economics and Management Science, Jan
12-56:1980
12-57:available at http:  ideas.repec.org p nwu cmsems 413.html
12-58:340 The Sixth Intl
12-59:Joint Conf
12-60:on Autonomous Agents and Multi Agent Systems (AAMAS 07) E
12-61:Kalai and E
12-62:Zemel
12-63:Generalized network problems yielding totally balanced games
12-64:Operations Research, 30:998 1008, September 1982
12-65:A
12-66:Laruelle
12-67:On the choice of a power index
12-68:Papers 99 10, Valencia  Instituto de Investigaciones Economicas, 1999
12-69:Y
12-70:Matsui and T
12-71:Matsui
12-72:A survey of algorithms for calculating power indices of weighted majority games
12-73:Journal of the Operations Research Society of Japan, 43, 2000
12-74:Y
12-75:Matsui and T
12-76:Matsui
12-77:NP completeness for calculating power indices of weighted majority games
12-78:Theoretical Computer Science, 263(1 2):305 310, 2001
12-79:N
12-80:Nisan and A
12-81:Ronen
12-82:Algorithmic mechanism design
12-83:Games and Economic Behavior, 35:166 196, 2001
12-84:A
12-85:D
12-86:Procaccia and J
12-87:S
12-88:Rosenschein
12-89:Junta distributions and the average case complexity of manipulating elections
12-90:In The Fifth International Joint Conference on Autonomous Agents and Multiagent Systems, pages 497 504, Hakodate, Japan, May 2006
12-91:J
12-92:S
12-93:Rosenschein and M
12-94:R
12-95:Genesereth
12-96:Deals among rational agents
12-97:In Proceedings of the Ninth International Joint Conference on Artificial Intelligence, pages 91 99, Los Angeles, California, August 1985
12-98:T
12-99:Sandholm and V
12-100:Lesser
12-101:Issues in automated negotiation and electronic commerce: Extending the contract net framework
12-102:In Proceedings of the First International Conference on Multiagent Systems (ICMAS 95), pages 328 335, San Francisco, 1995
12-103:L
12-104:S
12-105:Shapley
12-106:A value for n person games
12-107:Contributions to the Theory of Games, pages 31 40, 1953
12-108:L
12-109:S
12-110:Shapley and M
12-111:Shubik
12-112:A method for evaluating the distribution of power in a committee system
12-113:American Political Science Review, 48:787 792, 1954
12-114:P
12-115:Straffin
12-116:Homogeneity, independence and power indices
12-117:Public Choice, 30:107 118, 1977
12-118:M
12-119:Tennenholtz and A
12-120:Altman
12-121:On the axiomatic The Sixth Intl
12-122:Joint Conf
12-123:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 341
picture:
