Resolving Conflict and Inconsistency in 
content:
1 ABSTRACT :
1-1:Norm governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents .
1-2:With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated .
1-3:We focus on virtual organizations realised as multi agent systems, in which human and software agents interact to achieve individual and global goals .
1-4:However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment .
1-5:Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises .
1-6:Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises .
1-7:We introduce an approach, based on first order unification, to detect and resolve such conflicts and inconsistencies .
1-8:In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm .
1-9:Our approach neatly accommodates the domain dependent interrelations among actions and the indirect conflicts inconsistencies these may cause .
1-10:More generally, we can capture a useful notion of inter agent (and inter role) delegation of actions and norms associated to them, and use it to address conflicts inconsistencies caused by action delegation .
1-11:We illustrate our approach with an e Science example in which agents support Grid services .
1-12:I.2.4 [Artificial Intelligence]: Applications and Expert .
2 INTRODUCTION :
2-1:Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9] .
2-2:VOs define and regulate interactions (thus facilitating coordination) among software and or human agents that communicate to achieve individual and global goals [16] .
2-3:VOs are realised as multi agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated .
2-4:The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6] .
2-5:Norms regulate the observable behaviour of self interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24] .
2-6:However, norm regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged) .
2-7:We propose a means to automatically detect and solve conflict and inconsistency in norm regulated VOs .
2-8:We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents" actions that norms may affect) .
2-9:This allows for a fine grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values .
2-10:For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify .
2-11:We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence .
2-12:In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20 .
2-13:This paper is organized as follows .
2-14:In the next section we provide a minimalistic definition for norm regulated VOs .
2-15:In section 3 we formally define norm conflicts, and explain how they are detected and resolved .
2-16:In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies .
2-17:In section 5 we describe how our curtailed norms are used in norm aware agent societies .
2-18:In section 6 we explain how our machinery can be used to detect and solve indirect conflicts inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms .
2-19:In section 7 we illustrate our approach with an example of norm regulated software agents serving the Grid .
2-20:In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work .
2-21:644 978 81 904262 7 5 c 2007 IFAAMAS .
3 VIRTUAL ORGANIZATIONS :
3-1:Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving .
3-2:This paradigm has found strong applications in Web service orchestration [14], e Science [16] and the Grid [9] .
3-3:VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction .
3-4:We formally represent our VOs as finite state machines in which the actions of individual agents label the edges between discrete states .
3-5:This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher level formalism can be mapped onto a finite state machine (possibly with some loss of expressiveness) .
3-6:We show in Figure 1 a simple VO graphically represented as a finite state machine1 .
3-7:The labels on the edges con ?>=<89:;0 p(X)  q(Y,Z) ?>=<89:;1 s(A,B) ?>=<89:; . ,()*+2 Figure 1: Sample VO as a Finite State Machine necting the states are first order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents .
3-8:We define our virtual organizations as follows: DEF .
3-9:1 .
3-10:A virtual organization I is the triple S, s0, E, T where S = {s1, .
3-11:.
3-12:.
3-13:, sn} is a finite and non empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states .
3-14:Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ) .
3-15:The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .
3-16:We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B) .
3-17:VOs should allow for two kinds of non determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates .
3-18:These kinds of non determinism are desirable as they help define generic and flexible coordination mechanisms .
3-19:Another important concept we use is the roles of agents in VOs .
3-20:Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform .
3-21:Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities .
3-22:We shall make use of two finite, non empty sets, Agents = {ag1, .
3-23:.
3-24:.
3-25:, agn} and Roles = {r1, .
3-26:.
3-27:.
3-28:, rm}, representing, respectively, the sets of agent identifiers and role labels .
3-29:We refer generically to first order terms, i.e., constants, variables, and (nested) functions as τ .
3-30:2.1 Semantics of VOs The specification of a VO as a finite state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded .
3-31:Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events .
3-32:In practice, this can be achieved if we require individual 1 We adopt Prolog"s convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants .
3-33:agents to declare inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .
3-34:In order to record the authorship of the action, we annotate the formulae with the agents" unique identification .
3-35:Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae .
3-36:Each formula is a truthful record of an action specified in the VO .
3-37:Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values .
3-38:We thus define: DEF .
3-39:2 .
3-40:A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first order atomic formula, and t ∈ IN is a time stamp .
3-41:For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20 .
3-42:Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E .
3-43:Such function h must address the two kinds of non determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles .
3-44:We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E} .
3-45:2.2 Norm Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization .
3-46:The freedom of choice given to agents (captured via the non determinism of VOs, explained above) must be curtailed in some circumstances .
3-47:For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed .
3-48:Rather than embedding such normative aspects into the agents" design (say, by explicitly encoding normative aspects in the agents" behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization .
3-49:This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process .
3-50:Our norms are defined as below: DEF .
3-51:3 .
3-52:A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first order atomic formula .
3-53:We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms .
3-54:Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ .
3-55:We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels .
3-56:We propose to formally represent the normative positions of all agents enacting a VO .
3-57:By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them .
3-58:This approach was introduced in [12] and is explained in section 5 .
3-59:The Sixth Intl .
3-60:Joint Conf .
3-61:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 645 DEF .
3-62:4 .
3-63:A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te .
3-64:It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them .
3-65:We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c) .
3-66:We also refer to the tuples in Ω as norms .
3-67:Global normative states complement the execution states of VOs with information on the normative positions of individual agents .
3-68:We can relate them via a function to obtain a norm regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update .
3-69:For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te .
3-70:We might equally wish that only permitted actions be chosen for the next execution state .
3-71:We do not legislate, or indeed recommend, any particular way to regulate VOs .
3-72:We do, however, offer simple underpinnings to allow arbitrary policies to be put in place .
3-73:In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state .
3-74:For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ} .
3-75:The management (i.e., creation and updating) of global normative states is an interesting area of research .
3-76:A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold .
3-77:In this paper our focus is not to propose how Ω"s should be managed; we assume some mechanism which does that. .
4 NORM CONFLICTS :
4-1:We now define means to detect and resolve norm conflicts and inconsistencies .
4-2:We make use of the concept of unification [1, 8] of first order terms τ, i.e., constants, variables or (nested) functions with terms as parameters .
4-3:Initially we define substitutions: DEF .
4-4:5 .
4-5:A substitution σ is a finite and possibly empty set of pairs x τ, where x is a variable and τ is a term .
4-6:We define the application of a substitution as: .
5 c · σ = c for a constant c :
5-1:.
6 pn :
6-1:(τ0, .
6-2:.
6-3:.
6-4:, τn) · σ = pn (τ0 · σ, .
6-5:.
6-6:.
6-7:, τn · σ) .
6-8:Where X generically refers to any of the deontic modalities O, P, F .
6-9:Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ .
6-10:Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers .
6-11:We shall make use of the following definition: DEF .
6-12:6 .
6-13:Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ .
6-14:We also define the unification of atomic formulae as unify(pn (τ0, .
6-15:.
6-16:.
6-17:, τn), pn (τ0, .
6-18:.
6-19:.
6-20:, τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n .
6-21:The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ .
6-22:We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity .
6-23:3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e .
6-24:an action, is simultaneously permitted and prohibited [13] .
6-25:In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions .
6-26:We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict .
6-27:For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A a, R b, Y c, X d}) .
6-28:If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts .
6-29:We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict .
6-30:Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .
6-31:Initially, this annotation is empty .
6-32:We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform .
6-33:A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents" actions .
6-34:Each of these policies is possible: we do not legislate over any of them nor do we give preference over any .
6-35:In this paper we are interested in formalising such policies within a simple mathematical framework .
6-36:A prohibition can be in conflict with various permissions in Ω .
6-37:We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection .
6-38:This requires identifying the substitution between two pairs of norms that characterises a conflict .
6-39:This is formally captured by the following definition: DEF .
6-40:7 .
6-41:A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: ϕ , td, ta, te .
7 |te − te| ≤ |ta − ta| :
7-1:That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3) .
7-2:Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition .
7-3:The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts .
7-4:For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A a, R b, Y c, Z X}) holds .
7-5:We define below how we obtain the set of conflicting norms of a normative state Ω: DEF .
7-6:8 .
7-7:The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine grained way of resolving conflict can be done via unification .
7-8:We detect the overlapping of the norms" influences, i.e .
7-9:how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl .
7-10:Joint Conf .
7-11:on Autonomous Agents and Multi Agent Systems (AAMAS 07) influence of the prohibition .
7-12:We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right) .
7-13:The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z) .
7-14:The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , .
7-15:.
7-16:.
7-17:, a, b, p(c, n) .
7-18:The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission .
7-19:If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections .
7-20:The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms .
7-21:It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t .
7-22:ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t .
7-23:ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved .
7-24:The algorithm forms Ω as a set that is conflict freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided .
7-25:Initially, Ω is set to be Ω .
7-26:The algorithm operates in two stages .
7-27:In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm .
7-28:In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set .
7-29:As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition .
7-30:In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω .
7-31:The maximal set is used to update the annotation of the prohibition .
7-32:It is important to explain the need for updating the conflict set of prohibitions .
7-33:Normative states change as a result of agents" actions [11]: existing permissions, prohibitions and obligations are revoked and or new ones are put in place as a result of agents" interactions with the environment and other agents .
7-34:Whenever new norms are added we must check for new conflicts and inconsistencies .
7-35:If we only apply our algorithm to a pair consisting of an old and a new norm, then some re processing of pairs of old norms (which were dealt with before) can be saved .
7-36:The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re processing can be avoided if we record the conflict, instead of detecting it again) .
7-37:If there is a conflict, then the conflict set will have been recorded in the prohibition"s annotation; this conflict set is thus removed from the prohibition"s annotation .
7-38:The removal of obligations follows a similar process .
7-39:Prohibitions are removed without the need to consider their relationships with other norms .
7-40:Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc .
7-41:The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation .
7-42:The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition .
7-43:It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time .
7-44:The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop .
7-45:The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω .
7-46:We illustrate our algorithm with the following example .
7-47:Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A a, R b, X c, Y d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A e, R f, X g, Y h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σ"s in ΣMAX c .
7-48:The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A a, R b, X c, Y d} {A e, R f, X g, Y h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions .
7-49:We show in Section 5.1 how annotations are used by norm aware agents. .
8 NORM INCONSISTENCIES :
8-1:If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13] .
8-2:The obligation demands that an agent performs an action that is forbidden .
8-3:We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies .
8-4:With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity .
8-5:The Sixth Intl .
8-6:Joint Conf .
8-7:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission .
8-8:Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O .
8-9:We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency .
8-10:The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. .
9 NORM AWARE AGENT SOCIETIES :
9-1:We now describe how our norm regulated VOs give rise to normaware agent societies .
9-2:We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12] .
9-3:This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour .
9-4:We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ .
9-5:.
9-6:.
9-7:.
9-8:.
9-9:.
9-10:.
9-11:.
9-12:.
9-13:.
9-14:.
9-15:.
9-16:I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents .
9-17:The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω .
9-18:Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment .
9-19:Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents .
9-20:We depict below how the pairs of governor external agents work together: any non deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent .
9-21:The governor agent represents the external agent within the VO .
9-22:As such, it has the unique identifier of the external agent .
9-23:The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously .
9-24:We define in Figure 5 how governor agents work we use a logic program for this purpose .
9-25:We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1 9 .
9-26:The first clause (lines 1 3) depicts the termination condition: get tuple 1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate 4 checks if the current VO enactment (recorded in Ξ) has come to an end .
9-27:The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function .
9-28:The second clause (lines 4 9) depicts a generic loop when the termination condition of the first clause does not hold .
9-29:In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles .
9-30:Predicate filter norms 4 collects the norms which apply to agent Id (the governor agent"s external agent) .
9-31:In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm compliant these actions will be used to update (line 8) the global execution state Ξ .
9-32:In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles .
9-33:The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles .
9-34:5.1 Using Annotated Norms We now explain how annotated norms are used by norm aware agents .
9-35:We do so via the definition of predicate check 2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def .
9-36:2), is within the influence of an annotated prohibition ω, its second parameter .
9-37:The definition, as a logic program, is shown in Figure 6 .
9-38:It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ .
9-39:It then verifies (lines 5 6) that σ does not unify with any of the conflict sets in Σc .
9-40:Finally, in line 7 it checks if the time of the action is within the norm temporal influence .
9-41:The verification of non unification of σ with any element of Σc deserves an explanation .
9-42:The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norm"s influence .
9-43:The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. .
10 ABSTRACT :
10-1:In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action
10-2:However, conflicts and inconsistencies may also arise indirectly via relationships among actions
10-3:For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X)
10-4:In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O
10-5:Relationships among actions are domain dependent
10-6:Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships
10-7:We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above
10-8:Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF
10-9:9
10-10:The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first order formulae
10-11:Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}
10-12:By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains
10-13:A set of norms can have different conflicts and inconsistencies, for distinct domains of application
10-14:648 The Sixth Intl
10-15:Joint Conf
10-16:on Autonomous Agents and Multi Agent Systems (AAMAS 07) The Sixth Intl
10-17:Joint Conf
10-18:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 649 650 The Sixth Intl
10-19:Joint Conf
10-20:on Autonomous Agents and Multi Agent Systems (AAMAS 07) The Sixth Intl
10-21:Joint Conf
10-22:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 651
11 ABSTRACT :
11-1:
picture:
