Scalable Grid Service Discovery Based on UDDI* 
content:
1 ABSTRACT :
1-1:Efficient discovery of grid services is essential for the success of grid computing .
1-2:The standardization of grids based on web services has resulted in the need for scalable web service discovery mechanisms to be deployed in grids Even though UDDI has been the de facto industry standard for web services discovery, imposed requirements of tight replication among registries and lack of autonomous control has severely hindered its widespread deployment and usage .
1-3:With the advent of grid computing the scalability issue of UDDI will become a roadblock that will prevent its deployment in grids .
1-4:In this paper we present our distributed web service discovery architecture, called DUDE (Distributed UDDI Deployment Engine) .
1-5:DUDE leverages DHT (Distributed Hash Tables) as a rendezvous mechanism between multiple UDDI registries .
1-6:DUDE enables consumers to query multiple registries, still at the same time allowing organizations to have autonomous control over their registries. .
1-7:Based on preliminary prototype on PlanetLab, we believe that DUDE architecture can support effective distribution of UDDI registries thereby making UDDI more robust and also addressing its scaling issues .
1-8:Furthermore, The DUDE architecture for scalable distribution can be applied beyond UDDI to any Grid Service Discovery mechanism .
1-9:C2.4 [Distributed Systems] .
2 INTRODUCTION :
2-1:Efficient discovery of grid services is essential for the success of grid computing .
2-2:The standardization of grids based on web services has resulted in the need for scalable web service Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page .
2-3:To copy otherwise,to republish, to post on servers or to redistribute to lists, requires prior specific permission and or a fee .
2-4:MGC '05, November 28 December 2, 2005 Grenoble , France discovery mechanisms to be deployed in grids .
2-5:Grid discovery services provide the ability to monitor and discover resources and services on grids .
2-6:They provide the ability to query and subscribe to resource service information .
2-7:In addition, threshold traps might be required to indicate specific change in existing conditions .
2-8:The state of the data needs to be maintained in a soft state so that the most recent information is always available .
2-9:The information gathered needs to be provided to variety of systems for the purpose of either utilizing the grid or proving summary information .
2-10:However, the fundamental problem is the need to be scalable to handle huge amounts of data from multiple sources .
2-11:The web services community has addressed the need for service discovery, before grids were anticipated, via an industry standard called UDDI .
2-12:However, even though UDDI has been the de facto industry standard for web services discovery, imposed requirements of tight replication among registries and lack of autonomous control, among other things has severely hindered its widespread deployment and usage [7] .
2-13:With the advent of grid computing the scalability issue with UDDI will become a roadblock that will prevent its deployment in grids .
2-14:This paper tackles the scalability issue and a way to find services across multiple registries in UDDI by developing a distributed web services discovery architecture .
2-15:Distributing UDDI functionality can be achieved in multiple ways and perhaps using different distributed computing infrastructure platforms (e.g., CORBA, DCE, etc.) .
2-16:In this paper we explore how Distributed Hash Table technology can be leveraged to develop a scalable distributed web services discovery architecture .
2-17:A DHT is a peer to peer (P2P) distributed system that forms a structured overlay allowing more efficient routing than the underlying network .
2-18:This crucial design choice is motivated by two factors .
2-19:The first motivating factor is the inherent simplicity of the put get abstraction that DHTs provide, which makes it easy to rapidly build applications on top of DHTs .
2-20:We recognize that having just this abstraction may not suffice for all distributed applications, but for the objective at hand, works very well as will become clear later .
2-21:Other distributed computing platforms middleware while providing more functionality have much higher overhead and complexity .
2-22:The second motivating factor stems from the fact that DHTs are relatively new tool for building distributed applications and we would like to test its potential by applying it to the problem of distributing UDDI .
2-23:In the next section, we provide a brief overview of grid information services, UDDI and its limitations, which is followed by an overview of DHTs in Section 3 .
2-24:Section 4 describes our proposed architecture with details on use cases .
2-25:In Section 5, we Article 2 describe our current implementation, followed by our findings in Section 6 .
2-26:Section 7 discusses the related work in this area and Section 8 contains our concluding remarks. .
3 BACKGROUND :
3-1:2.1 Grid Service Discovery Grid computing is based on standards which use web services technology .
3-2:In the architecture presented in [6], the service discovery function is assigned to a specialized Grid service called Registry .
3-3:The implementation of the web service version of the Monitoring and Discovery Service (WS MDS), also known as the MDS4 component of the Globus Toolkit version 4 (GT4), includes such a registry in the form of the Index service Resource and service properties are collected and indexed by this service .
3-4:Its basic function makes it similar to UDDI registry .
3-5:To attain scalability, Index services from different Globus containers can register with each other in a hierarchical fashion to aggregate data .
3-6:This approach for attaining scalability works best in hierarchical Virtual Organizations (VO), and expanding a search to find sufficient number of matches involves traversing the hierarchy .
3-7:Specifically, this approach is not a good match for systems that try to exploit the convergence of grid and peer to peer computing [5] .
3-8:2.2 UDDI Beyond grid computing, the problem of service discovery needs to be addressed more generally in the web services community .
3-9:Again, scalability is a major concern since millions of buyers looking for specific services need to find all the potential sellers of the service who can meet their needs .
3-10:Although there are different ways of doing this, the web services standards committees address this requirement through a specification called UDDI (Universal Description, Discovery, and Integration) .
3-11:A UDDI registry enables a business to enter three types of information in a UDDI registry white pages, yellow pages and green pages .
3-12:UDDI"s intent is to function as a registry for services just as the yellow pages is a registry for businesses .
3-13:Just like in Yellow pages, companies register themselves and their services under different categories .
3-14:In UDDI, White Pages are a listing of the business entities .
3-15:Green pages represent the technical information that is necessary to invoke a given service .
3-16:Thus, by browsing a UDDI registry, a developer should be able to locate a service and a company and find out how to invoke the service .
3-17:When UDDI was initially offered, it provided a lot of potential .
3-18:However, today we find that UDDI has not been widely deployed in the Internet .
3-19:In fact, the only known uses of UDDI are what are known as private UDDI registries within an enterprise"s boundaries .
3-20:The readers can refer to [7] for a recent article that discusses the shortcomings of UDDI and the properties of an ideal service registry .
3-21:Improvement of the UDDI standard is continuing in full force and UDDI version 3 (V3) was recently approved as an OASIS Standard .
3-22:However, UDDI today has issues that have not been addressed, such as scalability and autonomy of individual registries .
3-23:UDDI V3 provides larger support for multi registry environments based on portability of keys By allowing keys to be re registered in multiple registries, the ability to link registries in various topologies is effectively enabled .
3-24:However, no normative description of these topologies is provided in the UDDI specification at this point .
3-25:The improvements within UDDI V3 that allow support for multi registry environments are significant and open the possibility for additional research around how multiregistry environments may be deployed .
3-26:A recommended deployment scenario proposed by the UDDI V3.0.2 Specification is to use the UDDI Business Registries as root registries, and it is possible to enable this using our solution .
3-27:2.3 Distributed Hash Tables A Distributed Hash Table is a peer to peer (P2P) distributed system that forms a structured overlay allowing more efficient routing than the underlying network .
3-28:It maintains a collection of key value pairs on the nodes participating in this graph structure .
3-29:For our deployment, a key is the hash of a keyword from a service name or description .
3-30:There will be multiple values for this key, one for each service containing the keyword .
3-31:Just like any other hash table data structure, it provides a simple interface consisting of put() and get() operations .
3-32:This has to be done with robustness because of the transient nature of nodes in P2P systems .
3-33:The value stored in the DHT can be any object or a copy or reference to it .
3-34:The DHT keys are obtained from a large identifier space .
3-35:A hash function, such as MD5 or SHA 1, is applied to an object name to obtain its DHT key .
3-36:Nodes in a DHT are also mapped into the same identifier space by applying the hash function to their identifier, such as IP address and port number, or public key .
3-37:The identifier space is assigned to the nodes in a distributed and deterministic fashion, so that routing and lookup can be performed efficiently .
3-38:The nodes of a DHT maintain links to some of the other nodes in the DHT .
3-39:The pattern of these links is known as the DHT"s geometry .
3-40:For example, in the Bamboo DHT [11], and in the Pastry DHT [8] on which Bamboo is based, nodes maintain links to neighboring nodes and to other distant nodes found in a routing table .
3-41:The routing table entry at row i and column j, denoted Ri[j], is another node whose identifier matches its own in first i digits, and whose (i + 1)st digit is j .
3-42:The routing table allows efficient overlay routing .
3-43:Bamboo, like all DHTs, specifies algorithms to be followed when a node joins the overlay network, or when a node fails or leaves the network The geometry must be maintained even when this rate is high .
3-44:To attain consistent routing or lookup, a DHT key must be routed to the node with the numerically closest identifier .
3-45:For details of how the routing tables are constructed and maintained, the reader is referred to [8, 11]. .
4 PROPOSED ARCHITECTURE OF DHT BASED UDDI REGISTRY HIERARCHIES :
4-1:BASED UDDI REGISTRY HIERARCHIES As mentioned earlier, we propose to build a distributed UDDI system on top of a DHT infrastructure .
4-2:This choice is primarily motivated by the simplicity of the put get abstraction that DHTs provide, which is powerful enough for the task at hand, especially since we plan to validate our approach with an implementation running on PlanetLab [9] .
4-3:A secondary motivation is to understand deployment issues with DHT based systems .
4-4:Several applications have been built as overlays using DHTs, such as distributed file storage, databases, publish subscribe systems and content distribution networks .
4-5:In our case, we are building a DHT based overlay network of UDDI registries, where the DHT acts as a rendezvous network that connects multiple registries .
4-6:In the grid computing scenario, an overlay network of multiple UDDI registries seems to an interesting alternative to the UDDI public Article 2 registries currently maintained by Microsoft, IBM, SAP and NTT .
4-7:In addition, our aim is to not change any of the UDDI interfaces for clients as well as publishers .
4-8:Figure 1 highlights the proposed architecture for the DHT based UDDI Registry framework .
4-9:UDDI nodes are replicated in a UDDI registry as per the current UDDI standard .
4-10:However, each local registry has a local proxy registry that mediates between the local UDDI registry and the DHT Service .
4-11:The DHT service is the glue that connects the Proxy Registries together and facilitates searching across registries .
4-12:Figure 1: DUDE Architecture Service information can be dispersed to several UDDI registries to promote scalability .
4-13:The proxy registry publishes, performs queries and deletes information from the dispersed UDDI registries .
4-14:However, the scope of the queries is limited to relevant registries .
4-15:The DHT provides information about the relevant registries .
4-16:The core idea in the architecture is to populate DHT nodes with the necessary information from the proxies which enables easy and ubiquitous searching when queries are made .
4-17:When a new service is added to a registry, all potential search terms are hashed by the proxy and used as DHT keys to publish the service in the DHT .
4-18:The value stored for this service uniquely identifies the service, and includes the URL of a registry and the unique UDDI key of the service in that registry .
4-19:Similarly when queries arrive, they are parsed and a set of search terms are identified .
4-20:These search terms are hashed and the values stored with those hash values are retrieved from the DHT .
4-21:Note that a proxy does not need to know all DHT nodes; it needs to know just one DHT node (this is done as part of the bootstrapping process) and as described in Section 2.3, this DHT node can route the query as necessary to the other nodes on the DHT overlay .
4-22:We describe three usage scenarios later that deal with adding a new local registry, inserting a new service, and querying for a service .
4-23:Furthermore, the DHT optimizes the UDDI query mechanism .
4-24:This process becomes a lookup using a UDDI unique key rather than a query using a set of search parameters .
4-25:This key and the URL of the registry are obtained by searching initially in the DHT .
4-26:The DHT query can return multiple values for matching services, and in each of the matching registries, the proxy performs lookup operations .
4-27:The service name is used as a hash for inserting the service information .
4-28:The service information contains the query URL and unique UDDI key for the registry containing the service .
4-29:There could be multiple registries associated with a given service .
4-30:The service information conforms to the following schema .
4-31:<xs:schema xmlns:xs="http: www.w3.org 2001 XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified"> <xs:element name="registries"> <xs:annotation> <xs:documentation>Service Information< xs:documentation> < xs:annotation> <xs:complexType> <xs:sequence> <xs:element name="registry" maxOccurs="unbounded"> <xs:complexType> <xs:sequence> <xs:element name="name" > <xs:element name="key" maxOccurs="unbounded" > < xs:sequence> … < xs:schema> There can be multiple proxy UDDI registries in this architecture .
4-32:The advantage of this is to introduce distributed interactions between the UDDI clients and registries .
4-33:Organization can also decide what information is available from the local registries by implementing policies at the proxy registry .
4-34:3.1 Sequence of Operations In this section, we demonstrate what the sequence of operations should be for three crucial scenarios adding a new local registry, inserting a new service and querying a service .
4-35:Other operations like deleting a registry, deleting a service, etc .
4-36:are similar and for the sake of brevity are omitted here .
4-37:Figure 2: Sequence Diagram Add New Local Registry Add a New Local UDDI Registry Figure 2 contains a sequence diagram illustrating how a new UDDI registry is added to the network of UDDI registries .
4-38:The new registry registers itself with its proxy registry .
4-39:The proxy registry in turn queries the new registry for all services that it has UDDI Local Registry UDDI Local Registry UDDI Local Registry Proxy Registry DHT Based Distribution Proxy Registry Proxy Registry Article 2 stored in its databases and in turn registers each of those entries with the DHT .
4-40:Figure 3: Sequence Diagram Add New Service Add a New Service The use case diagram depicted in Error! Reference source not found .
4-41:highlights how a client publishes a new service to the UDDI registry .
4-42:In order to interact with the registry a client has to know how to contact its local proxy registry .
4-43:It then publishes a service with the proxy registry which in turn publishes the service with the local UDDI registry and receives the UDDI key of the registry entry .
4-44:Then new key value pairs are published in the DHT, where each key is obtained by hashing a searchable keyword of the service and the value consists of the query URL of the registry and the UDDI key .
4-45:Figure 4: Sequence Diagram Query for a Service Query a Service Figure 4 shows how a client queries the UDDI registry for a service .
4-46:Once again, the client needs to know how to contact its local proxy registry and invokes the query service request .
4-47:The proxy registry in turn contacts one of the DHT nodes to determine DHT queries using the search terms .
4-48:As explained earlier in the context of Figure 1, multiple values might be retrieved from the DHT .
4-49:Each value includes the query URL of a registry, and the unique UDDI key of a matching service in that registry .
4-50:The proxy then contacts the matching registries and waits for the response of lookup operations using the corresponding UDDI keys .
4-51:Upon receiving the responses, the proxy registry collates all responses and returns the aggregated set of services to the client .
4-52:We will now illustrate these operations using an example .
4-53:Consider a client contacting its local proxy to publish a service called Computer Accessories .
4-54:The proxy follows the steps in Figure 3 to add the service to UDDI 1 registry, and also publishes two entries in the DHT .
4-55:The keys of these entries are obtained by hashing the words computer and accessories respectively .
4-56:Both entries have the same value consisting of the query URL of this registry and the unique UDDI key returned by the registry for this service .
4-57:Next we consider another client publishing a service called Computer Repair through its proxy to UDDI 2 registry .
4-58:A similar process results in 2 more entries being added to the DHT .
4-59:Recall that our DHT deployment can have multiple entries with the same key .
4-60:If we follow the steps in Figure 4 for a client sending a query to its proxy using the word computer, we see that the DHT is queried with the hash of the word computer as key .
4-61:This retrieves the query URL and respective UDDI keys of both services mentioned before in this example .
4-62:The proxy can then do a simple lookup operation at both UDDI 1 and 2 registries .
4-63:It is clear that as the number of UDDI registries and clients increases, this process of lookup at only relevant UDDI registries is more scalable that doing a full search using the word computer at all UDDI registries. .
5 IMPLEMENTATION :
5-1:In this section, we describe our implementation which is currently deployed on PlanetLab [9] .
5-2:PlanetLab is an open, globally distributed platform for developing, deploying, and accessing network services .
5-3:It currently has 527 machines, hosted by 249 sites, spanning over 25 countries .
5-4:PlanetLab machines are hosted by research academic institutions as well as industrial companies .
5-5:France Telecom and HP are two of the major industry supporters for PlanetLab .
5-6:Every PlanetLab host machine is connected to the Internet and runs a common software package including a Linux based operating system that supports server virtualization .
5-7:Thus the users can develop and experiment with new services under real world conditions .
5-8:The advantage of using PlanetLab is that we can test the DUDE architecture under real world conditions with a large scale geographically dispersed node base .
5-9:Due to the availability of jUDDI, an open source UDDI V2 registry (http: www.juddi.org) and a lack of existing readily available UDDI V3 registry, a decision to use UDDI V2 was made .
5-10:The standardization of UDDI V3 is recent and we intend to extend this work to support UDDI V3 and subsequent versions in the future .
5-11:The proxy registry is implemented by modifying the jUDDI source to enable publishing, querying and deleting service information from a DHT .
5-12:Furthermore, it also allows querying multiple registries and collating the response using UDDI4j [13] .
5-13:For the DHT implementation, we use the Bamboo DHT code [11] .
5-14:The Bamboo DHT allows multiple proxy registries to publish and delete service information from their respective UDDI registries, as well as to query for services from all the registries .
5-15:The proxy uses the service name as input to the DHT"s hash Article 2 function to get the DHT key .
5-16:The value that is stored in the DHT using this key is the URI of the registry along with the UDDI key of the service .
5-17:This ensures that when the proxy registry queries for services with a certain name, it gets back the URI and UDDI keys for matching entries .
5-18:Using these returned results, the proxy can do fast lookup operations at the respective UDDI registries .
5-19:The UDDI keys make it unnecessary to repeat the search at the UDDI registries with the service name .
5-20:We have so far described the process of exact match on service name .
5-21:However there are additional types of search that must be supported .
5-22:Firstly, the search requested could be case insensitive .
5-23:To support that, the proxy registry has to publish the same service once using the name exactly as entered in the UDDI registry, and once with the name converted to all lower case letters .
5-24:To do a case insensitive search, the proxy registry simply has to convert the query string into lower case letters .
5-25:Secondly, the user could query based on the prefix of a service name .
5-26:Indeed, this is the default behavior of search in UDDI .
5-27:In other words, a wildcard is implicit at the end of the service name being searched .
5-28:To support this efficiently in the DHT, our proxy registries have to take prefixes of the service name of varying length and publish the URI and UDDI key multiple times, once using each prefix .
5-29:For example, the prefix sizes chosen in one deployment might be 5, 10, 15 and 20 characters .
5-30:If a search for the first 12 characters of a service name is submitted, the proxy registry will query the DHT with the first 10 characters of the search string, and then refine the search result to ensure that the match extends to the 12th character .
5-31:If the search string has less than 5 characters, and the search is for a prefix rather than an exact match, the DHT cannot be of any help, unless every service is published in the DHT with prefix of length 0 .
5-32:Using this null prefix will send a copy of every advertised service to the DHT node to which the hash of the null prefix maps .
5-33:Since this can lead to load imbalance, a better solution might be to use the DHT only to get a list of all UDDI registries, and send the search to all of them in the locations to be searched .
5-34:Thirdly, the service name being searched can be a regular expression, such as one with embedded wildcard characters .
5-35:For example, a search for Garden%s should match both Garden Supplies and Gardening Tools .
5-36:This will be treated similarly to the previous case as the DHT has to be queried with the longest available prefix .
5-37:The results returned have to be refined to ensure that the regular expression matches .
5-38:Figure 5 shows the network diagram for our implementation .
5-39:There are two proxy UDDI and juddi registry pairs .
5-40:Consider a client which contacts the UDDI proxy on grouse.hpl.hp.com .
5-41:The proxy does a lookup of the DHT using the query string or a prefix .
5-42:This involves contacting one of the DHT nodes, such as pli1 br3.hpl.hp.com, which serves as the gateway to the DHT for grouse.hpl.hp.com, based on the latter"s configuration file .
5-43:The DHT node may then route the query to one of the other DHT nodes which is responsible for the DHT key that the query string maps to .
5-44:The results of the DHT lookup return to pli1 br3.hpl.hp.com, which forwards them to grouse.hpl.hp.com .
5-45:The results may include a few services from each of the juddi registries .
5-46:So the proxy registry performs the lookup operations at both planetlab1 and planetlab2.rdfrancetelecom.com for their respective entries listed in the search results .
5-47:The responses to these lookups are collated by the proxy registry and returned to the client .
5-48:Figure 5 Network Diagram .
6 RELATED WORK :
6-1:A framework for QoS based service discovery in grids has been proposed in [18] .
6-2:UDDIe, an extended UDDI registry for publishing and discovering services based on QoS parameters, is proposed in [19] .
6-3:Our work is complementary since we focus on how to federate the UDDI registries and address the scalability issue with UDDI .
6-4:The DUDE proxy can publish the service properties supported by UDDIe in the DHT and support range queries using techniques proposed for such queries on DHTs .
6-5:Then we can deliver the scalability benefits of our current solution to both UDDI and UDDIe registries .
6-6:Discovering services meeting QoS and price requirements has been studied in the context of a grid economy, so that grid schedulers can use various market models such as commodity markets and auctions .
6-7:The Grid Market Directory [20] was proposed for this purpose .
6-8:In [12], the authors present an ontology based matchmaker .
6-9:Resource and request descriptions are expressed in RDF Schema, a semantic markup language .
6-10:Matchmaking rules are expressed in TRIPLE, a language based on Horn Logic .
6-11:Although our current implementation focuses on UDDI version 2, in future we will consider semantic extensions to UDDI, WS Discovery [16] and other Grid computing standards such as Monitoring and Discovery Service [10] .
6-12:So the simplest extension of our work could involve using the DHT to do an initial syntax based search to identify the local registries that need to be contacted .
6-13:Then the Proxy Registry can contact these registries, which do semantic matchmaking to identify their matches, which are then merged at the Proxy Registry and returned to the client .
6-14:The convergence of grid and P2P computing has been explored in [5] .
6-15:GridVine [2] builds a logical semantic overlay on top of a physical layer consisting of P Grid [1], a structured overlay based on distributed search tree that uses prefix based routing and changes the overlay paths as part of the network maintenance protocol to adapt to load in different parts of the keyspace .
6-16:A federated UDDI service [4] has been built on top of the PlanetP [3] publish subscribe system for unstructured P2P communities .
6-17:The focus of this work has been on the manageability of the federated service .
6-18:The UDDI service is treated as an application Article 2 service to be managed in their framework .
6-19:So they do not address the issue of scalability in UDDI, and instead use simple replication .
6-20:In [21], the authors describe a UDDI extension system that launches a federated query only if locally found results are not adequate .
6-21:While the UX Server is positioned as an intermediary similarly to the UDDI Proxy described in our DUDE framework, it focuses more on the QoS framework and does not attempt to implement a seamless federation mechanism such as our DHT based approach .
6-22:In [22] D2HT describes a discovery framework built on top of DHT .
6-23:However, we have chosen to use UDDI on top of DHT .
6-24:D2HT have used (Agent Management System) AMS (Directory Facilitator) DF on top of DHT. .
7-1:In this paper, we have described a distributed architecture to support large scale discovery of web services
7-2:Our architecture will enable organizations to maintain autonomous control over their UDDI registries and at the same time allowing clients to query multiple registries simultaneously
7-3:The clients are oblivious to the transparent proxy approach we have adopted and get richer and more complete response to their queries
7-4:Based on initial prototype testing, we believe that DUDE architecture can support effective distribution of UDDI registries thereby making UDDI more robust and also addressing its scaling issues
7-5:The paper has solved the scalability issues with UDDI but does not preclude the application of this approach to other service discovery mechanisms
7-6:An example of another service discovery mechanism that could benefit from such an approach is Globus Toolkit"s MDS
7-7:Furthermore, we plan to investigate other aspects of grid service discovery that extend this work
7-8:Some of these aspects include the ability to subscribe to resource service information, the ability to maintain soft states and the ability to provide a variety of views for various different purposes
7-9:In addition, we plan to revisit the service APIs for a Grid Service Discovery solution leveraging the available solutions and specifications as well as the work presented in this paper.
8-1:P grid: A self organizing structured p2p system
8-2:K
8-3:Aberer, P
8-4:Cudr_e Mauroux, A
8-5:Datta, Z
8-6:Despotovic, M
8-7:Hauswirth, M
8-8:Punceva, and R
8-9:Schmidt
8-10:ACM SIGMOD Record, 32(3), 2003
8-11:GridVine: Building Internet Scale Semantic Overlay Networks Karl Aberer, Philippe Cudre Mauroux, Manfred Hauswirth, and Tim van Pelt
8-12:Proceedings, 3rd ISWC 2004, Hiroshima, Japan
8-13:"PlanetP: Using Gossiping to Build Content Addressable Peer to Peer Information Sharing Communities"
8-14:F
8-15:M
8-16:Cuenca Acuna, C
8-17:Peery, R
8-18:P
8-19:Martin, and T
8-20:D
8-21:Nguyen
8-22:In Proceedings of 12th Intl Symposium on HPDC, June 2003
8-23:Self Managing Federated Services
8-24:Francisco Matias Cuenca Acuna and Thu D
8-25:Nguyen
8-26:In Proceedings of 23rd IEEE International SRDS, 2004, Florianpolis, BRAZIL
8-27:On Death, Taxes, and the Convergence of P2P and Grid Computing
8-28:Ian Foster and Adriana Iamnitchi
8-29:In Proceedings of the 2nd IPTPS 2003
8-30:The Physiology of the Grid: An Open Grid Services Architecture for Distributed Systems Integration, I
8-31:Foster, C
8-32:Kesselman, J
8-33:M
8-34:Nick and S
8-35:Tuecke
8-36:Presented to OGSI WG, Global Grid Forum, June 22, 2002
8-37:Available at http:  www.globus.org alliance publications papers.php Was the Universal Service Registry a Dream?, Fred Hartman and Harris Reynolds, In the Web Services Journal, Dec 2, 2004
8-38:Pastry: Scalable, distributed object location and routing for large scale peer to peer systems
8-39:A
8-40:Rowstron and P
8-41:Druschel
8-42:In Proc
8-43:of IFIP ACM Middleware, Nov
8-44:2001 http:  www.planet lab.org Grid information services for distributed resource sharing
8-45:K
8-46:Czajkowski, S
8-47:Fitzgerald, I
8-48:Foster, and C
8-49:Kesselman
8-50:Proceedings of the IEEE HPDC 10, 2001
8-51:Handling churn in a DHT
8-52:S
8-53:Rhea, D
8-54:Geels, T
8-55:Roscoe, and J
8-56:Kubiatowicz
8-57:Proceedings of the USENIX Annual Technical Conference, June 2004
8-58:Ontology based Resource Matching in the Grid  The Grid Meets the Semantic Web, Hongsuda Tangmunarunkit, Stefan Decker, Carl Kesselman
8-59:In Proceedings of the Second ISWC (2003), Miami, Florida
8-60:UDDI4j Java Class Library: http:  www124.ibm.com developerworks oss uddi4j  UDDI V2 specification: Available at http:  uddi.org  UDDI V3.0.2 specification: http:  uddi.org  Web Services Dynamic Discovery (WS Discovery) Specification, February 2004
8-61:http:  msdn.microsoft.com ws 2004 02 discovery Information Services (MDS): Key Concepts
8-62:http:  www.globus.org toolkit docs 4.0 info key  G QoSM: Grid Service Discovery using QoS Properties, R J
8-63:Al Ali, O.F
8-64:Rana, D.W
8-65:Walker, S
8-66:Jha and S
8-67:Sohail
8-68:Journal of Computing and Informatics (Special issue on Grid Computing), Ed: Domenico LaForenza, Vol
8-69:21, No
8-70:4, pp
8-71:363 382, 2002
8-72:UDDIe: An Extended Registry for Web Services, A
8-73:ShaikhAli, O.F
8-74:Rana, R
8-75:Al Ali and D.W
8-76:Walker, Workshop on Service Oriented Computing: Models, Architectures and Applications at SAINT Conference, Florida, US, January 2003
8-77:IEEE Computer Society Press
8-78:A Market Oriented Grid Directory Service for Publication and Discovery of Grid Service Providers and their Services, J
8-79:Yu, S
8-80:Venugopal and R
8-81:Buyya, Journal of Supercomputing, Kluwer Academic Publishers, USA, 2005
8-82:Chen Zhou, Liang Tien Chia, Bilhanan Silverajan, Bu Sung Lee: UX  An Architecture Providing QoS Aware and Federated Support for UDDI
8-83:ICWS 2003: 171 176
8-84:Kee Hyun Choi, Ho Jin Shin, Dong Ryeol Shin, Service Discovery Supporting Open Scalability Using FIPACompliant Agent Platform for Ubiquitous Networks, Lecture Notes in Computer Science, Volume 3482, Jan 2005
8-85:Article 2
picture:
