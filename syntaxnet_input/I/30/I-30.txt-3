We formulate the social task allocation problem in this section .
There is a set A of agents
.
.
, am} .
Agents need resources to complete tasks .
Let R = {r1, .
.
.
, rk} denote the collection of the resource types available to the agents A .
Each agent a ? A controls a fixed amount of resources for each resource type in R, which is defined by a resource function
Moreover, we assume agents are connected by a social network .
Definition 1 (Social network) .
An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ? AE indicates the existence of a social connection between agents ai and aj .
Suppose a set of tasks T = {t1, t2, .
.
.
, tn} arrives at such an agent social network .
Each task t ? T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc 
Furthermore, a location function loc 
An agent a that is the location of a task t, i.e .
loc(t) = a, is called the manager of this task .
Each task t ? T needs some specific resources from the agents in order to complete the task .
The exact assignment of tasks to agents is defined by a task allocation .
Definition 2 (Task allocation) .
Given a set of tasks T = {t1, .
.
.
, tn} and a set of agents A = {a1, .
.
.
, am} in a social network SN, a task allocation is a mapping £p 
A valid task allocation in SN must satisfy the following constrains
Each agent a ? A cannot use more than its available resources, i.e .
for each r ? R, P t?T £p(t, a, r) ? rsc(a, r) .
? A task allocation must be complete .
For each task t ? T , either all allocated agents" resources are sufficient, i.e .
for each r ? R, P a?A £p(t, a, r) ? rsc(t, r), or t is not allocated, i.e .
£p(t, ¡P, ¡P) = 0 .
? A task allocation must obey the social relationships .
Each task t ? T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN .
Each such agent that can contribute to a task is called a contractor .
We write T£p to represent the tasks that are fully allocated in £p .
The utility of £p is then the summation of the utilities of each task in T£p, i.e., U£p = P t?T£p u(t) .
Using this notation, we define the efficient task allocation below .
Definition 3 (Efficient task allocation) .
We say a task allocation £p is efficient if it is valid and U£p is maximized, i.e., U£p = max( P t?T£p u(t)) .
We are now ready to define the task allocation problem in social network that we study in this paper .
Definition 4 (Social task allocation problem) .
Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation £p, such that £p is valid and the social welfare U£p is maximized. .
