actr(i, j) = 8 >< >
(i, j) ? A(£_, CS(r)) actr (i, j) else This maintains the property act?1 r (s) = act?1 r (s) ? A(£_, CS(r )), which specifies that the agent pairs to be moved from s to s are removed from the range of s and added to the range of s .
What is not ensured by this definition is consistency of the state transition system, i.e .
making sure that the semantic successor state is uniquely identified for any state of the commitment store and previous state so that every agent pair is only assigned one active state in each step, i.e .
actr is actually a function for any r.7 2.4.4 Integration Once the DS itself has been specified, we need to integrate the different components of our framework to monitor the dynamics of our ACL semantics and its implications for expected agent behaviour .
Starting with an initially empty commitment store CS and initial semantic state s0 such that act£`(i, j) = s0 for any two agents i and j, the agent (or external observer) observes (a partial subset of) everything that is communicated in the system in each step .
By applying the commitment transition rules (D, A, S, F and V ) we can update CS accordingly, ignoring any observed message sent from i to j that does not syntactically match the dialogue operator set defined in actr(i, j) for a current run r .
After this update has been performed for all observed messages and actions in this cycle, which should not depend on the ordering of messages8 , we can compute for any message sent from i to j the new value of actr (i, j) depending on the semantic transition rules of the DS if r is the successor run of r .
With this, we can then determine what the compliant and expected behaviour of agents will be under these new conditions .
Thus, an agent can use information about expected behaviour in its own planning processes by assuming that all agents involved will exhibit their expected (rather than just compliant) behaviours .
This prediction will not always be more accurate than under normal (static) ACL semantics, but since it is common knowledge that agents assume expected behaviour to occur (and, by virtue of the DS ACL specification, have the right to do that) most reasonable dynamic ACL specifications will make provisions to ensure that it is safer to assume expected rather than fully compliant behaviour if they want to promote their use by agents .
7 One way of ensuring this is to require that ?s ? pertaining to outgoing edges of s can be fulfilled by CS at a time .
In some cases this may be too coarse grained it would be sufficient for constraints to be mutually exclusive for the same pair of agents at any point in time but this would have to be verified for an individual DS on a case bycase basis .
8 This is the case for our operators, because their pre and post conditions never concern or affect any commitments other than those that involve both i and j avoiding any connection to third parties helps us keep the CS update independent of the order in which observations are processed .
2.4.5 Complexity Issues The main disadvantage of our approach is the space complexity of the dynamic ACL specification
In many cases, however, most of the speech acts will not have different variants (like RQ and RJ in our example) and this may significantly reduce the number of DS states that need to be specified .
As for the run time behaviour of our semantics processing mechanism, we can assume that n messages actions are sent performed in each processing step in a system with n agents .
Every commitment processing rule (D, S, etc.) has to perform a pass over the contents of CS .
In the worst case every originally created commitment (of which there may be nt after t steps) may have immediately become pending, active and violated (which doesn"t require any further physical actions, so that every agent can create a new commitment in each step).Thus, if any agent creates a new commitment in each step without ever fulfilling it, this will result in the total size of CS being in O(nt).9 Regarding semantic state transitions, as many as n different pairs of agents could be affected in a single iteration by n messages .
Assuming that the verification of CS constraints for these transitions would take O(nt), this yields a total update time of O(n2 t) for tracking DS evolution .
This bound can be reduced to O(n2 ) if a quasi stationarity assumption is made by limiting the window of earlier commitments that are being considered when verifying transition constraints to a constant size (and thus obtaining a finite set of possible commitment stores).10 .
