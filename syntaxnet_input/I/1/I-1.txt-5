We provide the semantics for the task and plan failure and aborting processes outlined above .
We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms .
The extensions also simplified the semantics in the earlier work .
We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1 .
Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present .
4.1 CAN Language CAN is a high level agent language, in a spirit similar to that of AgentSpeak [15] and Kinny"s £Z [7], both of which attempt to extract the essence of a class of implemented BDI agent systems .
CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal .
Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted .
This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2] .
In practical systems, tasks are typically translated into events that trigger the execution of some plans .
This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced .
This is denoted by Goal ` £ps, P, £pf ? , where £ps is the success condition that determines when the goal is considered achieved, £pf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once £ps or £pf become true .
An agent"s behavior is specified by a plan library, denoted by £S, that consists of a collection of plan clauses of the form e 
The plan body is a program that is defined recursively as follows
.
.
, £rn 
£G = {£ri£c 
where P1, .
.
.
, Pn are themselves programs, act is a primitive action that is not further specified, and +b and ?b are operations to add and delete beliefs .
The belief base contains ground belief atoms in the form of first order relations but could be orthogonally extended to other logics .
It is assumed that well defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ¡å {b}), and to delete a belief from a belief set (B \ {b}) .
?£p is a test for condition £p, and !e5 is an event6 that is posted from within the program .
The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` £ps, P, £pf ? ) .
The above defines the user language .
In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs .
nil is the basic (terminating) program .
When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 
.
.
, cn 
The other auxiliary compound form, , is a choice operator dual to sequencing
A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows .
A basic configuration S = B, G, £F consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention) .
A transition S0 ?¡÷ S1 specifies that executing S0 for a single step yields configuration S1 .
S0 ?¡÷? Sn is the usual reflexive transitive closure of ?¡÷
A derivation rule S ?¡÷ Sr S ?¡÷ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator) .
Figure 1 gives some of the operational rules .
The Event rule handles task events by collecting all relevant plan clauses for the event in question
6 Typically an achievement goal .
The Sixth Intl .
Joint Conf .
on Autonomous Agents and Multi Agent Systems (AAMAS 07) 11 B |= £ps B, Goal ` £ps, P, £pf ? ?¡÷ B, true Gs B |= £pf B, Goal ` £ps, P, £pf ? ?¡÷ B, fail Gf P = Goal ` £ps, P , £pf ? P = P1 ? P2 B |= £ps ? £pf B, P ?¡÷ B, Goal ` £ps, P ? P , £pf ? GI P = P1 ? P2 B |= £ps ? £pf B, P1 ?¡÷ B , P B, Goal ` £ps, P, £pf ? ?¡÷ B , Goal ` £ps, P ? P2, £pf ? GS P = P1 ? P2 B |= £ps ? £pf P1 ? {true, fail} B, Goal ` £ps, P, £pf ? ?¡÷ B, Goal ` £ps, P2 ? P2, £pf ? GR Figure 2
question, then the rule constructs a guarded alternative £ri£c 
The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives
This rule and the fail rule together are used for failure handling
Rule Sequence handles sequencing of programs in the usual way .
Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel .
Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17] .
The first rule states that a goal succeeds when £ps become true; the second rule states that a goal fails when £pf become true .
The third rule GI initializes the execution of a goal program by updating the goal base and setting the program in the goal to P ? P; the first P is to be executed and the second P is used to keep track of the original program for the goal .
The fourth rule GS executes a single step of the goal program .
The final rule GR restarts the original program (encoded as P2 of pair P1 ? P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved .
4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure and abort methods, that deal with the clean up required when a given program respectively fails or is aborted .
We do not associate failure and abort methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure and abort methods for an arbitrary program .
The FAb(P, PF , PA) construct executes the program P .
Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA .
Thus to add failure and abort methods PF and PA to a plan clause e 
With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other .
We must take into consideration the possible existence of abort methods in the aborted branch .
Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort methods applicable to the program .
We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN .
The one non standard extension to CAN is a wait until condition construct .
We explain this simple modification of the parallel construct below when we come to translation of the Goal construct .
First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases
A key issue is that the FAb constructs may be nested, either directly or indirectly .
Let us call each instantiation of the construct at execution time a possible abort point (pap) .
Where these constructs are nested, it is important that before the failure or abort method of a parent pap is executed, the failure or abort methods programs of the children paps are executed first, as described earlier in Section 3 .
The need to coordinate the execution of the abort methods of nested paps requires that there be some way to identify the parents and children of a particular pap .
We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e 
This variable is used to keep track of the context of execution .
The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context .
For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1] .
We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51 .
This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .
For most CAN constructs, the context variable is unused or passed unchanged
.
.
, £rn 
.
.
, £rn 
These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context .
Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .
We also introduce the following predicates
? abort(v) the pap v should be aborted (after aborting all of its descendants) .
7 An alternative would be to use meta level predicates that reflect the current state of the intention structure .
12 The Sixth Intl .
Joint Conf .
on Autonomous Agents and Multi Agent Systems (AAMAS 07) ? f(v) the program of pap v has failed .
? ancestorof(v, v ) ¡Ý v = v ? ancestorof(v, tail(v ))the pap v is an ancestor of pap v .
? nac(v) ¡Ý ??v .(a(v ) ? ancestorof(v, v ) ? v = v ) v has no active children .
? sa(v) ¡Ý ?v .abort(v ) ? ancestorof(v , v) we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active .
? san(v) ¡Ý sa(v) ? nac(v) we should abort v now if we should abort v and v has no active children .
First let us consider the case of the FAb construct .
The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v .
We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context .
We need to make sure that we retract the belief that v is active at the end, i.e., ?a(v ) .
We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort .
While executing the program P, we know that we need to drop P and invoke its abort method if some ancestor of P has been told to abort .
This is represented by the predicate sa(v ) being true .
However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort method and all these abort methods have completed
Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ) .
This condition relies on the fact that as the children paps complete, they remove the relevant a facts .
Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met .
To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails .
We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal .
Hence, if the Goal construct fails, then the program either was aborted or it failed .
We invoke the relevant failure or abort method, retract the a(v ) fact, and then fail .
Putting all this together, we formally define £gv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agent"s plan library
Here we construct two new contexts, v and v , from the existing context v .
If one branch fails, it must abort the other branch .
At the end, if either branch was aborted, then we must fail .
Let v and v be new variables distinct from any other in the agent"s plan library .
We define £gv(P1 P2) to be
To transform the Goal construct we need to extend standard CAN with a wait until condition construct .
The construct £p 
We augment the CAN language with the following rules for the guard operator ¡¥
We must ensure that belief a(v ) is removed whether the Goal succeeds or fails .
We shift the success and failure condition of the Goal construct into a parallel branch using the wait until condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition .
The waiting branch will trigger the abort of the program should either the success or failure condition be met .
To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active .
Let v be a new variable distinct from any other in the agent"s plan library .
We define £gv(Goal ` £ps, P, £pf ? ) to be
There are two ways this can occur .
First, if either the success condition £ps or the failure condition £pf becomes true, then the second branch of the parallel construct executes .
This causes abort(v ) to become true, and, after the descendant paps" abortmethods are executed, san(v ) becomes true .
In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on £ps .
The second way for san(v ) to become true is if v or one of its ancestors is aborted .
In this case, once the descendant paps" abort methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming £ps is false) .
4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2 .
We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN .
Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alice"s manager, respectively .
Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively
The Sixth Intl .
Joint Conf .
on Autonomous Agents and Multi Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two .
Let v and v denote new variables .
Then we have as the translated plan clause
Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed .
If the old plan body fails, or if the task is to be aborted, the Goal construct fails .
This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure .
The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps
If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true .
This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ) .
The task !CCR(v ) will be executed .
Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail .
While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2 .
The translated plan clauses, with the semantics of CAN augmented by our waituntil condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. .
