We call such a subset a missing subset .
The maximal flow between s and t using only the edges in the missing subset Ec is less than k .
The Sixth Intl .
Joint Conf .
on Autonomous Agents and Multi Agent Systems (AAMAS 07) 337 Figure 1
The graph is a layer graph, with s being the vertex in the first layer, U the vertices in the second layer, V the vertices in the third, t the vertex in the fourth, and t in the fifth .
Edges in G only go between consecutive layers .
The maximal flow in a layer graph is limited by the total capacity of the edges between every two consecutive layers .
If any of the edges between s and U is missing, the flow is limited by (|V | ? 1)(1 + ) < k .
If any of the edges between V and t is missing, the flow is also limited by (|V | ? 1)(1 + ) < k .
If the edge ef is missing, there are no edges going to the last layer, and the maximal flow is 0 .
Since such missing subsets of edges do not affect the Banzhaf index of ef (they add 0 to the sum), from now on we will consider only non missing subsets .
As explained in Section 4.2, we identify the edges in G that were copied from G (the edges between U and V in G ) with their counterparts in G .
Each such edge (u, v) ? E represents a match between u and v in G .
Ec is a perfect matching if it matches every vertex u to a single vertex v and vice versa .
PROPOSITION 2 .
Let Ec ? E be a subset of edges that fails to match some vertex v ? V .
The maximal flow between s and t using only the edges in the missing subset Ec is less than k .
We call such a set sub matching, and it is not a perfect matching .
PROOF .
If Ec fails to match some vertex v ? V , the maximal flow that can reach the vertices in the V layer is (1+ )(k?1) < k, so this is also the maximal flow that can reach t .
PROPOSITION 3 .
Let Ec ? E be a subset of edges that is a perfect matching in G .
Then the maximal flow between s and t using only the edges in Ec is exactly k .
PROOF .
A flow of k is possible .
We send a flow of 1 from s to each of the vertices in U, send a flow of 1 from each vertex u ? U to its match v ? V , and send a flow of 1 from each v ? V to t .
t gets a total flow of exactly k, and sends it to t .
A flow of more than k is not possible since there are exactly k edges of capacity 1 between the U layer and the V layer, and the maximal flow is limited by the total capacity of the edges between these two consecutive layers .
PROPOSITION 4 .
Let Ec ? E be a subset of edges that contains a perfect matching M ? E in G and at least one more edge ex between some vertex ua ? U and va ? V .
Then the maximal flow between s and t using only the edges in Ec is at least k+ .
We call such a set a super matching, and it is not a perfect matching .
PROOF .
A flow of k is possible, by using the edges of the perfect match as in Proposition 3 .
We send a flow of 1 from s to each of the vertices in U, send a flow of 1 from each vertex u ? U to its match v ? V , and send a flow of 1 from each v ? V to t .
t gets a total flow of exactly k, and sends it to t .
After using the edges of the perfect matching, we send a flow of from s to ua (this is possible since the capacity of the edge (s, ua) is 1 + and we have only used up 1) .
We then send a flow of from ua to va .
This is possible since we have not used this edge at all it is the edge which is not a part of the perfect matching .
We then send a flow of from va to t .
Again, this is possible since we have used 1 out of the total capacity of 1 + which that edge has .
Now t gets a total flow of k + , and sends it all to t, so we have achieved a total flow of k + .
Thus, the maximal possible flow is at least k + .
THEOREM 5 .
Consider a #MATCHING instance G =< U, V, E > reduced to a BANZHAF NETWORK FLOW instance G as explained in Section 4.3 .
Let v(G ,k) be the network flow game defined on G with target flow k, and v(G ,k+ ) be the game defined with a target flow of k+ .
Let the resulting index of the first run be £]ef (v(G ,k)), and £]ef (v(G ,k+ )) be the resulting index of the second run .
Then the number of perfect matchings in G is the difference between the answers in the two runs, £]ef (v(G ,k)) ? £]ef (v(G ,k+ )) .
PROOF .
Consider the game v(G ,k) .
According to Proposition 1, in this game, the Banzhaf index of Ef does not count missing subsets Ec ? E , since they are losing in this game .
According to Proposition 2, it does not count subsets Ec ? E that are submatchings, since they are also losing .
According to Proposition 3, it adds 1 to the count for each perfect matching, since such subsets allow a flow of k and are winning .
According to Proposition 3, it adds 1 to the count for each super matching, since such subsets allow a flow of k (and more than k) and are winning .
Consider the game v(G ,k+ ) .
Again, according to Proposition 1, in this game the Banzhaf index of Ef does not count missing subsets Ec ? E , since they are losing in this game .
According to Proposition 2, it does not count subsets Ec ? E that are submatchings, since they are also losing .
According to Proposition 3, it adds 0 to the count for each perfect matching, since such subsets allow a flow of k but not k + , and are thus losing .
According to Proposition 3, it adds 1 to the count for each super matching, since such subsets allow a flow of k + and are winning .
Thus the difference between the two indices, £]ef (v(G ,k)) ? £]ef (v(G ,k+ )), is exactly the number of perfect matchings in G .
We have reduced a #MATCHING problem to a NETWORKFLOW BANZHAF problem .
This means that given a polynomial 338 The Sixth Intl .
Joint Conf .
on Autonomous Agents and Multi Agent Systems (AAMAS 07) algorithm to calculate the Banzhaf index of an agent in a general network flow game, we can build an algorithm to solve the #MATCHING problem .
Thus, the problem of calculating the Banzhaf index of agents in general network flow games is also #P complete. .
