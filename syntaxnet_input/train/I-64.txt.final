Organizational Self-Design in Semi-dynamic Environments 
content:
1 ABSTRACT :
1-1:Organizations are an important basis for coordination in multiagent systems .
1-2:However, there is no best way to organize and all ways of organizing are not equally effective .
1-3:Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities .
1-4:If the environment is dynamic, the environmental conditions or the problem task structure may change over time .
1-5:This precludes the use of static, design time generated, organizational structures in such systems .
1-6:On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures .
1-7:Organizational Self Design has been proposed as an approach for constructing suitable organizational structures at runtime .
1-8:We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization .
1-9:We then evaluate our approach against the contract net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment .
1-10:I.2.11 [Distributed Artificial Intelligence]: Multiagent systems .
2 INTRODUCTION :
2-1:In this paper, we are primarily interested in the organizational design of a multiagent system the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents .
2-2:The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2] .
2-3:Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved .
2-4:The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure .
2-5:On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance .
2-6:Organizational Self Design [4, 10] has been proposed as an approach to designing organizations at run time in which the agents are responsible for generating their own organizational structures .
2-7:We believe that OSD is especially suited to the above scenario in which the environment is semi dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances .
2-8:In our approach (as in [10]), we define two operators for OSD agent spawning and composition when an agent becomes overloaded, it spawns off a new agent to handle part of its task load responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent .
2-9:We use TÆMS as the underlying representation for our problem solving requests .
2-10:TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3] .
2-11:The root node of the task structure represents the high level goal that the agent is trying to achieve .
2-12:The sub nodes of a node represent the subtasks and methods that make up the highlevel task .
2-13:The leaf nodes are at the lowest level of abstraction and represent executable methods the primitive actions that the agents can perform .
2-14:The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration .
2-15:TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e .
2-16:each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal .
2-17:TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning .
2-18:[5, 6, 3, 15] .
2-19:The main contributions of this paper are as follows: underlying problem representation, which allows us to model and use OSD for worth oriented domains .
2-20:This in turn allows us to reason about (1) alternative task and role assignments that make different quality cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks .
2-21:resources. .
3 RELATED WORK :
3-1:The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them .
3-2:More recently Dignum et .
3-3:al.[8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision .
3-4:According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command .
3-5:Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing .
3-6:In their approach, they define two organizational primitives composition and decomposition, which are similar to our organizational primitives for agent spawning and composition .
3-7:The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures .
3-8:The latter also allows us to incorporate different design to criteria schedulers [16] .
3-9:Horling and Lesser [9] present a different, top down approach to OSD that also uses TÆMS as the underlying representation .
3-10:However, their approach assumes a fixed number of agents with designated (and fixed) roles .
3-11:OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals .
3-12:We also extend on the work done by Sycara et .
3-13:al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing .
3-14:In this approach, the authors present agent cloning as a possible response to agent overload if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load .
3-15:Hence, agent cloning can be thought of as akin to agent spawning in our approach .
3-16:However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents .
3-17:In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agent"s task structure, which is no longer the responsibility of the spawning agent .
3-18:Hence, our approach also deals with explicit organization formation and the coordination of the agents" tasks which are not handled by their approach .
3-19:Other approaches to OSD include the work of So and Durfee [14], who describe a top down model of OSD in the context of Cooperative Distributive Problem Solving and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. .
4 TASK AND RESOURCE MODEL :
4-1:To ground our discussion of OSD, we now formally describe our task and resource model .
4-2:In our model, the primary input to the multi agent system is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di > .
4-3:In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .
4-4:The MAS has no prior knowledge about the task ti before the arrival time, ai .
4-5:In order for the MAS to accrue quality, the task ti must be completed before the deadline, di .
4-6:Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks .
4-7:The tasks are non leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve .
4-8:Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and or methods that need to be achieved in order to achieve the goal represented by that task .
4-9:Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M) .
4-10:For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 .
4-11:• τ ∈ T, is the root of the task structure, i.e .
4-12:the highest level goal that the organization is trying to achieve .
4-13:The quality accrued on a problem is equal to the quality of task τ .
4-14:• M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)} .
4-15:In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol .
4-16:Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol .
4-17:Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality cost duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1 .
4-18:• Q is the set of quality characteristic accumulation functions (CAFs) .
4-19:The CAFs determine how a task group accrues quality given the quality accrued by its subtasks methods .
4-20:For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE .
4-21:See [5] for formal definitions .
4-22:• E is the set of (non local) effects .
4-23:Again, see [5] for formal definitions .
4-24:• R is the set of resources .
4-25:• ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule execute that method .
4-26:That is ρ(method, resource) : M × R → N .
4-27:1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero .
4-28:2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl .
4-29:Joint Conf .
4-30:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: {a1, a2, a3, ...} .
4-31:That is, we do not assume a fixed set of agents instead agents are created (spawned) and destroyed (combined) as needed .
4-32:structure, i.e .
4-33:∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve .
4-34:We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high level plans for achieving some goal in which the steps required for achieving the goal as well as the possible contingency situations have been pre computed offline and represented in the task structure .
4-35:Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances .
4-36:resource at any given time .
4-37:Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. .
5 All resources are non consumable. 4. ORGANIZATIONAL SELF DESIGN :
5-1:.
6 ORGANIZATIONAL SELF DESIGN :
6-1:4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles .
6-2:One or more agents may enact a particular role and one or more roles must be enacted by every agent .
6-3:The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination) .
6-4:The relationships between the roles are the coordination relationships that exist between the subparts of a problem .
6-5:In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved .
6-6:We define a role as a TÆMS subtree rooted at a particular node .
6-7:Hence, the set (T ∪ M) encompasses the space of all possible roles .
6-8:Note, by definition, a role may consist of one or more other (sub ) roles as a particular TÆMS node may itself be made up of one or more subtrees .
6-9:Hence, we will use the terms role, task node and task interchangeably .
6-10:We, also, differentiate between local and managed (non local) roles .
6-11:Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node .
6-12:For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent .
6-13:Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents .
6-14:Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination .
6-15:Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition .
6-16:These two primitives result in a change in the assignment of roles to the agents .
6-17:Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent .
6-18:Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together the combined agent is responsible for enacting all the roles of the agents being merged .
6-19:In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments .
6-20:Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non local roles that it is managing .
6-21:Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far .
6-22:To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: local .
6-23:TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local nodes of that role will be managed .
6-24:TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) share a common ancestor, that ancestor will be a managed role .
6-25:(TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) responsibility of a single agent, that role will be a local role .
6-26:∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1) .
6-27:To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed .
6-28:Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge .
6-29:At the 1230 The Sixth Intl .
6-30:Joint Conf .
6-31:on Autonomous Agents and Multi Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles .
6-32:Similarly, the newly spawned agent will only know of its just assigned local roles .
6-33:When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent .
6-34:To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent .
6-35:Care is taken to preserve the organizational invariant rules 1 and 4 .
6-36:Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is which of its local roles should it assign to the newly spawned agent and which of its local roles should it keep to itself? The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above .
6-37:This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent .
6-38:This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm .
6-39:Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top most roles first: This heuristic always breaks up at the top most nodes first .
6-40:That is, if the nodes of a task structure were numbered, starting from the root, in a breadth first fashion, then this heuristic would select the local role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent) .
6-41:We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human organizational perspective as this heuristic corresponds to dividing an organization along functional lines .
6-42:Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles .
6-43:If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do .
6-44:For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent .
6-45:If this difference is close to zero, then the both the agents have roughly the same amount of work to do .
6-46:Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures .
6-47:The results are given in Section 6 .
6-48:4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand .
6-49:Hence, we wish to change the organizational structure only if the task structure and or environmental conditions change .
6-50:Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change .
6-51:If this time is relatively short, the agents are still adjusting to the changes in the environment hence the probability of an agent initiating an organizational change should be high .
6-52:Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change .
6-53:To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl .
6-54:Joint Conf .
6-55:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1231 ing an existing organizational structure .
6-56:This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload underload, T is the time since the last organizational change and k is a constant .
6-57:The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below .
6-58:From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large .
6-59:Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change .
6-60:To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue .
6-61:Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation .
6-62:To calculate if agent composition is necessary, we again use the simulated annealing equation .
6-63:However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle .
6-64:If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. .
7 ORGANIZATION AND ROBUSTNESS :
7-1:There are two approaches commonly used to achieve robustness in multiagent systems: domain agents in order to allow the replicas to take over should the original agents fail; and monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones .
7-2:The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre existing in the organization and can take over as soon as a failure is detected .
7-3:The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement .
7-4:Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better .
7-5:Rather a thorough empirical evaluation of both approaches would be required .
7-6:In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper .
7-7:To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to .
7-8:If an agent fails, it will not respond to such messages the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent .
7-9:This delegation of responsibilities is non trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components the organizational knowledge and the task information .
7-10:The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents .
7-11:This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents .
7-12:For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively .
7-13:The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents .
7-14:The details are beyond the scope of this paper. .
8 EVALUATION :
8-1:To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines .
8-2:At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor .
8-3:During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines .
8-4:To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times using OSD agents on the first run and a different number of Contract Net agents on each subsequent run .
8-5:We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials .
8-6:We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and or deadlines) .
8-7:The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents .
8-8:The results shown are the averages of running 40 experiments .
8-9:20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles .
8-10:The remaining 20 experiments had a varying task arrival rate the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks .
8-11:In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3 .
8-12:The runtime of all the experiments was 2500 cycles .
8-13:We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched Pair Signed Rank tests .
8-14:Matched Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment .
8-15:The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks .
8-16:This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03) .
8-17:For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .
8-18:Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach .
8-19:We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e .
8-20:web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.) .
8-21:1232 The Sixth Intl .
8-22:Joint Conf .
8-23:on Autonomous Agents and Multi Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents) .
8-24:The error bars show the standard deviations .
8-25:complete an equal or larger number of tasks, is upheld .
8-26:The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality .
8-27:We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05) .
8-28:For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD .
8-29:The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004) .
8-30:The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead .
8-31:These results make intuitive sense given our goals for the OSD approach .
8-32:We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids .
8-33:The quality gained on the tasks is directly dependent on the Criteria Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No Org Changes 641 51 5 177 Total Messages Sent 586 499 13 11 Resource Cost 346 418 337 66 Tasks Completed 427 560 154 166 Average Quality 367 492 298 339 Average Response Time 356 321 370 283 Average Runtime 543 323 74 116 Average Turnaround Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria .
8-34:Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation .
8-35:number of tasks completed, hence the more the number of tasks completed, the greater average quality .
8-36:The results of testing the first hypothesis were slightly more surprising .
8-37:It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks .
8-38:Next, we evaluated the performance of the three heuristics for allocating tasks .
8-39:Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated .
8-40:We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldn"t find one allocation strategy that always dominated the other for all the performance criteria .
8-41:To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5 .
8-42:• The branching factor was varied from 3 to 5 .
8-43:• The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2 .
8-44:The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 .
8-45:• The arrival rate: from 10 to 40 cycles in increments of 10 .
8-46:• The deadline slack: from 5 to 15 in increments of 5 .
8-47:Each experiment was repeated 20 times, with a new task structure being generated each time these 20 experiments formed an experimental set .
8-48:Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment .
8-49:Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics .
8-50:Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results .
8-51:Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design .
8-52:The Sixth Intl .
8-53:Joint Conf .
8-54:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results .
8-55:If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation .
8-56:The final evaluation was done on 673 experimental sets .
8-57:We tested the potential of these three heuristics on the following performance criteria: .
9 The average number of agents used. :
9-1:.
10 The number of tasks completed. :
10-1:as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed .
10-2:time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time) .
10-3:Hence, the response time is equivalent to the wait time .
10-4:For tasks that are never attempted started, the response time is set at final runtime minus the generation time .
10-5:organization .
10-6:This time is defined as the difference between the time at which the task completed or failed and the start time .
10-7:For tasks that were never stated, this time is set to zero .
10-8:time and runtime of a task .
10-9:Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance .
10-10:Again we ran the Wilcoxon Matched Pair Signed Rank tests on the experiments in each of the experimental sets .
10-11:The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration .
10-12:We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05) .
10-13:We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest .
10-14:These counts are given in Tables 1 and 2 .
10-15:The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1 .
10-16:The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2 .
10-17:Both of these tables allow us to glean important information about the performance of the three heuristics .
10-18:Particularly interesting were the following results: • Whereas Balancing Execution Time used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First .
10-19:When these two heuristics didn"t perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other .
10-20:We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load .
10-21:This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach .
10-22:The baseline shows the number of tasks completed in the absence of any failure .
10-23:number of agents none of which are small5 enough to combine into a larger agent .
10-24:With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines this often results in organizations with an odd number of agents that is less than those used by BET .
10-25:• As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets .
10-26:In fact, it was over ten times as good as its second best competitor .
10-27:This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments .
10-28:• A particularly interesting, yet easily explainable, result was that of the average response time .
10-29:We found that the Minimizing Resources heuristic performed the best when it came to minimizing the average response time! This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning) .
10-30:Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time .
10-31:In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource cost of the organization in fact, it only outperforms a random task resource allocation .
10-32:We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information .
10-33:We believe that using some non local information about the resource allocation might help in making better decisions, something that we plan to look at in the future .
10-34:Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2) .
10-35:As expected, as the probability of failure increases, the number of agents failing during a run also increases .
10-36:This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time .
10-37:The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4) .
10-38:1234 The Sixth Intl .
10-39:Joint Conf .
10-40:on Autonomous Agents and Multi Agent Systems (AAMAS 07) Criteria Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No Org Changes 480 0 0 29 16 113 0 0 0 5 Total Messages Sent 170 85 0 2 399 1 0 0 7 5 Resource Cost 26 100 170 42 167 0 7 6 128 15 Tasks Completed 77 197 4 28 184 1 3 9 36 99 Average Quality 38 147 26 104 76 0 11 11 34 208 Average Response Time 104 74 162 43 31 20 16 8 7 169 Average Runtime 322 110 0 12 121 13 1 1 1 69 Average Turnaround Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best .
10-41:Only the more interesting heuristic groupings are shown .
10-42:All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline .
10-43:As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness .
10-44:The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail thus saving time around tight deadlines .
10-45:Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness .
10-46:For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines .
10-47:However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness .
10-48:Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. .
11-1:In this paper, we have presented a run time approach to organization in which the agents use Organizational Self Design to come up with a suitable organizational structure
11-2:We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time
11-3:Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach.
12-1:K
12-2:S
12-3:Barber and C
12-4:E
12-5:Martin
12-6:Dynamic reorganization of decision making groups
12-7:In AGENTS "01, pages 513 520, New York, NY, USA, 2001
12-8:K
12-9:M
12-10:Carley and L
12-11:Gasser
12-12:Computational organization theory
12-13:In G
12-14:Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299 330, MIT Press, 1999
12-15:W
12-16:Chen and K
12-17:S
12-18:Decker
12-19:The analysis of coordination in an information system application  emergency medical services
12-20:In Lecture Notes in Computer Science (LNCS), number 3508, pages 36 51
12-21:Springer Verlag, May 2005
12-22:D
12-23:Corkill and V
12-24:Lesser
12-25:The use of meta level control for coordination in a distributed problem solving network
12-26:Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748 756, August 1983
12-27:K
12-28:S
12-29:Decker
12-30:Environment centered analysis and design of coordination mechanisms
12-31:Ph.D
12-32:Thesis, Dept
12-33:of Comp
12-34:Science, University of Massachusetts, Amherst, May 1995
12-35:K
12-36:S
12-37:Decker and J
12-38:Li
12-39:Coordinating mutually exclusive resources using GPGP
12-40:Autonomous Agents and Multi Agent Systems, 3(2):133 157, 2000
12-41:C
12-42:Dellarocas and M
12-43:Klein
12-44:An experimental evaluation of domain independent fault handling services in open multi agent systems
12-45:Proceedings of the International Conference on Multi Agent Systems (ICMAS 2000), July 2000
12-46:V
12-47:Dignum, F
12-48:Dignum, and L
12-49:Sonenberg
12-50:Towards Dynamic Reorganization of Agent Societies
12-51:In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22 27, Valencia, Spain, September 2004
12-52:B
12-53:Horling, B
12-54:Benyo, and V
12-55:Lesser
12-56:Using self diagnosis to adapt organizational structures
12-57:In AGENTS "01, pages 529 536, New York, NY, USA, 2001
12-58:ACM Press
12-59:T
12-60:Ishida, L
12-61:Gasser, and M
12-62:Yokoo
12-63:Organization self design of distributed production systems
12-64:IEEE Transactions on Knowledge and Data Engineering, 4(2):123 134, 1992
12-65:V
12-66:R
12-67:Lesser et
12-68:al
12-69:Evolution of the gpgp tæms domain independent coordination framework
12-70:Autonomous Agents and Multi Agent Systems, 9(1 2):87 143, 2004
12-71:O
12-72:Marin, P
12-73:Sens, J
12-74:Briot, and Z
12-75:Guessoum
12-76:Towards adaptive fault tolerance for distributed multi agent systems
12-77:Proceedings of ERSADS 2001, May 2001
12-78:O
12-79:Shehory, K
12-80:Sycara, et
12-81:al
12-82:Agent cloning: an approach to agent mobility and resource allocation
12-83:IEEE Communications Magazine, 36(7):58 67, 1998
12-84:Y
12-85:So and E
12-86:Durfee
12-87:An organizational self design model for organizational change
12-88:In AAAI 93 Workshop on AI and Theories of Groups and Organizations, pages 8 15, Washington, D.C., July 1993
12-89:T
12-90:Wagner
12-91:Coordination decision support assistants (coordinators)
12-92:Technical Report 04 29, BAA, 2004
12-93:T
12-94:Wagner and V
12-95:Lesser
12-96:Design to criteria scheduling: Real time agent control
12-97:Proc
12-98:of AAAI 2000 Spring Symposium on Real Time Autonomous Systems, 89 96
12-99:The Sixth Intl
12-100:Joint Conf
12-101:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1235
picture:
