Globally Synchronized Dead-Reckoning with Local Lag for 
content:
1 ABSTRACT :
1-1:Dead Reckoning is an effective method to maintain consistency for Continuous Distributed Multiplayer Games .
1-2:Since DR can filter most unnecessary state updates and improve the scalability of a system, it is widely used in commercial CDMG .
1-3:However, DR cannot maintain high consistency, and this constrains its application in highly interactive games .
1-4:With the help of global synchronization, DR can achieve higher consistency, but it still cannot eliminate before inconsistency .
1-5:In this paper, a method named Globally Synchronized DR with Local Lag (GS DR LL), which combines local lag and Globally Synchronized DR (GS DR), is presented .
1-6:Performance evaluation shows that GS DR LL can effectively decrease before inconsistency, and the effects increase with the lag .
1-7:C.2.4 [Computer Communication Networks]: Distributed .
2 INTRODUCTION :
2-1:Nowadays, many distributed multiplayer games adopt replicated architectures .
2-2:In such games, the states of entities are changed not only by the operations of players, but also by the passing of time [1, 2] .
2-3:These games are referred to as Continuous Distributed Multiplayer Games .
2-4:Like other distributed applications, CDMG also suffer from the consistency problem caused by network transmission delay .
2-5:Although new network techniques (e.g .
2-6:QoS) can reduce or at least bound the delay, they can not completely eliminate it, as there exists the physical speed limitation of light, for instance, 100 ms is needed for light to propagate from Europe to Australia [3] .
2-7:There are many studies about the effects of network transmission delay in different applications [4, 5, 6, 7] .
2-8:In replication based games, network transmission delay makes the states of local and remote sites to be inconsistent, which can cause serious problems, such as reducing the fairness of a game and leading to paradoxical situations etc .
2-9:In order to maintain consistency for distributed systems, many different approaches have been proposed, among which local lag and Dead Reckoning are two representative approaches .
2-10:Mauve et al [1] proposed local lag to maintain high consistency for replicated continuous applications .
2-11:It synchronizes the physical clocks of all sites in a system .
2-12:After an operation is issued at local site, it delays the execution of the operation for a short time .
2-13:During this short time period the operation is transmitted to remote sites, and all sites try to execute the operation at a same physical time .
2-14:In order to tackle the inconsistency caused by exceptional network transmission delay, a time warp based mechanism is proposed to repair the state .
2-15:Local lag can achieve significant high consistency, but it is based on operation transmission, which forwards every operation on a shared entity to remote sites .
2-16:Since operation transmission mechanism requests that all operations should be transmitted in a reliable way, message filtering is difficult to be deployed and the scalability of a system is limited .
2-17:DR is based on state transmission mechanism .
2-18:In addition to the high fidelity model that maintains the accurate states of its own entities, each site also has a DR model that estimates the states of all entities (including its own entities) .
2-19:After each update of its own entities, a site compares the accurate state with the estimated one .
2-20:If the difference exceeds a pre defined threshold, a state update would be transmitted to all sites and all DR models would be corrected .
2-21:Through state estimation, DR can not only maintain consistency but also decrease the number of transmitted state updates .
2-22:Compared with aforementioned local lag, DR cannot maintain high consistency .
2-23:Due to network transmission delay, when a remote site receives a state update of an entity the state of the entity might have changed at the site sending the state update .
2-24:In order to make DR maintain high consistency, Aggarwal et al [8] proposed Globally Synchronized DR (GS DR), which synchronizes the physical clocks of all sites in a system and adds time stamps to transmitted state updates .
2-25:Detailed description of GS DR can be found in Section 3 .
2-26:When a state update is available, GS DR immediately updates the state of local site and then transmits the state update to remote sites, which causes the states of local site and remote sites to be inconsistent in the transmission procedure .
2-27:Thus with the synchronization of physical clocks, GS DR can eliminate after inconsistency, but it cannot tackle before inconsistency [8] .
2-28:In this paper, we propose a new method named globally synchronized DR with Local Lag (GS DR LL), which combines local lag and GS DR .
2-29:By delaying the update to local site, GS DR LL can achieve higher consistency than GS DR .
2-30:The rest of this paper is organized as follows: Section 2 gives the definition of consistency and corresponding metrics; the cause of the inconsistency of DR is analyzed in Section 3; Section 4 describes how GS DR LL works; performance evaluation is presented in Section 5; Section 6 concludes the paper. .
3 CONSISTENCY DEFINITIONS AND METRICS :
3-1:METRICS The consistency of replicated applications has already been well defined in discrete domain [9, 10, 11, 12], but few related work has been done in continuous domain .
3-2:Mauve et al [1] have given a definition of consistency for replicated applications in continuous domain, but the definition is based on operation transmission and it is difficult for the definition to describe state transmission based methods (e.g .
3-3:DR) .
3-4:Here, we present an alternative definition of consistency in continuous domain, which suits state transmission based methods well .
3-5:Given two distinct sites i and j, which have replicated a shared entity e, at a given time t, the states of e at sites i and j are Si(t) and Sj(t) .
3-6:DEFINITION 1: the states of e at sites i and j are consistent at time t, iff: De(i, j, t) = |Si(t) Sj(t)| = 0 (1) DEFINITION 2: the states of e at sites i and j are consistent between time t1 and t2 (t1 < t2), iff: De(i, j, t1, t2) = dt|)t(S)t(S| t2 t1 ji = 0 (2) In this paper, formulas (1) and (2) are used to determine whether the states of shared entities are consistent between local and remote sites .
3-7:Due to network transmission delay, it is difficult to maintain the states of shared entities absolutely consistent .
3-8:Corresponding metrics are needed to measure the consistency of shared entities between local and remote sites .
3-9:De(i, j, t) can be used as a metric to measure the degree of consistency at a certain time point .
3-10:If De(i, j, t1) > De(i, j, t2), it can be stated that between sites i and j, the consistency of the states of entity e at time point t1 is lower than that at time point t2 .
3-11:If De(i, j, t) > De(l, k, t), it can be stated that, at time point t, the consistency of the states of entity e between sites i and j is lower than that between sites l and k .
3-12:Similarly, De(i, j, t1, t2) can been used as a metric to measure the degree of consistency in a certain time period .
3-13:If De(i, j, t1, t2) > De(i, j, t3, t4) and |t1 t2| = |t3 t4|, it can be stated that between sites i and j, the consistency of the states of entity e between time points t1 and t2 is lower than that between time points t3 and t4 .
3-14:If De(i, j, t1, t2) > De(l, k, t1, t2), it can be stated that between time points t1 and t2, the consistency of the states of entity e between sites i and j is lower than that between sites l and k .
3-15:In DR, the states of entities are composed of the positions and orientations of entities and some prediction related parameters (e.g .
3-16:the velocities of entities) .
3-17:Given two distinct sites i and j, which have replicated a shared entity e, at a given time point t, the positions of e at sites i and j are (xit, yit, zit) and (xjt, yjt, zjt), De(i, j, t) and D (i, j, t1, t2) could be calculated as: De(i, j, t) = )zz()yy()xx( jtit 2 jtit 2 jtit 2 (3) De(i, j, t1, t2) = dt)zz()yy()xx( 2t 1t jtit 2 jtit 2 jtit 2 (4) In this paper, formulas (3) and (4) are used as metrics to measure the consistency of shared entities between local and remote sites. .
4 INCONSISTENCY IN DR :
4-1:The inconsistency in DR can be divided into two sections by the time point when a remote site receives a state update .
4-2:The inconsistency before a remote site receives a state update is referred to as before inconsistency, and the inconsistency after a remote site receives a state update is referred to as after inconsistency .
4-3:Before inconsistency and after inconsistency are similar with the terms before export error and after export error [8] .
4-4:After inconsistency is caused by the lack of synchronization between the physical clocks of all sites in a system .
4-5:By employing physical clock synchronization, GS DR can accurately calculate the states of shared entities after receiving state updates, and it can eliminate after inconsistency .
4-6:Before inconsistency is caused by two reasons .
4-7:The first reason is the delay of sending state updates, as local site does not send a state update unless the difference between accurate state and the estimated one is larger than a predefined threshold .
4-8:The second reason is network transmission delay, as a shared entity can be synchronized only after remote sites receiving corresponding state update .
4-9:Figure 1 .
4-10:The paths of a shared entity by using GS DR .
4-11:For example, it is assumed that the velocity of a shared entity is the only parameter to predict the entity"s position, and current position of the entity can be calculated by its last position and current velocity .
4-12:To simplify the description, it is also assumed that there are only two sites i and j in a game session, site i acts as 2 The 5th Workshop on Network & System Support for Games 2006 NETGAMES 2006 local site and site j acts as remote site, and t1 is the time point the local site updates the state of the shared entity .
4-13:Figure 1 illustrates the paths of the shared entity at local site and remote site in x axis by using GS DR .
4-14:At the beginning, the positions of the shared entity are the same at sites i and j and the velocity of the shared entity is 0 .
4-15:Before time point t0, the paths of the shared entity at sites i and j in x coordinate are exactly the same .
4-16:At time point t0, the player at site i issues an operation, which changes the velocity in x axis to v0 .
4-17:Site i first periodically checks whether the difference between the accurate position of the shared entity and the estimated one, 0 in this case, is larger than a predefined threshold .
4-18:At time point t1, site i finds that the difference is larger than the threshold and it sends a state update to site j .
4-19:The state update contains the position and velocity of the shared entity at time point t1 and time point t1 is also attached as a timestamp .
4-20:At time point t2, the state update reaches site j, and the received state and the time deviation between time points t1 and t2 are used to calculate the current position of the shared entity .
4-21:Then site j updates its replicated entity"s position and velocity, and the paths of the shared entity at sites i and j overlap again .
4-22:From Figure 1, it can be seen that the after inconsistency is 0, and the before consistency is composed of two parts, D1 and D2 .
4-23:D1 is De(i, j, t0, t1) and it is caused by the state filtering mechanism of DR .
4-24:D2 is De(i, j, t1, t2) and it is caused by network transmission delay. .
5 GLOBALLY SYNCHRONIZED DR WITH LOCAL LAG :
5-1:WITH LOCAL LAG From the analysis in Section 3, It can be seen that GS DR can eliminate after inconsistency, but it cannot effectively tackle before inconsistency .
5-2:In order to decrease before inconsistency, we propose GS DR LL, which combines GS DR with local lag and can effectively decrease before inconsistency .
5-3:In GS DR LL, the state of a shared entity at a certain time point t is notated as S = (t, pos, par 1, par 2, ……, par n), in which pos means the position of the entity and par 1 to par n means the parameters to calculate the position of the entity .
5-4:In order to simplify the description of GS DR LL, it is assumed that there are only one shared entity and one remote site .
5-5:At the beginning of a game session, the states of the shared entity are the same at local and remote sites, with the same position p0 and parameters pars0 (pars represents all the parameters) .
5-6:Local site keeps three states: the real state of the entity Sreal, the predicted state at remote site Sp remote, and the latest state updated to remote site Slate .
5-7:Remote site keep only one state Sremote, which is the real state of the entity at remote site .
5-8:Therefore, at the beginning of a game session Sreal = Sp remote = Slate = Sremote = (t0, p0, pars0) .
5-9:In GS DR LL, it is assumed that the physical clocks of all sites are synchronized with a deviation of less than 50 ms (using NTP or GPS clock) .
5-10:Furthermore, it is necessary to make corrections to a physical clock in a way that does not result in decreasing the value of the clock, for example by slowing down or halting the clock for a period of time .
5-11:Additionally it is assumed that the game scene is updated at a fixed frequency and T stands for the time interval between two consecutive updates, for example, if the scene update frequency is 50 Hz, T would be 20 ms .
5-12:n stands for the lag value used by local lag, and t stands for current physical time .
5-13:After updating the scene, local site waits for a constant amount of time T .
5-14:During this time period, local site receives the operations of the player and stores them in a list L .
5-15:All operations in L are sorted by their issue time .
5-16:At the end of time period T, local site executes all stored operations, whose issue time is between t T and t, on Slate to get the new Slate, and it also executes all stored operations, whose issue time is between t (n + T) and t n, on Sreal to get the new Sreal .
5-17:Additionally, local site uses Sp remote and corresponding prediction methods to estimate the new Sp remote .
5-18:After new Slate, Sreal, and Sp remote are calculated, local site compares whether the difference between the new Slate and Spremote exceeds the predefined threshold .
5-19:If YES, local site sends new Slate to remote site and Sp remote is updated with new Slate .
5-20:Note that the timestamp of the sent state update is t .
5-21:After that, local site uses Sreal to update local scene and deletes the operations, whose issue time is less than t n, from L .
5-22:After updating the scene, remote site waits for a constant amount of time T .
5-23:During this time period, remote site stores received state update(s) in a list R .
5-24:All state updates in R are sorted by their timestamps .
5-25:At the end of time period T, remote site checks whether R contains state updates whose timestamps are less than t n .
5-26:Note that t is current physical time and it increases during the transmission of state updates .
5-27:If YES, it uses these state updates and corresponding prediction methods to calculate the new Sremote, else they use Sremote and corresponding prediction methods to estimate the new Sremote .
5-28:After that, local site uses Sremote to update local scene and deletes the sate updates, whose timestamps are less than t n, from R .
5-29:From the above description, it can been see that the main difference between GS DR and GS DR LL is that GS DR LL uses the operations, whose issue time is less than t n, to calculate Sreal .
5-30:That means that the scene seen by local player is the results of the operations issued a period of time (i.e .
5-31:n) ago .
5-32:Meanwhile, if the results of issued operations make the difference between Slate and Sp remote exceed a predefined threshold, corresponding state updates are sent to remote sites immediately .
5-33:The aforementioned is the basic mechanism of GS DR LL .
5-34:In the case with multiple shared entities and remote sites, local site calculates Slate, Sreal, and Sp remote for different shared entities respectively, if there are multiple Slate need to be transmitted, local site packets them in one state update and then send it to all remote sites .
5-35:Figure 2 illustrates the paths of a shared entity at local site and remote site while using GS DR and GS DR LL .
5-36:All conditions are the same with the conditions used in the aforementioned example describing GS DR .
5-37:Compared with t1, t2, and n, T (i.e .
5-38:the time interval between two consecutive updates) is quite small and it is ignored in the following description .
5-39:At time point t0, the player at site i issues an operation, which changes the velocity of the shared entity form 0 to v0 .
5-40:By using GS DR LL, the results of the operation are updated to local scene at time point t0 + n .
5-41:However the operation is immediately used to calculate Slate, thus in spite of GS DR or GS DR LL, at time point t1 site i finds that the difference between accurate position and the estimated one is larger than the threshold and it sends a state update to site j .
5-42:At time point t2, the state update is received by remote site j .
5-43:Assuming that the timestamp of the state update is less than t n, site j uses it to update local scene immediately .
5-44:The 5th Workshop on Network & System Support for Games 2006 NETGAMES 2006 3 With GS DR, the time period of before inconsistency is (t2 t1) + (t1 t0), whereas it decreases to (t2 t1 n) + (t1 t0) with the help of GS DR LL .
5-45:Note that t2 t1 is caused by network transmission delay and t1 t0 is caused by the state filtering mechanism of DR .
5-46:If n is larger than t2 t1, GS DR LL can eliminate the before inconsistency caused by network transmission delay, but it cannot eliminate the before inconsistency caused by the state filtering mechanism of DR (unless the threshold is set to 0) .
5-47:In highly interactive games, which request high consistency and GS DR LL might be employed, the results of operations are quite difficult to be estimated and a small threshold must be used .
5-48:Thus, in practice, most before inconsistency is caused by network transmission delay and GS DR LL has the capability to eliminate such before inconsistency .
5-49:Figure 2 .
5-50:The paths of a shared entity by using GS DR and GS DR LL .
5-51:To GS DR LL, the selection of lag value n is very important, and both network transmission delay and the effects of local lag on interaction should be considered .
5-52:According to the results of HCI related researches, humans cannot perceive the delay imposed on a system when it is smaller than a specific value, and the specific value depends on both the system and the task .
5-53:For example, in a graphical user interface a delay of approximately 150 ms cannot be noticed for keyboard interaction and the threshold increases to 195 ms for mouse interaction [13], and a delay of up to 50 ms is uncritical for a car racing game [5] .
5-54:Thus if network transmission delay is less than the specific value of a game system, n can be set to the specific value .
5-55:Else n can be set in terms of the effects of local lag on the interaction of a system [14] .
5-56:In the case that a large n must be used, some HCI methods (e.g .
5-57:echo [15]) can be used to relieve the negative effects of the large lag .
5-58:In the case that n is larger than the network transmission delay, GS DR LL can eliminate most before inconsistency .
5-59:Traditional local lag requests that the lag value must be larger than typical network transmission delay, otherwise state repairs would flood the system .
5-60:However GS DR LL allows n to be smaller than typical network transmission delay .
5-61:In this case, the before inconsistency caused by network transmission delay still exists, but it can be decreased. .
6 PERFORMANCE EVALUATION :
6-1:In order to evaluate GS DR LL and compare it with GS DR in a real application, we had implemented both two methods in a networked game named spaceship [1] .
6-2:Spaceship is a very simple networked computer game, in which players can control their spaceships to accelerate, decelerate, turn, and shoot spaceships controlled by remote players with laser beams .
6-3:If a spaceship is hit by a laser beam, its life points decrease one .
6-4:If the life points of a spaceship decrease to 0, the spaceship is removed from the game and the player controlling the spaceship loses the game .
6-5:In our practical implementation, GS DR LL and GS DR coexisted in the game system, and the test bed was composed of two computers connected by 100 M switched Ethernet, with one computer acted as local site and the other acted as remote site .
6-6:In order to simulate network transmission delay, a specific module was developed to delay all packets transmitted between the two computers in terms of a predefined delay value .
6-7:The main purpose of performance evaluation is to study the effects of GS DR LL on decreasing before inconsistency in a particular game system under different thresholds, lags, and network transmission delays .
6-8:Two different thresholds were used in the evaluation, one is 10 pixels deviation in position or 15 degrees deviation in orientation, and the other is 4 pixels or 5 degrees .
6-9:Six different combinations of lag and network transmission delay were used in the evaluation and they could be divided into two categories .
6-10:In one category, the lag was fixed at 300 ms and three different network transmission delays (100 ms, 300 ms, and 500 ms) were used .
6-11:In the other category, the network transmission delay was fixed at 800 ms and three different lags (100 ms, 300 ms, and 500 ms) were used .
6-12:Therefore the total number of settings used in the evaluation was 12 (2 × 6) .
6-13:The procedure of performance evaluation was composed of three steps .
6-14:In the first step, two participants were employed to play the game, and the operation sequences were recorded .
6-15:Based on the records, a sub operation sequence, which lasted about one minute and included different operations (e.g .
6-16:accelerate, decelerate, and turn), was selected .
6-17:In the second step, the physical clocks of the two computers were synchronized first .
6-18:Under different settings and consistency maintenance approaches, the selected sub operation sequence was played back on one computer, and it drove the two spaceships, one was local and the other was remote, to move .
6-19:Meanwhile, the tracks of the spaceships on the two computers were recorded separately and they were called as a track couple .
6-20:Since there are 12 settings and 2 consistency maintenance approaches, the total number of recorded track couples was 24 .
6-21:In the last step, to each track couple, the inconsistency between them was calculated, and the unit of inconsistency was pixel .
6-22:Since the physical clocks of the two computers were synchronized, the calculation of inconsistency was quite simple .
6-23:The inconsistency at a particular time point was the distance between the positions of the two spaceships at that time point (i.e .
6-24:formula (3)) .
6-25:In order to show the results of inconsistency in a clear way, only parts of the results, which last about 7 seconds, are used in the following figures, and the figures show almost the same parts of the results .
6-26:Figures 3, 4, and 5 show the results of inconsistency when the lag is fixed at 300 ms and the network transmission delays are 100, 300, and 500 ms .
6-27:It can been seen that inconsistency does exist, but in most of the time it is 0 .
6-28:Additionally, inconsistency increases with the network transmission delay, but decreases with the threshold .
6-29:Compared with GS DR, GS DR LL can decrease more inconsistency, and it eliminates most inconsistency when the network transmission delay is 100 ms and the threshold is 4 pixels or 5 degrees .
6-30:4 The 5th Workshop on Network & System Support for Games 2006 NETGAMES 2006 According to the prediction and state filtering mechanisms of DR, inconsistency cannot be completely eliminated if the threshold is not 0 .
6-31:With the definitions of before inconsistency and after inconsistency, it can be indicated that GS DR and GS DR LL both can eliminate after inconsistency, and GS DR LL can effectively decrease before inconsistency .
6-32:It can be foreseen that with proper lag and threshold (e.g .
6-33:the lag is larger than the network transmission delay and the threshold is 0), GS DR LL even can eliminate before inconsistency .
6-34:0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 10 pixels or 15degrees 0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 4 pixels or 5degrees Figure 3 .
6-35:Inconsistency when the network transmission delay is 100 ms and the lag is 300 ms .
6-36:0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 10 pixels or 15degrees 0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 4 pixels or 5degrees Figure 4 .
6-37:Inconsistency when the network transmission delay is 300 ms and the lag is 300 ms .
6-38:0 10 20 30 40 0.0 1.5 3.1 4.6 6.2 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 10 pixels or 15degrees 0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 4 pixels or 5degrees Figure 5 .
6-39:Inconsistency when the network transmission delay is 500 ms and the lag is 300 ms .
6-40:Figures 6, 7, and 8 show the results of inconsistency when the network transmission delay is fixed at 800 ms and the lag are 100, 300, and 500 ms .
6-41:It can be seen that with GS DR LL before inconsistency decreases with the lag .
6-42:In traditional local lag, the lag must be set to a value larger than typical network transmission delay, otherwise the state repairs would flood the system .
6-43:From the above results it can be seen that there does not exist any constraint on the selection of the lag, with GS DR LL a system would work fine even if the lag is much smaller than the network transmission delay .
6-44:The 5th Workshop on Network & System Support for Games 2006 NETGAMES 2006 5 From all above results, it can be indicated that GS DR and GSDR LL both can eliminate after inconsistency, and GS DR LL can effectively decrease before inconsistency, and the effects increase with the lag .
6-45:0 10 20 30 40 0.0 1.5 3.1 4.7 6.2 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 10 pixels or 15degrees 0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 4 pixels or 5degrees Figure 6 .
6-46:Inconsistency when the network transmission delay is 800 ms and the lag is 100 ms .
6-47:0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 10 pixels or 15degrees 0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 4 pixels or 5degrees Figure 7 .
6-48:Inconsistency when the network transmission delay is 800 ms and the lag is 300 ms .
6-49:0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 10 pixels or 15degrees 0 10 20 30 40 0.0 1.5 3.1 4.6 6.1 Time (seconds) Inconsistency(pixels) GS DR LL GS DR The threshold is 4 pixels or 5degrees Figure 8 .
6-50:Inconsistency when the network transmission delay is 800 ms and the lag is 500 ms. .
7-1:Compared with traditional DR, GS DR can eliminate after inconsistency through the synchronization of physical clocks, but it cannot tackle before inconsistency, which would significantly influence the usability and fairness of a game
7-2:In this paper, we proposed a method named GS DR LL, which combines local lag and GS DR, to decrease before inconsistency through delaying updating the execution results of local operations to local scene
7-3:Performance evaluation indicates that GS DR LL can effectively decrease before inconsistency, and the effects increase with the lag
7-4:GS DR LL has significant implications to consistency maintenance approaches
7-5:First, GS DR LL shows that improved DR can not only eliminate after inconsistency but also decrease 6 The 5th Workshop on Network & System Support for Games 2006  NETGAMES 2006 before inconsistency, with proper lag and threshold, it would even eliminate before inconsistency
7-6:As a result, the application of DR can be greatly broadened and it could be used in the systems which request high consistency (e.g
7-7:highly interactive games)
7-8:Second, GS DR LL shows that by combining local lag and GSDR, the constraint on selecting lag value is removed and a lag, which is smaller than typical network transmission delay, could be used
7-9:As a result, the application of local lag can be greatly broadened and it could be used in the systems which have large typical network transmission delay (e.g
7-10:Internet based games).
8-1:Mauve, M., Vogel, J., Hilt, V., and Effelsberg, W
8-2:Local Lag and Timewarp: Providing Consistency for Replicated Continuous Applications
8-3:IEEE Transactions on Multimedia, Vol
8-4:6, No.1, 2004, 47 57
8-5:Li, F.W., Li, L.W., and Lau, R.W
8-6:Supporting Continuous Consistency in Multiplayer Online Games
8-7:In Proc
8-8:of ACM Multimedia, 2004, 388 391
8-9:Pantel, L
8-10:and Wolf, L
8-11:On the Suitability of Dead Reckoning Schemes for Games
8-12:In Proc
8-13:of NetGames, 2002, 79 84
8-14:Alhalabi, M.O., Horiguchi, S., and Kunifuji, S
8-15:An Experimental Study on the Effects of Network Delay in Cooperative Shared Haptic Virtual Environment
8-16:Computers and Graphics, Vol
8-17:27, No
8-18:2, 2003, 205 213
8-19:Pantel, L
8-20:and Wolf, L.C
8-21:On the Impact of Delay on RealTime Multiplayer Games
8-22:In Proc
8-23:of NOSSDAV, 2002, 2329
8-24:Meehan, M., Razzaque, S., Whitton, M.C., and Brooks, F.P
8-25:Effect of Latency on Presence in Stressful Virtual Environments
8-26:In Proc
8-27:of IEEE VR, 2003, 141 148
8-28:Bernier, Y.W
8-29:Latency Compensation Methods in Client Server In Game Protocol Design and Optimization
8-30:In Proc
8-31:of Game Developers Conference, 2001
8-32:Aggarwal, S., Banavar, H., and Khandelwal, A
8-33:Accuracy in Dead Reckoning based Distributed Multi Player Games
8-34:In Proc
8-35:of NetGames, 2004, 161 165
8-36:Raynal, M
8-37:and Schiper, A
8-38:From Causal Consistency to Sequential Consistency in Shared Memory Systems
8-39:In Proc
8-40:of Conference on Foundations of Software Technology and Theoretical Computer Science, 1995, 180 194
8-41:Ahamad, M., Burns, J.E., Hutto, P.W., and Neiger, G
8-42:Causal Memory
8-43:In Proc
8-44:of International Workshop on Distributed Algorithms, 1991, 9 30
8-45:Herlihy, M
8-46:and Wing, J
8-47:Linearizability: a Correctness Condition for Concurrent Objects
8-48:ACM Transactions on Programming Languages and Systems, Vol
8-49:12, No
8-50:3, 1990, 463 492
8-51:Misra, J
8-52:Axioms for Memory Access in Asynchronous Hardware Systems
8-53:ACM Transactions on Programming Languages and Systems, Vol
8-54:8, No
8-55:1, 1986, 142 153
8-56:Dabrowski, J.R
8-57:and Munson, E.V
8-58:Is 100 Milliseconds too Fast
8-59:In Proc
8-60:of SIGCHI Conference on Human Factors in Computing Systems, 2001, 317 318
8-61:Chen, H., Chen, L., and Chen, G.C
8-62:Effects of Local Lag Mechanism on Cooperation Performance in a Desktop CVE System
8-63:Journal of Computer Science and Technology, Vol
8-64:20, No
8-65:3, 2005, 396 401
8-66:Chen, L., Chen, H., and Chen, G.C
8-67:Echo: a Method to Improve the Interaction Quality of CVEs
8-68:In Proc
8-69:of IEEE VR, 2005, 269 270
8-70:The 5th Workshop on Network & System Support for Games 2006  NETGAMES 2006 7
picture:
