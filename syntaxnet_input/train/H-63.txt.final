Location based Indexing Scheme for DAYS 
content:
1 ABSTRACT :
1-1:Data dissemination through wireless channels for broadcasting information to consumers is becoming quite common .
1-2:Many dissemination schemes have been proposed but most of them push data to wireless channels for general consumption .
1-3:Push based broadcast [1] is essentially asymmetric, i.e., the volume of data being higher from the server to the users than from the users back to the server .
1-4:Push based scheme requires some indexing which indicates when the data will be broadcast and its position in the broadcast .
1-5:Access latency and tuning time are the two main parameters which may be used to evaluate an indexing scheme .
1-6:Two of the important indexing schemes proposed earlier were tree based and the exponential indexing schemes .
1-7:None of these schemes were able to address the requirements of location dependent data which is highly desirable feature of data dissemination .
1-8:In this paper, we discuss the broadcast of LDD in our project DAta in Your Space (DAYS), and propose a scheme for indexing LDD .
1-9:We argue that this scheme, when applied to LDD, significantly improves performance in terms of tuning time over the above mentioned schemes .
1-10:We prove our argument with the help of simulation results .
1-11:H.3.1 [Information Systems]: Information Storage and Retrieval .
2 INTRODUCTION :
2-1:Wireless data dissemination is an economical and efficient way to make desired data available to a large number of mobile or static users .
2-2:The mode of data transfer is essentially asymmetric, that is, the capacity of the transfer of data (downstream communication) from the server to the client (mobile user) is significantly larger than the client or mobile user to the server (upstream communication) .
2-3:The effectiveness of a data dissemination system is judged by its ability to provide user the required data at anywhere and at anytime .
2-4:One of the best ways to accomplish this is through the dissemination of highly personalized Location Based Services which allows users to access personalized location dependent data .
2-5:An example would be someone using their mobile device to search for a vegetarian restaurant .
2-6:The LBS application would interact with other location technology components or use the mobile user's input to determine the user's location and download the information about the restaurants in proximity to the user by tuning into the wireless channel which is disseminating LDD .
2-7:We see a limited deployment of LBS by some service providers .
2-8:But there are every indications that with time some of the complex technical problems such as uniform location framework, calculating and tracking locations in all types of places, positioning in various environments, innovative location applications, etc., will be resolved and LBS will become a common facility and will help to improve market productivity and customer comfort .
2-9:In our project called DAYS, we use wireless data broadcast mechanism to push LDD to users and mobile users monitor and tune the channel to find and download the required data .
2-10:A simple broadcast, however, is likely to cause significant performance degradation in the energy constrained mobile devices and a common solution to this problem is the use of efficient air indexing .
2-11:The indexing approach stores control information which tells the user about the data location in the broadcast and how and when he could access it .
2-12:A mobile user, thus, has some free time to go into the doze mode which conserves valuable power .
2-13:It also allows the user to personalize his own mobile device by selectively tuning to the information of his choice .
2-14:Access efficiency and energy conservation are the two issues which are significant for data broadcast systems .
2-15:Access efficiency refers to the latency experienced when a request is initiated till the response is received .
2-16:Energy conservation [7, 10] refers to the efficient use of the limited energy of the mobile device in accessing broadcast data .
2-17:Two parameters that affect these are the tuning time and the access latency .
2-18:Tuning time refers to the time during which the mobile unit remains in active state to tune the channel and download its required data .
2-19:It can also be defined as the number of buckets tuned by the mobile device in active state to get its required data .
2-20:Access latency may be defined as the time elapsed since a request has been issued till the response has been received .
2-21:1 This research was supported by a grant from NSF IIS 0209170 .
2-22:Several indexing schemes have been proposed in the past and the prominent among them are the tree based and the exponential indexing schemes [17] .
2-23:The main disadvantages of the tree based schemes are that they are based on centralized tree structures .
2-24:To start a search, the MU has to wait until it reaches the root of the next broadcast tree .
2-25:This significantly affects the tuning time of the mobile unit .
2-26:The exponential schemes facilitate index replication by sharing links in different search trees .
2-27:For broadcasts with large number of pages, the exponential scheme has been shown to perform similarly as the tree based schemes in terms of access latency .
2-28:Also, the average length of broadcast increases due to the index replication and this may cause significant increase in the access latency .
2-29:None of the above indexing schemes is equally effective in broadcasting location dependent data .
2-30:In addition to providing low latency, they lack properties which are used to address LDD issues .
2-31:We propose an indexing scheme in DAYS which takes care of some these problems .
2-32:We show with simulation results that our scheme outperforms some of the earlier indexing schemes for broadcasting LDD in terms of tuning time .
2-33:The rest of the paper is presented as follows .
2-34:In section 2, we discuss previous work related to indexing of broadcast data .
2-35:Section 3 describes our DAYS architecture .
2-36:Location dependent data, its generation and subsequent broadcast is presented in section 4 .
2-37:Section 5 discusses our indexing scheme in detail .
2-38:Simulation of our scheme and its performance evaluation is presented in section 6 .
2-39:Section 7 concludes the paper and mentions future related work. .
3 PREVIOUS WORK :
3-1:Several disk based indexing techniques have been used for air indexing .
3-2:Imielinski et al .
3-3:[5, 6] applied the B+ index tree, where the leaf nodes store the arrival times of the data items .
3-4:The distributed indexing method was proposed to efficiently replicate and distribute the index tree in a broadcast .
3-5:Specifically, the index tree is divided into a replicated part and a non replicated part .
3-6:Each broadcast consists of the replicated part and the nonreplicated part that indexes the data items immediately following it .
3-7:As such, each node in the non replicated part appears only once in a broadcast and, hence, reduces the replication cost and access latency while achieving a good tuning time .
3-8:Chen et al .
3-9:[2] and Shivakumar et al .
3-10:[8] considered unbalanced tree structures to optimize energy consumption for non uniform data access .
3-11:These structures minimize the average index search cost by reducing the number of index searches for hot data at the expense of spending more on cold data .
3-12:Tan and Yu discussed data and index organization under skewed broadcast Hashing and signature methods have also been suggested for wireless broadcast that supports equality queries [9] .
3-13:A flexible indexing method was proposed in [5] .
3-14:The flexible index first sorts the data items in ascending (or descending) order of the search key values and then divides them into p segments .
3-15:The first bucket in each data segment contains a control index, which is a binary index mapping a given key value to the segment containing that key, and a local index, which is an m entry index mapping a given key value to the buckets within the current segment .
3-16:By tuning the parameters of p and m, mobile clients can achieve either a good tuning time or good access latency .
3-17:Another indexing technique proposed is the exponential indexing scheme [17] .
3-18:In this scheme, a parameterized index, called the exponential index is used to optimize the access latency or the tuning time .
3-19:It facilitates index replication by linking different search trees .
3-20:All of the above mentioned schemes have been applied to data which are non related to each other .
3-21:These non related data may be clustered or non clustered .
3-22:However, none of them has specifically addressed the requirements of LDD .
3-23:Location dependent data are data which are associated with a location .
3-24:Presently there are several applications that deal with LDD [13, 16] .
3-25:Almost all of them depict LDD with the help of hierarchical structures [3, 4] .
3-26:This is based on the containment property of location dependent data .
3-27:The Containment property helps determining relative position of an object by defining or identifying locations that contains those objects .
3-28:The subordinate locations are hierarchically related to each other .
3-29:Thus, Containment property limits the range of availability or operation of a service .
3-30:We use this containment property in our indexing scheme to index LDD. .
4 DAYS ARCHITECTURE :
4-1:DAYS has been conceptualized to disseminate topical and nontopical data to users in a local broadcast space and to accept queries from individual users globally .
4-2:Topical data, for example, weather information, traffic information, stock information, etc., constantly changes over time .
4-3:Non topical data such as hotel, restaurant, real estate prices, etc., do not change so often .
4-4:Thus, we envision the presence of two types of data distribution: In the first case, server pushes data to local users through wireless channels .
4-5:The other case deals with the server sending results of user queries through downlink wireless channels .
4-6:Technically, we see the presence of two types of queues in the pull based data access .
4-7:One is a heavily loaded queue containing globally uploaded queries .
4-8:The other is a comparatively lightly loaded queue consisting of locally uploaded queries .
4-9:The DAYS architecture [12] as shown in figure 1 consists of a Data Server, Broadcast Scheduler, DAYS Coordinator, Network of LEO satellites for global data delivery and a Local broadcast space .
4-10:Data is pushed into the local broadcast space so that users may tune into the wireless channels to access the data .
4-11:The local broadcast space consists of a broadcast tower, mobile units and a network of data staging machines called the surrogates .
4-12:Data staging in surrogates has been earlier investigated as a successful technique [12, 15] to cache users' related data .
4-13:We believe that data staging can be used to drastically reduce the latency time for both the local broadcast data as well as global responses .
4-14:Query request in the surrogates may subsequently be used to generate the popularity patterns which ultimately decide the broadcast schedule [12] .
4-15:18 Popularity Feedback from Surrogates for Broadcast Scheduler Local Broadcast Space Broadcast Tower SurrogateMU MU MU MU Data ServerBroadcast schedulerDAYS Coordinator Local downlink channel Global downlink channel Pull request queue Global request queue Local request queue Location based index Starbucks Plaza Kansas City Figure 1 .
4-16:DAYS Architecture Figure 2 .
4-17:Location Structure ofStarbucks, Plaza .
5 LOCATION DEPENDENT DATA (LDD) :
5-1:We argue that incorporating location information in wireless data broadcast can significantly decrease the access latency .
5-2:This property becomes highly useful for mobile unit which has limited storage and processing capability .
5-3:There are a variety of applications to obtain information about traffic, restaurant and hotel booking, fast food, gas stations, post office, grocery stores, etc .
5-4:If these applications are coupled with location information, then the search will be fast and highly cost effective .
5-5:An important property of the locations is Containment which helps to determine the relative location of an object with respect to its parent that contains the object .
5-6:Thus, Containment limits the range of availability of a data .
5-7:We use this property in our indexing scheme .
5-8:The database contains the broadcast contents which are converted into LDD [14] by associating them with respective locations so that it can be broadcasted in a clustered manner .
5-9:The clustering of LDD helps the user to locate information efficiently and supports containment property .
5-10:We present an example to justify our proposition .
5-11:Example: Suppose a user issues query Starbucks Coffee in Plaza please .
5-12:to access information about the Plaza branch of Starbucks Coffee in Kansas City .
5-13:In the case of location independent set up the system will list all Starbucks coffee shops in Kansas City area .
5-14:It is obvious that such responses will increase access latency and are not desirable .
5-15:These can be managed efficiently if the server has location dependent data, i.e., a mapping between a Starbucks coffee shop data and its physical location .
5-16:Also, for a query including range of locations of Starbucks, a single query requesting locations for the entire region of Kansas City, as shown in Figure 2, will suffice .
5-17:This will save enormous amount of bandwidth by decreasing the number of messages and at the same time will be helpful in preventing the scalability bottleneck in highly populated area .
5-18:4.1 Mapping Function for LDD The example justifies the need for a mapping function to process location dependent queries .
5-19:This will be especially important for pull based queries across the globe for which the reply could be composed for different parts of the world .
5-20:The mapping function is necessary to construct the broadcast schedule .
5-21:We define Global Property Set [11], Information Content set, and Location Hierarchy set where IC ⊆ GPS and LH ⊆ GPS to develop a mapping function .
5-22:LH = {l1, l2, l3…,lk} where li represent locations in the location tree and IC = {ic1, ic2, ic3,…,icn} where ici represent information type .
5-23:For example, if we have traffic, weather, and stock information are in broadcast then IC = {ictraffic, icweather, and icstock} .
5-24:The mapping scheme must be able to identify and select an IC member and a LH node for (a) correct association, (b) granularity match, (c) and termination condition .
5-25:For example, weather ∈ IC could be associated with a country or a state or a city or a town of LH .
5-26:The granularity match between the weather and a LH node is as per user requirement .
5-27:Thus, with a coarse granularity weather information is associated with a country to get country"s weather and with town in a finer granularity .
5-28:If a town is the finest granularity, then it defines the terminal condition for association between IC and LH for weather .
5-29:This means that a user cannot get weather information about subdivision of a town .
5-30:In reality weather of a subdivision does not make any sense .
5-31:We develop a simple heuristic mapping approach scheme based on user requirement .
5-32:Let IC = {m1, m2,m3 .,..., mk}, where mi represent its element and let LH = {n1, n2, n3, ..., nl}, where ni represents LH"s member .
5-33:We define GPS for IC ⊆ GPS and for LH ⊆ GPS as GPSIC = {P1, P2,…, Pn}, where P1, P2, P3,…, Pn are properties of its members and GPSLH = {Q1, Q2,…, Qm} where Q1, Q2,…, Qm are properties of its members .
5-34:The properties of a particular member of IC are a subset of GPSIC .
5-35:It is generally true that (property set (mi∈ IC) ∪ property set (mj∈ IC)) ≠ ∅, however, there may be cases where the intersection is not null .
5-36:For example, stock ∈ IC and movie ∈ IC rating do not have any property in common .
5-37:We assume that any two or more members of IC have at least one common geographical property (i.e .
5-38:location) because DAYS broadcasts information about those categories, which are closely tied with a location .
5-39:For example, stock of a company is related to a country, weather is related to a city or state, etc .
5-40:We define the property subset of mi∈ IC as PSm i ∀ mi ∈ IC and PSm i = {P1, P2, ..., Pr} where r ≤ n .
5-41:∀ Pr {Pr ∈ PSm i → Pr∈ GPSIC} which implies that ∀ i, PSm i ⊆ GPSIC .
5-42:The geographical properties of this set are indicative of whether mi ∈ IC can be mapped to only a single granularity level (i.e .
5-43:a single location) in LH or a multiple granularity levels (i.e .
5-44:more than one nodes in 19 the hierarchy) in LH .
5-45:How many and which granularity levels should a mi map to, depends upon the level at which the service provider wants to provide information about the mi in question .
5-46:Similarly we define a property subset of LH members as PSn j ∀ nj ∈ LH which can be written as PSn j ={Q1, Q2, Q3, …, Qs} where s ≤ This section discusses our location based indexing scheme .
5-47:The scheme is designed to conform to the LDD broadcast in our project DAYS .
5-48:As discussed earlier, we use the containment property of LDD in the indexing scheme .
5-49:This significantly limits the search of our required data to a particular portion of broadcast .
5-50:Thus, we argue that the scheme provides bounded tuning time .
5-51:We describe the architecture of our indexing scheme .
5-52:Our scheme contains separate data buckets and index buckets .
5-53:The index buckets are of two types .
5-54:The first type is called the Major index .
5-55:The Major index provides information about the types of data broadcasted .
5-56:For example, if we intend to broadcast information like Entertainment, Weather, Traffic etc., then the major index points to either these major types of information and or their main subtypes of information, the number of main subtypes varying from one information to another .
5-57:This strictly limits number of accesses to a Major index .
5-58:The Major index never points to the original data .
5-59:It points to the sub indexes called the Minor index .
5-60:The minor indexes are the indexes which actually points to the original data .
5-61:We called these minor index pointers as Location Pointers as they points to the data which are associated with a location .
5-62:Thus, our search for a data includes accessing of a major index and some minor indexes, the number of minor index varying depending on the type of information .
5-63:Thus, our indexing scheme takes into account the hierarchical nature of the LDD, the Containment property, and requires our broadcast schedule to be clustered based on data type and location .
5-64:The structure of the location hierarchy requires the use of different types of index at different levels .
5-65:The structure and positions of index strictly depend on the location hierarchy as described in our mapping scheme earlier .
5-66:We illustrate the implementation of our scheme with an example .
5-67:The rules for framing the index are mentioned subsequently .
5-68:20 A1 Entertainment Resturant Movie A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Weather KC SL JC SF Entertainment R1 R2 R3 R4 R5 R6 R7 R8 KC SL JC SF (A, R, NEXT = 8) 3, R5 4, R7 Type (S, L) ER W E EM (1, 4) (5, 4) (1, 4), (9, 4) (9, 4) Type (S, L) W E EM ER (1, 4) (5, 8) (5, 4) (9, 4) Type (S, L) E EM ER W (1, 8) (1, 4) (5, 4) (9, 4) A1 A2 A3 A4 Movie Resturant Weather 1 2 3 4 5 6 7 8 9 10 11 12 Major index Major index Major index Minor index Major index Minor index Figure 3 .
5-69:Location Mapped Information for Broadcast Figure 4 .
5-70:Data coupled with Location based Index Example: Let us suppose that our broadcast content contains ICentertainment and ICweather which is represented as shown in Fig .
5-71:3 .
5-72:Ai represents Areas of City and Ri represents roads in a certain area .
5-73:The leaves of Weather structure represent four cities .
5-74:The index structure is given in Fig .
5-75:4 which shows the position of major and minor index and data in the broadcast schedule .
5-76:We propose the following rules for the creation of the air indexed broadcast schedule: • The major index and the minor index are created .
5-77:• The major index contains the position and range of different types of data items (Weather and Entertainment, Figure 3) and their categories .
5-78:The sub categories of Entertainment, Movie and Restaurant, are also in the index .
5-79:Thus, the major index contains Entertainment (E), Entertainment Movie (EM), Entertainment Restaurant (ER), and Weather .
5-80:The tuple (S, L) represents the starting position of the data item and L represents the range of the item in terms of number of data buckets .
5-81:• The minor index contains the variables A, R and a pointer Next .
5-82:In our example (Figure 3), road R represents the first node of area A .
5-83:The minor index is used to point to actual data buckets present at the lowest levels of the hierarchy .
5-84:In contrast, the major index points to a broader range of locations and so it contains information about main and sub categories of data .
5-85:• Index information is not incorporated in the data buckets .
5-86:Index buckets are separate containing only the control information .
5-87:• The number of major index buckets m=#(IC), IC = {ic1, ic2, ic3,…,icn} where ici represent information type and # represents the cardinality of the Information Content set IC .
5-88:In this example, IC= {icMovie, icWeather, icRestaurant} and so #(IC) =3 .
5-89:Hence, the number of major index buckets is 3 .
5-90:• Mechanism to resolve the query is present in the java based coordinator in MU .
5-91:For example, if a query Q is presented as Q (Entertainment, Movie, Road_1), then the resultant search will be for the EM information in the major index .
5-92:We say, Q EM .
5-93:Our proposed index works as follows: Let us suppose that an MU issues a query which is represented by Java Coordinator present in the MU as Restaurant information on Road 7 .
5-94:This is resolved by the coordinator as Q ER .
5-95:This means one has to search for ER unit of index in the major index .
5-96:Let us suppose that the MU logs into the channel at R2 .
5-97:The first index it receives is a minor index after R2 .
5-98:In this index, value of Next variable = 4, which means that the next major index is present after bucket 4 .
5-99:The MU may go into doze mode .
5-100:It becomes active after bucket 4 and receives the major index .
5-101:It searches for ER information which is the first entry in this index .
5-102:It is now certain that the MU will get the position of the data bucket in the adjoining minor index .
5-103:The second unit in the minor index depicts the position of the required data R7 .
5-104:It tells that the data bucket is the first bucket in Area 4 .
5-105:The MU goes into doze mode again and becomes active after bucket 6 .
5-106:It gets the required data in the next bucket .
5-107:We present the algorithm for searching the location based Index .
5-108:Algorithm 1 Location based Index Search in DAYS .
6 While (not found) do :
6-1:.
7 if bucket is Major Index then :
7-1:.
8 Find the Type & Tuple (S, L) :
8-1:.
9 end if :
9-1:.
10 Wake up at the Sth :
10-1:bucket and observe the Minor Index .
11 end if :
11-1:.
12 if bucket is Minor Index then :
12-1:10 .
12-2:if TypeRequested not equal to Typefound and (A,R)Request not equal to (A,R)found then 11 .
12-3:Go into doze mode till NEXT & repeat from step 3 12 .
12-4:end if 13 .
12-5:else find entry in Minor Index which points to data 14 .
12-6:Compute time of arrival T of data bucket 15 .
12-7:Go into doze mode till T 16 .
12-8:Wake up at T and access data, found = true 17 .
12-9:end else 18 .
12-10:end if 19 .
12-11:end While 21 .
13 PERFORMANCE EVALUATION :
13-1:Conservation of energy is the main concern when we try to access data from wireless broadcast .
13-2:An efficient scheme should allow the mobile device to access its required data by staying active for a minimum amount of time .
13-3:This would save considerable amount of energy .
13-4:Since items are distributed based on types and are mapped to suitable locations, we argue that our broadcast deals with clustered data types .
13-5:The mobile unit has to access a larger major index and a relatively much smaller minor index to get information about the time of arrival of data .
13-6:This is in contrast to the exponential scheme where the indexes are of equal sizes .
13-7:The example discussed and Algorithm 1 reveals that to access any data, we need to access the major index only once followed by one or more accesses to the minor index .
13-8:The number of minor index access depends on the number of internal locations .
13-9:As the number of internal locations vary for item to item (for example, Weather is generally associated with a City whereas traffic is granulated up to major and minor roads of a city), we argue that the structure of the location mapped information may be visualized as a forest which is a collection of general trees, the number of general trees depending on the types of information broadcasted and depth of a tree depending on the granularity of the location information associated with the information .
13-10:For our experiments, we assume the forest as a collection of balanced M ary trees .
13-11:We further assume the M ary trees to be full by assuming the presence of dummy nodes in different levels of a tree .
13-12:Thus, if the number of data items is d and the height of the tree is m, then n= (m*d 1) (m 1) where n is the number of vertices in the tree and i= (d 1) (m 1) where i is the number of internal vertices .
13-13:Tuning time for a data item involves 1 unit of time required to access the major index plus time required to access the data items present in the leaves of the tree .
13-14:Thus, tuning time with d data items is t = logmd+1 We can say that tuning time is bounded by O(logmd) .
13-15:We compare our scheme with the distributed indexing and exponential scheme .
13-16:We assume a flat broadcast and number of pages varying from 5000 to 25000 .
13-17:The various simulation parameters are shown in Table 1 .
13-18:Figure 5 8 shows the relative tuning times of three indexing algorithms, ie, the LBIS, exponential scheme and the distributed tree scheme .
13-19:Figure 5 shows the result for number of internal location nodes = 3 .
13-20:We can see that LBIS significantly outperforms both the other schemes .
13-21:The tuning time in LBIS ranges from approx 6.8 to 8 .
13-22:This large tuning time is due to the fact that after reaching the lowest minor index, the MU may have to access few buckets sequentially to get the required data bucket .
13-23:We can see that the tuning time tends to become stable as the length of broadcast increases .
13-24:In figure 6 we consider m= 4 .
13-25:Here we can see that the exponential and the distributed perform almost similarly, though the former seems to perform slightly better as the broadcast length increases .
13-26:A very interesting pattern is visible in figure 7 .
13-27:For smaller broadcast size, the LBIS seems to have larger tuning time than the other two schemes .
13-28:But as the length of broadcast increases, it is clearly visible the LBIS outperforms the other two schemes .
13-29:The Distributed tree indexing shows similar behavior like the LBIS .
13-30:The tuning time in LBIS remains low because the algorithm allows the MU to skip some intermediate Minor Indexes .
13-31:This allows the MU to move into lower levels directly after coming into active mode, thus saving valuable energy .
13-32:This action is not possible in the distributed tree indexing and hence we can observe that its tuning time is more than the LBIS scheme, although it performs better than the exponential scheme .
13-33:Figure 8, in contrast, shows us that the tuning time in LBIS, though less than the other two schemes, tends to increase sharply as the broadcast length becomes greater than the 15000 pages .
13-34:This may be attributed both due to increase in time required to scan the intermediate Minor Indexes and the length of the broadcast .
13-35:But we can observe that the slope of the LBIS curve is significantly less than the other two curves .
13-36:Table 1 Simulation Parameters P Definition Values N Number of data Items 5000 25000 m Number of internal location nodes 3, 4, 5, 6 B Capacity of bucket without index (for exponential index) 10,64,128,256 i Index base for exponential index 2,4,6,8 k Index size for distributed tree 8 bytes The simulation results establish some facts about our location based indexing scheme .
13-37:The scheme performs better than the other two schemes in terms of tuning time in most of the cases .
13-38:As the length of the broadcast increases, after a certain point, though the tuning time increases as a result of factors which we have described before, the scheme always performs better than the other two schemes .
13-39:Due to the prescribed limit of the number of pages in the paper, we are unable to show more results .
13-40:But these omitted results show similar trend as the results depicted in figure 5 8. .
14-1:In this paper we have presented a scheme for mapping of wireless broadcast data with their locations
14-2:We have presented an example to show how the hierarchical structure of the location tree maps with the data to create LDD
14-3:We have presented a scheme called LBIS to index this LDD
14-4:We have used the containment property of LDD in the scheme that limits the search to a narrow range of data in the broadcast, thus saving valuable energy in the device
14-5:The mapping of data with locations and the indexing scheme will be used in our DAYS project to create the push based architecture
14-6:The LBIS has been compared with two other prominent indexing schemes, i.e., the distributed tree indexing scheme and the exponential indexing scheme
14-7:We showed in our simulations that the LBIS scheme has the lowest tuning time for broadcasts having large number of pages, thus saving valuable battery power in the MU
14-8:22 In the future work we try to incorporate pull based architecture in our DAYS project
14-9:Data from the server is available for access by the global users
14-10:This may be done by putting a request to the source server
14-11:The query in this case is a global query
14-12:It is transferred from the user"s source server to the destination server through the use of LEO satellites
14-13:We intend to use our LDD scheme and data staging architecture in the pull based architecture
14-14:We will show that the LDD scheme together with the data staging architecture significantly improves the latency for global as well as local query.
15-1:Acharya, S., Alonso, R
15-2:Franklin, M and Zdonik S
15-3:Broadcast disk: Data management for asymmetric communications environments
15-4:In Proceedings of ACM SIGMOD Conference on Management of Data, pages 199 210, San Jose, CA, May 1995
15-5:Chen, M.S.,Wu, K.L
15-6:and Yu, P
15-7:S
15-8:Optimizing index allocation for sequential data broadcasting in wireless mobile computing
15-9:IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161 173, January February 2003
15-10:Figure 5
15-11:Broadcast Size (# buckets) Dist tree Expo LBIS Figure 6
15-12:Broadcast Size (# buckets) Dist tree Expo LBIS Figure 7
15-13:Broadcast Size (# buckets) Dist tree Expo LBIS Figure 8
15-14:Broadcast Size (# buckets) Dist tree Expo LBIS Averagetuningtime Averagetuningtime Averagetuningtime Averagetuningtime 23 Hu, Q
15-15:L., Lee, D
15-16:L
15-17:and Lee, W.C
15-18:Performance evaluation of a wireless hierarchical data dissemination system
15-19:In Proceedings of the 5th Annual ACM International Conference on Mobile Computing and Networking (MobiCom"99), pages 163 173, Seattle, WA, August 1999
15-20:Hu, Q
15-21:L
15-22:Lee, W.C
15-23:and Lee, D
15-24:L
15-25:Power conservative multi attribute queries on data broadcast
15-26:In Proceedings of the 16th International Conference on Data Engineering (ICDE"00), pages 157 166, San Diego, CA, February 2000
15-27:Imielinski, T., Viswanathan, S
15-28:and Badrinath
15-29:B
15-30:R
15-31:Power efficient filtering of data on air
15-32:In Proceedings of the 4th International Conference on Extending Database Technology (EDBT"94), pages 245 258, Cambridge, UK, March 1994
15-33:Imielinski, T., Viswanathan, S
15-34:and Badrinath
15-35:B
15-36:R
15-37:Data on air  Organization and access
15-38:IEEE Transactions on Knowledge and Data Engineering (TKDE), 9(3):353 372, May June 1997
15-39:Shih, E., Bahl, P
15-40:and Sinclair, M
15-41:J
15-42:Wake on wireless: An event driven energy saving strategy for battery operated devices
15-43:In Proceedings of the 8th Annual ACM International Conference on Mobile Computing and Networking (MobiCom"02), pages 160 171, Atlanta, GA, September 2002
15-44:Shivakumar N
15-45:and Venkatasubramanian, S
15-46:Energy efficient indexing for information dissemination in wireless systems
15-47:ACM Baltzer Journal of Mobile Networks and Applications (MONET), 1(4):433 446, December 1996
15-48:Tan K
15-49:L
15-50:and Yu, J
15-51:X
15-52:Energy efficient filtering of non uniform broadcast
15-53:In Proceedings of the 16th International Conference on Distributed Computing Systems (ICDCS"96), pages 520 527, Hong Kong, May 1996
15-54:Viredaz, M
15-55:A., Brakmo, L
15-56:S
15-57:and Hamburgen, W
15-58:R
15-59:Energy management on handheld devices
15-60:ACM Queue, 1(7):44 52, October 2003
15-61:Garg, N
15-62:Kumar, V., & Dunham, M.H
15-63:Information Mapping and Indexing in DAYS, 6th International Workshop on Mobility in Databases and Distributed Systems, in conjunction with the 14th International Conference on Database and Expert Systems Applications September 1 5, Prague, Czech Republic, 2003
15-64:Acharya D., Kumar, V., & Dunham, M.H
15-65:InfoSpace: Hybrid and Adaptive Public Data Dissemination System for Ubiquitous Computing
15-66:Accepted for publication in the special issue of Pervasive Computing
15-67:Wiley Journal for Wireless Communications and Mobile Computing, 2004
15-68:Acharya D., Kumar, V., & Prabhu, N
15-69:Discovering and using Web Services in M Commerce, Proceedings for 5th VLDB Workshop on Technologies for E Services, Toronto, Canada,2004
15-70:Acharya D., Kumar, V
15-71:Indexing Location Dependent Data in broadcast environment
15-72:Accepted for publication, JDIM special issue on Distributed Data Management, 2005
15-73:Flinn, J., Sinnamohideen, S., & Satyanarayan, M
15-74:Data Staging on Untrusted Surrogates, Intel Research, Pittsburg, Unpublished Report, 2003
15-75:Seydim, A.Y., Dunham, M.H
15-76:& Kumar, V
15-77:Location dependent query processing, Proceedings of the 2nd ACM international workshop on Data engineering for wireless and mobile access, p.47 53, Santa Barbara, California, USA, 2001
15-78:Xu, J., Lee, W.C., Tang., X
15-79:Exponential Index: A Parameterized Distributed Indexing Scheme for Data on Air
15-80:In Proceedings of the 2nd ACM USENIX International Conference on Mobile Systems, Applications, and Services (MobiSys'04), Boston, MA, June 2004
15-81:24
picture:
