Marginal Contribution Nets: A Compact Representation 
content:
1 ABSTRACT :
1-1:We present a new approach to representing coalitional games based on rules that describe the marginal contributions of the agents .
1-2:This representation scheme captures characteristics of the interactions among the agents in a natural and concise manner .
1-3:We also develop efficient algorithms for two of the most important solution concepts, the Shapley value and the core, under this representation .
1-4:The Shapley value can be computed in time linear in the size of the input .
1-5:The emptiness of the core can be determined in time exponential only in the treewidth of a graphical interpretation of our representation .
1-6:I.2.11 [Distributed Artificial Intelligence]: Multiagent .
2 INTRODUCTION :
2-1:Agents can often benefit by coordinating their actions .
2-2:Coalitional games capture these opportunities of coordination by explicitly modeling the ability of the agents to take joint actions as primitives .
2-3:As an abstraction, coalitional games assign a payoff to each group of agents in the game .
2-4:This payoff is intended to reflect the payoff the group of agents can secure for themselves regardless of the actions of the agents not in the group .
2-5:These choices of primitives are in contrast to those of non cooperative games, of which agents are modeled independently, and their payoffs depend critically on the actions chosen by the other agents .
2-6:1.1 Coalitional Games and E Commerce Coalitional games have appeared in the context of e commerce .
2-7:In [7], Kleinberg et al .
2-8:use coalitional games to study recommendation systems .
2-9:In their model, each individual knows about a certain set of items, is interested in learning about all items, and benefits from finding out about them .
2-10:The payoffs to groups of agents are the total number of distinct items known by its members .
2-11:Given this coalitional game setting, Kleinberg et al .
2-12:compute the value of the private information of the agents is worth to the system using the solution concept of the Shapley value (definition can be found in section 2) .
2-13:These values can then be used to determine how much each agent should receive for participating in the system .
2-14:As another example, consider the economics behind supply chain formation .
2-15:The increased use of the Internet as a medium for conducting business has decreased the costs for companies to coordinate their actions, and therefore coalitional game is a good model for studying the supply chain problem .
2-16:Suppose that each manufacturer purchases his raw materials from some set of suppliers, and that the suppliers offer higher discount with more purchases .
2-17:The decrease in communication costs will let manufacturers find others interested in the same set of suppliers cheaper, and facilitates formation of coalitions to bargain with the suppliers .
2-18:Depending on the set of suppliers and how much from each supplier each coalition purchases, we can assign payoffs to the coalitions depending on the discount it receives .
2-19:The resulting game can be analyzed using coalitional game theory, and we can answer questions such as the stability of coalitions, and how to fairly divide the benefits among the participating manufacturers .
2-20:A similar problem, combinatorial coalition formation, has previously been studied in [8] .
2-21:1.2 Evaluation Criteria for Coalitional Game Representation To capture the coalitional games described above and perform computations on them, we must first find a representation for these games .
2-22:The na¨ıve solution is to enumerate the payoffs to each set of agents, therefore requiring space 193 exponential in the number of agents in the game .
2-23:For the two applications described, the number of agents in the system can easily exceed a hundred; this na¨ıve approach will not be scalable to such problems .
2-24:Therefore, it is critical to find good representation schemes for coalitional games .
2-25:We believe that the quality of a representation scheme should be evaluated by four criteria .
2-26:Expressivity: the breadth of the class of coalitional games covered by the representation .
2-27:Conciseness: the space requirement of the representation .
2-28:Efficiency: the efficiency of the algorithms we can develop for the representation .
2-29:Simplicity: the ease of use of the representation by users of the system .
2-30:The ideal representation should be fully expressive, i.e., it should be able to represent any coalitional games, use as little space as possible, have efficient algorithms for computation, and be easy to use .
2-31:The goal of this paper is to develop a representation scheme that has properties close to the ideal representation .
2-32:Unfortunately, given that the number of degrees of freedom of coalitional games is O(2n ), not all games can be represented concisely using a single scheme due to information theoretic constraints .
2-33:For any given class of games, one may be able to develop a representation scheme that is tailored and more compact than a general scheme .
2-34:For example, for the recommendation system game, a highly compact representation would be one that simply states which agents know of which products, and let the algorithms that operate on the representation to compute the values of coalitions appropriately .
2-35:For some problems, however, there may not be efficient algorithms for customized representations .
2-36:By having a general representation and efficient algorithms that go with it, the representation will be useful as a prototyping tool for studying new economic situations .
2-37:1.3 Previous Work The question of coalitional game representation has only been sparsely explored in the past [2, 3, 4] .
2-38:In [4], Deng and Papadimitriou focused on the complexity of different solution concepts on coalitional games defined on graphs .
2-39:While the representation is compact, it is not fully expressive .
2-40:In [2], Conitzer and Sandholm looked into the problem of determining the emptiness of the core in superadditive games .
2-41:They developed a compact representation scheme for such games, but again the representation is not fully expressive either .
2-42:In [3], Conitzer and Sandholm developed a fully expressive representation scheme based on decomposition .
2-43:Our work extends and generalizes the representation schemes in [3, 4] through decomposing the game into a set of rules that assign marginal contributions to groups of agents .
2-44:We will give a more detailed review of these papers in section 2.2 after covering the technical background .
2-45:1.4 Summary of Our Contributions • We develop the marginal contribution networks representation, a fully expressive representation scheme whose size scales according to the complexity of the interactions among the agents .
2-46:We believe that the representation is also simple and intuitive .
2-47:• We develop an algorithm for computing the Shapley value of coalitional games under this representation that runs in time linear in the size of the input .
2-48:• Under the graphical interpretation of the representation, we develop an algorithm for determining the whether a payoff vector is in the core and the emptiness of the core in time exponential only in the treewidth of the graph. .
3 PRELIMINARIES :
3-1:In this section, we will briefly review the basics of coalitional game theory and its two primary solution concepts, the Shapley value and the core.1 We will also review previous work on coalitional game representation in more detail .
3-2:Throughout this paper, we will assume that the payoff to a group of agents can be freely distributed among its members .
3-3:This assumption is often known as the transferable utility assumption .
3-4:2.1 Technical Background We can represent a coalition game with transferable utility by the pair N, v , where • N is the set of agents; and • v : 2N → R is a function that maps each group of agents S ⊆ N to a real valued payoff .
3-5:This representation is known as the characteristic form .
3-6:As there are exponentially many subsets, it will take space exponential in the number of agents to describe a coalitional game .
3-7:An outcome in a coalitional game specifies the utilities the agents receive .
3-8:A solution concept assigns to each coalitional game a set of reasonable outcomes .
3-9:Different solution concepts attempt to capture in some way outcomes that are stable and or fair .
3-10:Two of the best known solution concepts are the Shapley value and the core .
3-11:The Shapley value is a normative solution concept .
3-12:It prescribes a fair way to divide the gains from cooperation when the grand coalition (i.e., N) is formed .
3-13:The division of payoff to agent i is the average marginal contribution of agent i over all possible permutations of the agents .
3-14:Formally, let φi(v) denote the Shapley value of i under characteristic function v, then2 φi(v) = S⊂N s!(n − s − 1)! n! (v(S ∪ {i}) − v(S)) (1) The Shapley value is a solution concept that satisfies many nice properties, and has been studied extensively in the economic and game theoretic literature .
3-15:It has a very useful axiomatic characterization .
3-16:Efficiency A total of v(N) is distributed to the agents, i.e., i∈N φi(v) = v(N) .
3-17:Symmetry If agents i and j are interchangeable, then φi(v) = φj(v) .
3-18:1 The materials and terminology are based on the textbooks by Mas Colell et al .
3-19:[9] and Osborne and Rubinstein [11] .
3-20:2 As a notational convenience, we will use the lower case letter to represent the cardinality of a set denoted by the corresponding upper case letter .
3-21:194 Dummy If agent i is a dummy player, i.e., his marginal contribution to all groups S are the same, φi(v) = v({i}) .
3-22:Additivity For any two coalitional games v and w defined over the same set of agents N, φi(v + w) = φi(v) + φi(w) for all i ∈ N, where the game v + w is defined as (v + w)(S) = v(S) + w(S) for all S ⊆ N .
3-23:We will refer to these axioms later in our proof of correctness of the algorithm for computing the Shapley value under our representation in section 4 .
3-24:The core is another major solution concept for coalitional games .
3-25:It is a descriptive solution concept that focuses on outcomes that are stable .
3-26:Stability under core means that no set of players can jointly deviate to improve their payoffs .
3-27:Formally, let x(S) denote i∈S xi .
3-28:An outcome x ∈ Rn is in the core if ∀S ⊆ N x(S) ≥ v(S) (2) The core was one of the first proposed solution concepts for coalitional games, and had been studied in detail .
3-29:An important question for a given coalitional game is whether the core is empty .
3-30:In other words, whether there is any outcome that is stable relative to group deviation .
3-31:For a game to have a non empty core, it must satisfy the property of balancedness, defined as follows .
3-32:Let 1S ∈ Rn denote the characteristic vector of S given by (1S)i = 1 if i ∈ S 0 otherwise Let (λS)S⊆N be a set of weights such that each λS is in the range between 0 and 1 .
3-33:This set of weights, (λS)S⊆N , is a balanced collection if for all i ∈ N, S⊆N λS(1S)i = 1 A game is balanced if for all balanced collections of weights, S⊆N λSv(S) ≤ v(N) (3) By the Bondereva Shapley theorem, the core of a coalitional game is non empty if and only if the game is balanced .
3-34:Therefore, we can use linear programming to determine whether the core of a game is empty .
3-35:maximize λ∈R2n S⊆N λSv(S) subject to S⊆N λS1S = 1 ∀i ∈ N λS ≥ 0 ∀S ⊆ N (4) If the optimal value of (4) is greater than the value of the grand coalition, then the core is empty .
3-36:Unfortunately, this program has an exponential number of variables in the number of players in the game, and hence an algorithm that operates directly on this program would be infeasible in practice .
3-37:In section 5.4, we will describe an algorithm that answers the question of emptiness of core that works on the dual of this program instead .
3-38:2.2 Previous Work Revisited Deng and Papadimitriou looked into the complexity of various solution concepts on coalitional games played on weighted graphs in [4] .
3-39:In their representation, the set of agents are the nodes of the graph, and the value of a set of agents S is the sum of the weights of the edges spanned by them .
3-40:Notice that this representation is concise since the space required to specify such a game is O(n2 In this section, we will describe the Marginal Contribution Networks representation scheme .
3-41:We will show that the idea is flexible, and we can easily extend it to increase its conciseness .
3-42:We will also show how we can use this scheme to represent the recommendation game from the introduction .
3-43:Finally, we will show that this scheme is fully expressive, and generalizes the representation schemes in [3, 4] .
3-44:3.1 Rules and MarginalContributionNetworks The basic idea behind marginal contribution networks (MC nets) is to represent coalitional games using sets of rules .
3-45:The rules in MC nets have the following syntactic 195 form: Pattern → value A rule is said to apply to a group of agents S if S meets the requirement of the Pattern .
3-46:In the basic scheme, these patterns are conjunctions of agents, and S meets the requirement of the given pattern if S is a superset of it .
3-47:The value of a group of agents is defined to be the sum over the values of all rules that apply to the group .
3-48:For example, if the set of rules are {a ∧ b} → 5 {b} → 2 then v({a}) = 0, v({b}) = 2, and v({a, b}) = 5 + 2 = 7 .
3-49:MC nets is a very flexible representation scheme, and can be extended in different ways .
3-50:One simple way to extend it and increase its conciseness is to allow a wider class of patterns in the rules .
3-51:A pattern that we will use throughout the remainder of the paper is one that applies only in the absence of certain agents .
3-52:This is useful for expressing concepts such as substitutability or default values .
3-53:Formally, we express such patterns by {p1 ∧ p2 ∧ .
3-54:.
3-55:.
3-56:∧ pm ∧ ¬n1 ∧ ¬n2 ∧ .
3-57:.
3-58:.
3-59:∧ ¬nn} which has the semantics that such rule will apply to a group S only if {pi}m i=1 ∈ S and {nj}n j=1 ∈ S .
3-60:We will call the {pi}m i=1 in the above pattern the positive literals, and {nj}n j=1 the negative literals .
3-61:Note that if the pattern of a rule consists solely of negative literals, we will consider that the empty set of agents will also satisfy such pattern, and hence v(∅) may be non zero in the presence of negative literals .
3-62:To demonstrate the increase in conciseness of representation, consider the unit game described in section 2.2 .
3-63:To represent such a game without using negative literals, we will need 2n rules for n players: we need a rule of value 1 for each individual agent, a rule of value −1 for each pair of agents to counter the double counting, a rule of value 1 for each triplet of agents, etc., similar to the inclusion exclusion principle .
3-64:On the other hand, using negative literals, we only need n rules: value 1 for the first agent, value 1 for the second agent in the absence of the first agent, value 1 for the third agent in the absence of the first two agents, etc .
3-65:The representational savings can be exponential in the number of agents .
3-66:Given a game represented as a MC net, we can interpret the set of rules that make up the game as a graph .
3-67:We call this graph the agent graph .
3-68:The nodes in the graph will represent the agents in the game, and for each rule in the MCnet, we connect all the agents in the rule together and assign a value to the clique formed by the set of agents .
3-69:Notice that to accommodate negative literals, we will need to annotate the clique appropriately .
3-70:This alternative view of MC nets will be useful in our algorithm for Core Membership in section 5 .
3-71:We would like to end our discussion of the representation scheme by mentioning a trade off between the expressiveness of patterns and the space required to represent them .
3-72:To represent a coalitional game in characteristic form, one would need to specify all 2n − 1 values .
3-73:There is no overhead on top of that since there is a natural ordering of the groups .
3-74:For MC nets, however, specification of the rules requires specifying both the patterns and the values .
3-75:The patterns, if not represented compactly, may end up overwhelming the savings from having fewer values to specify .
3-76:The space required for the patterns also leads to a tradeoff between the expressiveness of the allowed patterns and the simplicity of representing them .
3-77:However, we believe that for most naturally arising games, there should be sufficient structure in the problem such that our representation achieves a net saving over the characteristic form .
3-78:3.2 Example: Recommendation Game As an example, we will use MC net to represent the recommendation game discussed in the introduction .
3-79:For each product, as the benefit of knowing about the product will count only once for each group, we need to capture substitutability among the agents .
3-80:This can be captured by a scaled unit game .
3-81:Suppose the value of the knowledge about product i is vi, and there are ni agents, denoted by {xj i }, who know about the product, the game for product i can then be represented as the following rules: {x1 i } → vi {x2 i ∧ ¬x1 i } → vi .. .
3-82:{xni i ∧ ¬xni−1 i ∧ · · · ∧ ¬x1 i } → vi The entire game can then be built up from the sets of rules of each product .
3-83:The space requirement will be O(mn∗ ), where m is the number of products in the system, and n∗ is the maximum number of agents who knows of the same product .
3-84:3.3 Representation Power We will discuss the expressiveness and conciseness of our representation scheme and compare it with the previous works in this subsection .
3-85:Proposition 1 .
3-86:Marginal contribution networks constitute a fully expressive representation scheme .
3-87:Proof .
3-88:Consider an arbitrary coalitional game N, v in characteristic form representation .
3-89:We can construct a set of rules to describe this game by starting from the singleton sets and building up the set of rules .
3-90:For any singleton set {i}, we create a rule {i} → v(i) .
3-91:For any pair of agents {i, j}, we create a rule {i ∧ j} → v({i, j}) − v({i}) − v({j} .
3-92:We can continue to build up rules in a manner similar to the inclusion exclusion principle .
3-93:Since the game is arbitrary, MC nets are fully expressive .
3-94:Using the construction outlined in the proof, we can show that our representation scheme can simulate the multi issue representation scheme of [3] in almost the same amount of space .
3-95:Proposition 2 .
3-96:Marginal contribution networks use at most a linear factor (in the number of agents) more space than multi issue representation for any game .
3-97:Proof .
3-98:Given a game in multi issue representation, we start by describing each of the subgames, which are represented in characteristic form in [3], with a set of rules .
3-99:196 We then build up the grand game by including all the rules from the subgames .
3-100:Note that our representation may require a space larger by a linear factor due to the need to describe the patterns for each rule .
3-101:On the other hand, our approach may have fewer than exponential number of rules for each subgame, depending on the structure of these subgames, and therefore may be more concise than multi issue representation .
3-102:On the other hand, there are games that require exponentially more space to represent under the multi issue scheme compared to our scheme .
3-103:Proposition 3 .
3-104:Marginal contribution networks are exponentially more concise than multi issue representation for certain games .
3-105:Proof .
3-106:Consider a unit game over all the agents N .
3-107:As explained in 3.1, this game can be represented in linear space using MC nets with negative literals .
3-108:However, as there is no decomposition of this game into smaller subgames, it will require space O(2n ) to represent this game under the multiissue representation .
3-109:Under the agent graph interpretation of MC nets, we can see that MC nets is a generalization of the graphical representation in [4], namely from weighted graphs to weighted hypergraphs .
3-110:Proposition 4 .
3-111:Marginal contribution networks can represent any games in graphical form (under [4]) in the same amount of space .
3-112:Proof .
3-113:Given a game in graphical form, G, for each edge (i, j) with weight wij in the graph, we create a rule {i, j} → wij .
3-114:Clearly this takes exactly the same space as the size of G, and by the additive semantics of the rules, it represents the same game as G. .
4 COMPUTING THE SHAPLEY VALUE :
4-1:Given a MC net, we have a simple algorithm to compute the Shapley value of the game .
4-2:Considering each rule as a separate game, we start by computing the Shapley value of the agents for each rule .
4-3:For each agent, we then sum up the Shapley values of that agent over all the rules .
4-4:We first show that this final summing process correctly computes the Shapley value of the agents .
4-5:Proposition 5 .
4-6:The Shapley value of an agent in a marginal contribution network is equal to the sum of the Shapley values of that agent over each rule .
4-7:Proof .
4-8:For any group S, under the MC nets representation, v(S) is defined to be the sum over the values of all the rules that apply to S .
4-9:Therefore, considering each rule as a game, by the axiom discussed in section 2, the Shapley value of the game created from aggregating all the rules is equal to the sum of the Shapley values over the rules .
4-10:The remaining question is how to compute the Shapley values of the rules .
4-11:We can separate the analysis into two cases, one for rules with only positive literals and one for rules with mixed literals .
4-12:For rules that have only positive literals, the Shapley value of the agents is v m, where v is the value of the rule and m is the number of agents in the rule .
4-13:This is a direct consequence of the axiom of the Shapley value, as the agents in a rule are indistinguishable from each other .
4-14:For rules that have both positive and negative literals, we can consider the positive and the negative literals separately .
4-15:For a given positive literal i, the rule will apply only if i occurs in a given permutation after the rest of the positive literals but before any of the negative literals .
4-16:Formally, let φi denote the Shapley value of i, p denote the cardinality of the positive set, and n denote the cardinality of the negative set, then φi = (p − 1)!n! (p + n)! v = v p p+n n For a given negative literal j, j will be responsible for cancelling the application of the rule if all positive literals come before the negative literals in the ordering, and j is the first among the negative literals .
4-17:Therefore, φj = p!(n − 1)! (p + n)! (−v) = −v n p+n p By the axiom, all positive literals will have the value of φi and all negative literals will have the value of φj .
4-18:Note that the sum over all agents in rules with mixed literals is 0 .
4-19:This is to be expected as these rules contribute 0 to the grand coalition .
4-20:The fact that these rules have no effect on the grand coalition may appear odd at first .
4-21:But this is because the presence of such rules is to define the values of coalitions smaller than the grand coalition .
4-22:In terms of computational complexity, given that the Shapley value of any agent in a given rule can be computed in time linear in the pattern of the rule, the total running time of the algorithm for computing the Shapley value of the game is linear in the size of the input. .
5 ANSWERING CORE RELATED QUESTIONS :
5-1:QUESTIONS There are a few different but related computational problems associated with the solution concept of the core .
5-2:We will focus on the following two problems: Definition 1 .
5-3:(Core Membership) Given a coalitional game and a payoff vector x, determine if x is in the core .
5-4:Definition 2 .
5-5:(Core Non Emptiness) Given a coalitional game, determine if the core is non empty .
5-6:In the rest of the section, we will first show that these two problems are coNP complete and coNP hard respectively, and discuss some complexity considerations about these problems .
5-7:We will then review the main ideas of tree decomposition as it will be used extensively in our algorithm for Core Membership .
5-8:Next, we will present the algorithm for Core Membership, and show that the algorithm runs in polynomial time for graphs of bounded treewidth .
5-9:We end by extending this algorithm to answer the question of CoreNon Emptiness in polynomial time for graphs of bounded treewidth .
5-10:5.1 Computational Complexity The hardness of Core Membership and Core NonEmptiness follows directly from the hardness results of games over weighted graphs in [4] .
5-11:197 Proposition 6 .
5-12:Core Membership for games represented as marginal contribution networks is coNP complete .
5-13:Proof .
5-14:Core Membership in MC nets is in the class of coNP since any set of agents S of which v(S) > x(S) will serve as a certificate to show that x does not belong to the core .
5-15:As for its hardness, given any instance of CoreMembership for a game in graphical form of [4], we can encode the game in exactly the same space using MC net due to Proposition 4 .
5-16:Since Core Membership for games in graphical form is coNP complete, Core Membership in MC nets is coNP hard .
5-17:Proposition 7 .
5-18:Core Non Emptiness for games represented as marginal contribution networks is coNP hard .
5-19:Proof .
5-20:The same argument for hardness between games in graphical frm and MC nets holds for the problem of CoreNon Emptiness .
5-21:We do not know of a certificate to show that Core NonEmptiness is in the class of coNP as of now .
5-22:Note that the obvious certificate of a balanced set of weights based on the Bondereva Shapley theorem is exponential in size .
5-23:In [4], Deng and Papadimitriou showed the coNP completeness of Core Non Emptiness via a combinatorial characterization, namely that the core is non empty if and only if there is no negative cut in the graph .
5-24:In MC nets, however, there need not be a negative hypercut in the graph for the core to be empty, as demonstrated by the following game (N = {1, 2, 3, 4}): v(S) =    1 if S = {1, 2, 3, 4} 3 4 if S = {1, 2}, {1, 3}, {1, 4}, or {2, 3, 4} 0 otherwise (5) Applying the Bondereva Shapley theorem, if we let λ12 = λ13 = λ14 = 1 3, and λ234 = 2 3, this set of weights demonstrates that the game is not balanced, and hence the core is empty .
5-25:On the other hand, this game can be represented with MC nets as follows (weights on hyperedges): w({1, 2}) = w({1, 3}) = w({1, 4}) = 3 4 w({1, 2, 3}) = w({1, 2, 4}) = w({1, 3, 4}) = −6 4 w({2, 3, 4}) = 3 4 w({1, 2, 3, 4}) = 10 4 No matter how the set is partitioned, the sum over the weights of the hyperedges in the cut is always non negative .
5-26:To overcome the computational hardness of these problems, we have developed algorithms that are based on tree decomposition techniques .
5-27:For Core Membership, our algorithm runs in time exponential only in the treewidth of the agent graph .
5-28:Thus, for graphs of small treewidth, such as trees, we have a tractable solution to determine if a payoff vector is in the core .
5-29:By using this procedure as a separation oracle, i.e., a procedure for returning the inequality violated by a candidate solution, to solving a linear program that is related to Core Non Emptiness using the ellipsoid method, we can obtain a polynomial time algorithm for Core Non Emptiness for graphs of bounded treewidth .
5-30:5.2 Review of Tree Decomposition As our algorithm for Core Membership relies heavily on tree decomposition, we will first briefly review the main ideas in tree decomposition and treewidth.3 Definition 3 .
5-31:A tree decomposition of a graph G = (V, E) is a pair (X, T), where T = (I, F) is a tree and X = {Xi | i ∈ I} is a family of subsets of V , one for each node of T, such that • i∈I Xi = V ; • For all edges (v, w) ∈ E, there exists an i ∈ I with v ∈ Xi and w ∈ Xi; and • (Running Intersection Property) For all i, j, k ∈ I: if j is on the path from i to k in T, then Xi ∩ Xk ⊆ Xj .
5-32:The treewidth of a tree decomposition is defined as the maximum cardinality over all sets in X, less one .
5-33:The treewidth of a graph is defined as the minimum treewidth over all tree decompositions of the graph .
5-34:Given a tree decomposition, we can convert it into a nice tree decomposition of the same treewidth, and of size linear in that of T .
5-35:Definition 4 .
5-36:A tree decomposition T is nice if T is rooted and has four types of nodes: Leaf nodes i are leaves of T with |Xi| = 1 .
5-37:Introduce nodes i have one child j such that Xi = Xj ∪ {v} of some v ∈ V .
5-38:Forget nodes i have one child j such that Xi = Xj \ {v} for some v ∈ Xj .
5-39:Join nodes i have two children j and k with Xi = Xj = Xk .
5-40:An example of a (partial) nice tree decomposition together with a classification of the different types of nodes is in Figure 1 .
5-41:In the following section, we will refer to nodes in the tree decomposition as nodes, and nodes in the agent graph as agents .
5-42:5.3 Algorithm for Core Membership Our algorithm for Core Membership takes as an input a nice tree decomposition T of the agent graph and a payoff vector x .
5-43:By definition, if x belongs to the core, then for all groups S ⊆ N, x(S) ≥ v(S) .
5-44:Therefore, the difference x(S)−v(S) measures how close the group S is to violating the core condition .
5-45:We call this difference the excess of group S .
5-46:Definition 5 .
5-47:The excess of a coalition S, e(S), is defined as x(S) − v(S) .
5-48:A brute force approach to determine if a payoff vector belongs to the core will have to check that the excesses of all groups are non negative .
5-49:However, this approach ignores the structure in the agent graph that will allow an algorithm to infer that certain groups have non negative excesses due to 3 This is based largely on the materials from a survey paper by Bodlaender [1] .
5-50:198 i j k l nm Introduce Node: Xj = {1, 4} Xk = {1, 4} Forget Node: Xl = {1, 4} Introduce Node: Xm = {1, 2, 4} Xn = {4} Leaf Node: Join Node: Xi = {1, 3, 4} Join Node: Figure 1: Example of a (partial) nice tree decomposition the excesses computed elsewhere in the graph .
5-51:Tree decomposition is the key to take advantage of such inferences in a structured way .
5-52:For now, let us focus on rules with positive literals .
5-53:Suppose we have already checked that the excesses of all sets R ⊆ U are non negative, and we would like to check if the addition of an agent i to the set U will create a group with negative excess .
5-54:A na¨ıve solution will be to compute the excesses of all sets that include i .
5-55:The excess of the group (R ∪ {i}) for any group R can be computed as follows e(R ∪ {i}) = e(R) + xi − v(c) (6) where c is the cut between R and i, and v(c) is the sum of the weights of the edges in the cut .
5-56:However, suppose that from the tree decomposition, we know that i is only connected to a subset of U, say S, which we will call the entry set to U .
5-57:Ideally, because i does not share any edges with members of ¯U = (U \ S), we would hope that an algorithm can take advantage of this structure by checking only sets that are subsets of (S ∪ {i}) .
5-58:This computational saving may be possible since (xi −v(c)) in the update equation of (6) does not depend on ¯U .
5-59:However, we cannot simply ignore ¯U as members of ¯U may still influence the excesses of groups that include agent i through group e(T) < e(S), then even when e(S ∪ {i}) has non negative excess, e(T ∪{i}) may have negative excess .
5-60:In other words, the excess available at S may have been drained away due to T .
5-61:This motivates the definition of the reserve of a group .
5-62:Definition 6 .
5-63:The reserve of a coalition S relative to a coalition U is the minimum excess over all coalitions between S and U, i.e., all T : S ⊆ T ⊆ U .
5-64:We denote this value by r(S, U) .
5-65:We will refer to the group T that has the minimum excess as arg r(S, U) .
5-66:We will also call U the limiting set of the reserve and S the base set of the reserve .
5-67:Our algorithm works by keeping track of the reserves of all non empty subsets that can be formed by the agents of a node at each of the nodes of the tree decomposition .
5-68:Starting from the leaves of the tree and working towards the root, at each node i, our algorithm computes the reserves of all groups S ⊆ Xi, limited by the set of agents in the subtree rooted at i, Ti, except those in (Xi\S) .
5-69:The agents in (Xi\S) are excluded to ensure that S is an entry set .
5-70:Specifically, S is the entry set to ((Ti \ Xi) ∪ S) .
5-71:To accomodate for negative literals, we will need to make two adjustments .
5-72:Firstly, the cut between an agent m and a set S at node i now refers to the cut among agent m, set S, and set ¬(Xi \ S), and its value must be computed accordingly .
5-73:Also, when an agent m is introduced to a group at an introduce node, we will also need to consider the change in the reserves of groups that do not include m due to possible cut involving ¬m and the group .
5-74:As an example of the reserve values we keep track of at a tree node, consider node i of the tree in Figure 1 .
5-75:At node i, we will keep track of the following: r({1}, {1, 2, .
5-76:.
5-77:.}) r({3}, {2, 3, .
5-78:.
5-79:.}) r({4}, {2, 4, .
5-80:.
5-81:.}) r({1, 3}, {1, 2, 3, .
5-82:.
5-83:.}) r({1, 4}, {1, 2, 4, .
5-84:.
5-85:.}) r({3, 4}, {2, 3, 4, .
5-86:.
5-87:.}) r({1, 3, 4}, {1, 2, 3, 4, .
5-88:.
5-89:.} where the dots .
5-90:.
5-91:.
5-92:refer to the agents rooted under node m .
5-93:For notational use, we will use ri(S) to denote r(S, U) at node i where U is the set of agents in the subtree rooted at node i excluding agents in (Xi \ S) .
5-94:We sometimes refer to these values as the r values of a node .
5-95:The details of the r value computations are in Algorithm 1 .
5-96:To determine if the payoff vector x is in the core, during the r value computation at each node, we can check if all of the r values are non negative .
5-97:If this is so for all nodes in the tree, the payoff vector x is in the core .
5-98:The correctness of the algorithm is due to the following proposition .
5-99:Proposition 8 .
5-100:The payoff vector x is not in the core if and only if the r values at some node i for some group S is negative .
5-101:Proof .
5-102:(⇐) If the reserve at some node i for some group S is negative, then there exists a coalition T for which e(T) = x(T) − v(T) < 0, hence x is not in the core .
5-103:(⇒) Suppose x is not in the core, then there exists some group R∗ such that e(R∗ ) < 0 .
5-104:Let Xroot be the set of nodes at the root .
5-105:Consider any set S ∈ Xroot, rroot(S) will have the base set of S and the limiting set of ((N \ Xroot) ∪ S) .
5-106:The union over all of these ranges includes all sets U for which U ∩ Xroot = ∅ .
5-107:Therefore, if R∗ is not disjoint from Xroot, the r value for some group in the root is negative .
5-108:If R∗ is disjoint from U, consider the forest {Ti} resulting from removal of all tree nodes that include agents in Xroot .
5-109:199 Algorithm 1 Subprocedures for Core Membership Leaf Node(i) 1: ri(Xi) ← e(Xi) Introduce Node(i) 2: j ← child of i 3: m ← Xi \ Xj {the introduced node} 4: for all S ⊆ Xj, S = ∅ do 5: C ← all hyperedges in the cut of m, S, and ¬(Xi \ S) 6: ri(S ∪ {x}) ← rj(S) + xm − v(C) 7: C ← all hyperedges in the cut of ¬m, S, and ¬(Xi \S) 8: ri(S) ← rj(S) − v(C) 9: end for 10: r({m}) ← e({m}) Forget Node(i) 11: j ← child of i 12: m ← Xj \ Xi {the forgotten node} 13: for all S ⊆ Xi, S = ∅ do 14: ri(S) = min(rj(S), rj(S ∪ {m})) 15: end for Join Node(i) 16: {j, k} ← {left, right} child of i 17: for all S ⊆ Xi, S = ∅ do 18: ri(S) ← rj(S) + rk(S) − e(S) 19: end for By the running intersection property, the sets of nodes in the trees Ti"s are disjoint .
5-110:Thus, if the set R∗ = i Si for some Si ∈ Ti, e(R∗ ) = i e(Si) < 0 implies some group S∗ i has negative excess as well .
5-111:Therefore, we only need to check the r values of the nodes on the individual trees in the forest .
5-112:But for each tree in the forest, we can apply the same argument restricted to the agents in the tree .
5-113:In the base case, we have the leaf nodes of the original tree decomposition, say, for agent i .
5-114:If R∗ = {i}, then r({i}) = e({i}) < 0 .
5-115:Therefore, by induction, if e(R∗ ) < 0, some reserve at some node would be negative .
5-116:We will next explain the intuition behind the correctness of the computations for the r values in the tree nodes .
5-117:A detailed proof of correctness of these computations can be found in the appendix under Lemmas 1 and 2 .
5-118:Proposition 9 .
5-119:The procedure in Algorithm 1 correctly compute the r values at each of the tree nodes .
5-120:Proof .
5-121:(Sketch) We can perform a case analysis over the four types of tree nodes in a nice tree decomposition .
5-122:Leaf nodes (i) The only reserve value to be computed is ri(Xi), which equals r(Xi, Xi), and therefore it is just the excess of group Xi .
5-123:Forget nodes (i with child j) Let m be the forgotten node .
5-124:For any subset S ⊆ Xi, arg ri(S) must be chosen between the groups of S and S ∪ {m}, and hence we choose between the lower of the two from the r values at node j .
5-125:Introduce nodes (i with child j) Let m be the introduced node .
5-126:For any subset T ⊆ Xi that includes m, let S denote (T \ {m}) .
5-127:By the running intersection property, there are no rules that involve m and agents of the subtree rooted at node i except those involving m and agents in Xi .
5-128:As both the base set and the limiting set of the r values of node j and node i differ by {m}, for any group V that lies between the base set and the limiting set of node i, the excess of group V will differ by a constant amount from the corresponding group (V \ {m}) at node j .
5-129:Therefore, the set arg ri(T) equals the set arg rj(S) ∪ {m}, and ri(T) = rj(S) + xm − v(cut), where v(cut) is the value of the rules in the cut between m and S .
5-130:For any subset S ⊂ Xi that does not include m, we need to consider the values of rules that include ¬m as a literal in the pattern .
5-131:Also, when computing the reserve, the payoff xm will not contribute to group S .
5-132:Therefore, together with the running intersection property as argued above, we can show that ri(S) = rj(S) − v(cut) .
5-133:Join nodes (i with left child j and right child k) For any given set S ⊆ Xi, consider the r values of that set at j and k .
5-134:If arg rj(S) or arg rk(S) includes agents not in S, then argrj(S) and argrk(S) will be disjoint from each other due to the running intersection property .
5-135:Therefore, we can decompose arg ri(S) into three sets, (arg rj(S) \ S) on the left, S in the middle, and (arg rk(S) \ S) on the right .
5-136:The reserve rj(S) will cover the excesses on the left and in the middle, whereas the reserve rk(S) will cover those on the right and in the middle, and so the excesses in the middle is double counted .
5-137:We adjust for the double counting by subtracting the excesses in the middle from the sum of the two reserves rj(S) and rk(S) .
5-138:Finally, note that each step in the computation of the rvalues of each node i takes time at most exponential in the size of Xi, hence the algorithm runs in time exponential only in the treewidth of the graph .
5-139:5.4 Algorithm for Core Non emptiness We can extend the algorithm for Core Membership into an algorithm for Core Non Emptiness .
5-140:As described in section 2, whether the core is empty can be checked using the optimization program based on the balancedness condition (3) .
5-141:Unfortunately, that program has an exponential number of variables .
5-142:On the other hand, the dual of the program has only n variables, and can be written as follows: minimize x∈Rn n i=1 xi subject to x(S) ≥ v(S), ∀S ⊆ N (7) By strong duality, optimal value of (7) is equal to optimal value of (4), the primal program described in section optimal value of (7) is greater than v(N), the core is empty .
5-143:We can solve the dual program using the ellipsoid method with Core Membership as a separation oracle, i.e., a procedure for returning a constraint that is violated .
5-144:Note that a simple extension to the Core Membership algorithm will allow us to keep track of the set T for which e(T) < 0 during the r values computation, and hence we can return the inequality about T as the constraint violated .
5-145:Therefore, Core Non Emptiness can run in time polynomial in the running time of Core Membership, which in turn runs in 200 time exponential only in the treewidth of the graph .
5-146:Note that when the core is not empty, this program will return an outcome in the core. .
6 CONCLUDING REMARKS :
6-1:We have developed a fully expressive representation scheme for coalitional games of which the size depends on the complexity of the interactions among the agents .
6-2:Our focus on general representation is in contrast to the approach taken in [3, 4] .
6-3:We have also developed an efficient algorithm for the computation of the Shapley values for this representation .
6-4:While Core Membership for MC nets is coNP complete, we have developed an algorithm for CoreMembership that runs in time exponential only in the treewidth of the agent graph .
6-5:We have also extended the algorithm to solve Core Non Emptiness .
6-6:Other than the algorithm for Core Non Emptiness in [4] under the restriction of non negative edge weights, and that in [2] for superadditive games when the value of the grand coalition is given, we are not aware of any explicit description of algorithms for core related problems in the literature .
6-7:The work in this paper is related to a number of areas in computer science, especially in artificial intelligence .
6-8:For example, the graphical interpretation of MC nets is closely related to Markov random fields (MRFs) of the Bayes nets community .
6-9:They both address the issue of of conciseness of representation by using the combinatorial structure of weighted hypergraphs .
6-10:In fact, Kearns et al .
6-11:first apply these idea to games theory by introducing a representation scheme derived from Bayes net to represent non cooperative games [6] .
6-12:The representational issues faced in coalitional games are closely related to the problem of expressing valuations in combinatorial auctions [5, 10] .
6-13:The OR bid language, for example, is strongly related to superadditivity .
6-14:The question of the representation power of different patterns is also related to Boolean expression complexity [12] .
6-15:We believe that with a better understanding of the relationships among these related areas, we may be able to develop more efficient representations and algorithms for coalitional games .
6-16:Finally, we would like to end with some ideas for extending the work in this paper .
6-17:One direction to increase the conciseness of MC nets is to allow the definition of equivalent classes of agents, similar to the idea of extending Bayes nets to probabilistic relational models .
6-18:The concept of symmetry is prevalent in games, and the use of classes of agents will allow us to capture symmetry naturally and concisely .
6-19:This will also address the problem of unpleasing assymetric representations of symmetric games in our representation .
6-20:Along the line of exploiting symmetry, as the agents within the same class are symmetric with respect to each other, we can extend the idea above by allowing functional description of marginal contributions .
6-21:More concretely, we can specify the value of a rule as dependent on the number of agents of each relevant class .
6-22:The use of functions will allow concise description of marginal diminishing returns (MDRs) .
6-23:Without the use of functions, the space needed to describe MDRs among n agents in MC nets is O(n) .
6-24:With the use of functions, the space required can be reduced to O(1) .
6-25:Another idea to extend MC nets is to augment the semantics to allow constructs that specify certain rules cannot be applied simultaneously .
6-26:This is useful in situations where a certain agent represents a type of exhaustible resource, and therefore rules that depend on the presence of the agent should not apply simultaneously .
6-27:For example, if agent i in the system stands for coal, we can either use it as fuel for a power plant or as input to a steel mill for making steel, but not for both at the same time .
6-28:Currently, to represent such situations, we have to specify rules to cancel out the effects of applications of different rules .
6-29:The augmented semantics can simplify the representation by specifying when rules cannot be applied together. .
7-1:The authors would like to thank Chris Luhrs, Bob McGrew, Eugene Nudelman, and Qixiang Sun for fruitful discussions, and the anonymous reviewers for their helpful comments on the paper.
8-1:H
8-2:L
8-3:Bodlaender
8-4:Treewidth: Algorithmic techniques and results
8-5:In Proc
8-6:22nd Symp
8-7:on Mathematical Foundation of Copmuter Science, pages 19 36
8-8:Springer Verlag LNCS 1295, 1997
8-9:V
8-10:Conitzer and T
8-11:Sandholm
8-12:Complexity of determining nonemptiness of the core
8-13:In Proc
8-14:18th Int
8-15:Joint Conf
8-16:on Artificial Intelligence, pages 613 618, 2003
8-17:V
8-18:Conitzer and T
8-19:Sandholm
8-20:Computing Shapley values, manipulating value division schemes, and checking core membership in multi issue domains
8-21:In Proc
8-22:19th Nat
8-23:Conf
8-24:on Artificial Intelligence, pages 219 225, 2004
8-25:X
8-26:Deng and C
8-27:H
8-28:Papadimitriou
8-29:On the complexity of cooperative solution concepts
8-30:Math
8-31:Oper
8-32:Res., 19:257 266, May 1994
8-33:Y
8-34:Fujishima, K
8-35:Leyton Brown, and Y
8-36:Shoham
8-37:Taming the computational complexity of combinatorial auctions: Optimal and approximate approaches
8-38:In Proc
8-39:16th Int
8-40:Joint Conf
8-41:on Artificial Intelligence, pages 548 553, 1999
8-42:M
8-43:Kearns, M
8-44:L
8-45:Littman, and S
8-46:Singh
8-47:Graphical models for game theory
8-48:In Proc
8-49:17th Conf
8-50:on Uncertainty in Artificial Intelligence, pages 253 260, 2001
8-51:J
8-52:Kleinberg, C
8-53:H
8-54:Papadimitriou, and P
8-55:Raghavan
8-56:On the value of private information
8-57:In Proc
8-58:8th Conf
8-59:on Theoretical Aspects of Rationality and Knowledge, pages 249 257, 2001
8-60:C
8-61:Li and K
8-62:Sycara
8-63:Algoirthms for combinatorial coalition formation and payoff division in an electronic marketplace
8-64:Technical report, Robotics Insititute, Carnegie Mellon University, November 2001
8-65:A
8-66:Mas Colell, M
8-67:D
8-68:Whinston, and J
8-69:R
8-70:Green
8-71:Microeconomic Theory
8-72:Oxford University Press, New York, 1995
8-73:N
8-74:Nisan
8-75:Bidding and allocation in combinatorial auctions
8-76:In Proc
8-77:2nd ACM Conf
8-78:on Electronic Commerce, pages 1 12, 2000
8-79:M
8-80:J
8-81:Osborne and A
8-82:Rubinstein
8-83:A Course in Game Theory
8-84:The MIT Press, Cambridge, Massachusetts, 1994
8-85:I
8-86:Wegener
8-87:The Complexity of Boolean Functions
8-88:John Wiley & Sons, New York, October 1987
8-89:201 APPENDIX We will formally show the correctness of the r value computation in Algorithm 1 of introduce nodes and join nodes
8-90:Lemma 1
8-91:The procedure for computing the r values of introduce nodes in Algorithm 1 is correct
8-92:Proof
8-93:Let node m be the newly introduced agent at i
8-94:Let U denote the set of agents in the subtree rooted at i
8-95:By the running intersection property, all interactions (the hyperedges) between m and U must be in node i
8-96:For all S ⊆ Xi : m ∈ S, let R denote (U \ Xi) ∪ S), and Q denote (R \ {m})
8-97:ri(S) = r(S, R) = min T :S⊆T ⊆R e(T) = min T :S⊆T ⊆R x(T) − v(T) = min T :S⊆T ⊆R x(T \ {m}) + xm − v(T \ {m}) − v(cut) = min T :S\{m}⊆T ⊆Q e(T ) + xm − v(cut) = rj(S) + xm − v(cut) The argument for sets S ⊆ Xi : m  ∈ S is symmetric except xm will not contribute to the reserve due to the absence of m
8-98:Lemma 2
8-99:The procedure for computing the r values of join nodes in Algorithm 1 is correct
8-100:Proof
8-101:Consider any set S ⊆ Xi
8-102:Let Uj denote the subtree rooted at the left child, Rj denote ((Uj \ Xj) ∪ S), and Qj denote (Uj \ Xj)
8-103:Let Uk, Rk, and Qk be defined analogously for the right child
8-104:Let R denote (U \ Xi) ∪ S)
8-105:ri(S) = r(S, R) = min T :S⊆T ⊆R x(T) − v(T) = min T :S⊆T ⊆R x(S) + x(T ∩ Qj) + x(T ∩ Qk) − v(S) − v(cut(S, T ∩ Qj) − v(cut(S, T ∩ Qk) = min T :S⊆T ⊆R x(T ∩ Qj) − v(cut(S, T ∩ Qj)) + min T :S⊆T ⊆R x(T ∩ Qk) − v(cut(S, T ∩ Qk)) + (x(S) − v(S)) (*) = min T :S⊆T ⊆R x(T ∩ Qj) + x(S) − v(cut(S, T ∩ Qj)) − v(S) + min T :S⊆T ⊆R x(T ∩ Qk) + x(S) − v(cut(S, T ∩ Qk)) − v(S) − (x(S) − v(S)) = min T :S⊆T ⊆R e(T ∩ Rj) + min T :S⊆T ⊆R e(T ∩ Rk) − e(S) = min T :S⊆T ⊆Rj e(T ) + min T :S⊆T ⊆Rk e(T ) − e(S) = rj(S) + rk(S) − e(S) where (*) is true as T ∩ Qj and T ∩ Qk are disjoint due to the running intersection property of tree decomposition, and hence the minimum of the sum can be decomposed into the sum of the minima
8-106:202
picture:
