A Q-decomposition and Bounded RTDP Approach to 
content:
1 ABSTRACT :
1-1:This paper contributes to solve effectively stochastic resource allocation problems known to be NP Complete .
1-2:To address this complex resource management problem, a Qdecomposition approach is proposed when the resources which are already shared among the agents, but the actions made by an agent may influence the reward obtained by at least another agent .
1-3:The Q decomposition allows to coordinate these reward separated agents and thus permits to reduce the set of states and actions to consider .
1-4:On the other hand, when the resources are available to all agents, no Qdecomposition is possible and we use heuristic search .
1-5:In particular, the bounded Real time Dynamic Programming (bounded rtdp) is used .
1-6:Bounded rtdp concentrates the planning on significant states only and prunes the action space .
1-7:The pruning is accomplished by proposing tight upper and lower bounds on the value function .
1-8:I.2.8 [Artificial Intelligence]: Problem Solving, Control .
2 INTRODUCTION :
2-1:This paper aims to contribute to solve complex stochastic resource allocation problems .
2-2:In general, resource allocation problems are known to be NP Complete [12] .
2-3:In such problems, a scheduling process suggests the action (i.e .
2-4:resources to allocate) to undertake to accomplish certain tasks, according to the perfectly observable state of the environment .
2-5:When executing an action to realize a set of tasks, the stochastic nature of the problem induces probabilities on the next visited state .
2-6:In general, the number of states is the combination of all possible specific states of each task and available resources .
2-7:In this case, the number of possible actions in a state is the combination of each individual possible resource assignment to the tasks .
2-8:The very high number of states and actions in this type of problem makes it very complex .
2-9:There can be many types of resource allocation problems .
2-10:Firstly, if the resources are already shared among the agents, and the actions made by an agent does not influence the state of another agent, the globally optimal policy can be computed by planning separately for each agent .
2-11:A second type of resource allocation problem is where the resources are already shared among the agents, but the actions made by an agent may influence the reward obtained by at least another agent .
2-12:To solve this problem efficiently, we adapt Qdecomposition proposed by Russell and Zimdars [9] .
2-13:In our Q decomposition approach, a planning agent manages each task and all agents have to share the limited resources .
2-14:The planning process starts with the initial state s0 .
2-15:In s0, each agent computes their respective Q value .
2-16:Then, the planning agents are coordinated through an arbitrator to find the highest global Q value by adding the respective possible Q values of each agents .
2-17:When implemented with heuristic search, since the number of states and actions to consider when computing the optimal policy is exponentially reduced compared to other known approaches, Q decomposition allows to formulate the first optimal decomposed heuristic search algorithm in a stochastic environments .
2-18:On the other hand, when the resources are available to all agents, no Q decomposition is possible .
2-19:A common way of addressing this large stochastic problem is by using Markov Decision Processes (mdps), and in particular real time search where many algorithms have been developed recently .
2-20:For instance Real Time Dynamic Programming (rtdp) [1], lrtdp [4], hdp [3], and lao [5] are all state of the art heuristic search approaches in a stochastic environment .
2-21:Because of its anytime quality, an interesting approach is rtdp introduced by Barto et al .
2-22:[1] which updates states in trajectories from an initial state s0 to a goal state sg .
2-23:rtdp is used in this paper to solve efficiently a constrained resource allocation problem .
2-24:rtdp is much more effective if the action space can be pruned of sub optimal actions .
2-25:To do this, McMahan et 1212 978 81 904262 7 5 c 2007 IFAAMAS al .
2-26:[6], Smith and Simmons [11], and Singh and Cohn [10] proposed solving a stochastic problem using a rtdp type heuristic search with upper and lower bounds on the value of states .
2-27:McMahan et al .
2-28:[6] and Smith and Simmons [11] suggested, in particular, an efficient trajectory of state updates to further speed up the convergence, when given upper and lower bounds .
2-29:This efficient trajectory of state updates can be combined to the approach proposed here since this paper focusses on the definition of tight bounds, and efficient state update for a constrained resource allocation problem .
2-30:On the other hand, the approach by Singh and Cohn is suitable to our case, and extended in this paper using, in particular, the concept of marginal revenue [7] to elaborate tight bounds .
2-31:This paper proposes new algorithms to define upper and lower bounds in the context of a rtdp heuristic search approach .
2-32:Our marginal revenue bounds are compared theoretically and empirically to the bounds proposed by Singh and Cohn .
2-33:Also, even if the algorithm used to obtain the optimal policy is rtdp, our bounds can be used with any other algorithm to solve an mdp .
2-34:The only condition on the use of our bounds is to be in the context of stochastic constrained resource allocation .
2-35:The problem is now modelled. .
3 PROBLEM FORMULATION :
3-1:A simple resource allocation problem is one where there are the following two tasks to realize: ta1 = {wash the dishes}, and ta2 = {clean the floor} .
3-2:These two tasks are either in the realized state, or not realized state .
3-3:To realize the tasks, two type of resources are assumed: res1 = {brush}, and res2 = {detergent} .
3-4:A computer has to compute the optimal allocation of these resources to cleaner robots to realize their tasks .
3-5:In this problem, a state represents a conjunction of the particular state of each task, and the available resources .
3-6:The resources may be constrained by the amount that may be used simultaneously (local constraint), and in total (global constraint) .
3-7:Furthermore, the higher is the number of resources allocated to realize a task, the higher is the expectation of realizing the task .
3-8:For this reason, when the specific states of the tasks change, or when the number of available resources changes, the value of this state may change .
3-9:When executing an action a in state s, the specific states of the tasks change stochastically, and the remaining resource are determined with the resource available in s, subtracted from the resources used by action a, if the resource is consumable .
3-10:Indeed, our model may consider consumable and non consumable resource types .
3-11:A consumable resource type is one where the amount of available resource is decreased when it is used .
3-12:On the other hand, a nonconsumable resource type is one where the amount of available resource is unchanged when it is used .
3-13:For example, a brush is a non consumable resource, while the detergent is a consumable resource .
3-14:2.1 Resource Allocation as a MDPs In our problem, the transition function and the reward function are both known .
3-15:A Markov Decision Process (mdp) framework is used to model our stochastic resource allocation problem .
3-16:mdps have been widely adopted by researchers today to model a stochastic process .
3-17:This is due to the fact that mdps provide a well studied and simple, yet very expressive model of the world .
3-18:An mdp in the context of a resource allocation problem with limited resources is defined as a tuple Res, T a, S, A, P, W, R, , where: • Res = res1, ..., res|Res| is a finite set of resource types available for a planning process .
3-19:Each resource type may have a local resource constraint Lres on the number that may be used in a single step, and a global resource constraint Gres on the number that may be used in total .
3-20:The global constraint only applies for consumable resource types (Resc) and the local constraints always apply to consumable and nonconsumable resource types .
3-21:• T a is a finite set of tasks with ta ∈ T a to be accomplished .
3-22:• S is a finite set of states with s ∈ S .
3-23:A state s is a tuple T a, res1, ..., res|Resc| , which is the characteristic of each unaccomplished task ta ∈ T a in the environment, and the available consumable resources .
3-24:sta is the specific state of task ta .
3-25:Also, S contains a non empty set sg ⊆ S of goal states .
3-26:A goal state is a sink state where an agent stays forever .
3-27:• A is a finite set of actions (or assignments) .
3-28:The actions a ∈ A(s) applicable in a state are the combination of all resource assignments that may be executed, according to the state s .
3-29:In particular, a is simply an allocation of resources to the current tasks, and ata is the resource allocation to task ta .
3-30:The possible actions are limited by Lres and Gres .
3-31:• Transition probabilities Pa(s |s) for s ∈ S and a ∈ A(s) .
3-32:• W = [wta] is the relative weight (criticality) of each task .
3-33:• State rewards R = [rs] : ta∈T a rsta ← sta × wta .
3-34:The relative reward of the state of a task rsta is the product of a real number sta by the weight factor wta .
3-35:For our problem, a reward of 1 × wta is given when the state of a task (sta) is in an achieved state, and 0 in all other cases .
3-36:• A discount (preference) factor γ, which is a real number between 0 and 1 .
3-37:A solution of an mdp is a policy π mapping states s into actions a ∈ A(s) .
3-38:In particular, πta(s) is the action (i.e .
3-39:resources to allocate) that should be executed on task ta, considering the global state s .
3-40:In this case, an optimal policy is one that maximizes the expected total reward for accomplishing all tasks .
3-41:The optimal value of a state, V (s), is given by: V (s) = R(s) + max a∈A(s) γ s ∈S Pa(s |s)V (s ) (1) where the remaining consumable resources in state s are Resc \ res(a), where res(a) are the consumable resources used by action a .
3-42:Indeed, since an action a is a resource assignment, Resc \ res(a) is the new set of available resources after the execution of action a .
3-43:Furthermore, one may compute the Q Values Q(a, s) of each state action pair using the The Sixth Intl .
3-44:Joint Conf .
3-45:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1213 following equation: Q(a, s) = R(s) + γ s ∈S Pa(s |s) max a ∈A(s ) Q(a , s ) (2) where the optimal value of a state is V (s) = max a∈A(s) Q(a, s) .
3-46:The policy is subjected to the local resource constraints res(π(s)) ≤ Lres∀ s ∈ S , and ∀ res ∈ Res .
3-47:The global constraint is defined according to all system trajectories tra ∈ T RA .
3-48:A system trajectory tra is a possible sequence of state action pairs, until a goal state is reached under the optimal policy π .
3-49:For example, state s is entered, which may transit to s or to s , according to action a .
3-50:The two possible system trajectories are (s, a), (s ) and (s, a), (s ) .
3-51:The global resource constraint is res(tra) ≤ Gres∀ tra ∈ T RA ,and ∀ res ∈ Resc where res(tra) is a function which returns the resources used by trajectory tra .
3-52:Since the available consumable resources are represented in the state space, this condition is verified by itself .
3-53:In other words, the model is Markovian as the history has not to be considered in the state space .
3-54:Furthermore, the time is not considered in the model description, but it may also include a time horizon by using a finite horizon mdp .
3-55:Since resource allocation in a stochastic environment is NP Complete, heuristics should be employed .
3-56:Q decomposition which decomposes a planning problem to many agents to reduce the computational complexity associated to the state and or action spaces is now introduced .
3-57:2.2 Q decomposition for Resource Allocation There can be many types of resource allocation problems .
3-58:Firstly, if the resources are already shared among the agents, and the actions made by an agent does not influence the state of another agent, the globally optimal policy can be computed by planning separately for each agent .
3-59:A second type of resource allocation problem is where the resources are already shared among the agents, but the actions made by an agent may influence the reward obtained by at least another agent .
3-60:For instance, a group of agents which manages the oil consummated by a country falls in this group .
3-61:These agents desire to maximize their specific reward by consuming the right amount of oil .
3-62:However, all the agents are penalized when an agent consumes oil because of the pollution it generates .
3-63:Another example of this type comes from our problem of interest, explained in Section 3, which is a naval platform which must counter incoming missiles (i.e .
3-64:tasks) by using its resources (i.e .
3-65:weapons, movements) .
3-66:In some scenarios, it may happens that the missiles can be classified in two types: Those requiring a set of resources Res1 and those requiring a set of resources Res2 .
3-67:This can happen depending on the type of missiles, their range, and so on .
3-68:In this case, two agents can plan for both set of tasks to determine the policy .
3-69:However, there are interaction between the resource of Res1 and Res2, so that certain combination of resource cannot be assigned .
3-70:IN particular, if an agent i allocate resources Resi to the first set of tasks T ai, and agent i allocate resources Resi to second set of tasks T ai , the resulting policy may include actions which cannot be executed together .
3-71:To result these conflicts, we use Q decomposition proposed by Russell and Zimdars [9] in the context of reinforcement learning .
3-72:The primary assumption underlying Qdecomposition is that the overall reward function R can be additively decomposed into separate rewards Ri for each distinct agent i ∈ Ag, where |Ag| is the number of agents .
3-73:That is, R = i∈Ag Ri .
3-74:It requires each agent to compute a value, from its perspective, for every action .
3-75:To coordinate with each other, each agent i reports its action values Qi(ai, si) for each state si ∈ Si to an arbitrator at each learning iteration .
3-76:The arbitrator then chooses an action maximizing the sum of the agent Q values for each global state s ∈ S .
3-77:The next time state s is updated, an agent i considers the value as its respective contribution, or Q value, to the global maximal Q value .
3-78:That is, Qi(ai, si) is the value of a state such that it maximizes maxa∈A(s) i∈Ag Qi(ai, si) .
3-79:The fact that the agents use a determined Q value as the value of a state is an extension of the Sarsa on policy algorithm [8] to Q decomposition .
3-80:Russell and Zimdars called this approach local Sarsa .
3-81:In this way, an ideal compromise can be found for the agents to reach a global optimum .
3-82:Indeed, rather than allowing each agent to choose the successor action, each agent i uses the action ai executed by the arbitrator in the successor state si: Qi(ai, si) = Ri(si) + γ si∈Si Pai (si|si)Qi(ai, si) (3) where the remaining consumable resources in state si are Resci \ resi(ai) for a resource allocation problem .
3-83:Russell and Zimdars [9] demonstrated that local Sarsa converges to the optimum .
3-84:Also, in some cases, this form of agent decomposition allows the local Q functions to be expressed by a much reduced state and action space .
3-85:For our resource allocation problem described briefly in this section, Q decomposition can be applied to generate an optimal solution .
3-86:Indeed, an optimal Bellman backup can be applied in a state as in Algorithm 1 .
3-87:In Line 5 of the Qdec backup function, each agent managing a task computes its respective Q value .
3-88:Here, Qi (ai, s ) determines the optimal Q value of agent i in state s .
3-89:An agent i uses as the value of a possible state transition s the Q value for this agent which determines the maximal global Q value for state s as in the original Q decomposition approach .
3-90:In brief, for each visited states s ∈ S, each agent computes its respective Q values with respect to the global state s .
3-91:So the state space is the joint state space of all agents .
3-92:Some of the gain in complexity to use Q decomposition resides in the si∈Si Pai (si|s) part of the equation .
3-93:An agent considers as a possible state transition only the possible states of the set of tasks it manages .
3-94:Since the number of states is exponential with the number of tasks, using Q decomposition should reduce the planning time significantly .
3-95:Furthermore, the action space of the agents takes into account only their available resources which is much less complex than a standard action space, which is the combination of all possible resource allocation in a state for all agents .
3-96:Then, the arbitrator functionalities are in Lines 8 to 20 .
3-97:The global Q value is the sum of the Q values produced by each agent managing each task as shown in Line 11, considering the global action a .
3-98:In this case, when an action of an agent i cannot be executed simultaneously with an action of another agent i , the global action is simply discarded from the action space A(s) .
3-99:Line 14 simply allocate the current value with respect to the highest global Q value, as in a standard Bellman backup .
3-100:Then, the optimal policy and Q value of each agent is updated in Lines 16 and 17 to the sub actions ai and specific Q values Qi(ai, s) of each agent 1214 The Sixth Intl .
3-101:Joint Conf .
3-102:on Autonomous Agents and Multi Agent Systems (AAMAS 07) for action a .
3-103:Algorithm 1 The Q decomposition Bellman Backup .
3-104:1: Function Qdec backup(s) 2: V (s) ← 0 3: for all i ∈ Ag do 4: for all ai ∈ Ai(s) do 5: Qi(ai, s) ← Ri(s) + γ si ∈Si Pai (si|s)Qi (ai, s ) {where Qi (ai, s ) = hi(s ) when s is not yet visited, and s has Resci \ resi(ai) remaining consumable resources for each agent i} 6: end for 7: end for 8: for all a ∈ A(s) do 9: Q(a, s) ← 0 10: for all i ∈ Ag do 11: Q(a, s) ← Q(a, s) + Qi(ai, s) 12: end for 13: if Q(a, s) > V (s) then 14: V (s) ← Q(a, s) 15: for all i ∈ Ag do 16: πi(s) ← ai 17: Qi (ai, s) ← Qi(ai, s) 18: end for 19: end if 20: end for A standard Bellman backup has a complexity of O(|A| × |SAg|), where |SAg| is the number of joint states for all agents excluding the resources, and |A| is the number of joint actions .
3-105:On the other hand, the Q decomposition Bellman backup has a complexity of O((|Ag| × |Ai| × |Si)|) + (|A| × |Ag|)), where |Si| is the number of states for an agent i, excluding the resources and |Ai| is the number of actions for an agent i .
3-106:Since |SAg| is combinatorial with the number of tasks, so |Si| |S| .
3-107:Also, |A| is combinatorial with the number of resource types .
3-108:If the resources are already shared among the agents, the number of resource type for each agent will usually be lower than the set of all available resource types for all agents .
3-109:In these circumstances, |Ai| |A| .
3-110:In a standard Bellman backup, |A| is multiplied by |SAg|, which is much more complex than multiplying |A| by |Ag| with the Q decomposition Bellman backup .
3-111:Thus, the Q decomposition Bellman backup is much less complex than a standard Bellman backup .
3-112:Furthermore, the communication cost between the agents and the arbitrator is null since this approach does not consider a geographically separated problem .
3-113:However, when the resources are available to all agents, no Q decomposition is possible .
3-114:In this case, Bounded RealTime Dynamic Programming (bounded rtdp) permits to focuss the search on relevant states, and to prune the action space A by using lower and higher bound on the value of states .
3-115:bounded rtdp is now introduced .
3-116:2.3 Bounded RTDP Bonet and Geffner [4] proposed lrtdp as an improvement to rtdp [1] .
3-117:lrtdp is a simple dynamic programming algorithm that involves a sequence of trial runs, each starting in the initial state s0 and ending in a goal or a solved state .
3-118:Each lrtdp trial is the result of simulating the policy π while updating the values V (s) using a Bellman backup (Equation 1) over the states s that are visited .
3-119:h(s) is a heuristic which define an initial value for state s .
3-120:This heuristic has to be admissible The value given by the heuristic has to overestimate (or underestimate) the optimal value V (s) when the objective function is maximized (or minimized) .
3-121:For example, an admissible heuristic for a stochastic shortest path problem is the solution of a deterministic shortest path problem .
3-122:Indeed, since the problem is stochastic, the optimal value is lower than for the deterministic version .
3-123:It has been proven that lrtdp, given an admissible initial heuristic on the value of states cannot be trapped in loops, and eventually yields optimal values [4] .
3-124:The convergence is accomplished by means of a labeling procedure called checkSolved(s, ) .
3-125:This procedure tries to label as solved each traversed state in the current trajectory .
3-126:When the initial state is labelled as solved, the algorithm has converged .
3-127:In this section, a bounded version of rtdp (boundedrtdp) is presented in Algorithm 2 to prune the action space of sub optimal actions .
3-128:This pruning enables to speed up the convergence of lrtdp .
3-129:bounded rtdp is similar to rtdp except there are two distinct initial heuristics for unvisited states s ∈ S; hL(s) and hU (s) .
3-130:Also, the checkSolved(s, ) procedure can be omitted because the bounds can provide the labeling of a state as solved .
3-131:On the one hand, hL(s) defines a lower bound on the value of s such that the optimal value of s is higher than hL(s) .
3-132:For its part, hU (s) defines an upper bound on the value of s such that the optimal value of s is lower than hU (s) .
3-133:The values of the bounds are computed in Lines 3 and 4 of the bounded backup function .
3-134:Computing these two Q values is made simultaneously as the state transitions are the same for both Q values .
3-135:Only the values of the state transitions change .
3-136:Thus, having to compute two Q values instead of one does not augment the complexity of the approach .
3-137:In fact, Smith and Simmons [11] state that the additional time to compute a Bellman backup for two bounds, instead of one, is no more than 10%, which is also what we obtained .
3-138:In particular, L(s) is the lower bound of state s, while U(s) is the upper bound of state s .
3-139:Similarly, QL(a, s) is the Q value of the lower bound of action a in state s, while QU (a, s) is the Q value of the upper bound of action a in state s .
3-140:Using these two bounds allow significantly reducing the action space A .
3-141:Indeed, in Lines 5 and 6 of the bounded backup function, if QU (a, s) ≤ L(s) then action a may be pruned from the action space of s .
3-142:In Line 13 of this function, a state can be labeled as solved if the difference between the lower and upper bounds is lower than .
3-143:When the execution goes back to the bounded rtdp function, the next state in Line 10 has a fixed number of consumable resources available Resc, determined in Line 9 .
3-144:In brief, pickNextState(res) selects a none solved state s reachable under the current policy which has the highest Bellman error (|U(s) − L(s)|) .
3-145:Finally, in Lines 12 to 15, a backup is made in a backward fashion on all visited state of a trajectory, when this trajectory has been made .
3-146:This strategy has been proven as efficient [11] [6] .
3-147:As discussed by Singh and Cohn [10], this type of algorithm has a number of desirable anytime characteristics: if an action has to be picked in state s before the algorithm has converged (while multiple competitive actions remains), the action with the highest lower bound is picked .
3-148:Since the upper bound for state s is known, it may be estimated The Sixth Intl .
3-149:Joint Conf .
3-150:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1215 Algorithm 2 The bounded rtdp algorithm .
3-151:Adapted from [4] and [10] .
3-152:1: Function bounded rtdp(S) 2: returns a value function V 3: repeat 4: s ← s0 5: visited ← null 6: repeat 7: visited.push(s) 8: bounded backup(s) 9: Resc ← Resc \ {π(s)} 10: s ← s.pickNextState(Resc) 11: until s is a goal 12: while visited = null do 13: s ← visited.pop() 14: bounded backup(s) 15: end while 16: until s0 is solved or |A(s)| = 1 ∀ s ∈ S reachable from s0 17: return V Algorithm 3 The bounded Bellman backup .
3-153:1: Function bounded backup(s) 2: for all a ∈ A(s) do 3: QU (a, s) ← R(s) + γ s ∈S Pa(s |s)U(s ) 4: QL(a, s) ← R(s) + γ s ∈S Pa(s |s)L(s ) {where L(s ) ← hL(s ) and U(s ) ← hU (s ) when s is not yet visited and s has Resc \ res(a) remaining consumable resources} 5: if QU (a, s) ≤ L(s) then 6: A(s) ← A(s) \ res(a) 7: end if 8: end for 9: L(s) ← max a∈A(s) QL(a, s) 10: U(s) ← max a∈A(s) QU (a, s) 11: π(s) ← arg max a∈A(s) QL(a, s) 12: if |U(s) − L(s)| < then 13: s ← solved 14: end if how far the lower bound is from the optimal .
3-154:If the difference between the lower and upper bound is too high, one can choose to use another greedy algorithm of one"s choice, which outputs a fast and near optimal solution .
3-155:Furthermore, if a new task dynamically arrives in the environment, it can be accommodated by redefining the lower and upper bounds which exist at the time of its arrival .
3-156:Singh and Cohn [10] proved that an algorithm that uses admissible lower and upper bounds to prune the action space is assured of converging to an optimal solution .
3-157:The next sections describe two separate methods to define hL(s) and hU (s) .
3-158:First of all, the method of Singh and Cohn [10] is briefly described .
3-159:Then, our own method proposes tighter bounds, thus allowing a more effective pruning of the action space .
3-160:2.4 Singh and Cohn"s Bounds Singh and Cohn [10] defined lower and upper bounds to prune the action space .
3-161:Their approach is pretty straightforward .
3-162:First of all, a value function is computed for all tasks to realize, using a standard rtdp approach .
3-163:Then, using these task value functions, a lower bound hL, and upper bound hU can be defined .
3-164:In particular, hL(s) = max ta∈T a Vta(sta), and hU (s) = ta∈T a Vta(sta) .
3-165:For readability, the upper bound by Singh and Cohn is named SinghU, and the lower bound is named SinghL .
3-166:The admissibility of these bounds has been proven by Singh and Cohn, such that, the upper bound always overestimates the optimal value of each state, while the lower bound always underestimates the optimal value of each state .
3-167:To determine the optimal policy π, Singh and Cohn implemented an algorithm very similar to bounded rtdp, which uses the bounds to initialize L(s) and U(s) .
3-168:The only difference between bounded rtdp, and the rtdp version of Singh and Cohn is in the stopping criteria .
3-169:Singh and Cohn proposed that the algorithm terminates when only one competitive action remains for each state, or when the range of all competitive actions for any state are bounded by an indifference parameter .
3-170:bounded rtdp labels states for which |U(s) − L(s)| < as solved and the convergence is reached when s0 is solved or when only one competitive action remains for each state .
3-171:This stopping criteria is more effective since it is similar to the one used by Smith and Simmons [11] and McMahan et al .
3-172:brtdp [6] .
3-173:In this paper, the bounds defined by Singh and Cohn and implemented using bounded rtdp define the Singh rtdp approach .
3-174:The next sections propose to tighten the bounds of Singh rtdp to permit a more effective pruning of the action space .
3-175:2.5 Reducing the Upper Bound SinghU includes actions which may not be possible to execute because of resource constraints, which overestimates the upper bound .
3-176:To consider only possible actions, our upper bound, named maxU is introduced: hU (s) = max a∈A(s) ta∈T a Qta(ata, sta) (4) where Qta(ata, sta) is the Q value of task ta for state sta, and action ata computed using a standard lrtdp approach .
3-177:Theorem 2.1 .
3-178:The upper bound defined by Equation 4 is admissible .
3-179:Proof: The local resource constraints are satisfied because the upper bound is computed using all global possible actions a .
3-180:However, hU (s) still overestimates V (s) because the global resource constraint is not enforced .
3-181:Indeed, each task may use all consumable resources for its own purpose .
3-182:Doing this produces a higher value for each task, than the one obtained when planning for all tasks globally with the shared limited resources .
3-183:Computing the maxU bound in a state has a complexity of O(|A| × |T a|), and O(|T a|) for SinghU .
3-184:A standard Bellman backup has a complexity of O(|A| × |S|) .
3-185:Since |A|×|T a| |A|×|S|, the computation time to determine the upper bound of a state, which is done one time for each visited state, is much less than the computation time required to compute a standard Bellman backup for a state, which is usually done many times for each visited state .
3-186:Thus, the computation time of the upper bound is negligible .
3-187:1216 The Sixth Intl .
3-188:Joint Conf .
3-189:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 2.6 Increasing the Lower Bound The idea to increase SinghL is to allocate the resources a priori among the tasks .
3-190:When each task has its own set of resources, each task may be solved independently .
3-191:The lower bound of state s is hL(s) = ta∈T a Lowta(sta), where Lowta(sta) is a value function for each task ta ∈ T a, such that the resources have been allocated a priori .
3-192:The allocation a priori of the resources is made using marginal revenue, which is a highly used concept in microeconomics [7], and has recently been used for coordination of a Decentralized mdp [2] .
3-193:In brief, marginal revenue is the extra revenue that an additional unit of product will bring to a firm .
3-194:Thus, for a stochastic resource allocation problem, the marginal revenue of a resource is the additional expected value it involves .
3-195:The marginal revenue of a resource res for a task ta in a state sta is defined as following: mrta(sta) = max ata∈A(sta) Qta(ata, sta)− max ata∈A(sta) Qta(ata|res ∈ ata, sta) (5) The concept of marginal revenue of a resource is used in Algorithm 4 to allocate the resources a priori among the tasks which enables to define the lower bound value of a state .
3-196:In Line 4 of the algorithm, a value function is computed for all tasks in the environment using a standard lrtdp [4] approach .
3-197:These value functions, which are also used for the upper bound, are computed considering that each task may use all available resources .
3-198:The Line 5 initializes the valueta variable .
3-199:This variable is the estimated value of each task ta ∈ T a .
3-200:In the beginning of the algorithm, no resources are allocated to a specific task, thus the valueta variable is initialized to 0 for all ta ∈ T a .
3-201:Then, in Line 9, a resource type res (consumable or non consumable) is selected to be allocated .
3-202:Here, a domain expert may separate all available resources in many types or parts to be allocated .
3-203:The resources are allocated in the order of its specialization .
3-204:In other words, the more a resource is efficient on a small group of tasks, the more it is allocated early .
3-205:Allocating the resources in this order improves the quality of the resulting lower bound .
3-206:The Line 12 computes the marginal revenue of a consumable resource res for each task ta ∈ T a .
3-207:For a non consumable resource, since the resource is not considered in the state space, all other reachable states from sta consider that the resource res is still usable .
3-208:The approach here is to sum the difference between the real value of a state to the maximal Q value of this state if resource res cannot be used for all states in a trajectory given by the policy of task ta .
3-209:This heuristic proved to obtain good results, but other ones may be tried, for example Monte Carlo simulation .
3-210:In Line 21, the marginal revenue is updated in function of the resources already allocated to each task .
3-211:R(sgta ) is the reward to realize task ta .
3-212:Thus, Vta(sta)−valueta R(sgta ) is the residual expected value that remains to be achieved, knowing current allocation to task ta, and normalized by the reward of realizing the tasks .
3-213:The marginal revenue is multiplied by this term to indicate that, the more a task has a high residual value, the more its marginal revenue is going to be high .
3-214:Then, a task ta is selected in Line 23 with the highest marginal revenue, adjusted with residual value .
3-215:In Line 24, the resource type res is allocated to the group of resources Resta of task ta .
3-216:Afterwards, Line 29 recomAlgorithm 4 The marginal revenue lower bound algorithm .
3-217:1: Function revenue bound(S) 2: returns a lower bound LowT a 3: for all ta ∈ T a do 4: Vta ←lrtdp(Sta) 5: valueta ← 0 6: end for 7: s ← s0 8: repeat 9: res ← Select a resource type res ∈ Res 10: for all ta ∈ T a do 11: if res is consumable then 12: mrta(sta) ← Vta(sta) − Vta(sta(Res \ res)) 13: else 14: mrta(sta) ← 0 15: repeat 16: mrta(sta) ← mrta(sta) + Vta(sta)max (ata∈A(sta)|res ∈ata) Qta(ata, sta) 17: sta ← sta.pickNextState(Resc) 18: until sta is a goal 19: s ← s0 20: end if 21: mrrvta(sta) ← mrta(sta) × Vta(sta)−valueta R(sgta ) 22: end for 23: ta ← Task ta ∈ T a which maximize mrrvta(sta) 24: Resta ← Resta {res} 25: temp ← ∅ 26: if res is consumable then 27: temp ← res 28: end if 29: valueta ← valueta + ((Vta(sta) − valueta)× max ata∈A(sta,res) Qta(ata,sta(temp)) Vta(sta) ) 30: until all resource types res ∈ Res are assigned 31: for all ta ∈ T a do 32: Lowta ←lrtdp(Sta, Resta) 33: end for 34: return LowT a putes valueta .
3-218:The first part of the equation to compute valueta represents the expected residual value for task ta .
3-219:This term is multiplied by max ata∈A(sta) Qta(ata,sta(res)) Vta(sta) , which is the ratio of the efficiency of resource type res .
3-220:In other words, valueta is assigned to valueta + (the residual value × the value ratio of resource type res) .
3-221:For a consumable resource, the Q value consider only resource res in the state space, while for a non consumable resource, no resources are available .
3-222:All resource types are allocated in this manner until Res is empty .
3-223:All consumable and non consumable resource types are allocated to each task .
3-224:When all resources are allocated, the lower bound components Lowta of each task are computed in Line 32 .
3-225:When the global solution is computed, the lower bound is as follow: hL(s) = max(SinghL, max a∈A(s) ta∈T a Lowta(sta)) (6) We use the maximum of the SinghL bound and the sum of the lower bound components Lowta, thus marginalrevenue ≥ SinghL .
3-226:In particular, the SinghL bound may The Sixth Intl .
3-227:Joint Conf .
3-228:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1217 be higher when a little number of tasks remain .
3-229:As the components Lowta are computed considering s0; for example, if in a subsequent state only one task remains, the bound of SinghL will be higher than any of the Lowta components .
3-230:The main difference of complexity between SinghL and revenue bound is in Line 32 where a value for each task has to be computed with the shared resource .
3-231:However, since the resource are shared, the state space and action space is greatly reduced for each task, reducing greatly the calculus compared to the value functions computed in Line 4 which is done for both SinghL and revenue bound .
3-232:Theorem 2.2 .
3-233:The lower bound of Equation 6 is admissible .
3-234:Proof: Lowta(sta) is computed with the resource being shared .
3-235:Summing the Lowta(sta) value functions for each ta ∈ T a does not violates the local and global resource constraints .
3-236:Indeed, as the resources are shared, the tasks cannot overuse them .
3-237:Thus, hL(s) is a realizable policy, and an admissible lower bound. .
4 DISCUSSION AND EXPERIMENTS :
4-1:The domain of the experiments is a naval platform which must counter incoming missiles (i.e .
4-2:tasks) by using its resources (i.e .
4-3:weapons, movements) .
4-4:For the experiments, 100 randomly resource allocation problems were generated for each approach, and possible number of tasks .
4-5:In our problem, |Sta| = 4, thus each task can be in four distinct states .
4-6:There are two types of states; firstly, states where actions modify the transition probabilities; and then, there are goal states .
4-7:The state transitions are all stochastic because when a missile is in a given state, it may always transit in many possible states .
4-8:In particular, each resource type has a probability to counter a missile between 45% and 65% depending on the state of the task .
4-9:When a missile is not countered, it transits to another state, which may be preferred or not to the current state, where the most preferred state for a task is when it is countered .
4-10:The effectiveness of each resource is modified randomly by ±15% at the start of a scenario .
4-11:There are also local and global resource constraints on the amount that may be used .
4-12:For the local constraints, at most 1 resource of each type can be allocated to execute tasks in a specific state .
4-13:This constraint is also present on a real naval platform because of sensor and launcher constraints and engagement policies .
4-14:Furthermore, for consumable resources, the total amount of available consumable resource is between 1 and 2 for each type .
4-15:The global constraint is generated randomly at the start of a scenario for each consumable resource type .
4-16:The number of resource type has been fixed to 5, where there are 3 consumable resource types and 2 non consumable resources types .
4-17:For this problem a standard lrtdp approach has been implemented .
4-18:A simple heuristic has been used where the value of an unvisited state is assigned as the value of a goal state such that all tasks are achieved .
4-19:This way, the value of each unvisited state is assured to overestimate its real value since the value of achieving a task ta is the highest the planner may get for ta .
4-20:Since this heuristic is pretty straightforward, the advantages of using better heuristics are more evident .
4-21:Nevertheless, even if the lrtdp approach uses a simple heuristic, still a huge part of the state space is not visited when computing the optimal policy .
4-22:The approaches described in this paper are compared in Figures 1 and 2 .
4-23:Lets summarize these approaches here: • Qdec lrtdp: The backups are computed using the Qdec backup function (Algorithm 1), but in a lrtdp context .
4-24:In particular the updates made in the checkSolved function are also made using the the Qdecbackup function .
4-25:• lrtdp up: The upper bound of maxU is used for lrtdp .
4-26:• Singh rtdp: The SinghL and SinghU bounds are used for bounded rtdp .
4-27:• mr rtdp: The revenue bound and maxU bounds are used for bounded rtdp .
4-28:To implement Qdec lrtdp, we divided the set of tasks in two equal parts .
4-29:The set of task T ai, managed by agent i, can be accomplished with the set of resources Resi, while the second set of task T ai , managed by agent Agi , can be accomplished with the set of resources Resi .
4-30:Resi had one consumable resource type and one non consumable resource type, while Resi had two consumable resource types and one non consumable resource type .
4-31:When the number of tasks is odd, one more task was assigned to T ai .
4-32:There are constraint between the group of resource Resi and Resi such that some assignments are not possible .
4-33:These constraints are managed by the arbitrator as described in Section 2.2 .
4-34:Q decomposition permits to diminish the planning time significantly in our problem settings, and seems a very efficient approach when a group of agents have to allocate resources which are only available to themselves, but the actions made by an agent may influence the reward obtained by at least another agent .
4-35:To compute the lower bound of revenue bound, all available resources have to be separated in many types or parts to be allocated .
4-36:For our problem, we allocated each resource of each type in the order of of its specialization like we said when describing the revenue bound function .
4-37:In terms of experiments, notice that the lrtdp lrtdp up and approaches for resource allocation, which doe not prune the action space, are much more complex .
4-38:For instance, it took an average of 1512 seconds to plan for the lrtdp up approach with six tasks (see Figure 1) .
4-39:The Singh rtdp approach diminished the planning time by using a lower and upper bound to prune the action space .
4-40:mr rtdp further reduce the planning time by providing very tight initial bounds .
4-41:In particular, Singh rtdp needed 231 seconds in average to solve problem with six tasks and mr rtdp required 76 seconds .
4-42:Indeed, the time reduction is quite significant compared to lrtdp up, which demonstrates the efficiency of using bounds to prune the action space .
4-43:Furthermore, we implemented mr rtdp with the SinghU bound, and this was slightly less efficient than with the maxU bound .
4-44:We also implemented mr rtdp with the SinghL bound, and this was slightly more efficient than Singh rtdp .
4-45:From these results, we conclude that the difference of efficiency between mr rtdp and Singh rtdp is more attributable to the marginal revenue lower bound that to the maxU upper bound .
4-46:Indeed, when the number of task to execute is high, the lower bounds by Singh rtdp takes the values of a single task .
4-47:On the other hand, the lower bound of mr rtdp takes into account the value of all 1218 The Sixth Intl .
4-48:Joint Conf .
4-49:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 0.01 0.1 1 10 100 1000 10000 100000 1 2 3 4 5 6 7 8 9 10 11 12 13 Timeinseconds Number of tasks LRTDP QDEC LRTDP Figure 1: Efficiency of Q decomposition LRTDP and LRTDP .
4-50:0.01 0.1 1 10 100 1000 10000 1 2 3 4 5 6 7 8 Timeinseconds Number of tasks LRTDP LRTDP up Singh RTDP MR RTDP Figure 2: Efficiency of MR RTDP compared to SINGH RTDP .
4-51:task by using a heuristic to distribute the resources .
4-52:Indeed, an optimal allocation is one where the resources are distributed in the best way to all tasks, and our lower bound heuristically does that. .
5-1:The experiments have shown that Q decomposition seems a very efficient approach when a group of agents have to allocate resources which are only available to themselves, but the actions made by an agent may influence the reward obtained by at least another agent
5-2:On the other hand, when the available resource are shared, no Q decomposition is possible and we proposed tight bounds for heuristic search
5-3:In this case, the planning time of bounded rtdp, which prunes the action space, is significantly lower than for lrtdp
5-4:Furthermore, The marginal revenue bound proposed in this paper compares favorably to the Singh and Cohn [10] approach
5-5:boundedrtdp with our proposed bounds may apply to a wide range of stochastic environments
5-6:The only condition for the use our bounds is that each task possesses consumable and or non consumable limited resources
5-7:An interesting research avenue would be to experiment our bounds with other heuristic search algorithms
5-8:For instance, frtdp [11], and brtdp [6] are both efficient heuristic search algorithms
5-9:In particular, both these approaches proposed an efficient state trajectory updates, when given upper and lower bounds
5-10:Our tight bounds would enable, for both frtdp and brtdp, to reduce the number of backup to perform before convergence
5-11:Finally, the bounded rtdp function prunes the action space when QU (a, s) ≤ L(s), as Singh and Cohn [10] suggested
5-12:frtdp and brtdp could also prune the action space in these circumstances to further reduce their planning time.
6-1:A
6-2:Barto, S
6-3:Bradtke, and S
6-4:Singh
6-5:Learning to act using real time dynamic programming
6-6:Artificial Intelligence, 72(1):81 138, 1995
6-7:A
6-8:Beynier and A
6-9:I
6-10:Mouaddib
6-11:An iterative algorithm for solving constrained decentralized markov decision processes
6-12:In Proceeding of the Twenty First National Conference on Artificial Intelligence (AAAI 06), 2006
6-13:B
6-14:Bonet and H
6-15:Geffner
6-16:Faster heuristic search algorithms for planning with uncertainty and full feedback
6-17:In Proceedings of the Eighteenth International Joint Conference on Artificial Intelligence (IJCAI 03), August 2003
6-18:B
6-19:Bonet and H
6-20:Geffner
6-21:Labeled lrtdp approach: Improving the convergence of real time dynamic programming
6-22:In Proceeding of the Thirteenth International Conference on Automated Planning & Scheduling (ICAPS 03), pages 12 21, Trento, Italy, 2003
6-23:E
6-24:A
6-25:Hansen and S
6-26:Zilberstein
6-27:lao : A heuristic search algorithm that finds solutions with loops
6-28:Artificial Intelligence, 129(1 2):35 62, 2001
6-29:H
6-30:B
6-31:McMahan, M
6-32:Likhachev, and G
6-33:J
6-34:Gordon
6-35:Bounded real time dynamic programming: rtdp with monotone upper bounds and performance guarantees
6-36:In ICML "05: Proceedings of the Twenty Second International Conference on Machine learning, pages 569 576, New York, NY, USA, 2005
6-37:ACM Press
6-38:R
6-39:S
6-40:Pindyck and D
6-41:L
6-42:Rubinfeld
6-43:Microeconomics
6-44:Prentice Hall, 2000
6-45:G
6-46:A
6-47:Rummery and M
6-48:Niranjan
6-49:On line Q learning using connectionist systems
6-50:Technical report CUED FINFENG TR 166, Cambridge University Engineering Department, 1994
6-51:S
6-52:J
6-53:Russell and A
6-54:Zimdars
6-55:Q decomposition for reinforcement learning agents
6-56:In ICML, pages 656 663, 2003
6-57:S
6-58:Singh and D
6-59:Cohn
6-60:How to dynamically merge markov decision processes
6-61:In Advances in Neural Information Processing Systems, volume 10, pages 1057 1063, Cambridge, MA, USA, 1998
6-62:MIT Press
6-63:T
6-64:Smith and R
6-65:Simmons
6-66:Focused real time dynamic programming for mdps: Squeezing more out of a heuristic
6-67:In Proceedings of the Twenty First National Conference on Artificial Intelligence (AAAI), Boston, USA, 2006
6-68:W
6-69:Zhang
6-70:Modeling and solving a resource allocation problem with soft constraint techniques
6-71:Technical report: wucs 2002 13, Washington University, Saint Louis, Missouri, 2002
6-72:The Sixth Intl
6-73:Joint Conf
6-74:on Autonomous Agents and Multi Agent Systems (AAMAS 07) 1219
picture:
