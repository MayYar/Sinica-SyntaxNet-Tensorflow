Communication Complexity of Common Voting Rules∗ 
content:
1 ABSTRACT :
1-1:We determine the communication complexity of the common voting rules .
1-2:The rules (sorted by their communication complexity from low to high) are plurality, plurality with runoff, single transferable vote (STV), Condorcet, approval, Bucklin, cup, maximin, Borda, Copeland, and ranked pairs .
1-3:For each rule, we first give a deterministic communication protocol and an upper bound on the number of bits communicated in it; then, we give a lower bound on (even the nondeterministic) communication requirements of the voting rule .
1-4:The bounds match for all voting rules except STV and maximin .
1-5:F.2 [Theory of Computation]: Analysis of Algorithms .
2 INTRODUCTION :
2-1:One key factor in the practicality of any preference aggregation rule is its communication burden .
2-2:To successfully aggregate the agents" preferences, it is usually not necessary for all the agents to report all of their preference information .
2-3:Clever protocols that elicit the agents" preferences partially and sequentially have the potential to dramatically reduce the required communication .
2-4:This has at least the following advantages: • It can make preference aggregation feasible in settings where the total amount of preference information is too large to communicate .
2-5:• Even when communicating all the preference information is feasible, reducing the communication requirements lessens the burden placed on the agents .
2-6:This is especially true when the agents, rather than knowing all their preferences in advance, need to invest effort (such as computation or information gathering) to determine their preferences [16] .
2-7:• It preserves (some of) the agents" privacy .
2-8:Most of the work on reducing the communication burden in preference aggregation has focused on resource allocation settings such as combinatorial auctions, in which an auctioneer auctions off a number of (possibly distinct) items in a single event .
2-9:Because in a combinatorial auction, bidders can have separate valuations for each of an exponential number of possible bundles of items, this is a setting in which reducing the communication burden is especially crucial .
2-10:This can be accomplished by supplementing the auctioneer with an elicitor that incrementally elicits parts of the bidders" preferences on an as needed basis, based on what the bidders have revealed about their preferences so far, as suggested by Conen and Sandholm [5] .
2-11:For example, the elicitor can ask for a bidder"s value for a specific bundle (value queries), which of two bundles the bidder prefers (order queries), which bundle he ranks kth or what the rank of a given bundle is (rank queries), which bundle he would purchase given a particular vector of prices (demand queries), etc. until (at least) the final allocation can be determined .
2-12:Experimentally, this yields drastic savings in preference revelation [11] .
2-13:Furthermore, if the agents" valuation functions are drawn from certain natural subclasses, the elicitation problem can be solved using only polynomially many queries even in the worst case [23, 4, 13, 18, 14] .
2-14:For a review of preference elicitation in combinatorial auctions, see [17] .
2-15:Ascending combinatorial auctions are a well known special form of preference elicitation, where the elicitor asks demand queries with increasing prices [15, 21, 1, 9] .
2-16:Finally, resource 78 allocation problems have also been studied from a communication complexity viewpoint, thereby deriving lower bounds on the required communication .
2-17:For example, Nisan and Segal show that exponential communication is required even to obtain a surplus greater than that obtained by auctioning off all objects as a single bundle [14] .
2-18:Segal also studies social choice rules in general, and shows that for a large class of social choice rules, supporting budget sets must be revealed such that if every agent prefers the same outcome in her budget set, this proves the optimality of that outcome .
2-19:Segal then uses this characterization to prove bounds on the communication required in resource allocation as well as matching settings [20] .
2-20:In this paper, we will focus on the communication requirements of a generally applicable subclass of social choice rules, commonly known as voting rules .
2-21:In a voting setting, there is a set of candidate outcomes over which the voters express their preferences by submitting a vote (typically, a ranking of the candidates), and the winner (that is, the chosen outcome) is determined based on these votes .
2-22:The communication required by voting rules can be large either because the number of voters is large (such as, for example, in national elections), or because the number of candidates is large (for example, the agents can vote over allocations of a number of resources), or both .
2-23:Prior work [8] has studied elicitation in voting, studying how computationally hard it is to decide whether a winner can be determined with the information elicited so far, as well as how hard it is to find the optimal sequence of queries given perfect suspicions about the voters" preferences .
2-24:In addition, that paper discusses strategic (game theoretic) issues introduced by elicitation .
2-25:In contrast, in this paper, we are concerned with the worst case number of bits that must be communicated to execute a given voting rule, when nothing is known in advance about the voters" preferences .
2-26:We determine the communication complexity of the common voting rules .
2-27:For each rule, we first give an upper bound on the (deterministic) communication complexity by providing a communication protocol for it and analyzing how many bits need to be transmitted in this protocol .
2-28:(Segal"s results [20] do not apply to most voting rules because most voting rules are not intersectionmonotonic (or even monotonic).1 ) For many of the voting rules under study, it turns out that one cannot do better than simply letting each voter immediately communicate all her (potentially relevant) information .
2-29:However, for some rules (such as plurality with runoff, STV and cup) there is a straightforward multistage communication protocol that, with some analysis, can be shown to significantly outperform the immediate communication of all (potentially relevant) information .
2-30:Finally, for some rules (such as the Condorcet and Bucklin rules), we need to introduce a more complex communication protocol to achieve the best possible upper 1 For two of the rules that we study that are intersectionmonotonic, namely the approval and Condorcet rules, Segal"s results can in fact be used to give alternative proofs of our lower bounds .
2-31:We only give direct proofs for these rules here because 1) these direct proofs are among the easier ones in this paper, 2) the alternative proofs are nontrivial even given Segal"s results, and 3) a space constraint applies .
2-32:However, we hope to also include the alternative proofs in a later version .
2-33:bound .
2-34:After obtaining the upper bounds, we show that they are tight by giving matching lower bounds on (even the nondeterministic) communication complexity of each voting rule .
2-35:There are two exceptions: STV, for which our upper and lower bounds are apart by a factor log m; and maximin, for which our best deterministic upper bound is also a factor log m above the (nondeterministic) lower bound, although we give a nondeterministic upper bound that matches the lower bound. .
3 REVIEW OF VOTING RULES :
3-1:In this section, we review the common voting rules that we study in this paper .
3-2:A voting rule2 is a function mapping a vector of the n voters" votes (i.e .
3-3:preferences over candidates) to one of the m candidates (the winner) in the candidate set C .
3-4:In some cases (such as the Condorcet rule), the rule may also declare that no winner exists .
3-5:We do not concern ourselves with what happens in case of a tie between candidates (our lower bounds hold regardless of how ties are broken, and the communication protocols used for our upper bounds do not attempt to break the ties) .
3-6:All of the rules that we study are rank based rules, which means that a vote is defined as an ordering of the candidates (with the exception of the plurality rule, for which a vote is a single candidate, and the approval rule, for which a vote is a subset of the candidates) .
3-7:We will consider the following voting rules .
3-8:(For rules that define a score, the candidate with the highest score wins.) • scoring rules .
3-9:Let α = α1, .
3-10:.
3-11:.
3-12:, αm be a vector of integers such that α1 ≥ α2 .
3-13:.
3-14:.
3-15:≥ αm .
3-16:For each voter, a candidate receives α1 points if it is ranked first by the voter, α2 if it is ranked second etc .
3-17:The score sα of a candidate is the total number of points the candidate receives .
3-18:The Borda rule is the scoring rule with α = m−1, m−2, .
3-19:.
3-20:.
3-21:, 0 .
3-22:The plurality rule is the scoring rule with α = 1, 0, .
3-23:.
3-24:.
3-25:, 0 .
3-26:• single transferable vote .
3-27:The rule proceeds through a series of m − 1 rounds .
3-28:In each round, the candidate with the lowest plurality score (that is, the least number of voters ranking it first among the remaining candidates) is eliminated (and each of the votes for that candidate transfer to the next remaining candidate in the order given in that vote) .
3-29:The winner is the last remaining candidate .
3-30:• plurality with run off .
3-31:In this rule, a first round eliminates all candidates except the two with the highest plurality scores .
3-32:Votes are transferred to these as in the STV rule, and a second round determines the winner from these two .
3-33:• approval .
3-34:Each voter labels each candidate as either approved or disapproved .
3-35:The candidate approved by the greatest number of voters wins .
3-36:• Condorcet .
3-37:For any two candidates i and j, let N(i, j) be the number of voters who prefer i to j .
3-38:If there is a candidate i that is preferred to any other candidate by a majority of the voters (that is, N(i, j) > N(j, i) for all j = i that is, i wins every pairwise election), then candidate i wins .
3-39:2 The term voting protocol is often used to describe the same concept, but we seek to draw a sharp distinction between the rule mapping preferences to outcomes, and the communication elicitation protocol used to implement this rule .
3-40:79 • maximin (aka .
3-41:Simpson) .
3-42:The maximin score of i is s(i) = minj=i N(i, j) that is, i"s worst performance in a pairwise election .
3-43:The candidate with the highest maximin score wins .
3-44:• Copeland .
3-45:For any two distinct candidates i and j, let C(i, j) = 1 if N(i, j) > N(j, i), C(i, j) = 1 2 if N(i, j) = N(j, i) and C(i, j) = 0 if N(i, j) < N(j, i) .
3-46:The Copeland score of candidate i is s(i) = j=i C(i, j) .
3-47:• cup (sequential binary comparisons) .
3-48:The cup rule is defined by a balanced3 binary tree T with one leaf per candidate, and an assignment of candidates to leaves (each leaf gets one candidate) .
3-49:Each non leaf node is assigned the winner of the pairwise election of the node"s children; the candidate assigned to the root wins .
3-50:• Bucklin .
3-51:For any candidate i and integer l, let B(i, l) be the number of voters that rank candidate i among the top l candidates .
3-52:The winner is arg mini(min{l : B(i, l) > n 2}) .
3-53:That is, if we say that a voter approves her top l candidates, then we repeatedly increase l by 1 until some candidate is approved by more than half the voters, and this candidate is the winner .
3-54:• ranked pairs .
3-55:This rule determines an order on all the candidates, and the winner is the candidate at the top of this order .
3-56:Sort all ordered pairs of candidates (i, j) by N(i, j), the number of voters who prefer i to j .
3-57:Starting with the pair (i, j) with the highest N(i, j), we lock in the result of their pairwise election (i j) .
3-58:Then, we move to the next pair, and we lock the result of their pairwise election .
3-59:We continue to lock every pairwise result that does not contradict the ordering established so far .
3-60:We emphasize that these definitions of voting rules do not concern themselves with how the votes are elicited from the voters; all the voting rules, including those that are suggestively defined in terms of rounds, are in actuality just functions mapping the vector of all the voters" votes to a winner .
3-61:Nevertheless, there are always many different ways of eliciting the votes (or the relevant parts thereof) from the voters .
3-62:For example, in the plurality with runoff rule, one way of eliciting the votes is to ask every voter to declare her entire ordering of the candidates up front .
3-63:Alternatively, we can first ask every voter to declare only her most preferred candidate; then, we will know the two candidates in the runoff, and we can ask every voter which of these two candidates she prefers .
3-64:Thus, we distinguish between the voting rule (the mapping from vectors of votes to outcomes) and the communication protocol (which determines how the relevant parts of the votes are actually elicited from the voters) .
3-65:The goal of this paper is to give efficient communication protocols for the voting rules just defined, and to prove that there do not exist any more efficient communication protocols .
3-66:It is interesting to note that the choice of the communication protocol may affect the strategic behavior of the voters .
3-67:Multistage communication protocols may reveal to the voters some information about how the other voters are voting (for example, in the two stage communication protocol just given for plurality with runoff, in the second stage voters 3 Balanced means that the difference in depth between two leaves can be at most one .
3-68:will know which two candidates have the highest plurality scores) .
3-69:In general, when the voters receive such information, it may give them incentives to vote differently than they would have in a single stage communication protocol in which all voters declare their entire votes simultaneously .
3-70:Of course, even the single stage communication protocol is not strategy proof4 for any reasonable voting rule, by the Gibbard Satterthwaite theorem [10, 19] .
3-71:However, this does not mean that we should not be concerned about adding even more opportunities for strategic voting .
3-72:In fact, many of the communication protocols introduced in this paper do introduce additional opportunities for strategic voting, but we do not have the space to discuss this here .
3-73:(In prior work [8], we do give an example where an elicitation protocol for the approval voting rule introduces strategic voting, and give principles for designing elicitation protocols that do not introduce strategic problems.) Now that we have reviewed voting rules, we move on to a brief review of communication complexity theory. .
4 REVIEW OF SOME COMMUNICATION COMPLEXITY THEORY :
4-1:COMPLEXITY THEORY In this section, we review the basic model of a communication problem and the lower bounding technique of constructing a fooling set .
4-2:(The basic model of a communication problem is due to Yao [22]; for an overview see Kushilevitz and Nisan [12].) Each player 1 ≤ i ≤ n knows (only) input xi .
4-3:Together, they seek to compute f(x1, x2, .
4-4:.
4-5:.
4-6:, xn) .
4-7:In a deterministic protocol for computing f, in each stage, one of the players announces (to all other players) a bit of information based on her own input and the bits announced so far .
4-8:Eventually, the communication terminates and all players know f(x1, x2, .
4-9:.
4-10:.
4-11:, xn) .
4-12:The goal is to minimize the worst case (over all input vectors) number of bits sent .
4-13:The deterministic communication complexity of a problem is the worstcase number of bits sent in the best (correct) deterministic protocol for it .
4-14:In a nondeterministic protocol, the next bit to be sent can be chosen nondeterministically .
4-15:For the purposes of this paper, we will consider a nondeterministic protocol correct if for every input vector, there is some sequence of nondeterministic choices the players can make so that the players know the value of f when the protocol terminates .
4-16:The nondeterministic communication complexity of a problem is the worst case number of bits sent in the best (correct) nondeterministic protocol for it .
4-17:We are now ready to give the definition of a fooling set .
4-18:Definition 1 .
4-19:A fooling set is a set of input vectors {(x1 1, x1 2, .
4-20:.
4-21:.
4-22:, x1 n), (x2 1, x2 2, .
4-23:.
4-24:.
4-25:, x2 n), .
4-26:.
4-27:.
4-28:, (xk 1 , xk 2 , .
4-29:.
4-30:.
4-31:, xk n) such that for any i, f(xi 1, xi 2, .
4-32:.
4-33:.
4-34:, xi n) = f0 for some constant f0, but for any i = j, there exists some vector (r1, r2, .
4-35:.
4-36:.
4-37:, rn) ∈ {i, j}n such that f(xr1 1 , xr2 2 , .
4-38:.
4-39:.
4-40:, xrn n ) = f0 .
4-41:(That is, we can mix the inputs from the two input vectors to obtain a vector with a different function value.) It is known that if a fooling set of size k exists, then log k is a lower bound on the communication complexity (even the nondeterministic communication complexity) [12] .
4-42:4 A strategy proof protocol is one in which it is in the players" best interest to report their preferences truthfully .
4-43:80 For the purposes of this paper, f is the voting rule that maps the votes to the winning candidate, and xi is voter i"s vote (the information that the voting rule would require from the voter if there were no possibility of multistage communication i.e .
4-44:the most preferred candidate (plurality), the approved candidates (approval), or the ranking of all the candidates (all other protocols)) .
4-45:However, when we derive our lower bounds, f will only signify whether a distinguished candidate a wins .
4-46:(That is, f is 1 if a wins, and 0 otherwise.) This will strengthen our lower bound results (because it implies that even finding out whether one given candidate wins is hard).5 Thus, a fooling set in our context is a set of vectors of votes so that a wins (does not win) with each of them; but for any two different vote vectors in the set, there is a way of taking some voters" votes from the first vector and the others" votes from the second vector, so that a does not win (wins) .
4-47:To simplify the proofs of our lower bounds, we make assumptions such as the number of voters n is odd in many of these proofs .
4-48:Therefore, technically, we do not prove the lower bound for (number of candidates, number of voters) pairs (m, n) that do not satisfy these assumptions (for example, if we make the above assumption, then we technically do not prove the lower bound for any pair (m, n) in which n is even) .
4-49:Nevertheless, we always prove the lower bound for a representative set of (m, n) pairs .
4-50:For example, for every one of our lower bounds it is the case that for infinitely many values of m, there are infinitely many values of n such that the lower bound is proved for the pair (m, n). .
5 RESULTS :
5-1:We are now ready to present our results .
5-2:For each voting rule, we first give a deterministic communication protocol for determining the winner to establish an upper bound .
5-3:Then, we give a lower bound on the nondeterministic communication complexity (even on the complexity of deciding whether a given candidate wins, which is an easier question) .
5-4:The lower bounds match the upper bounds in all but two cases: the STV rule (upper bound O(n(log m)2 ); lower bound Ω(n log m)) and the maximin rule (upper bound O(nm log m), although we do give a nondeterministic protocol that is O(nm); lower bound Ω(nm)) .
5-5:When we discuss a voting rule in which the voters rank the candidates, we will represent a ranking in which candidate c1 is ranked first, c2 is ranked second, etc .
5-6:as c1 c2 .
5-7:.
5-8:.
5-9:cm .
5-10:5 One possible concern is that in the case where ties are possible, it may require much communication to verify whether a specific candidate a is among the winners, but little communication to produce one of the winners .
5-11:However, all the fooling sets we use in the proofs have the property that if a wins, then a is the unique winner .
5-12:Therefore, in these fooling sets, if one knows any one of the winners, then one knows whether a is a winner .
5-13:Thus, computing one of the winners requires at least as much communication as verifying whether a is among the winners .
5-14:In general, when a communication problem allows multiple correct answers for a given vector of inputs, this is known as computing a relation rather than a function [12] .
5-15:However, as per the above, we can restrict our attention to a subset of the domain where the voting rule truly is a (single valued) function, and hence lower bounding techniques for functions rather than relations will suffice .
5-16:Sometimes for the purposes of a proof the internal ranking of a subset of the candidates does not matter, and in this case we will not specify it .
5-17:For example, if S = {c2, c3}, then c1 S c4 indicates that either the ranking c1 c2 c3 c4 or the ranking c1 c3 c2 c4 can be used for the proof .
5-18:We first give a universal upper bound .
5-19:Theorem 1 .
5-20:The deterministic communication complexity of any rank based voting rule is O(nm log m) .
5-21:Proof .
5-22:This bound is achieved by simply having everyone communicate their entire ordering of the candidates (indicating the rank of an individual candidate requires only O(log m) bits, so each of the n voters can simply indicate the rank of each of the m candidates) .
5-23:The next lemma will be useful in a few of our proofs .
5-24:Lemma 1 .
5-25:If m divides n, then log(n!)−m log((n m)!) ≥ n(log m − 1) 2 .
5-26:Proof .
5-27:If n m = 1 (that is, n = m), then this expression simplifies to log(n!) .
5-28:We have log(n!) = n i=1 log i ≥ n x=1 log(i)dx, which, using integration by parts, is equal to n log n − (n − 1) > n(log n − 1) = n(log m − 1) > n(log m − 1) 2 .
5-29:So, we can assume that n m ≥ 2 .
5-30:We observe that log(n!) = n i=1 log i = n m−1 i=0 m j=1 log(im+j) ≥ n m−1 i=1 m j=1 log(im) = m n m−1 i=1 log(im), and that m log((n m)!) = m n m i=1 log(i) .
5-31:Therefore, log(n!) − m log((n m)!) ≥ m n m−1 i=1 log(im) − m n m i=1 log(i) = m(( n m−1 i=1 log(im i))−log(n m)) = m((n m− 1) log m−log n+log m) = n log m−m log n .
5-32:Now, using the fact that n m ≥ 2, we have m log n = n(m n) log m(n m) = n(m n)(log m + log(n m)) ≤ n(1 2)(log m + log 2) .
5-33:Thus, log(n!) − m log((n m)!) ≥ n log m − m log n ≥ n log m − n(1 2)(log m + log 2) = n(log m − 1) 2 .
5-34:Theorem 2 .
5-35:The deterministic communication complexity of the plurality rule is O(n log m) .
5-36:Proof .
5-37:Indicating one of the candidates requires only O(log m) bits, so each voter can simply indicate her most preferred candidate .
5-38:Theorem 3 .
5-39:The nondeterministic communication complexity of the plurality rule is Ω(n log m) (even to decide whether a given candidate a wins) .
5-40:Proof .
5-41:We will exhibit a fooling set of size n ! (( n m )!)m where n = (n−1) 2 .
5-42:Taking the logarithm of this gives log(n !)− m log((n m)!), so the result follows from Lemma 1 .
5-43:The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 2i−1 and 2i vote the same .
5-44:81 • Every candidate receives equally many votes from the first 2n = n − 1 voters .
5-45:• The last voter (voter n) votes for a .
5-46:Candidate a wins with each one of these vote vectors because of the extra vote for a from the last voter .
5-47:Given that m divides n , let us see how many vote vectors there are in the fooling set .
5-48:We need to distribute n voter pairs evenly over m candidates, for a total of n m voter pairs per candidate; and there are precisely n ! (( n m )!)m ways of doing this.6 All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-49:Let i be a number such that the two vote vectors disagree on the candidate for which voters 2i − 1 and 2i vote .
5-50:Without loss of generality, suppose that in the first vote vector, these voters do not vote for a (but for some other candidate, b, instead) .
5-51:Now, construct a new vote vector by taking votes 2i − 1 and 2i from the first vote vector, and the remaining votes from the second vote vector .
5-52:Then, b receives 2n m + 2 votes in this newly constructed vote vector, whereas a receives at most 2n m+1 votes .
5-53:So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-54:Theorem 4 .
5-55:The deterministic communication complexity of the plurality with runoff rule is O(n log m) .
5-56:Proof .
5-57:First, let every voter indicate her most preferred candidate using log m bits .
5-58:After this, the two candidates in the runoff are known, and each voter can indicate which one she prefers using a single additional bit .
5-59:Theorem 5 .
5-60:The nondeterministic communication complexity of the plurality with runoff rule is Ω(n log m) (even to decide whether a given candidate a wins) .
5-61:Proof .
5-62:We will exhibit a fooling set of size n ! (( n m )!)m where m = m 2 and n = (n − 2) 4 .
5-63:Taking the logarithm of this gives log(n !) − m log((n m )!), so the result follows from Lemma 1 .
5-64:Divide the candidates into m pairs: (c1, d1), (c2, d2), .
5-65:.
5-66:.
5-67:, (cm , dm ) where c1 = a and d1 = b .
5-68:The fooling set will consist of all vectors of votes satisfying the following constraints: • For any 1 ≤ i ≤ n , voters 4i − 3 and 4i − 2 rank the candidates ck(i) a C − {a, ck(i)}, for some candidate ck(i) .
5-69:(If ck(i) = a then the vote is simply a C − {a}.) • For any 1 ≤ i ≤ n , voters 4i − 1 and 4i rank the candidates dk(i) a C − {a, dk(i)} (that is, their most preferred candidate is the candidate that is paired with the candidate that the previous two voters vote for) .
5-70:6 An intuitive proof of this is the following .
5-71:We can count the number of permutations of n elements as follows .
5-72:First, divide the elements into m buckets of size n m, so that if x is placed in a lower indexed bucket than y, then x will be indexed lower in the eventual permutation .
5-73:Then, decide on the permutation within each bucket (for which there are (n m)! choices per bucket) .
5-74:It follows that n ! equals the number of ways to divide n elements into m buckets of size n m, times ((n m)!)m .
5-75:• Every candidate is ranked at the top of equally many of the first 4n = n − 2 votes .
5-76:• Voter 4n +1 = n−1 ranks the candidates a C−{a} .
5-77:• Voter 4n + 2 = n ranks the candidates b C − {b} .
5-78:Candidate a wins with each one of these vote vectors: because of the last two votes, candidates a and b are one vote ahead of all the other candidates and continue to the runoff, and at this point all the votes that had another candidate ranked at the top transfer to a, so that a wins the runoff .
5-79:Given that m divides n , let us see how many vote vectors there are in the fooling set .
5-80:We need to distribute n groups of four voters evenly over the m pairs of candidates, and (as in the proof of Theorem 3) there are n ! (( n m )!)m ways of doing this .
5-81:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-82:Let i be a number such that ck(i) is not the same in both of these two vote vectors, that is, c1 k(i) (ck(i) in the first vote vector) is not equal to c2 k(i) (ck(i) in the second vote vector) .
5-83:Without loss of generality, suppose c1 k(i) = a .
5-84:Now, construct a new vote vector by taking votes 4i − 3, 4i − 2, 4i − 1, 4i from the first vote vector, and the remaining votes from the second vote vector .
5-85:In this newly constructed vote vector, c1 k(i) and d1 k(i) each receive 4n m+2 votes in the first round, whereas a receives at most 4n m+1 votes .
5-86:So, a does not continue to the runoff in the newly constructed vote vector, and hence we have a correct fooling set .
5-87:Theorem 6 .
5-88:The nondeterministic communication complexity of the Borda rule is Ω(nm log m) (even to decide whether a given candidate a wins) .
5-89:Proof .
5-90:We will exhibit a fooling set of size (m !)n where m = m−2 and n = (n−2) 4 .
5-91:This will prove the theorem because m ! is Ω(m log m), so that log((m !)n ) = n log(m !) is Ω(nm log m) .
5-92:For every vector (π1, π2, .
5-93:.
5-94:.
5-95:, πn ) consisting of n orderings of all candidates other than a and another fixed candidate b (technically, the orderings take the form of a one to one function πi : {1, 2, .
5-96:.
5-97:.
5-98:, m } → C − {a, b} with πi(j) = c indicating that candidate c is the jth in the order represented by πi), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates a b πi(1) πi(2) .
5-99:.
5-100:.
5-101:πi(m ) .
5-102:• For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates πi(m ) πi(m − 1) .
5-103:.
5-104:.
5-105:πi(1) b a .
5-106:• Let voter 4n + 1 = n − 1 rank the candidates a b π0(1) π0(2) .
5-107:.
5-108:.
5-109:π0(m ) (where π0 is an arbitrary order of the candidates other than a and b which is the same for every element of the fooling set) .
5-110:• Let voter 4n + 2 = n rank the candidates π0(m ) π0(m − 1) .
5-111:.
5-112:.
5-113:π0(1) a b .
5-114:We observe that this fooling set has size (m !)n , and that candidate a wins in each vector of votes in the fooling set (to 82 see why, we observe that for any 1 ≤ i ≤ n , votes 4i−3 and 4i − 2 rank the candidates in the exact opposite way from votes 4i − 1 and 4i, which under the Borda rule means they cancel out; and the last two votes give one more point to a than to any other candidate besides b who gets two fewer points than a) .
5-115:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-116:Let the first vote vector correspond to the vector (π1 1, π1 2, .
5-117:.
5-118:.
5-119:, π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, .
5-120:.
5-121:.
5-122:, π2 n ) .
5-123:For some i, we must have π1 i = π2 i , so that for some candidate c ∈ {a, b}, (π1 i )−1 (c) < (π2 i )−1 (c) (that is, c is ranked higher in π1 i than in π2 i ) .
5-124:Now, construct a new vote vector by taking votes 4i−3 and 4i−2 from the first vote vector, and the remaining votes from the second vote vector .
5-125:a"s Borda score remains unchanged .
5-126:However, because c is ranked higher in π1 i than in π2 i , c receives at least 2 more points from votes 4i−3 and 4i − 2 in the newly constructed vote vector than it did in the second vote vector .
5-127:It follows that c has a higher Borda score than a in the newly constructed vote vector .
5-128:So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-129:Theorem 7 .
5-130:The nondeterministic communication complexity of the Copeland rule is Ω(nm log m) (even to decide whether a given candidate a wins) .
5-131:Proof .
5-132:We will exhibit a fooling set of size (m !)n where m = (m − 2) 2 and n = (n − 2) 2 .
5-133:This will prove the theorem because m ! is Ω(m log m), so that log((m !)n ) = n log(m !) is Ω(nm log m) .
5-134:We write the set of candidates as the following disjoint union: C = {a, b} ∪ L ∪ R where L = {l1, l2, .
5-135:.
5-136:.
5-137:, lm } and R = {r1, r2, .
5-138:.
5-139:.
5-140:, rm } .
5-141:For every vector (π1, π2, .
5-142:.
5-143:.
5-144:, πn ) consisting of n permutations of the integers 1 through m (πi : {1, 2, .
5-145:.
5-146:.
5-147:, m } → {1, 2, .
5-148:.
5-149:.
5-150:, m }), let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates a b lπi(1) rπi(1) lπi(2) rπi(2) .
5-151:.
5-152:.
5-153:lπi(m ) rπi(m ) .
5-154:• For 1 ≤ i ≤ n , let voter 2i rank the candidates rπi(m ) lπi(m ) rπi(m −1) lπi(m −1) .
5-155:.
5-156:.
5-157:rπi(1) lπi(1) b a .
5-158:• Let voter n − 1 = 2n + 1 rank the candidates a b l1 r1 l2 r2 .
5-159:.
5-160:.
5-161:lm rm .
5-162:• Let voter n = 2n +2 rank the candidates rm lm rm −1 lm −1 .
5-163:.
5-164:.
5-165:r1 l1 a b .
5-166:We observe that this fooling set has size (m !)n , and that candidate a wins in each vector of votes in the fooling set (every pair of candidates is tied in their pairwise election, with the exception that a defeats b, so that a wins the election by half a point) .
5-167:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-168:Let the first vote vector correspond to the vector (π1 1, π1 2, .
5-169:.
5-170:.
5-171:, π1 n ), and let the second vote vector correspond to the vector (π2 1, π2 2, .
5-172:.
5-173:.
5-174:, π2 n ) .
5-175:For some i, we must have π1 i = π2 i , so that for some j ∈ {1, 2, .
5-176:.
5-177:.
5-178:, m }, we have (π1 i )−1 (j) < (π2 i )−1 (j) .
5-179:Now, construct a new vote vector by taking vote 2i−1 from the first vote vector, and the remaining votes from the second vote vector .
5-180:a"s Copeland score remains unchanged .
5-181:Let us consider the score of lj .
5-182:We first observe that the rank of lj in vote 2i − 1 in the newly constructed vote vector is at least 2 higher than it was in the second vote vector, because (π1 i )−1 (j) < (π2 i )−1 (j) .
5-183:Let D1 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the first vote vector (D1 (lj) = {c ∈ L ∪ R : lj 1 2i−1 c}), and let D2 (lj) be the set of candidates in L ∪ R that voter 2i − 1 ranked lower than lj in the second vote vector (D2 (lj) = {c ∈ L ∪ R : lj 2 2i−1 c}) .
5-184:Then, it follows that in the newly constructed vote vector, lj defeats all the candidates in D1 (lj) − D2 (lj) in their pairwise elections (because lj receives an extra vote in each one of these pairwise elections relative to the second vote vector), and loses to all the candidates in D2 (lj) − D1 (lj) (because lj loses a vote in each one of these pairwise elections relative to the second vote vector), and ties with everyone else .
5-185:But |D1 (lj)|−|D2 (lj)| ≥ 2, and hence |D1 (lj) − D2 (lj)| − |D2 (lj) − D1 (lj)| ≥ 2 .
5-186:Hence, in the newly constructed vote vector, lj has at least two more pairwise wins than pairwise losses, and therefore has at least 1 more point than if lj had tied all its pairwise elections .
5-187:Thus, lj has a higher Copeland score than a in the newly constructed vote vector .
5-188:So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-189:Theorem 8 .
5-190:The nondeterministic communication complexity of the maximin rule is O(nm) .
5-191:Proof .
5-192:The nondeterministic protocol will guess which candidate w is the winner, and, for each other candidate c, which candidate o(c) is the candidate against whom c receives its lowest score in a pairwise election .
5-193:Then, let every voter communicate the following: • for each candidate c = w, whether she prefers c to w; • for each candidate c = w, whether she prefers c to o(c) .
5-194:We observe that this requires the communication of 2n(m− 1) bits .
5-195:If the guesses were correct, then, letting N(d, e) be the number of voters preferring candidate d to candidate e, we should have N(c, o(c)) < N(w, c ) for any c = w, c = w, which will prove that w wins the election .
5-196:Theorem 9 .
5-197:The nondeterministic communication complexity of the maximin rule is Ω(nm) (even to decide whether a given candidate a wins) .
5-198:Proof .
5-199:We will exhibit a fooling set of size 2n m where m = m − 2 and n = (n − 1) 4 .
5-200:Let b be a candidate other than a .
5-201:For every vector (S1, S2, .
5-202:.
5-203:.
5-204:, Sn ) consisting of n subsets Si ⊆ C − {a, b}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 rank the candidates Si a C − (Si ∪ {a, b}) b .
5-205:• For 1 ≤ i ≤ n , let voters 4i − 1 and 4i rank the candidates b C − (Si ∪ {a, b}) a Si .
5-206:83 • Let voter 4n + 1 = n rank the candidates a b C − {a, b} .
5-207:We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (in every one of a"s pairwise elections, a is ranked higher than its opponent by 2n +1 = (n+1) 2 > n 2 votes) .
5-208:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-209:Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
5-210:.
5-211:.
5-212:, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
5-213:.
5-214:.
5-215:, S2 n ) .
5-216:For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
5-217:Without loss of generality, suppose S1 i S2 i , and let c be some candidate in S1 i − S2 i .
5-218:Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector .
5-219:In this newly constructed vote vector, a is ranked higher than c by only 2n −1 voters, for the following reason .
5-220:Whereas voters 4i−3 and 4i − 2 do not rank c higher than a in the second vote vector (because c ∈ S2 i ), voters 4i − 3 and 4i − 2 do rank c higher than a in the first vote vector (because c ∈ S1 i ) .
5-221:Moreover, in every one of b"s pairwise elections, b is ranked higher than its opponent by at least 2n voters .
5-222:So, a has a lower maximin score than b, therefore a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-223:Theorem 10 .
5-224:The deterministic communication complexity of the STV rule is O(n(log m)2 ) .
5-225:Proof .
5-226:Consider the following communication protocol .
5-227:Let each voter first announce her most preferred candidate (O(n log m) communication) .
5-228:In the remaining rounds, we will keep track of each voter"s most preferred candidate among the remaining candidates, which will be enough to implement the rule .
5-229:When candidate c is eliminated, let each of the voters whose most preferred candidate among the remaining candidates was c announce their most preferred candidate among the candidates remaining after c"s elimination .
5-230:If candidate c was the ith candidate to be eliminated (that is, there were m − i + 1 candidates remaining before c"s elimination), it follows that at most n (m − i + 1) voters had candidate c as their most preferred candidate among the remaining candidates, and thus the number of bits to be communicated after the elimination of the ith candidate is O((n (m−i+1)) log m).7 Thus, the total communication in this communication protocol is O(n log m + m−1 i=1 (n (m − i + 1)) log m) .
5-231:Of course, m−1 i=1 1 (m − i + 1) = m i=2 1 i, which is O(log m) .
5-232:Substituting into the previous expression, we find that the communication complexity is O(n(log m)2 ) .
5-233:Theorem 11 .
5-234:The nondeterministic communication complexity of the STV rule is Ω(n log m) (even to decide whether a given candidate a wins) .
5-235:Proof .
5-236:We omit this proof because of space constraint .
5-237:7 Actually, O((n (m − i + 1)) log(m − i + 1)) is also correct, but it will not improve the bound .
5-238:Theorem 12 .
5-239:The deterministic communication complexity of the approval rule is O(nm) .
5-240:Proof .
5-241:Approving or disapproving of a candidate requires only one bit of information, so every voter can simply approve or disapprove of every candidate for a total communication of nm bits .
5-242:Theorem 13 .
5-243:The nondeterministic communication complexity of the approval rule is Ω(nm) (even to decide whether a given candidate a wins) .
5-244:Proof .
5-245:We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1) 4 .
5-246:For every vector (S1, S2, .
5-247:.
5-248:.
5-249:, Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voters 4i − 3 and 4i − 2 approve Si ∪ {a} .
5-250:• For 1 ≤ i ≤ n , let voters 4i − 1 and 4i approve C − (Si ∪ {a}) .
5-251:• Let voter 4n + 1 = n approve {a} .
5-252:We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a is approved by 2n + 1 voters, whereas each other candidate is approved by only 2n voters) .
5-253:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-254:Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
5-255:.
5-256:.
5-257:, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
5-258:.
5-259:.
5-260:, S2 n ) .
5-261:For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
5-262:Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .
5-263:Now, construct a new vote vector by taking votes 4i − 3 and 4i − 2 from the first vote vector, and the remaining votes from the second vote vector .
5-264:In this newly constructed vote vector, a is still approved by 2n + 1 votes .
5-265:However, b is approved by 2n + 2 votes, for the following reason .
5-266:Whereas voters 4i−3 and 4i−2 do not approve b in the second vote vector (because b ∈ S2 i ), voters 4i − 3 and 4i − 2 do approve b in the first vote vector (because b ∈ S1 i ) .
5-267:It follows that b"s score in the newly constructed vote vector is b"s score in the second vote vector (2n ), plus two .
5-268:So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-269:Interestingly, an Ω(m) lower bound can be obtained even for the problem of finding a candidate that is approved by more than one voter [20] .
5-270:Theorem 14 .
5-271:The deterministic communication complexity of the Condorcet rule is O(nm) .
5-272:Proof .
5-273:We maintain a set of active candidates S which is initialized to C .
5-274:At each stage, we choose two of the active candidates (say, the two candidates with the lowest indices), and we let each voter communicate which of the two candidates she prefers .
5-275:(Such a stage requires the communication of n bits, one per voter.) The candidate preferred by fewer 84 voters (the loser of the pairwise election) is removed from removed.) After at most m − 1 iterations, only one candidate is left (or zero candidates are left, in which case there is no Condorcet winner) .
5-276:Let a be the remaining candidate .
5-277:To find out whether candidate a is the Condorcet winner, let each voter communicate, for every candidate c = a, whether she prefers a to c .
5-278:(This requires the communication of at most n(m − 1) bits.) This is enough to establish whether a won each of its pairwise elections (and thus, whether a is the Condorcet winner) .
5-279:Theorem 15 .
5-280:The nondeterministic communication complexity of the Condorcet rule is Ω(nm) (even to decide whether a given candidate a wins) .
5-281:Proof .
5-282:We will exhibit a fooling set of size 2n m where m = m − 1 and n = (n − 1) 2 .
5-283:For every vector (S1, S2, .
5-284:.
5-285:.
5-286:, Sn ) consisting of n subsets Si ⊆ C − {a}, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si a C − Si .
5-287:• For 1 ≤ i ≤ n , let voter 2i rank the candidates C − Si a Si .
5-288:• Let voter 2n +1 = n rank the candidates a C −{a} .
5-289:We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set (a wins each of its pairwise elections by a single vote) .
5-290:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-291:Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
5-292:.
5-293:.
5-294:, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
5-295:.
5-296:.
5-297:, S2 n ) .
5-298:For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
5-299:Without loss of generality, suppose S1 i S2 i , and let b be some candidate in S1 i − S2 i .
5-300:Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector .
5-301:In this newly constructed vote vector, b wins its pairwise election against a by one vote (vote 2i − 1 ranks b above a in the newly constructed vote vector because b ∈ S1 i , whereas in the second vote vector vote 2i − 1 ranked a above b because b ∈ S2 i ) .
5-302:So, a is not the Condorcet winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-303:Theorem 16 .
5-304:The deterministic communication complexity of the cup rule is O(nm) .
5-305:Proof .
5-306:Consider the following simple communication protocol .
5-307:First, let all the voters communicate, for every one of the matchups in the first round, which of its two candidates they prefer .
5-308:After this, the matchups for the second round are known, so let all the voters communicate which candidate they prefer in each matchup in the second round etc .
5-309:Because communicating which of two candidates is preferred requires only one bit per voter, and because there are only m − 1 matchups in total, this communication protocol requires O(nm) communication .
5-310:Theorem 17 .
5-311:The nondeterministic communication complexity of the cup rule is Ω(nm) (even to decide whether a given candidate a wins) .
5-312:Proof .
5-313:We will exhibit a fooling set of size 2n m where m = (m − 1) 2 and n = (n − 7) 2 .
5-314:Given that m + 1 is a power of 2, so that one candidate gets a bye (that is, does not face an opponent) in the first round, let a be the candidate with the bye .
5-315:Of the m first round matchups, let lj denote the one (left) candidate in the jth matchup, and let rj be the other (right) candidate .
5-316:Let L = {lj : 1 ≤ j ≤ m } and R = {rj : 1 ≤ j ≤ m }, so that C = L ∪ R ∪ {a} .
5-317:.
5-318:.
5-319:.
5-320:.
5-321:.
5-322:.
5-323:.
5-324:.
5-325:.
5-326:l r l r l r a m"1 1 2 2 m" Figure 1: The schedule for the cup rule used in the proof of Theorem 17 .
5-327:For every vector (S1, S2, .
5-328:.
5-329:.
5-330:, Sn ) consisting of n subsets Si ⊆ R, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates Si L a R − Si .
5-331:• For 1 ≤ i ≤ n , let voter 2i rank the candidates R − Si L a Si .
5-332:• Let voters 2n +1 = n−6, 2n +2 = n−5, 2n +3 = n−4 rank the candidates L a R .
5-333:• Let voters 2n + 4 = n − 3, 2n + 5 = n − 2 rank the candidates a r1 l1 r2 l2 .
5-334:.
5-335:.
5-336:rm lm .
5-337:• Let voters 2n + 6 = n − 1, 2n + 7 = n rank the candidates rm lm rm −1 lm −1 .
5-338:.
5-339:.
5-340:r1 l1 a .
5-341:We observe that this fooling set has size (2m )n = 2n m .
5-342:Also, candidate a wins in each vector of votes in the fooling set, for the following reasons .
5-343:Each candidate rj defeats its opponent lj in the first round .
5-344:(For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between rj and lj is zero; votes n − 6, n − 5, n − 4 prefer lj to rj, but votes n − 3, n − 2, n − 1, n all prefer rj to lj.) Moreover, a defeats every rj in their pairwise election .
5-345:(For any 1 ≤ i ≤ n , the net effect of votes 2i − 1 and 2i on the pairwise election between a and rj is zero; votes n − 1, n prefer rj to a, but votes n − 6, n − 5, n − 4, n − 3, n − 2 all prefer a to rj.) It follows that a will defeat all the candidates that it faces .
5-346:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-347:Let the first vote vector correspond to the vector 85 (S1 1 , S1 2 , .
5-348:.
5-349:.
5-350:, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
5-351:.
5-352:.
5-353:, S2 n ) .
5-354:For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
5-355:Without loss of generality, suppose S1 i S2 i , and let rj be some candidate in S1 i − S2 i .
5-356:Now, construct a new vote vector by taking vote 2i from the first vote vector, and the remaining votes from the second vote vector .
5-357:We note that, whereas in the second vote vector vote 2i preferred rj to lj (because rj ∈ R−S2 i ), in the newly constructed vote vector this is no longer the case (because rj ∈ S1 i ) .
5-358:It follows that, whereas in the second vote vector, rj defeated lj in the first round by one vote, in the newly constructed vote vector, lj defeats rj in the first round .
5-359:Thus, at least one lj advances to the second round after defeating its opponent rj .
5-360:Now, we observe that in the newly constructed vote vector, any lk wins its pairwise election against any rq with q = k .
5-361:This is because among the first 2n votes, at least n − 1 prefer lk to rq; votes n − 6, n − 5, n − 4 prefer lk to rq; and, because q = k, either votes n − 3, n − 2 prefer lk to rq (if k < q), or votes n − 1, n prefer lk to rq (if k > q) .
5-362:Thus, at least n + 4 = (n + 1) 2 > n 2 votes prefer lk to rq .
5-363:Moreover, any lk wins its pairwise election against a .
5-364:This is because only votes n − 3 and n − 2 prefer a to lk .
5-365:It follows that, after the first round, any surviving candidate lk can only lose a matchup against another surviving lk , so that one of the lk must win the election .
5-366:So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-367:Theorem 18 .
5-368:The deterministic communication complexity of the Bucklin rule is O(nm) .
5-369:Proof .
5-370:Let l be the minimum integer for which there is a candidate who is ranked among the top l candidates by more than half the votes .
5-371:We will do a binary search for l .
5-372:At each point, we will have a lower bound lL which is smaller than l (initialized to 0), and an upper bound lH which is at least l (initialized to m) .
5-373:While lH − lL > 1, we continue by finding out whether (lH − l) 2 is smaller than l, after which we can update the bounds .
5-374:To find out whether a number k is smaller than l, we determine every voter"s k most preferred candidates .
5-375:Every voter can communicate which candidates are among her k most preferred candidates using m bits (for each candidate, indicate whether the candidate is among the top k or not), but because the binary search requires log m iterations, this gives us an upper bound of O((log m)nm), which is not strong enough .
5-376:However, if lL < k < lH , and we already know a voter"s lL most preferred candidates, as well as her lH most preferred candidates, then the voter no longer needs to communicate whether the lL most preferred candidates are among her k most preferred candidates (because they must be), and she no longer needs to communicate whether the m−lH least preferred candidates are among her k most preferred candidates (because they cannot be) .
5-377:Thus the voter needs to communicate only m−lL −(m−lH ) = lH −lL bits in any given stage .
5-378:Because each stage, lH − lL is (roughly) halved, each voter in total communicates only (roughly) m + m 2 + m 4 + .
5-379:.
5-380:.
5-381:≤ 2m bits .
5-382:Theorem 19 .
5-383:The nondeterministic communication complexity of the Bucklin rule is Ω(nm) (even to decide whether a given candidate a wins) .
5-384:Proof .
5-385:We will exhibit a fooling set of size 2n m where m = (m−1) 2 and n = n 2 .
5-386:We write the set of candidates as the following disjoint union: C = {a} ∪ L ∪ R where L = {l1, l2, .
5-387:.
5-388:.
5-389:, lm } and R = {r1, r2, .
5-390:.
5-391:.
5-392:, rm } .
5-393:For any subset S ⊆ {1, 2, .
5-394:.
5-395:.
5-396:, m }, let L(S) = {li : i ∈ S} and let R(S) = {ri : i ∈ S} .
5-397:For every vector (S1, S2, .
5-398:.
5-399:.
5-400:, Sn ) consisting of n sets Si ⊆ {1, 2, .
5-401:.
5-402:.
5-403:, m }, let the following vector of votes be an element of the fooling set: • For 1 ≤ i ≤ n , let voter 2i − 1 rank the candidates L(Si) R − R(Si) a L − L(Si) R(Si) .
5-404:• For 1 ≤ i ≤ n , let voter 2i rank the candidates L − L(Si) R(Si) a L(Si) R − R(Si) .
5-405:We observe that this fooling set has size (2m )n = 2n m , and that candidate a wins in each vector of votes in the fooling set, for the following reason .
5-406:Each candidate in C − {a} is ranked among the top m candidates by exactly half the voters (which is not enough to win) .
5-407:Thus, we need to look at the voters" top m +1 candidates, and a is ranked m +1th by all voters .
5-408:All that remains to show is that for any two distinct vectors of votes in the fooling set, we can let each of the voters vote according to one of these two vectors in such a way that a loses .
5-409:Let the first vote vector correspond to the vector (S1 1 , S1 2 , .
5-410:.
5-411:.
5-412:, S1 n ), and let the second vote vector correspond to the vector (S2 1 , S2 2 , .
5-413:.
5-414:.
5-415:, S2 n ) .
5-416:For some i, we must have S1 i = S2 i , so that either S1 i S2 i or S2 i S1 i .
5-417:Without loss of generality, suppose S1 i S2 i , and let j be some integer in S1 i − S2 i .
5-418:Now, construct a new vote vector by taking vote 2i − 1 from the first vote vector, and the remaining votes from the second vote vector .
5-419:In this newly constructed vote vector, a is still ranked m + 1th by all votes .
5-420:However, lj is ranked among the top m candidates by n + 1 = n 2 + 1 votes .
5-421:This is because whereas vote 2i − 1 does not rank lj among the top m candidates in the second vote vector (because j ∈ S2 i , we have lj ∈ L(S2 i )), vote 2i − 1 does rank lj among the top m candidates in the first vote vector (because j ∈ S1 i , we have lj ∈ L(S1 i )) .
5-422:So, a is not the winner in the newly constructed vote vector, and hence we have a correct fooling set .
5-423:Theorem 20 .
5-424:The nondeterministic communication complexity of the ranked pairs rule is Ω(nm log m) (even to decide whether a given candidate a wins) .
5-425:Proof .
5-426:We omit this proof because of space constraint. .
6-1:One key obstacle to using voting for preference aggregation is the communication burden that an election places on the voters
6-2:By lowering this burden, it may become feasible to conduct more elections over more issues
6-3:In the limit, this could lead to a shift from representational government to a system in which most issues are decided by referenda a veritable e democracy
6-4:In this paper, we analyzed the communication complexity of the common voting rules
6-5:Knowing which voting rules require little communication is especially important when the issue to be voted on is of low enough importance that the following is true: the parties involved are willing to accept a rule that tends 86 to produce outcomes that are slightly less representative of the voters" preferences, if this rule reduces the communication burden on the voters significantly
6-6:The following table summarizes the results we obtained
6-7:Rule Lower bound Upper bound plurality Ω(n log m) O(n log m) plurality w  runoff Ω(n log m) O(n log m) STV Ω(n log m) O(n(log m)2) Condorcet Ω(nm) O(nm) approval Ω(nm) O(nm) Bucklin Ω(nm) O(nm) cup Ω(nm) O(nm) maximin Ω(nm) O(nm) Borda Ω(nm log m) O(nm log m) Copeland Ω(nm log m) O(nm log m) ranked pairs Ω(nm log m) O(nm log m) Communication complexity of voting rules, sorted from low to high
6-8:All of the upper bounds are deterministic (with the exception of maximin, for which the best deterministic upper bound we proved is O(nm log m))
6-9:All of the lower bounds hold even for nondeterministic communication and even just for determining whether a given candidate a is the winner
6-10:One area of future research is to study what happens when we restrict our attention to communication protocols that do not reveal any strategically useful information
6-11:This restriction may invalidate some of the upper bounds that we derived using multistage communication protocols
6-12:Also, all of our bounds are worst case bounds
6-13:It may be possible to outperform these bounds when the distribution of votes has additional structure
6-14:When deciding which voting rule to use for an election, there are many considerations to take into account
6-15:The voting rules that we studied in this paper are the most common ones that have survived the test of time
6-16:One way to select among these rules is to consider recent results on complexity
6-17:The table above shows that from a communication complexity perspective, plurality, plurality with runoff, and STV are preferable
6-18:However, plurality has the undesirable property that it is computationally easy to manipulate by voting strategically [3, 7]
6-19:Plurality with runoff is NP hard to manipulate by a coalition of weighted voters, or by an individual that faces correlated uncertainty about the others" votes [7, 6]
6-20:STV is NP hard to manipulate in those settings as well [7], but also by an individual with perfect knowledge of the others" votes (when the number of candidates is unbounded) [2]
6-21:Therefore, STV is more robust, although it may require slightly more worst case communication as per the table above
6-22:Yet other selection criteria are the computational complexity of determining whether enough information has been elicited to declare a winner, and that of determining the optimal sequence of queries [8].
7-1:Lawrence Ausubel and Paul Milgrom
7-2:Ascending auctions with package bidding
7-3:Frontiers of Theoretical Economics, 1, 2002
7-4:No
7-5:1, Article 1
7-6:John Bartholdi, III and James Orlin
7-7:Single transferable vote resists strategic voting
7-8:Social Choice and Welfare, 8(4):341 354, 1991
7-9:John Bartholdi, III, Craig Tovey, and Michael Trick
7-10:The computational difficulty of manipulating an election
7-11:Social Choice and Welfare, 6(3):227 241, 1989
7-12:Avrim Blum, Jeffrey Jackson, Tuomas Sandholm, and Martin Zinkevich
7-13:Preference elicitation and query learning
7-14:Journal of Machine Learning Research, 5:649 667, 2004
7-15:Wolfram Conen and Tuomas Sandholm
7-16:Preference elicitation in combinatorial auctions: Extended abstract
7-17:In Proceedings of the ACM Conference on Electronic Commerce (ACM EC), pages 256 259, 2001
7-18:Vincent Conitzer, Jerome Lang, and Tuomas Sandholm
7-19:How many candidates are needed to make elections hard to manipulate? In Theoretical Aspects of Rationality and Knowledge (TARK), pages 201 214, 2003
7-20:Vincent Conitzer and Tuomas Sandholm
7-21:Complexity of manipulating elections with few candidates
7-22:In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 314 319, 2002
7-23:Vincent Conitzer and Tuomas Sandholm
7-24:Vote elicitation: Complexity and strategy proofness
7-25:In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 392 397, 2002
7-26:Sven de Vries, James Schummer, and Rakesh V
7-27:Vohra
7-28:On ascending auctions for heterogeneous objects, 2003
7-29:Draft
7-30:Allan Gibbard
7-31:Manipulation of voting schemes
7-32:Econometrica, 41:587 602, 1973
7-33:Benoit Hudson and Tuomas Sandholm
7-34:Effectiveness of query types and policies for preference elicitation in combinatorial auctions
7-35:In International Conference on Autonomous Agents and Multi Agent Systems (AAMAS), pages 386 393, 2004
7-36:E Kushilevitz and N Nisan
7-37:Communication Complexity
7-38:Cambridge University Press, 1997
7-39:Sebasti´en Lahaie and David Parkes
7-40:Applying learning algorithms to preference elicitation
7-41:In Proceedings of the ACM Conference on Electronic Commerce, 2004
7-42:Noam Nisan and Ilya Segal
7-43:The communication requirements of efficient allocations and supporting prices
7-44:Journal of Economic Theory, 2005
7-45:Forthcoming
7-46:David Parkes
7-47:iBundle: An efficient ascending price bundle auction
7-48:In Proceedings of the ACM Conference on Electronic Commerce (ACM EC), pages 148 157, 1999
7-49:Tuomas Sandholm
7-50:An implementation of the contract net protocol based on marginal cost calculations
7-51:In Proceedings of the National Conference on Artificial Intelligence (AAAI), pages 256 262, 1993
7-52:Tuomas Sandholm and Craig Boutilier
7-53:Preference elicitation in combinatorial auctions
7-54:In Peter Cramton, Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions, chapter 10
7-55:MIT Press, 2005
7-56:Paolo Santi, Vincent Conitzer, and Tuomas Sandholm
7-57:Towards a characterization of polynomial preference elicitation with value queries in combinatorial auctions
7-58:In Conference on Learning Theory (COLT), pages 1 16, 2004
7-59:Mark Satterthwaite
7-60:Strategy proofness and Arrow"s conditions: existence and correspondence theorems for voting procedures and social welfare functions
7-61:Journal of Economic Theory, 10:187 217, 1975
7-62:Ilya Segal
7-63:The communication requirements of social choice rules and supporting budget sets, 2004
7-64:Draft
7-65:Presented at the DIMACS Workshop on Computational Issues in Auction Design, Rutgers University, New Jersey, USA
7-66:Peter Wurman and Michael Wellman
7-67:AkBA: A progressive, anonymous price combinatorial auction
7-68:In Proceedings of the ACM Conference on Electronic Commerce (ACM EC), pages 21 29, 2000
7-69:A
7-70:C
7-71:Yao
7-72:Some complexity questions related to distributed computing
7-73:In Proceedings of the 11th ACM symposium on theory of computing (STOC), pages 209 213, 1979
7-74:Martin Zinkevich, Avrim Blum, and Tuomas Sandholm
7-75:On polynomial time preference elicitation with value queries
7-76:In Proceedings of the ACM Conference on Electronic Commerce (ACM EC), pages 176 185, 2003
7-77:87
picture:
