Complexity of (Iterated) Dominance∗ 
content:
1 ABSTRACT :
1-1:We study various computational aspects of solving games using dominance and iterated dominance .
1-2:We first study both strict and weak dominance (not iterated), and show that checking whether a given strategy is dominated by some mixed strategy can be done in polynomial time using a single linear program solve .
1-3:We then move on to iterated dominance .
1-4:We show that determining whether there is some path that eliminates a given strategy is NP complete with iterated weak dominance .
1-5:This allows us to also show that determining whether there is a path that leads to a unique solution is NP complete .
1-6:Both of these results hold both with and without dominance by mixed strategies .
1-7:(A weaker version of the second result (only without dominance by mixed strategies) was already known [7].) Iterated strict dominance, on the other hand, is path independent (both with and without dominance by mixed strategies) and can therefore be done in polynomial time .
1-8:We then study what happens when the dominating strategy is allowed to place positive probability on only a few pure strategies .
1-9:First, we show that finding the dominating strategy with minimum support size is NP complete (both for strict and weak dominance) .
1-10:Then, we show that iterated strict dominance becomes path dependent when there is a limit on the support size of the dominating strategies, and that deciding whether a given strategy can be eliminated by iterated strict dominance under this restriction is NP complete (even when the limit on the support size is 3) .
1-11:Finally, we study Bayesian games .
1-12:We show that, unlike in normal form games, deciding whether a given pure strategy is dominated by another pure strategy in a Bayesian game is NP complete (both with strict and weak dominance); however, deciding whether a strategy is dominated by some mixed strategy can still be done in polynomial time with a single linear program solve (both with strict and weak ∗ This material is based upon work supported by the National Science Foundation under ITR grants IIS 0121678 and IIS 0427858, and a Sloan Fellowship .
1-13:dominance) .
1-14:Finally, we show that iterated dominance using pure strategies can require an exponential number of iterations in a Bayesian game (both with strict and weak dominance) .
1-15:F.2 [Theory of Computation]: Analysis of Algorithms .
2 INTRODUCTION :
2-1:In multiagent systems with self interested agents, the optimal action for one agent may depend on the actions taken by other agents .
2-2:In such settings, the agents require tools from game theory to rationally decide on an action .
2-3:Game theory offers various formal models of strategic settings the best known of which is a game in normal (or matrix) form, specifying a utility (payoff) for each agent for each combination of strategies that the agents choose as well as solution concepts, which, given a game, specify which outcomes are reasonable (under various assumptions of rationality and common knowledge) .
2-4:Probably the best known (and certainly the most studied) solution concept is that of Nash equilibrium .
2-5:A Nash equilibrium specifies a strategy for each player, in such a way that no player has an incentive to (unilaterally) deviate from the prescribed strategy .
2-6:Recently, numerous papers have studied computing Nash equilibria in various settings [9, 4, 12, 3, 13, 14], and the complexity of constructing a Nash equilibrium in normal form games has been labeled one of the two most important open problems on the boundary of P today [20] .
2-7:The problem of computing solutions according to the perhaps more elementary solution concepts of dominance and iterated dominance has received much less attention .
2-8:(After an early short paper on an easy case [11], the main computational study of these concepts has actually taken place in a paper in the game theory community [7].1 ) A strategy strictly dominates another strategy if it performs strictly 1 This is not to say that computer scientists have ignored 88 better against all vectors of opponent strategies, and weakly dominates it if it performs at least as well against all vectors of opponent strategies, and strictly better against at least one .
2-9:The idea is that dominated strategies can be eliminated from consideration .
2-10:In iterated dominance, the elimination proceeds in rounds, and becomes easier as more strategies are eliminated: in any given round, the dominating strategy no longer needs to perform better than or as well as the dominated strategy against opponent strategies that were eliminated in earlier rounds .
2-11:Computing solutions according to (iterated) dominance is important for at least the following reasons: 1) it can be computationally easier than computing (for instance) a Nash equilibrium (and therefore it can be useful as a preprocessing step in computing a Nash equilibrium), and 2) (iterated) dominance requires a weaker rationality assumption on the players than (for instance) Nash equilibrium, and therefore solutions derived according to it are more likely to occur .
2-12:In this paper, we study some fundamental computational questions concerning dominance and iterated dominance, including how hard it is to check whether a given strategy can be eliminated by each of the variants of these notions .
2-13:The rest of the paper is organized as follows .
2-14:In Section 2, we briefly review definitions and basic properties of normal form games, strict and weak dominance, and iterated strict and weak dominance .
2-15:In the remaining sections, we study computational aspects of dominance and iterated dominance .
2-16:In Section 3, we study one shot (not iterated) dominance .
2-17:In Section 4, we study iterated dominance .
2-18:In Section 5, we study dominance and iterated dominance when the dominating strategy can only place probability on a few pure strategies .
2-19:Finally, in Section 6, we study dominance and iterated dominance in Bayesian games. .
3 DEFINITIONS AND BASIC PROPERTIES :
3-1:In this section, we briefly review normal form games, as well as dominance and iterated dominance (both strict and weak) .
3-2:An n player normal form game is defined as follows .
3-3:Definition 1 .
3-4:A normal form game is given by a set of players {1, 2, .
3-5:.
3-6:.
3-7:, n}; and, for each player i, a (finite) set of pure strategies Σi and a utility function ui : Σ1 × Σ2 × .
3-8:.
3-9:.
3-10:× Σn → R (where ui(σ1, σ2, .
3-11:.
3-12:.
3-13:, σn) denotes player i"s utility when each player j plays action σj) .
3-14:The two main notions of dominance are defined as follows .
3-15:Definition 2 .
3-16:Player i"s strategy σi is said to be strictly dominated by player i"s strategy σi if for any vector of strategies σ−i for the other players, ui(σi, σ−i) > ui(σi, σ−i) .
3-17:Player i"s strategy σi is said to be weakly dominated by player i"s strategy σi if for any vector of strategies σ−i for the other players, ui(σi, σ−i) ≥ ui(σi, σ−i), and for at least one vector of strategies σ−i for the other players, ui(σi, σ−i) > ui(σi, σ−i) .
3-18:In this definition, it is sometimes allowed for the dominating strategy σi to be a mixed strategy, that is, a probability distribution over pure strategies .
3-19:In this case, the utilities in dominance altogether .
3-20:For example, simple dominance checks are sometimes used as a subroutine in searching for Nash equilibria [21] .
3-21:the definition are the expected utilities.2 There are other notions of dominance, such as very weak dominance (in which no strict inequality is required, so two strategies can dominate each other), but we will not study them here .
3-22:When we are looking at the dominance relations for player i, the other players (−i) can be thought of as a single player.3 Therefore, in the rest of the paper, when we study one shot (not iterated) dominance, we will focus without loss of generality on two player games.4 In two player games, we will generally refer to the players as r (row) and c (column) rather than 1 and 2 .
3-23:In iterated dominance, dominated strategies are removed from the game, and no longer have any effect on future dominance relations .
3-24:Iterated dominance can eliminate more strategies than dominance, as follows .
3-25:σr may originally not dominate σr because the latter performs better against σc; but then, once σc is removed because it is dominated by σc, σr dominates σr, and the latter can be removed .
3-26:For example, in the following game, R can be removed first, after which D is dominated .
3-27:L R U 1, 1 0, 0 D 0, 1 1, 0 Either strict or weak dominance can be used in the definition of iterated dominance .
3-28:We note that the process of iterated dominance is never helped by removing a dominated mixed strategy, for the following reason .
3-29:If σi gives player i a higher utility than σi against mixed strategy σj for player j = i (and strategies σ−{i,j} for the other players), then for at least one pure strategy σj that σj places positive probability on, σi must perform better than σi against σj (and strategies σ−{i,j} for the other players) .
3-30:Thus, removing the mixed strategy σj does not introduce any new dominances .
3-31:More detailed discussions and examples can be found in standard texts on microeconomics or game theory [17, 5] .
3-32:We are now ready to move on to the core of this paper. .
4 DOMINANCE (NOT ITERATED) :
4-1:In this section, we study the notion of one shot (not iterated) dominance .
4-2:As a first observation, checking whether a given strategy is strictly (weakly) dominated by some pure strategy is straightforward, by checking, for every pure strategy for that player, whether the latter strategy performs strictly better against all the opponent"s strategies (at least as well against all the opponent"s strategies, and strictly 2 The dominated strategy σi is, of course, also allowed to be mixed, but this has no technical implications for the paper: when we study one shot dominance, we ask whether a given strategy is dominated, and it does not matter whether the given strategy is pure or mixed; when we study iterated dominance, there is no use in eliminating mixed strategies, as we will see shortly .
4-3:3 This player may have a very large strategy space (one pure strategy for every vector of pure strategies for the players that are being replaced) .
4-4:Nevertheless, this will not result in an increase in our representation size, because the original representation already had to specify utilities for each of these vectors .
4-5:4 We note that a restriction to two player games would not be without loss of generality for iterated dominance .
4-6:This is because for iterated dominance, we need to look at the dominated strategies of each individual player, so we cannot merge any players .
4-7:89 better against at least one).5 Next, we show that checking whether a given strategy is dominated by some mixed strategy can be done in polynomial time by solving a single linear program .
4-8:(Similar linear programs have been given before [18]; we present the result here for completeness, and because we will build on the linear programs given below in Theorem 6.) Proposition 1 .
4-9:Given the row player"s utilities, a subset Dr of the row player"s pure strategies Σr, and a distinguished strategy σ∗ r for the row player, we can check in time polynomial in the size of the game (by solving a single linear program of polynomial size) whether there exists some mixed strategy σr, that places positive probability only on strategies in Dr and dominates σ∗ r , both for strict and for weak dominance .
4-10:Proof .
4-11:Let pdr be the probability that σr places on dr ∈ Dr .
4-12:We will solve a single linear program in each of our algorithms; linear programs can be solved in polynomial time [10] .
4-13:For strict dominance, the question is whether the pdr can be set so that for every pure strategy for the column player σc ∈ Σc, dr∈Dr pdr ur(dr, σc) > ur(σ∗ r , σc) .
4-14:Because the inequality must be strict, we cannot solve this directly by linear programming .
4-15:We proceed as follows .
4-16:Because the game is finite, we may assume without loss of generality that all utilities are positive (if not, simply add a constant to all utilities.) Solve the following linear program: minimize dr∈Dr pdr such that for any σc ∈ Σc, dr∈Dr pdr ur(dr, σc) ≥ ur(σ∗ r , σc) .
4-17:If σ∗ r is strictly dominated by some mixed strategy, this linear program has a solution with objective value < 1 .
4-18:(The dominating strategy is a feasible solution with objective value exactly 1 .
4-19:Because no constraint is binding for this solution, we can reduce one of the probabilities slightly without affecting feasibility, thereby obtaining a solution with objective value < 1.) Moreover, if this linear program has a solution with objective value < 1, there is a mixed strategy strictly dominating σ∗ r , which can be obtained by taking the LP solution and adding the remaining probability to any strategy (because all the utilities are positive, this will add to the left side of any inequality, so all inequalities will become strict) .
4-20:For weak dominance, we can solve the following linear program: maximize σc∈Σc (( dr∈Dr pdr ur(dr, σc)) − ur(σ∗ r , σc)) such that for any σc ∈ Σc, dr∈Dr pdr ur(dr, σc) ≥ ur(σ∗ r , σc); dr∈Dr pdr = 1 .
4-21:If σ∗ r is weakly dominated by some mixed strategy, then that mixed strategy is a feasible solution to this program with objective value > 0, because for at least one strategy σc ∈ Σc we have ( dr∈Dr pdr ur(dr, σc)) − ur(σ∗ r , σc) > 0 .
4-22:On the other hand, if this program has a solution with objective value > 0, then for at least one strategy σc ∈ Σc we 5 Recall that the assumption of a single opponent (that is, the assumption of two players) is without loss of generality for one shot dominance .
4-23:must have ( dr∈Dr pdr ur(dr, σc)) − ur(σ∗ r , σc) > 0, and thus the linear program"s solution is a weakly dominating mixed strategy. .
5 ITERATED DOMINANCE :
5-1:We now move on to iterated dominance .
5-2:It is well known that iterated strict dominance is path independent [6, 19]that is, if we remove dominated strategies until no more dominated strategies remain, in the end the remaining strategies for each player will be the same, regardless of the order in which strategies are removed .
5-3:Because of this, to see whether a given strategy can be eliminated by iterated strict dominance, all that needs to be done is to repeatedly remove strategies that are strictly dominated, until no more dominated strategies remain .
5-4:Because we can check in polynomial time whether any given strategy is dominated (whether or not dominance by mixed strategies is allowed, as described in Section 3), this whole procedure takes only polynomial time .
5-5:In the case of iterated dominance by pure strategies with two players, Knuth et al .
5-6:[11] slightly improve on (speed up) the straightforward implementation of this procedure by keeping track of, for each ordered pair of strategies for a player, the number of opponent strategies that prevent the first strategy from dominating the second .
5-7:Hereby the runtime for an m × n game is reduced from O((m + n)4 ) to O((m + n)3 solution to the IWD STRATEGY ELIMINATION instance .
5-8:Now suppose there is a solution to the IWD STRATEGYELIMINATION instance .
5-9:By Lemma 1, we can assume that all the dominances are by pure strategies .
5-10:We first observe that only s1 0 can eliminate s2 0 = σ∗ r , because it is the only other strategy that gets the row player a utility of 1 against t1 0, and t1 0 is uneliminable .
5-11:However, because s2 0 performs better than s1 0 against the tc strategies, it follows that all of the tc strategies must be eliminated .
5-12:For each c ∈ C, the strategy tc can only be eliminated by one of the strategies tc,l (with the same c), because these are the only other strategies that get the column player a utility of 1 against s1 c, and s1 c is uneliminable .
5-13:But, in order for some tc,l to eliminate tc, s2 l must be eliminated first .
5-14:Only s1 l can eliminate s2 l , because it is the only other strategy that gets the row player a utility of 1 against tl, and tl is uneliminable .
5-15:We next show that for every v ∈ V only one of s2 +v, s2 −v can be eliminated .
5-16:This is because in order for s1 +v to eliminate s2 +v, tv needs to have been eliminated and t1, not (so tv must be eliminated before t1); but in order for s1 −v to eliminate s2 −v, t1 needs to have been eliminated and tv, not (so t1 must be eliminated before tv) .
5-17:So, set v to true if s2 +v is eliminated, and to false otherwise Because by the above, for every clause c, one of the s2 l with l ∈ c must be eliminated, it follows that this is a satisfying assignment to the satisfiability instance .
5-18:Using Theorem 1, it is now (relatively) easy to show that IWD UNIQUE SOLUTION is also NP complete under the same restrictions .
5-19:Theorem 2 .
5-20:IWD UNIQUE SOLUTION is NP complete, even with 2 players, and with 0 and 1 being the only utilities occurring in the matrix whether or not dominance by mixed strategies is allowed .
5-21:Proof .
5-22:Again, the problem is in NP because we can nondeterministically choose the sequence of eliminations and verify whether it is correct .
5-23:To show NP hardness, we reduce an arbitrary IWD STRATEGY ELIMINATION instance to the following IWD UNIQUE SOLUTION instance .
5-24:Let all the strategies for each player from the original instance remain part of the new instance, and let the utilities resulting from the players playing a pair of these strategies be the same .
5-25:We add three additional strategies σ1 r , σ2 r , σ3 r for the row player, and three additional strategies σ1 c , σ2 c , σ3 c for the column player .
5-26:Let the additional utilities be as follows: • ur(σr, σj c) = 1 for all σr ∈ {σ1 r , σ2 r , σ3 r } and j ∈ {2, 3}; • ur(σi r, σc) = 1 for all i ∈ {1, 2, 3} and σc ∈ {σ2 c , σ3 c }; • ur(σi r, σ2 c ) = 1 for all i ∈ {2, 3}; • ur(σ1 r , σ3 c ) = 1; • and the row player"s utility is 0 in all other cases involving a new strategy .
5-27:• uc(σ3 r , σc) = 1 for all σc ∈ {σ1 c , σ2 c , σ3 c }; • uc(σ∗ r , σj c) = 1 for all j ∈ {2, 3} (σ∗ r is the strategy to be eliminated in the original instance); • uc(σi r, σ1 c ) = 1 for all i ∈ {1, 2}; • ur(σ1 r , σ2 c ) = 1; • ur(σ2 r , σ3 c ) = 1; • and the column player"s utility is 0 in all other cases involving a new strategy .
5-28:We proceed to show that the two instances are equivalent .
5-29:First suppose there exists a solution to the original IWDSTRATEGY ELIMINATION instance .
5-30:Then, perform the same sequence of eliminations to eliminate σ∗ r in the new IWD UNIQUE SOLUTION instance .
5-31:(This is possible because at any stage, any weak dominance for the row player in the original instance is still a weak dominance in the new instance, because the two strategies" utilities for the row player are the same when the column player plays one of the new strategies; and the same is true for the column player.) Once σ∗ r is eliminated, let σ1 c eliminate σ2 c .
5-32:(It performs better against σ2 r .) Then, let σ1 r eliminate all the other remaining strategies for the row player .
5-33:(It always performs better against either σ1 c or σ3 c .) Finally, σ1 c is the unique best response against σ1 r among the column player"s remaining strategies, so let it eliminate all the other remaining strategies for the column player .
5-34:Thus, there exists a solution to the IWD UNIQUE SOLUTION instance .
5-35:Now suppose there exists a solution to the IWD UNIQUESOLUTION instance .
5-36:By Lemma 1, we can assume that all the dominances are by pure strategies .
5-37:We will show that none of the new strategies (σ1 r , σ2 r , σ3 r , σ1 c , σ2 c , σ3 c ) can either eliminate another strategy, or be eliminated before σ∗ r is eliminated .
5-38:Thus, there must be a sequence of eliminations ending in the elimination of σ∗ r , which does not involve any of the new strategies, and is therefore a valid sequence of eliminations in the original game (because all original strategies perform the same against each new strategy) .
5-39:We now show that this is true by exhausting all possibilities for the first elimination before σ∗ r is eliminated that involves a new strategy .
5-40:None of the σi r can be eliminated by a σr ∈ {σ1 r , σ2 r , σ3 r }, because the σi r perform better against σ1 c .
5-41:σ1 r cannot eliminate any other strategy, because it always performs poorer against σ2 c .
5-42:σ2 r and σ3 r are equivalent from the row player"s perspective (and thus cannot eliminate each other), and cannot eliminate any other strategy because they always perform poorer against σ3 c .
5-43:None of the σj c can be eliminated by a σc ∈ {σ1 c , σ2 c , σ3 c }, because the σj c always perform better against either σ1 r or σ2 r .
5-44:σ1 c cannot eliminate any other strategy, because it always performs poorer against either σ∗ r or σ3 r .
5-45:σ2 c cannot eliminate any other strategy, because it always performs poorer against σ2 r or σ3 r .
5-46:σ3 c cannot eliminate any other strategy, because it always performs poorer against σ1 r or σ3 r .
5-47:Thus, there exists a solution to the IWDSTRATEGY ELIMINATION instance .
5-48:A slightly weaker version of the part of Theorem 2 concerning dominance by pure strategies only is the main result of Gilboa et al .
5-49:[7] .
5-50:(Besides not proving the result for dominance by mixed strategies, the original result was weaker because it required utilities {0, 1, 2, 3, 4, 5, 6, 7, 8} rather than just {0, 1} (and because of this, our Lemma 1 cannot be applied to it to get the result for mixed strategies).) .
6 (ITERATED) DOMINANCE USING MIXED STRATEGIES WITH SMALL :
6-1:MIXED STRATEGIES WITH SMALL SUPPORTS When showing that a strategy is dominated by a mixed strategy, there are several reasons to prefer exhibiting a 92 dominating strategy that places positive probability on as few pure strategies as possible .
6-2:First, this will reduce the number of bits required to specify the dominating strategy (and thus the proof of dominance can be communicated quicker): if the dominating mixed strategy places positive probability on only k strategies, then it can be specified using k real numbers for the probabilities, plus k log m (where m is the number of strategies for the player under consideration) bits to indicate which strategies are used .
6-3:Second, the proof of dominance will be cleaner: for a dominating mixed strategy, it is typically (always in the case of strict dominance) possible to spread some of the probability onto any unused pure strategy and still have a dominating strategy, but this obscures which pure strategies are the ones that are key in making the mixed strategy dominating .
6-4:Third, because (by the previous) the argument for eliminating the dominated strategy is simpler and easier to understand, it is more likely to be accepted .
6-5:Fourth, the level of risk neutrality required for the argument to work is reduced, at least in the extreme case where dominance by a single pure strategy can be exhibited (no risk neutrality is required here) .
6-6:This motivates the following problem .
6-7:Definition 4 (MINIMUM DOMINATING SET) .
6-8:We are given the row player"s utilities of a game in normal form, a distinguished strategy σ∗ for the row player, a specification of whether the dominance should be strict or weak, and a number k .
6-9:We are asked whether there exists a mixed strategy σ for the row player that places positive probability on at most k pure strategies, and dominates σ∗ in the required sense .
6-10:Unfortunately, this problem is NP complete .
6-11:Theorem 3 .
6-12:MINIMUM DOMINATING SET is NPcomplete, both for strict and for weak dominance .
6-13:Proof .
6-14:The problem is in NP because we can nondeterministically choose a set of at most k strategies to give positive probability, and decide whether we can dominate σ∗ with these k strategies as described in Proposition 1 .
6-15:To show NP hardness, we reduce an arbitrary SET COVER instance (given a set S, subsets S1, S2, .
6-16:.
6-17:.
6-18:, Sr, and a number t, can all of S be covered by at most t of the subsets?) to the following MINIMUM DOMINATING SET instance .
6-19:For every element s ∈ S, there is a pure strategy σs for the column player .
6-20:For every subset Si, there is a pure strategy σSi for the row player .
6-21:Finally, there is the distinguished pure strategy σ∗ for the row player .
6-22:The row player"s utilities are as follows: ur(σSi , σs) = t + 1 if s ∈ Si; ur(σSi , σs) = 0 if s ∈ Si; ur(σ∗ , σs) = 1 for all s ∈ S .
6-23:Finally, we let k = t .
6-24:We now proceed to show that the two instances are equivalent .
6-25:First suppose there exists a solution to the SET COVER instance .
6-26:Without loss of generality, we can assume that there are exactly k subsets in the cover .
6-27:Then, for every Si that is in the cover, let the dominating strategy σ place exactly 1 k probability on the corresponding pure strategy σSi .
6-28:Now, if we let n(s) be the number of subsets in the cover containing s (we observe that that n(s) ≥ 1), then for every strategy σs for the column player, the row player"s expected utility for playing σ when the column player is playing σs is u(σ, σs) = n(s) k (k + 1) ≥ k+1 k > 1 = u(σ∗ , σs) .
6-29:So σ strictly (and thus also weakly) dominates σ∗ , and there exists a solution to the MINIMUM DOMINATING SET instance .
6-30:Now suppose there exists a solution to the MINIMUMDOMINATING SET instance .
6-31:Consider the (at most k) pure strategies of the form σSi on which the dominating mixed strategy σ places positive probability, and let T be the collection of the corresponding subsets Si .
6-32:We claim that T is a cover .
6-33:For suppose there is some s ∈ S that is not in any of the subsets in T .
6-34:Then, if the column player plays σs, the row player (when playing σ) will always receive utility 0 as opposed to the utility of 1 the row player would receive for playing σ∗ , contradicting the fact that σ dominates σ∗ (whether this dominance is weak or strict) .
6-35:It follows that there exists a solution to the SET COVER instance .
6-36:On the other hand, if we require that the dominating strategy only places positive probability on a very small number of pure strategies, then it once again becomes easy to check whether a strategy is dominated .
6-37:Specifically, to find out whether player i"s strategy σ∗ is dominated by a strategy that places positive probability on only k pure strategies, we can simply check, for every subset of k of player i"s pure strategies, whether there is a strategy that places positive probability only on these k strategies and dominates σ∗ , using Proposition 1 .
6-38:This requires only O(|Σi|k ) such checks .
6-39:Thus, if k is a constant, this constitutes a polynomial time algorithm .
6-40:A natural question to ask next is whether iterated strict dominance remains computationally easy when dominating strategies are required to place positive probability on at most k pure strategies, where k is a small constant .
6-41:(We have already shown in Section 4 that iterated weak dominance is hard even when k = 1, that is, only dominance by pure strategies is allowed.) Of course, if iterated strict dominance were path independent under this restriction, computational easiness would follow as it did in Section 4 .
6-42:However, it turns out that this is not the case .
6-43:Observation 1 .
6-44:If we restrict the dominating strategies to place positive probability on at most two pure strategies, iterated strict dominance becomes path dependent .
6-45:Proof .
6-46:Consider the following game: 7, 1 0, 0 0, 0 0, 0 7, 1 0, 0 3, 0 3, 0 0, 0 0, 0 0, 0 3, 1 1, 0 1, 0 1, 0 Let (i, j) denote the outcome in which the row player plays the ith row and the column player plays the jth column .
6-47:Because (1, 1), (2, 2), and (4, 3) are all Nash equilibria, none of the column player"s pure strategies will ever be eliminated, and neither will rows 1, 2, and 4 .
6-48:We now observe that randomizing uniformly over rows 1 and 2 dominates row 3, and randomizing uniformly over rows 3 and 4 dominates row to dominate row 5 without randomizing over at least 3 pure strategies .
6-49:Indeed, iterated strict dominance turns out to be hard even when k = 3 .
6-50:Theorem 4 .
6-51:If we restrict the dominating strategies to place positive probability on at most three pure strategies, it becomes NP complete to decide whether a given strategy can be eliminated using iterated strict dominance .
6-52:93 Proof .
6-53:The problem is in NP because given a sequence of strategies to be eliminated, we can check in polynomial time whether this is a valid sequence of eliminations (for any strategy to be eliminated, we can check, for every subset of three other strategies, whether there is a strategy placing positive probability on only these three strategies that dominates the strategy to be eliminated, using Proposition 1) .
6-54:To show that the problem is NP hard, we reduce an arbitrary satisfiability instance (given by a nonempty set of clauses C over a nonempty set of variables V , with corresponding literals L = {+v : v ∈ V } ∪ {−v : v ∈ V }) to the following two player game .
6-55:For every variable v ∈ V , the row player has strategies s+v, s−v, s1 v, s2 v, s3 v, s4 v, and the column player has strategies t1 v, t2 v, t3 v, t4 strategy sc, and the column player has a strategy tc, as well as, for every literal l occurring in c, an additional strategy tl (s2 is the strategy that we are seeking to eliminate.) Finally, the column player has one additional strategy t1 .
6-56:The utility function for the row player is given as follows (where is some sufficiently small number): • ur(s+v, tj v) = 4 if j ∈ {1, 2}, for all v ∈ V ; • ur(s+v, tj v) = 1 if j ∈ {3, 4}, for all v ∈ V ; • ur(s−v, tj v) = 1 if j ∈ {1, 2}, for all v ∈ V ; • ur(s−v, tj v) = 4 if j ∈ {3, 4}, for all v ∈ V ; • ur(s+v, t) = ur(s−v, t) = 0 for all v ∈ V and t ∈ {t1 v, t2 v, t3 v, t4 v}; • ur(si v, ti v) = 13 for all v ∈ V and i ∈ {1, 2, 3, 4}; • ur(si v, t) = for all v ∈ V , i ∈ {1, 2, 3, 4}, and t = ti v; • ur(sc, tc) = 2 for all c ∈ C; • ur(sc, t) = 0 for all c ∈ C and t = tc; • ur(s1, t1) = 1 + ; • ur(s1, t) = for all t = t1; • ur(s2, t1) = 1; • ur(s2, tc) = 1 for all c ∈ C; • ur(s2, t) = 0 for all t ∈ {t1} ∪ {tc : c ∈ C} .
6-57:The utility function for the column player is given as follows: • uc(si v, ti v) = 1 for all v ∈ V and i ∈ {1, 2, 3, 4}; • uc(s, ti v) = 0 for all v ∈ V , i ∈ {1, 2, 3, 4}, and s = si v; • uc(sc, tc) = 1 for all c ∈ C; • uc(sl, tc) = 1 for all c ∈ C and l ∈ L occurring in c; • uc(s, tc) = 0 for all c ∈ C and s ∈ {sc} ∪ {sl : l ∈ c}; • uc(sc, tl c) = 1 + for all c ∈ C; • uc(sl , tl c) = 1 + for all c ∈ C and l = l occurring in c; • uc(s, tl c) = for all c ∈ C and s ∈ {sc} ∪ {sl : l ∈ c, l = l }; • uc(s2, t1) = 1; • uc(s, t1) = 0 for all s = s2 .
6-58:We now show that the two instances are equivalent .
6-59:First, suppose that there is a solution to the satisfiability instance .
6-60:Then, consider the following sequence of eliminations in our game: 1 .
6-61:For every variable v that is set to true in the satisfying assignment, eliminate s+v with the mixed strategy σr that places probability 1 3 on s−v, probability 1 3 on s1 v, and probability 1 3 on s2 BAYESIAN GAMES So far, we have focused on normal form games that are flatly represented (that is, every matrix entry is given ex94 plicitly) .
6-62:However, for many games, the flat representation is too large to write down explicitly, and instead, some representation that exploits the structure of the game needs to be used .
6-63:Bayesian games, besides being of interest in their own right, can be thought of as a useful structured representation of normal form games, and we will study them in this section .
6-64:In a Bayesian game, each player first receives privately held preference information (the player"s type) from a distribution, which determines the utility that that player receives for every outcome of (that is, vector of actions played in) the game .
6-65:After receiving this type, the player plays an action based on it.7 Definition 5 .
6-66:A Bayesian game is given by a set of players {1, 2, .
6-67:.
6-68:.
6-69:, n}; and, for each player i, a (finite) set of actions Ai, a (finite) type space Θi with a probability distribution πi over it, and a utility function ui : Θi × A1 × A2 × .
6-70:.
6-71:.
6-72:× An → R (where ui(θi, a1, a2, .
6-73:.
6-74:.
6-75:, an) denotes player i"s utility when i"s type is θi and each player j plays action aj) .
6-76:A pure strategy in a Bayesian game is a mapping from types to actions, σi : Θi → Ai, where σi(θi) denotes the action that player i plays for type θi .
6-77:Any vector of pure strategies in a Bayesian game defines an (expected) utility for each player, and therefore we can translate a Bayesian game into a normal form game .
6-78:In this normal form game, the notions of dominance and iterated dominance are defined as before .
6-79:However, the normal form representation of the game is exponentially larger than the Bayesian representation, because each player i has |Ai||Θi| distinct pure strategies .
6-80:Thus, any algorithm for Bayesian games that relies on expanding the game to its normal form will require exponential time .
6-81:Specifically, our easiness results for normal form games do not directly transfer to this setting .
6-82:In fact, it turns out that checking whether a strategy is dominated by a pure strategy is hard in Bayesian games .
6-83:Theorem 5 .
6-84:In a Bayesian game, it is NP complete to decide whether a given pure strategy σr : Θr → Ar is dominated by some other pure strategy (both for strict and weak dominance), even when the row player"s distribution over types is uniform .
6-85:Proof .
6-86:The problem is in NP because it is easy to verify whether a candidate dominating strategy is indeed a dominating strategy .
6-87:To show that the problem is NP hard, we reduce an arbitrary satisfiability instance (given by a set of clauses C using variables from V ) to the following Bayesian game .
6-88:Let the row player"s action set be Ar = {t, f, 0} and let the column player"s action set be Ac = {ac : c ∈ C} .
6-89:Let the row player"s type set be Θr = {θv : v ∈ V }, with a distribution πr that is uniform .
6-90:Let the row player"s utility function be as follows: • ur(θv, 0, ac) = 0 for all v ∈ V and c ∈ C; • ur(θv, b, ac) = |V | for all v ∈ V , c ∈ C, and b ∈ {t, f} such that setting v to b satisfies c; • ur(θv, b, ac) = −1 for all v ∈ V , c ∈ C, and b ∈ {t, f} such that setting v to b does not satisfy c .
6-91:7 In general, a player can also receive a signal about the other players" preferences, but we will not concern ourselves with that here .
6-92:Let the pure strategy to be dominated be the one that plays 0 for every type .
6-93:We show that the strategy is dominated by a pure strategy if and only if there is a solution to the satisfiability instance .
6-94:First, suppose there is a solution to the satisfiability instance .
6-95:Then, let σd r be given by: σd r (θv) = t if v is set to true in the solution to the satisfiability instance, and σd r (θv) = f otherwise .
6-96:Then, against any action ac by the column player, there is at least one type θv such that either +v ∈ c and σd r (θv) = t, or −v ∈ c and σd r (θv) = f .
6-97:Thus, the row player"s expected utility against action ac is at least |V | |V | − |V |−1 |V | = 1 |V | > 0 .
6-98:So, σd r is a dominating strategy .
6-99:Now, suppose there is a dominating pure strategy σd r .
6-100:This dominating strategy must play t or f for at least one type .
6-101:Thus, against any ac by the column player, there must at least be some type θv for which ur(θv, σd r (θv), ac) > 0 .
6-102:That is, there must be at least one variable v such that setting v to σd r (θv) satifies c .
6-103:But then, setting each v to σd r (θv) must satisfy all the clauses .
6-104:So a satisfying assignment exists .
6-105:However, it turns out that we can modify the linear programs from Proposition 1 to obtain a polynomial time algorithm for checking whether a strategy is dominated by a mixed strategy in Bayesian games .
6-106:Theorem 6 .
6-107:In a Bayesian game, it can be decided in polynomial time whether a given (possibly mixed) strategy σr is dominated by some other mixed strategy, using linear programming (both for strict and weak dominance) .
6-108:Proof .
6-109:We can modify the linear programs presented in Proposition 1 as follows .
6-110:For strict dominance, again assuming without loss of generality that all the utilities in the game are positive, use the following linear program (in which pσr r (θr, ar) is the probability that σr, the strategy to be dominated, places on ar for type θr): minimize θr∈Θr ar∈Ar pr(ar) such that for any ac ∈ Ac, θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pr(θr, ar) ≥ θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pσr r (θr, ar); for any θr ∈ Θr, ar∈Ar pr(θr, ar) ≤ 1 .
6-111:Assuming that π(θr) > 0 for all θr ∈ Θr, this program will return an objective value smaller than |Θr| if and only if σr is strictly dominated, by reasoning similar to that done in Proposition 1 .
6-112:For weak dominance, use the following linear program: maximize ac∈Ac ( θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pr(θr, ar)− θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pσr r (θr, ar)) such that for any ac ∈ Ac, θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pr(θr, ar) ≥ θr∈Θr ar∈Ar π(θr)ur(θr, ar, ac)pσr r (θr, ar); for any θr ∈ Θr, ar∈Ar pr(θr, ar) = 1 .
6-113:This program will return an objective value greater than 0 if and only if σr is weakly dominated, by reasoning similar to that done in Proposition 1 .
6-114:We now turn to iterated dominance in Bayesian games .
6-115:Na¨ıvely, one might argue that iterated dominance in Bayesian 95 games always requires an exponential number of steps when a significant fraction of the game"s pure strategies can be eliminated, because there are exponentially many pure strategies .
6-116:However, this is not a very strong argument because oftentimes we can eliminate exponentially many pure strategies in one step .
6-117:For example, if for some type θr ∈ Θr we have, for all ac ∈ Ac, that u(θr, a1 r, ac) > u(θr, a2 r, ac), then any pure strategy for the row player which plays action a2 r for type θr is dominated (by the strategy that plays action a1 r for type θr instead) and there are exponentially many (|Ar||Θr|−1 ) such strategies .
6-118:It is therefore conceivable that we need only polynomially many eliminations of collections of a player"s strategies .
6-119:However, the following theorem shows that this is not the case, by giving an example where an exponential number of iterations (that is, alternations between the players in eliminating strategies) is required .
6-120:(We emphasize that this is not a result about computational complexity.) Theorem 7 .
6-121:Even in symmetric 3 player Bayesian games, iterated dominance by pure strategies can require an exponential number of iterations (both for strict and weak dominance), even with only three actions per player .
6-122:Proof .
6-123:Let each player i ∈ {1, 2, 3} have n + 1 types θ1 i , θ2 i , .
6-124:.
6-125:.
6-126:, θn+1 i .
6-127:Let each player i have 3 actions ai, bi, ci, and let the utility function of each player be defined as follows .
6-128:(In the below, i + 1 and i + 2 are shorthand for i + 1(mod 3) and i + 2(mod 3) when used as player indices .
6-129:Also, −∞ can be replaced by a sufficiently negative number .
6-130:Finally, δ and should be chosen to be very small (even compared to 2−(n+1) ), and should be more than twice as large as δ.) • ui(θ1 i ; ai, ci+1, ci+2) = −1; • ui(θ1 i ; ai, si+1, si+2) = 0 for si+1 = ci+1 or si+2 = ci+2; • ui(θ1 i ; bi, si+1, si+2) = − for si+1 = ai+1 and si+2 = ai+2; • ui(θ1 i ; bi, si+1, si+2) = −∞ for si+1 = ai+1 or si+2 = ai+2; • ui(θ1 i ; ci, si+1, si+2) = −∞ for all si+1, si+2; • ui(θj i ; ai, si+1, si+2) = −∞ for all si+1, si+2 when j > 1; • ui(θj i ; bi, si+1, si+2) = − for all si+1, si+2 when j > 1; • ui(θj i ; ci, si+1, ci+2) = δ − − 1 2 for all si+1 when j > 1; • ui(θj i ; ci, si+1, si+2) = δ− for all si+1 and si+2 = ci+2 when j > 1 .
6-131:Let the distribution over each player"s types be given by p(θj i ) = 2−j (with the exception that p(θ2 i ) = 2−2 +2−(n+1) ) .
6-132:We will be interested in eliminating strategies of the following form: play bi for type θ1 i , and play one of bi or ci otherwise .
6-133:Because the utility function is the same for any type θj i with j > 1, these strategies are effectively defined by the total probability that they place on ci,8 which is t2 i (2−2 + 2−(n+1) ) + n+1 j=3 tj i 2−j where tj i = 1 if player i 8 Note that the strategies are still pure strategies; the probability placed on an action by a strategy here is simply the sum of the probabilities of the types for which the strategy chooses that action .
6-134:plays ci for type θj i , and 0 otherwise .
6-135:This probability is different for any two different strategies of the given form, and we have exponentially many different strategies of the given form .
6-136:For any probability q which can be expressed as t2(2−2 + 2−(n+1) ) + n+1 j=3 tj2−j (with all tj ∈ {0, 1}), let σi(q) denote the (unique) strategy of the given form for player i which places a total probability of q on ci .
6-137:Any strategy that plays ci for type θ1 i or ai for some type θj i with j > 1 can immediately be eliminated .
6-138:We will show that, after that, we must eliminate the strategies σi(q) with high q first, slowly working down to those with lower q .
6-139:Claim 1: If σi+1(q ) and σi+2(q ) have not yet been eliminated, and q < q , then σi(q) cannot yet be eliminated .
6-140:Proof: First, we show that no strategy σi(q ) can eliminate σi(q) .
6-141:Against σi+1(q ), σi+2(q ), the utility of playing σi(p) is − + p · δ − p · q 2 .
6-142:Thus, when q = 0, it is best to set p as high as possible (and we note that σi+1(0) and σi+2(0) have not been eliminated), but when q > 0, it is best to set p as low as possible because δ < q 2 .
6-143:Thus, whether q > q or q < q , σi(q) will always do strictly better than σi(q ) against some remaining opponent strategies .
6-144:Hence, no strategy σi(q ) can eliminate σi(q) .
6-145:The only other pure strategies that could dominate σi(q) are strategies that play ai for type θ1 i , and bi or ci for all other types .
6-146:Let us take such a strategy and suppose that it plays c with probability p .
6-147:Against σi+1(q ), σi+2(q ) (which have not yet been eliminated), the utility of playing this strategy is −(q )2 2 − 2 + p · δ − p · q 2 .
6-148:On the other hand, playing σi(q) gives − + q · δ − q · q 2 .
6-149:Because q > q, we have −(q )2 2 < −q · q 2, and because δ and are small, it follows that σi(q) receives a higher utility .
6-150:Therefore, no strategy dominates σi(q), proving the claim .
6-151:Claim 2: If for all q > q, σi+1(q ) and σi+2(q ) have been eliminated, then σi(q) can be eliminated .
6-152:Proof: Consider the strategy for player i that plays ai for type θ1 i , and bi for all other types (call this strategy σi); we claim σi dominates σi(q) .
6-153:First, if either of the other players k plays ak for θ1 k, then σi performs better than σi(q) (which receives −∞ in some cases) .
6-154:Because the strategies for player k that play ck for type θ1 k, or ak for some type θj k with j > 1, have already been eliminated, all that remains to check is that σi performs better than σi(q) whenever both of the other two players play strategies of the following form: play bk for type θ1 k, and play one of bk or ck otherwise .
6-155:We note that among these strategies, there are none left that place probability greater than q on ck .
6-156:Letting qk denote the probability with which player k plays ck, the expected utility of playing σi is −qi+1 · qi+2 2 − 2 .
6-157:On the other hand, the utility of playing σi(q) is − + q · δ − q · qi+2 2 .
6-158:Because qi+1 ≤ q, the difference between these two expressions is at least 2 − δ, which is positive .
6-159:It follows that σi dominates σi(q) .
6-160:From Claim 2, it follows that all strategies of the form σi(q) will eventually be eliminated .
6-161:However, Claim 1 shows that we cannot go ahead and eliminate multiple such strategies for one player, unless at least one other player simultaneously keeps up in the eliminated strategies: every time a σi(q) is eliminated such that σi+1(q) and σi+2(q) have not yet been eliminated, we need to eliminate one of the latter two strategies before any σi(q ) with q > q can be eliminated that is, we need to alternate between players .
6-162:Because there are exponentially many strategies of the form σi(q), it follows that iterated elimination will require exponentially many iterations to complete .
6-163:96 It follows that an efficient algorithm for iterated dominance (strict or weak) by pure strategies in Bayesian games, if it exists, must somehow be able to perform (at least part of) many iterations in a single step of the algorithm (because if each step only performed a single iteration, we would need exponentially many steps) .
6-164:Interestingly, Knuth et al .
6-165:[11] argue that iterated dominance appears to be an inherently sequential problem (in light of their result that iterated very weak dominance is P complete, that is, apparently not efficiently parallelizable), suggesting that aggregating many iterations may be difficult. .
7-1:While the Nash equilibrium solution concept is studied more and more intensely in our community, the perhaps more elementary concept of (iterated) dominance has received much less attention
7-2:In this paper we studied various computational aspects of this concept
7-3:We first studied both strict and weak dominance (not iterated), and showed that checking whether a given strategy is dominated by some mixed strategy can be done in polynomial time using a single linear program solve
7-4:We then moved on to iterated dominance
7-5:We showed that determining whether there is some path that eliminates a given strategy is NP complete with iterated weak dominance
7-6:This allowed us to also show that determining whether there is a path that leads to a unique solution is NP complete
7-7:Both of these results hold both with and without dominance by mixed strategies
7-8:(A weaker version of the second result (only without dominance by mixed strategies) was already known [7].) Iterated strict dominance, on the other hand, is path independent (both with and without dominance by mixed strategies) and can therefore be done in polynomial time
7-9:We then studied what happens when the dominating strategy is allowed to place positive probability on only a few pure strategies
7-10:First, we showed that finding the dominating strategy with minimum support size is NP complete (both for strict and weak dominance)
7-11:Then, we showed that iterated strict dominance becomes path dependent when there is a limit on the support size of the dominating strategies, and that deciding whether a given strategy can be eliminated by iterated strict dominance under this restriction is NP complete (even when the limit on the support size is 3)
7-12:Finally, we studied dominance and iterated dominance in Bayesian games, as an example of a concise representation language for normal form games that is interesting in its own right
7-13:We showed that, unlike in normal form games, deciding whether a given pure strategy is dominated by another pure strategy in a Bayesian game is NP complete (both with strict and weak dominance); however, deciding whether a strategy is dominated by some mixed strategy can still be done in polynomial time with a single linear program solve (both with strict and weak dominance)
7-14:Finally, we showed that iterated dominance using pure strategies can require an exponential number of iterations in a Bayesian game (both with strict and weak dominance)
7-15:There are various avenues for future research
7-16:First, there is the open question of whether it is possible to complete iterated dominance in Bayesian games in polynomial time (even though we showed that an exponential number of alternations between the players in eliminating strategies is sometimes required)
7-17:Second, we can study computational aspects of (iterated) dominance in concise representations of normal form games other than Bayesian games for example, in graphical games [9] or local effect action graph games [12, 2]
7-18:(How to efficiently perform iterated very weak dominance has already been studied for partially observable stochastic games [8].) Finally, we can ask whether some of the algorithms we described (such as the one for iterated strict dominance with mixed strategies) can be made faster.
8-1:Krzysztof R
8-2:Apt
8-3:Uniform proofs of order independence for various strategy elimination procedures
8-4:Contributions to Theoretical Economics, 4(1), 2004
8-5:Nivan A
8-6:R
8-7:Bhat and Kevin Leyton Brown
8-8:Computing Nash equilibria of action graph games
8-9:In UAI, 2004
8-10:Ben Blum, Christian R
8-11:Shelton, and Daphne Koller
8-12:A continuation method for Nash equilibria in structured games
8-13:In IJCAI, 2003
8-14:Vincent Conitzer and Tuomas Sandholm
8-15:Complexity results about Nash equilibria
8-16:In IJCAI, pages 765 771, 2003
8-17:Drew Fudenberg and Jean Tirole
8-18:Game Theory
8-19:MIT Press, 1991
8-20:Itzhak Gilboa, Ehud Kalai, and Eitan Zemel
8-21:On the order of eliminating dominated strategies
8-22:Operations Research Letters, 9:85 89, 1990
8-23:Itzhak Gilboa, Ehud Kalai, and Eitan Zemel
8-24:The complexity of eliminating dominated strategies
8-25:Mathematics of Operation Research, 18:553 565, 1993
8-26:Eric A
8-27:Hansen, Daniel S
8-28:Bernstein, and Shlomo Zilberstein
8-29:Dynamic programming for partially observable stochastic games
8-30:In AAAI, pages 709 715, 2004
8-31:Michael Kearns, Michael Littman, and Satinder Singh
8-32:Graphical models for game theory
8-33:In UAI, 2001
8-34:Leonid Khachiyan
8-35:A polynomial algorithm in linear programming
8-36:Soviet Math
8-37:Doklady, 20:191 194, 1979
8-38:Donald E
8-39:Knuth, Christos H
8-40:Papadimitriou, and John N Tsitsiklis
8-41:A note on strategy elimination in bimatrix games
8-42:Operations Research Letters, 7(3):103 107, 1988
8-43:Kevin Leyton Brown and Moshe Tennenholtz
8-44:Local effect games
8-45:In IJCAI, 2003
8-46:Richard Lipton, Evangelos Markakis, and Aranyak Mehta
8-47:Playing large games using simple strategies
8-48:In ACM EC, pages 36 41, 2003
8-49:Michael Littman and Peter Stone
8-50:A polynomial time Nash equilibrium algorithm for repeated games
8-51:In ACM EC, pages 48 54, 2003
8-52:Leslie M
8-53:Marx and Jeroen M
8-54:Swinkels
8-55:Order independence for iterated weak dominance
8-56:Games and Economic Behavior, 18:219 245, 1997
8-57:Leslie M
8-58:Marx and Jeroen M
8-59:Swinkels
8-60:Corrigendum, order independence for iterated weak dominance
8-61:Games and Economic Behavior, 31:324 329, 2000
8-62:Andreu Mas Colell, Michael Whinston, and Jerry R
8-63:Green
8-64:Microeconomic Theory
8-65:Oxford University Press, 1995
8-66:Roger Myerson
8-67:Game Theory: Analysis of Conflict
8-68:Harvard University Press, Cambridge, 1991
8-69:Martin J Osborne and Ariel Rubinstein
8-70:A Course in Game Theory
8-71:MIT Press, 1994
8-72:Christos Papadimitriou
8-73:Algorithms, games and the Internet
8-74:In STOC, pages 749 753, 2001
8-75:Ryan Porter, Eugene Nudelman, and Yoav Shoham
8-76:Simple search methods for finding a Nash equilibrium
8-77:In AAAI, pages 664 669, 2004
8-78:97
picture:
