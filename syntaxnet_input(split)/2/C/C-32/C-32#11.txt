Input: BuddyCache redirection supports the performance benefits of avoiding communication with the servers but introduces extra processing cost due to availability mechanisms and request forwarding .
Parse:
supports VBZ ROOT
 +-- redirection NN nsubj
 |   +-- BuddyCache NN nn
 +-- benefits NNS dobj
 |   +-- the DT det
 |   +-- performance NN nn
 |   +-- of IN prep
 |       +-- avoiding VBG pcomp
 |           +-- communication NN dobj
 |               +-- with IN prep
 |                   +-- servers NNS pobj
 |                       +-- the DT det
 +-- but CC cc
 +-- introduces VBZ conj
 |   +-- cost NN dobj
 |   |   +-- extra JJ amod
 |   |   +-- processing NN nn
 |   +-- to IN prep
 |       +-- due IN mwe
 |       +-- mechanisms NNS pobj
 |           +-- availability NN nn
 |           +-- and CC cc
 |           +-- forwarding NN conj
 |               +-- request NN nn
 +-- . . punct
Input: Is the cure worse then the disease ? To answer the question , we have implemented a BuddyCache prototype for the OCC protocol and conducted experiments to analyze the performance benefits and costs over a range of network latencies .
Parse:
worse JJR ROOT
 +-- Is VBZ cop
 +-- cure NN nsubj
 |   +-- the DT det
 +-- then RB prep
 |   +-- disease NN pobj
 |       +-- the DT det
 +-- ? . punct
 +-- implemented VBN dep
 |   +-- answer VB advcl
 |   |   +-- To TO aux
 |   |   +-- question NN dobj
 |   |       +-- the DT det
 |   +-- , , punct
 |   +-- we PRP nsubj
 |   +-- have VBP aux
 |   +-- prototype NN dobj
 |   |   +-- a DT det
 |   |   +-- BuddyCache NNP nn
 |   |   +-- for IN prep
 |   |       +-- protocol NN pobj
 |   |           +-- the DT det
 |   |           +-- OCC NNP nn
 |   +-- and CC cc
 |   +-- conducted VBD conj
 |   |   +-- experiments NNS dobj
 |   |   +-- analyze VB xcomp
 |   |       +-- to TO aux
 |   |       +-- benefits NNS dobj
 |   |           +-- the DT det
 |   |           +-- performance NN nn
 |   +-- costs VBZ conj
 |       +-- over IN prep
 |           +-- range NN pobj
 |               +-- a DT det
 |               +-- of IN prep
 |                   +-- latencies NNS pobj
 |                       +-- network NN nn
 +-- . . punct
Input: 6.1 Analysis The performance benefits of peer fetch and peer update are due to avoided server interactions .
Parse:
due JJ ROOT
 +-- Analysis NNP nsubj
 |   +-- 6.1 CD num
 |   +-- benefits NNS dobj
 |       +-- The DT det
 |       +-- performance NN nn
 |       +-- of IN prep
 |           +-- fetch NN pobj
 |               +-- peer NN nn
 |               +-- and CC cc
 |               +-- update NN conj
 |                   +-- peer NN nn
 +-- are VBP cop
 +-- to IN prep
 |   +-- interactions NNS pobj
 |       +-- avoided VBN amod
 |       +-- server NN nn
 +-- . . punct
Input: This section presents a simple analytical performance model for this benefit .
Parse:
presents VBZ ROOT
 +-- section NN nsubj
 |   +-- This DT det
 +-- model NN dobj
 |   +-- a DT det
 |   +-- simple JJ amod
 |   +-- performance NN nn
 |   |   +-- analytical JJ amod
 |   +-- for IN prep
 |       +-- benefit NN pobj
 |           +-- this DT det
 +-- . . punct
Input: The avoided server interactions correspond to different types of client cache misses .
Parse:
correspond VBP ROOT
 +-- interactions NNS nsubj
 |   +-- The DT det
 |   +-- avoided VBN amod
 |   +-- server NN nn
 +-- to IN prep
 |   +-- types NNS pobj
 |       +-- different JJ amod
 |       +-- of IN prep
 |           +-- misses NNS pobj
 |               +-- cache NN nn
 |                   +-- client NN nn
 +-- . . punct
Input: These can be cold misses , invalidation misses and capacity misses .
Parse:
misses NNS ROOT
 +-- These DT nsubj
 +-- can MD aux
 +-- be VB cop
 +-- cold JJ amod
 +-- , , punct
 +-- misses NNS conj
 |   +-- capacity NN nn
 +-- and CC cc
 +-- . . punct
Input: Our analysis focuses on cold misses and invalidation misses , since the benefit of avoiding capacity misses can be derived from the cold misses .
Parse:
focuses VBZ ROOT
 +-- analysis NN nsubj
 |   +-- Our PRP$ poss
 +-- on IN prep
 |   +-- misses NNS pobj
 |       +-- cold JJ amod
 |       +-- and CC cc
 |       +-- misses NNS conj
 |           +-- invalidation NN nn
 +-- , , punct
 +-- derived VBN advcl
 |   +-- since IN mark
 |   +-- benefit NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- avoiding VBG pcomp
 |   |           +-- misses NNS dobj
 |   |               +-- capacity NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- from IN prep
 |       +-- misses NNS pobj
 |           +-- the DT det
 |           +-- cold JJ amod
 +-- . . punct
Input: Moreover , technology trends indicate that memory and storage capacity will continue to grow and therefore a typical BuddyCache configuration is likely not to be cache limited .
Parse:
indicate VBP ROOT
 +-- Moreover RB advmod
 +-- , , punct
 +-- trends NNS nsubj
 |   +-- technology NN nn
 +-- continue VB ccomp
 |   +-- that IN mark
 |   +-- capacity NN nsubj
 |   |   +-- memory NN nn
 |   |       +-- and CC cc
 |   |       +-- storage NN conj
 |   +-- will MD aux
 |   +-- grow VB xcomp
 |   |   +-- to TO aux
 |   +-- and CC cc
 |   +-- likely JJ conj
 |       +-- therefore RB advmod
 |       +-- configuration NN nsubj
 |       |   +-- a DT det
 |       |   +-- typical JJ amod
 |       |   +-- BuddyCache NNP nn
 |       +-- is VBZ cop
 |       +-- limited VBN xcomp
 |           +-- not RB neg
 |           +-- to TO aux
 |           +-- be VB auxpass
 |           +-- cache NN dep
 +-- . . punct
Input: The client cache misses are determined by several variables , including the workload and the cache configuration .
Parse:
determined VBN ROOT
 +-- misses NNS nsubjpass
 |   +-- The DT det
 |   +-- cache NN nn
 |       +-- client NN nn
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- variables NNS pobj
 |       +-- several JJ amod
 |       +-- , , punct
 |       +-- including VBG prep
 |           +-- workload NN pobj
 |               +-- the DT det
 |               +-- and CC cc
 |               +-- configuration NN conj
 |                   +-- the DT det
 |                   +-- cache NN nn
 +-- . . punct
Input: Our analysis tries , as much as possible , to separate these variables so they can be controlled in the validation experiments .
Parse:
tries VBZ ROOT
 +-- analysis NN nsubj
 |   +-- Our PRP$ poss
 +-- , , punct
 +-- much RB advmod
 |   +-- as RB advmod
 |   +-- as IN prep
 |       +-- possible JJ pobj
 +-- separate VB xcomp
 |   +-- to TO aux
 |   +-- variables NNS dobj
 |   |   +-- these DT det
 |   +-- controlled VBN advcl
 |       +-- so IN mark
 |       +-- they PRP nsubjpass
 |       +-- can MD aux
 |       +-- be VB auxpass
 |       +-- in IN prep
 |           +-- experiments NNS pobj
 |               +-- the DT det
 |               +-- validation NN nn
 +-- . . punct
Input: To study the benefit of avoiding cold misses , we consider cold cache performance in a read only workload -LRB- no invalidation misses -RRB- .
Parse:
consider VBP ROOT
 +-- study VB advcl
 |   +-- To TO aux
 |   +-- benefit NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- avoiding VBG pcomp
 |               +-- misses NNS dobj
 |                   +-- cold JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- workload NN xcomp
 |   +-- performance NN nsubj
 |   |   +-- cold JJ amod
 |   |   +-- cache NN nn
 |   |   +-- in IN prep
 |   |       +-- read NN pobj
 |   |           +-- a DT det
 |   +-- only RB advmod
 +-- misses NNS ccomp
 |   +-- -LRB- -LRB- punct
 |   +-- invalidation NN nsubj
 |   |   +-- no DT det
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: We expect peer fetch to improve the latency cost for client cold cache misses by fetching objects from nearby cache .
Parse:
expect VBP ROOT
 +-- We PRP nsubj
 +-- fetch VB ccomp
 |   +-- peer NN nsubj
 |   +-- improve VB xcomp
 |       +-- to TO aux
 |       +-- cost NN dobj
 |       |   +-- the DT det
 |       |   +-- latency NN nn
 |       |   +-- for IN prep
 |       |       +-- misses NNS pobj
 |       |           +-- cache NN nn
 |       |               +-- client NN nn
 |       |               +-- cold JJ amod
 |       +-- by IN prep
 |           +-- fetching VBG pcomp
 |               +-- objects NNS dobj
 |               +-- from IN prep
 |                   +-- cache NN pobj
 |                       +-- nearby JJ amod
 +-- . . punct
Input: We evaluate how the redirection cost affects this benefit by comparing and analyzing the performance of an application running in a storage system with BuddyCache and without -LRB- called Base -RRB- .
Parse:
evaluate VBP ROOT
 +-- We PRP nsubj
 +-- affects VBZ ccomp
 |   +-- how WRB advmod
 |   +-- cost NN nsubj
 |   |   +-- the DT det
 |   |   +-- redirection NN nn
 |   +-- benefit NN dobj
 |   |   +-- this DT det
 |   +-- by IN prep
 |       +-- comparing VBG pcomp
 |           +-- and CC cc
 |           +-- analyzing VBG conj
 |           +-- performance NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- application NN pobj
 |                       +-- an DT det
 |                       +-- running VBG partmod
 |                           +-- in IN prep
 |                               +-- system NN pobj
 |                               |   +-- a DT det
 |                               |   +-- storage NN nn
 |                               |   +-- with IN prep
 |                               |       +-- BuddyCache NNP pobj
 |                               +-- and CC cc
 |                               +-- without IN conj
 |                                   +-- -LRB- -LRB- punct
 |                                   +-- called VBN dep
 |                                   |   +-- Base NNP dep
 |                                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: To study the benefit of avoiding invalidation misses , we consider hot cache performance in a workload with modifications -LRB- with no cold misses -RRB- .
Parse:
consider VBP ROOT
 +-- study VB advcl
 |   +-- To TO aux
 |   +-- benefit NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- avoiding VBG pcomp
 |               +-- misses NNS dobj
 |                   +-- invalidation NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- performance NN dobj
 |   +-- cache NN nn
 |   |   +-- hot JJ amod
 |   +-- in IN prep
 |       +-- workload NN pobj
 |           +-- a DT det
 |           +-- with IN prep
 |               +-- modifications NNS pobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- with IN prep
 |                   |   +-- misses NNS pobj
 |                   |       +-- no DT det
 |                   |       +-- cold JJ amod
 |                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: In hot caches we expect BuddyCache to provide two complementary benefits , both of which reduce the latency of access to shared modified objects .
Parse:
expect VBP ROOT
 +-- In IN prep
 |   +-- caches NNS pobj
 |       +-- hot JJ amod
 +-- we PRP nsubj
 +-- provide VB xcomp
 |   +-- BuddyCache NNP nsubj
 |   +-- to TO aux
 |   +-- benefits NNS dobj
 |       +-- two CD num
 |       +-- complementary JJ amod
 |       +-- , , punct
 |       +-- reduce VBP rcmod
 |           +-- both DT nsubj
 |           |   +-- of IN prep
 |           |       +-- which WDT pobj
 |           +-- latency NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- access NN pobj
 |                       +-- to IN prep
 |                           +-- objects NNS pobj
 |                               +-- shared VBN amod
 |                               +-- modified VBN amod
 +-- . . punct
Input: Peer update lets a client access an object modified by a nearby collaborating peer without the delay imposed by invalidation only protocols .
Parse:
lets VBZ ROOT
 +-- update NN nsubj
 |   +-- Peer NN nn
 +-- access NN dobj
 |   +-- a DT det
 |   +-- client NN nn
 |   +-- object NN dep
 |       +-- an DT det
 |       +-- modified VBN partmod
 |           +-- by IN prep
 |           |   +-- peer NN pobj
 |           |       +-- a DT det
 |           |       +-- nearby JJ amod
 |           |       +-- collaborating NN amod
 |           +-- without IN prep
 |               +-- delay NN pobj
 |                   +-- the DT det
 |                   +-- imposed VBN partmod
 |                       +-- by IN prep
 |                           +-- protocols NNS pobj
 |                               +-- invalidation NN nn
 |                               +-- only RB advmod
 +-- . . punct
Input: In groups where peers share a read only interest in the modified objects , peer fetch allows a client to access a modified object as soon as a collaborating peer has it , which avoids the delay of server fetch without the high cost imposed by the update only protocols .
Parse:
allows VBZ ROOT
 +-- In IN prep
 |   +-- groups NNS pobj
 |       +-- share VBP rcmod
 |           +-- where WRB advmod
 |           +-- peers NNS nsubj
 |           +-- read NN dobj
 |           |   +-- a DT det
 |           +-- interest NN dobj
 |               +-- only JJ amod
 |               +-- in IN prep
 |                   +-- objects NNS pobj
 |                       +-- the DT det
 |                       +-- modified VBN amod
 +-- , , punct
 +-- fetch NN nsubj
 |   +-- peer NN nn
 +-- access VB xcomp
 |   +-- client NN nsubj
 |   |   +-- a DT det
 |   +-- to TO aux
 |   +-- object NN dobj
 |   |   +-- a DT det
 |   |   +-- modified VBN amod
 |   +-- soon RB advmod
 |   |   +-- as RB advmod
 |   |   +-- has VBZ ccomp
 |   |       +-- as IN mark
 |   |       +-- peer NN nsubj
 |   |       |   +-- a DT det
 |   |       |   +-- collaborating VBG amod
 |   |       +-- it PRP dobj
 |   +-- , , punct
 |   +-- avoids VBZ dep
 |       +-- which WDT nsubj
 |       +-- delay NN dobj
 |           +-- the DT det
 |           +-- of IN prep
 |           |   +-- fetch NN pobj
 |           |       +-- server NN nn
 |           +-- without IN prep
 |           |   +-- cost NN pobj
 |           |       +-- the DT det
 |           |       +-- high JJ amod
 |           |       +-- imposed VBN partmod
 |           |           +-- by IN prep
 |           |               +-- update NN pobj
 |           |                   +-- the DT det
 |           +-- protocols NNS dep
 |               +-- only RB advmod
 +-- . . punct
Input: Technology trends indicate that both benefits will remain important in the foreseeable future .
Parse:
indicate VBP ROOT
 +-- trends NNS nsubj
 |   +-- Technology NN nn
 +-- important JJ ccomp
 |   +-- that IN mark
 |   +-- benefits NNS nsubj
 |   |   +-- both DT det
 |   +-- will MD aux
 |   +-- remain VB cop
 |   +-- in IN prep
 |       +-- future NN pobj
 |           +-- the DT det
 |           +-- foreseeable JJ amod
 +-- . . punct
Input: The trend toward increase in available network bandwidth decreases the cost of the update only protocols .
Parse:
decreases VBZ ROOT
 +-- trend NN nsubj
 |   +-- The DT det
 |   +-- toward IN prep
 |       +-- increase NN pobj
 |           +-- in IN prep
 |               +-- bandwidth NN pobj
 |                   +-- available JJ amod
 |                   +-- network NN nn
 +-- cost NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- update NN pobj
 |           +-- the DT det
 |           +-- only RB cc
 |           +-- protocols NNS conj
 +-- . . punct
Input: However , the trend toward increasingly large caches , that are updated when cached objects are modified , makes invalidation base protocols more attractive .
Parse:
makes VBZ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- trend NN nsubj
 |   +-- the DT det
 |   +-- toward IN prep
 |       +-- caches NNS pobj
 |           +-- large JJ amod
 |           |   +-- increasingly RB advmod
 |           +-- , , punct
 |           +-- updated VBN rcmod
 |               +-- that WDT nsubjpass
 |               +-- are VBP auxpass
 |               +-- modified VBN advcl
 |                   +-- when WRB advmod
 |                   +-- objects NNS nsubjpass
 |                   |   +-- cached VBN amod
 |                   +-- are VBP auxpass
 +-- attractive JJ xcomp
 |   +-- protocols NNS nsubj
 |   |   +-- base NN nn
 |   |       +-- invalidation NN nn
 |   +-- more RBR advmod
 +-- . . punct
Input: To evaluate these two benefits we consider the performance of an application running without BuddyCache with an application running BuddyCache in two configurations .
Parse:
consider VBP ROOT
 +-- evaluate VB dep
 |   +-- To TO aux
 |   +-- benefits NNS dobj
 |       +-- these DT det
 |       +-- two CD num
 +-- we PRP nsubj
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- application NN pobj
 |           +-- an DT det
 |           +-- running VBG partmod
 |               +-- without IN prep
 |               |   +-- BuddyCache NNP pobj
 |               +-- with IN prep
 |                   +-- running VBG pcomp
 |                       +-- application NN nsubj
 |                       |   +-- an DT det
 |                       +-- BuddyCache NNP dobj
 |                       +-- in IN prep
 |                           +-- configurations NNS pobj
 |                               +-- two CD num
 +-- . . punct
Input: One , where a peer in the group modifies the objects , and another where the objects are modified by a peer outside the group .
Parse:
One CD ROOT
 +-- , , punct
 +-- modifies VBZ rcmod
 |   +-- where WRB advmod
 |   +-- peer NN nsubj
 |   |   +-- a DT det
 |   |   +-- in IN prep
 |   |       +-- group NN pobj
 |   |           +-- the DT det
 |   +-- objects NNS dobj
 |   |   +-- the DT det
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- modified VBN conj
 |       +-- another DT dep
 |       +-- where WRB advmod
 |       +-- objects NNS nsubjpass
 |       |   +-- the DT det
 |       +-- are VBP auxpass
 |       +-- by IN prep
 |           +-- peer NN pobj
 |               +-- a DT det
 |               +-- outside IN prep
 |                   +-- group NN pobj
 |                       +-- the DT det
 +-- . . punct
Input: Peer update can also avoid invalidation misses due to false sharing , introduced when multiple peers update different objects on the same page concurrently .
Parse:
avoid VB ROOT
 +-- update NN nsubj
 |   +-- Peer NN nn
 +-- can MD aux
 +-- also RB advmod
 +-- misses NNS dobj
 |   +-- invalidation NN nn
 |   +-- to IN prep
 |       +-- due IN mwe
 |       +-- sharing NN pobj
 |           +-- false JJ amod
 |           +-- , , punct
 |           +-- introduced VBN partmod
 |               +-- update VBP advcl
 |                   +-- when WRB advmod
 |                   +-- peers NNS nsubj
 |                   |   +-- multiple JJ amod
 |                   +-- objects NNS dobj
 |                   |   +-- different JJ amod
 |                   +-- on IN prep
 |                       +-- page NN pobj
 |                           +-- the DT det
 |                           +-- same JJ amod
 |                           +-- concurrently RB advmod
 +-- . . punct
Input: We do not analyze this benefit -LRB- demonstrated by earlier work -LRB- 2 -RRB- -RRB- because our benchmarks do not allow us to control object layout , and also because this benefit can be derived given the cache hit rate and workload contention .
Parse:
analyze VB ROOT
 +-- We PRP nsubj
 +-- do VBP aux
 +-- not RB neg
 +-- benefit NN dobj
 |   +-- this DT det
 |   +-- -LRB- -LRB- punct
 |   +-- demonstrated VBN partmod
 |   |   +-- by IN prep
 |   |       +-- work NN pobj
 |   |           +-- earlier JJR amod
 |   |           +-- -LRB- -LRB- punct
 |   |           +-- 2 CD dep
 |   |           +-- -RRB- -RRB- punct
 |   +-- -RRB- -RRB- punct
 +-- allow VB advcl
 |   +-- because IN mark
 |   +-- benchmarks NNS nsubj
 |   |   +-- our PRP$ poss
 |   +-- do VBP aux
 |   +-- not RB neg
 |   +-- control VB xcomp
 |   |   +-- us PRP nsubj
 |   |   +-- to TO aux
 |   |   +-- layout NN dobj
 |   |       +-- object NN nn
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- also RB advmod
 |   +-- derived VBN conj
 |       +-- because IN mark
 |       +-- benefit NN nsubjpass
 |       |   +-- this DT det
 |       +-- can MD aux
 |       +-- be VB auxpass
 |       +-- given VBN prep
 |           +-- rate NN dep
 |               +-- the DT det
 |               +-- hit VBN amod
 |               |   +-- cache NN dep
 |               +-- and CC cc
 |               +-- contention NN conj
 |                   +-- workload NN nn
 +-- . . punct
Input: 6.1.1 The Model The model considers how the time to complete an execution with and without BuddyCache is affected by invalidation misses and cold misses .
Parse:
considers VBZ ROOT
 +-- model NN nsubj
 |   +-- 6.1.1 CD num
 |   +-- The DT det
 |   +-- Model NNP nn
 +-- affected VBN ccomp
 |   +-- how WRB advmod
 |   +-- time NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- complete VB infmod
 |   |       +-- to TO aux
 |   |       +-- execution NN dobj
 |   |           +-- an DT det
 |   |           +-- with IN prep
 |   |               +-- and CC cc
 |   |               +-- without IN conj
 |   |                   +-- BuddyCache NNP pobj
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- misses NNS pobj
 |           +-- invalidation NN nn
 |           +-- and CC cc
 |           +-- misses NNS conj
 |               +-- cold JJ amod
 +-- . . punct
Input: Consider k clients running concurrently accessing uniformly a shared set of N pages in BuddyCache and Base .
Parse:
Consider VB ROOT
 +-- clients NNS dobj
 |   +-- k CD num
 |   +-- running VBG partmod
 |       +-- accessing VBG partmod
 |           +-- concurrently RB advmod
 |           +-- uniformly RB advmod
 |           +-- set NN dobj
 |               +-- a DT det
 |               +-- shared VBN amod
 |               +-- of IN prep
 |                   +-- pages NNS pobj
 |                       +-- N NNP nn
 |                       +-- in IN prep
 |                           +-- BuddyCache NNP pobj
 |                               +-- and CC cc
 |                               +-- Base NNP conj
 +-- . . punct
Input: Let tfetch -LRB- S -RRB- , tredirect -LRB- S -RRB- , tcommit -LRB- S -RRB- , and tcompute -LRB- S -RRB- be the time it takes a client to , respectively , fetch from server , peer fetch , commit a transaction and compute in a transaction , in a system S , where S is either a system with BuddyCache or without -LRB- Base -RRB- .
Parse:
Let VB ROOT
 +-- time NN ccomp
 |   +-- tfetch DT nsubj
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- S NNP dep
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- , , punct
 |   |   +-- tredirect NN conj
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- S NNP dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- tcommit UH conj
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- S NNP dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- and CC cc
 |   |   +-- tcompute NNP conj
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- S NNP dep
 |   |       +-- -RRB- -RRB- punct
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- takes VBZ rcmod
 |       +-- it PRP nsubj
 |       +-- client NN dobj
 |       |   +-- a DT det
 |       +-- to IN prep
 |           +-- , , punct
 |           +-- respectively RB conj
 |           +-- fetch VB conj
 |           |   +-- from IN prep
 |           |       +-- server NN pobj
 |           +-- fetch NN conj
 |           |   +-- peer NN nn
 |           +-- commit VB conj
 |           |   +-- transaction NN dobj
 |           |       +-- a DT det
 |           +-- and CC cc
 |           +-- compute NN conj
 |           +-- in IN prep
 |               +-- system NN pobj
 |                   +-- a DT det
 |                   +-- S NNP appos
 |                   +-- , , punct
 |                   +-- is VBZ rcmod
 |                       +-- where WRB advmod
 |                       +-- S NNP nsubj
 |                       +-- either CC dep
 |                       +-- system NN conj
 |                           +-- a DT det
 |                           +-- with IN prep
 |                               +-- BuddyCache NNP pobj
 |                               +-- or CC cc
 |                               +-- without IN conj
 |                                   +-- Base NN pobj
 |                                       +-- -LRB- -LRB- punct
 |                                       +-- -RRB- -RRB- punct
 +-- . . punct
Input: For simplicity , our model assumes the fetch and commit times are constant .
Parse:
assumes VBZ ROOT
 +-- For IN prep
 |   +-- simplicity NN pobj
 +-- , , punct
 +-- model NN nsubj
 |   +-- our PRP$ poss
 +-- fetch NN dobj
 |   +-- the DT det
 +-- and CC cc
 +-- constant JJ conj
 |   +-- commit VB csubj
 |   |   +-- times NNS dobj
 |   +-- are VBP cop
 +-- . . punct
Input: In general they may vary with the server load , e.g .
Parse:
vary VB ROOT
 +-- In IN prep
 |   +-- general JJ pobj
 +-- they PRP nsubj
 +-- may MD aux
 +-- with IN prep
 |   +-- load NN pobj
 |       +-- the DT det
 |       +-- server NN nn
 |       +-- , , punct
 |       +-- e.g UH appos
 +-- . . punct
Input: they depend on the total number of clients in the system .
Parse:
depend VBP ROOT
 +-- they PRP nsubj
 +-- on IN prep
 |   +-- number NN pobj
 |       +-- the DT det
 |       +-- total JJ amod
 |       +-- of IN prep
 |       |   +-- clients NNS pobj
 |       +-- in IN prep
 |           +-- system NN pobj
 |               +-- the DT det
 +-- . . punct
Input: The number of misses avoided by peer fetch depends on k , the number of clients in the BuddyCache , and on the client co interest in the shared data .
Parse:
depends VBZ ROOT
 +-- number NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |   |   +-- misses NNS pobj
 |   +-- avoided VBN partmod
 |       +-- by IN prep
 |           +-- fetch NN pobj
 |               +-- peer NN nn
 +-- on IN prep
 |   +-- k CD pobj
 |   |   +-- , , punct
 |   |   +-- number NN appos
 |   |       +-- the DT det
 |   |       +-- of IN prep
 |   |           +-- clients NNS pobj
 |   |               +-- in IN prep
 |   |                   +-- BuddyCache NNP pobj
 |   |                       +-- the DT det
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- on IN conj
 |       +-- interest NN pobj
 |           +-- the DT det
 |           +-- co NNP nn
 |           |   +-- client NN nn
 |           +-- in IN prep
 |               +-- data NNS pobj
 |                   +-- the DT det
 |                   +-- shared VBN amod
 +-- . . punct
Input: In a specific BuddyCache execution it is modeled by the variable r , defined as a number of fetches arriving at the redirector for a given version of page P -LRB- i.e .
Parse:
modeled VBN ROOT
 +-- In IN prep
 |   +-- execution NN pobj
 |       +-- a DT det
 |       +-- specific JJ amod
 |       +-- BuddyCache NN nn
 +-- it PRP nsubjpass
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- variable NN pobj
 |       +-- the DT det
 |       +-- r NN advmod
 |       +-- , , punct
 |       +-- defined VBN partmod
 |           +-- as IN prep
 |           |   +-- number NN pobj
 |           |       +-- a DT det
 |           |       +-- of IN prep
 |           |           +-- fetches NNS pobj
 |           |               +-- arriving VBG partmod
 |           |                   +-- at IN prep
 |           |                       +-- redirector NN pobj
 |           |                           +-- the DT det
 |           +-- for IN prep
 |               +-- version NN pobj
 |                   +-- a DT det
 |                   +-- given VBN amod
 |                   +-- of IN prep
 |                   |   +-- P NN pobj
 |                   |       +-- page NN nn
 |                   +-- -LRB- -LRB- punct
 |                   +-- i.e NNP dep
 +-- . . punct
Input: until an object on the page is invalidated -RRB- .
Parse:
invalidated VBN ROOT
 +-- until IN mark
 +-- object NN nsubjpass
 |   +-- an DT det
 |   +-- on IN prep
 |       +-- page NN pobj
 |           +-- the DT det
 +-- is VBZ auxpass
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: Consider an execution with cold misses .
Parse:
Consider VB ROOT
 +-- execution NN dobj
 |   +-- an DT det
 |   +-- with IN prep
 |       +-- misses NNS pobj
 |           +-- cold JJ amod
 +-- . . punct
Input: A client starts with a cold cache and runs read only workload until it accesses all N pages while committing l transactions .
Parse:
starts VBZ ROOT
 +-- client NN nsubj
 |   +-- A DT det
 +-- with IN prep
 |   +-- cache NN pobj
 |       +-- a DT det
 |       +-- cold JJ amod
 +-- and CC cc
 +-- read VBD conj
 |   +-- runs NNS nsubj
 |   +-- workload NN dobj
 |   |   +-- only RB advmod
 |   +-- accesses VBZ advcl
 |       +-- until IN mark
 |       +-- it PRP nsubj
 |       +-- pages NNS dobj
 |       |   +-- all DT det
 |       |   +-- N JJ nn
 |       +-- committing VBG advcl
 |           +-- while IN mark
 |           +-- transactions NNS dobj
 |               +-- l CD num
 +-- . . punct
Input: We assume there are no capacity misses , i.e .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- are VBP ccomp
 |   +-- there EX expl
 |   +-- capacity NN nsubj
 |       +-- no DT det
 |       +-- misses NNS dep
 |           +-- , , punct
 |           +-- i.e NN dep
 +-- . . punct
Input: the client cache is large enough to hold N pages .
Parse:
large JJ ROOT
 +-- cache NN nsubj
 |   +-- the DT det
 |   +-- client NN nn
 +-- is VBZ cop
 +-- enough RB advmod
 +-- hold VB xcomp
 |   +-- to TO aux
 |   +-- pages NNS dobj
 |       +-- N NN nn
 +-- . . punct
Input: In BC , r cold misses for page P reach the redirector .
Parse:
misses NNS ROOT
 +-- In IN prep
 |   +-- BC NNP pobj
 +-- , , punct
 +-- r VB cop
 +-- cold JJ amod
 +-- reach VB advcl
 |   +-- for IN mark
 |   +-- P NN nsubj
 |   |   +-- page NN nn
 |   +-- redirector NN dobj
 |       +-- the DT det
 +-- . . punct
Input: The first of the misses fetches P from the server , and the subsequent r ? 1 misses are redirected .
Parse:
fetches NNS ROOT
 +-- first JJ nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- misses NNS pobj
 |           +-- the DT det
 +-- P VBP dobj
 +-- from IN prep
 |   +-- server NN pobj
 |       +-- the DT det
 +-- , , punct
 +-- and CC cc
 +-- r NN conj
 |   +-- the DT det
 |   +-- subsequent JJ amod
 |   +-- ? . punct
 |   +-- redirected VBN dep
 |       +-- misses NNS nsubjpass
 |       |   +-- 1 CD num
 |       +-- are VBP auxpass
 +-- . . punct
Input: Since each client accesses the entire shared set r = k .
Parse:
accesses VBZ ROOT
 +-- Since IN mark
 +-- client NN nsubj
 |   +-- each DT det
 +-- set NN dobj
 |   +-- the DT det
 |   +-- entire JJ amod
 |   +-- shared VBN amod
 |   +-- r NN punct
 |   +-- = SYM dep
 |       +-- k CD num
 +-- . . punct
Input: Let Tcold -LRB- Base -RRB- and Tcold -LRB- BC -RRB- be the time it takes to complete the l transactions in Base and BC .
Parse:
Let VB ROOT
 +-- time NN ccomp
 |   +-- Tcold RB nsubj
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- Base VB dep
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- and CC cc
 |   |   +-- Tcold NN conj
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- BC NNP dep
 |   |       +-- -RRB- -RRB- punct
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- takes VBZ rcmod
 |       +-- it PRP nsubj
 |       +-- complete VB xcomp
 |           +-- to TO aux
 |           +-- transactions NNS dobj
 |               +-- the DT det
 |               +-- l NNP nn
 |               +-- in IN prep
 |                   +-- Base NNP pobj
 |                       +-- and CC cc
 |                       +-- BC NNP conj
 +-- . . punct
Input: 33 Tcold -LRB- Base -RRB- = N ? tfetch -LRB- Base -RRB- + -LRB- tcompute + tcommit -LRB- Base -RRB- -RRB- ? l -LRB- 1 -RRB- Tcold -LRB- BC -RRB- = N ? 1 k ? tfetch -LRB- BC -RRB- + -LRB- 1 ? 1 k -RRB- ? tredirect + -LRB- tcompute + tcommit -LRB- BC -RRB- -RRB- ? l -LRB- 2 -RRB- Consider next an execution with invalidation misses .
Parse:
Tcold NNP ROOT
 +-- 33 CD num
 +-- Base NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- N NN dep
 |   +-- = SYM nn
 |   +-- ? , punct
 |   +-- tfetch UH dep
 +-- + SYM dep
 +-- tcommit UH dep
 |   +-- -LRB- -LRB- punct
 |   +-- tcompute UH nn
 |   +-- + SYM dep
 |   +-- Base NN dep
 |   +-- -RRB- -RRB- punct
 +-- -RRB- -RRB- punct
 +-- ? . punct
 +-- l NNP dep
 |   +-- BC NNP appos
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- 1 CD num
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- Tcold NN nn
 |   +-- = NFP punct
 |   +-- N NNP dep
 |   +-- ? . punct
 |   +-- k NN dep
 |   |   +-- 1 CD num
 |   +-- tfetch NN dep
 |   |   +-- BC NNP appos
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- -RRB- -RRB- punct
 |   +-- + SYM dep
 |   +-- -LRB- -LRB- punct
 |   +-- 1 CD dep
 |   |   +-- ? . punct
 |   |   +-- k CD num
 |   |       +-- 1 CD number
 |   +-- -RRB- -RRB- punct
 |   +-- tredirect NN dep
 |       +-- + SYM prep
 |           +-- Consider VB dep
 |               +-- -LRB- -LRB- punct
 |               +-- tcommit NNP nsubj
 |               |   +-- tcompute NNP nn
 |               |   +-- + SYM nn
 |               |   +-- BC NNP appos
 |               |   |   +-- -LRB- -LRB- punct
 |               |   |   +-- -RRB- -RRB- punct
 |               |   +-- ? . punct
 |               +-- l NNP discourse
 |               +-- 2 LS dep
 |               |   +-- -LRB- -LRB- punct
 |               |   +-- -RRB- -RRB- punct
 |               +-- next IN prep
 |                   +-- execution NN pobj
 |                       +-- an DT det
 |                       +-- with IN prep
 |                           +-- misses NNS pobj
 |                               +-- invalidation NN nn
 +-- . . punct
Input: A client starts with a hot cache containing the working set of N pages .
Parse:
starts VBZ ROOT
 +-- client NN nsubj
 |   +-- A DT det
 +-- with IN prep
 |   +-- cache NN pobj
 |       +-- a DT det
 |       +-- hot JJ amod
 |       +-- containing VBG partmod
 |           +-- set NN dobj
 |               +-- the DT det
 |               +-- working VBG amod
 |               +-- of IN prep
 |                   +-- pages NNS pobj
 |                       +-- N NNP nn
 +-- . . punct
Input: We focus on a simple case where one client -LRB- writer -RRB- runs a workload with modifications , and the other clients -LRB- readers -RRB- run a read only workload .
Parse:
focus VBP ROOT
 +-- We PRP nsubj
 +-- on IN prep
 |   +-- case NN pobj
 |       +-- a DT det
 |       +-- simple JJ amod
 |       +-- runs VBZ rcmod
 |           +-- where WRB advmod
 |           +-- client NN nsubj
 |           |   +-- one CD num
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- writer NN dep
 |           |   +-- -RRB- -RRB- punct
 |           +-- workload NN dobj
 |           |   +-- a DT det
 |           |   +-- with IN prep
 |           |       +-- modifications NNS pobj
 |           +-- , , punct
 |           +-- and CC cc
 |           +-- run VBP conj
 |               +-- clients NNS nsubj
 |               |   +-- the DT det
 |               |   +-- other JJ amod
 |               |   +-- -LRB- -LRB- punct
 |               |   +-- readers NNS dep
 |               |   +-- -RRB- -RRB- punct
 |               +-- read NN iobj
 |               |   +-- a DT det
 |               +-- workload NN dobj
 |                   +-- only RB amod
 +-- . . punct
Input: In a group containing the writer -LRB- BCW -RRB- , peer update eliminates all invalidation misses .
Parse:
eliminates NNS ROOT
 +-- In IN prep
 |   +-- group NN pobj
 |       +-- a DT det
 |       +-- containing VBG partmod
 |           +-- writer NN dobj
 |               +-- the DT det
 |               +-- -LRB- -LRB- punct
 |               +-- BCW NNP dep
 |               +-- -RRB- -RRB- punct
 +-- , , punct
 +-- update NN nsubj
 |   +-- peer NN nn
 +-- misses NNS dobj
 |   +-- all DT det
 |   +-- invalidation NN nn
 +-- . . punct
Input: In a group containing only readers -LRB- BCR -RRB- , during a steady state execution with uniform updates , a client transaction has missinv invalidation misses .
Parse:
missinv VBN ROOT
 +-- In IN prep
 |   +-- group NN pobj
 |       +-- a DT det
 |       +-- containing VBG partmod
 |           +-- readers NNS dobj
 |               +-- only RB amod
 |               +-- -LRB- -LRB- punct
 |               +-- BCR NNP dep
 |               +-- -RRB- -RRB- punct
 +-- , , punct
 +-- during IN prep
 |   +-- execution NN pobj
 |       +-- a DT det
 |       +-- steady JJ amod
 |       +-- state NN nn
 |       +-- with IN prep
 |           +-- updates NNS pobj
 |               +-- uniform NN nn
 +-- transaction NN nsubj
 |   +-- a DT det
 |   +-- client NN nn
 +-- has VBZ aux
 +-- misses NNS dobj
 |   +-- invalidation NN nn
 +-- . . punct
Input: Consider the sequence of r client misses on page P that arrive at the redirector in BCR between two consequent invalidations of page P .
Parse:
Consider VB ROOT
 +-- misses NNS ccomp
 |   +-- sequence NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- client NN pobj
 |   |           +-- r JJ amod
 |   +-- on IN prep
 |       +-- P NN pobj
 |           +-- page NN nn
 |           +-- arrive VBP rcmod
 |               +-- that WDT nsubj
 |               +-- at IN prep
 |               |   +-- redirector NN pobj
 |               |       +-- the DT det
 |               |       +-- in IN prep
 |               |           +-- BCR NNP pobj
 |               +-- between IN prep
 |                   +-- invalidations NNS pobj
 |                       +-- two CD num
 |                       +-- consequent JJ amod
 |                       +-- of IN prep
 |                           +-- P NN pobj
 |                               +-- page NN nn
 +-- . . punct
Input: The first miss goes to the server , and the r ? 1 subsequent misses are redirected .
Parse:
goes VBZ ROOT
 +-- miss NN nsubj
 |   +-- The DT det
 |   +-- first JJ amod
 +-- to IN prep
 |   +-- server NN pobj
 |       +-- the DT det
 +-- , , punct
 +-- and CC cc
 +-- redirected VBN conj
 |   +-- misses NNS nsubjpass
 |   |   +-- r NN nn
 |   |   |   +-- the DT det
 |   |   |   +-- ? . punct
 |   |   |   +-- 1 CD num
 |   |   +-- subsequent JJ amod
 |   +-- are VBP auxpass
 +-- . . punct
Input: Unlike with cold misses , r ? k because the second invalidation disables redirection for P until the next miss on P causes a server fetch .
Parse:
Unlike IN ROOT
 +-- with IN prep
 |   +-- misses NNS pobj
 |       +-- cold JJ amod
 |       +-- , , punct
 |       +-- r VB conj
 |       +-- ? . punct
 |       +-- k NN conj
 |           +-- disables VBZ advcl
 |               +-- because IN mark
 |               +-- invalidation NN nsubj
 |               |   +-- the DT det
 |               |   +-- second JJ amod
 |               +-- redirection NN dobj
 |               |   +-- for IN prep
 |               |       +-- P NN pobj
 |               +-- causes VBZ advcl
 |                   +-- until IN mark
 |                   +-- miss NN nsubj
 |                   |   +-- the DT det
 |                   |   +-- next JJ amod
 |                   |   +-- on IN prep
 |                   |       +-- P NN pobj
 |                   +-- fetch NN dobj
 |                       +-- a DT det
 |                       +-- server NN nn
 +-- . . punct
Input: Assuming uniform access , a client invalidation miss has a chance of 1 r to be the first miss -LRB- resulting in server fetch -RRB- , and a chance of -LRB- 1 ? 1 r -RRB- to be redirected .
Parse:
has VBZ ROOT
 +-- Assuming VBG partmod
 |   +-- access NN dobj
 |       +-- uniform JJ amod
 +-- , , punct
 +-- miss NN nsubj
 |   +-- a DT det
 |   +-- invalidation NN nn
 |       +-- client NN nn
 +-- chance NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- r NN pobj
 |   |       +-- 1 CD num
 |   +-- miss NN infmod
 |   |   +-- to TO aux
 |   |   +-- be VB cop
 |   |   +-- the DT det
 |   |   +-- first JJ amod
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- resulting VBG partmod
 |   |   |   +-- in IN prep
 |   |   |       +-- fetch NN pobj
 |   |   |           +-- server NN nn
 |   |   +-- -RRB- -RRB- punct
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- chance NN conj
 |       +-- a DT det
 |       +-- of IN prep
 |       |   +-- 1 CD pobj
 |       |       +-- -LRB- -LRB- punct
 |       |       +-- ? . punct
 |       |       +-- r VB dep
 |       |       |   +-- 1 CD num
 |       |       +-- -RRB- -RRB- punct
 |       +-- redirected VBN infmod
 |           +-- to TO aux
 |           +-- be VB auxpass
 +-- . . punct
Input: Let Tinval -LRB- Base -RRB- , Tinval -LRB- BCR -RRB- and Tinval -LRB- BCW -RRB- be the time it takes to complete a single transaction in the Base , BCR and BCW systems .
Parse:
Let VB ROOT
 +-- time NN ccomp
 |   +-- Tinval NNP nsubj
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- Base NNP dep
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- , , punct
 |   |   +-- Tinval NNP conj
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- BCR NNP dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- and CC cc
 |   |   +-- BCW NNP conj
 |   |       +-- Tinval NNP nn
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- -RRB- -RRB- punct
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- takes VBZ rcmod
 |       +-- it PRP nsubj
 |       +-- complete VB xcomp
 |           +-- to TO aux
 |           +-- transaction NN dobj
 |               +-- a DT det
 |               +-- single JJ amod
 |               +-- in IN prep
 |                   +-- systems NNS pobj
 |                       +-- the DT det
 |                       +-- Base NNP nn
 |                           +-- , , punct
 |                           +-- BCR NNP conj
 |                           +-- and CC cc
 |                           +-- BCW NNP conj
 +-- . . punct
Input: Tinval -LRB- Base -RRB- = missinv ? tfetch -LRB- Base -RRB- +tcompute + tcommit -LRB- Base -RRB- -LRB- 3 -RRB- Tinval -LRB- BCR -RRB- = missinv ? -LRB- 1 r ? tfetch -LRB- BCR -RRB- + -LRB- 1 ? 1 r -RRB- ? tredirect -LRB- BCR -RRB- -RRB- +tcompute + tcommit -LRB- BCR -RRB- -LRB- 4 -RRB- Tinval -LRB- BCW -RRB- = tcompute + tcommit -LRB- BCW -RRB- -LRB- 5 -RRB- In the experiments described below , we measure the parameters N , r , missinv , tfetch -LRB- S -RRB- , tredirect -LRB- S -RRB- , tcommit -LRB- S -RRB- , and tcompute -LRB- S -RRB- .
Parse:
missinv NNP ROOT
 +-- Base NN dep
 |   +-- Tinval NNP dep
 |   |   +-- Base NN appos
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- -RRB- -RRB- punct
 |   +-- = SYM dep
 |   +-- missinv NN dep
 |   +-- ? , punct
 |   +-- tfetch UH dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- +tcompute NN dep
 +-- + SYM dep
 +-- tcommit UH dep
 |   +-- -LRB- -LRB- punct
 |   +-- Base NN dep
 |   +-- -RRB- -RRB- punct
 +-- Tinval NNP dep
 |   +-- -LRB- -LRB- punct
 |   +-- 3 CD num
 |   +-- -RRB- -RRB- punct
 |   +-- BCR NNP dep
 +-- = NFP dep
 +-- ? . punct
 +-- -LRB- -LRB- punct
 +-- 1 CD dep
     +-- r NN prep
         +-- ? . pcomp
             +-- BCR NNP pobj
                 +-- tfetch NN nn
                 +-- -LRB- -LRB- punct
                 +-- -RRB- -RRB- punct
                 +-- + SYM dep
                 +-- 1 CD dep
                 |   +-- ? . punct
                 |   +-- 1 CD num
                 +-- r NN dep
                 +-- ? . punct
                 +-- tredirect NN dep
                 |   +-- -LRB- -LRB- punct
                 |   +-- BCR NNP dep
                 |   +-- -RRB- -RRB- punct
                 +-- +tcompute NN dep
                     +-- + SYM cc
                     +-- tcommit NNP conj
                         +-- BCR NNP dep
                         |   +-- -LRB- -LRB- punct
                         |   +-- -RRB- -RRB- punct
                         +-- tcompute NN dep
                             +-- -LRB- -LRB- punct
                             +-- 4 CD num
                             +-- -RRB- -RRB- punct
                             +-- Tinval NNP amod
                             |   +-- BCW NNP appos
                             |       +-- -LRB- -LRB- punct
                             |       +-- -RRB- -RRB- punct
                             +-- = , dep
                             +-- + SYM cc
                             +-- measure VBP dep
                             |   +-- 5 LS dep
                             |   |   +-- tcommit NNP dep
                             |   |   |   +-- -LRB- -LRB- punct
                             |   |   |   +-- BCW NNP dep
                             |   |   |   +-- -RRB- -RRB- punct
                             |   |   +-- -LRB- -LRB- punct
                             |   |   +-- -RRB- -RRB- punct
                             |   +-- In IN prep
                             |   |   +-- experiments NNS pobj
                             |   |       +-- the DT det
                             |   |       +-- described VBN partmod
                             |   |           +-- below RB advmod
                             |   +-- , , punct
                             |   +-- we PRP nsubj
                             |   +-- parameters NNS dobj
                             |       +-- the DT det
                             |       +-- N NNP dep
                             |           +-- , , punct
                             |           +-- r UH discourse
                             |           +-- missinv NFP conj
                             |           +-- tfetch NNP conj
                             |           |   +-- S NNP appos
                             |           |       +-- -LRB- -LRB- punct
                             |           |       +-- -RRB- -RRB- punct
                             |           +-- tredirect NN conj
                             |           |   +-- S NNP appos
                             |           |       +-- -LRB- -LRB- punct
                             |           |       +-- -RRB- -RRB- punct
                             |           +-- tcommit UH conj
                             |           |   +-- -LRB- -LRB- punct
                             |           |   +-- S NNP dep
                             |           |   +-- -RRB- -RRB- punct
                             |           +-- and CC cc
                             |           +-- tcompute NNP conj
                             |               +-- -LRB- -LRB- punct
                             |               +-- S NNP dep
                             |               +-- -RRB- -RRB- punct
                             +-- . . punct
Input: We compute the completion times derived using the above model and derive the benefits .
Parse:
compute VBP ROOT
 +-- We PRP nsubj
 +-- times NNS dobj
 |   +-- the DT det
 |   +-- completion NN nn
 |   +-- derived VBN partmod
 |       +-- using VBG xcomp
 |           +-- model NN dobj
 |               +-- the DT det
 |               +-- above JJ amod
 +-- and CC cc
 +-- derive VB conj
 |   +-- benefits NNS dobj
 |       +-- the DT det
 +-- . . punct
Input: We then validate the model by comparing the derived values to the completion times and benefits measured directly in the experiments .
Parse:
validate VBP ROOT
 +-- We PRP nsubj
 +-- then RB advmod
 +-- model NN dobj
 |   +-- the DT det
 +-- by IN prep
 |   +-- comparing VBG pcomp
 |       +-- values NNS dobj
 |       |   +-- the DT det
 |       |   +-- derived VBN amod
 |       +-- to IN prep
 |           +-- times NNS pobj
 |               +-- the DT det
 |               +-- completion NN nn
 |               +-- and CC cc
 |               +-- benefits NNS conj
 |               +-- measured VBN partmod
 |                   +-- directly RB advmod
 |                   +-- in IN prep
 |                       +-- experiments NNS pobj
 |                           +-- the DT det
 +-- . . punct
Input: 6.2 Experimental Setup Before presenting our results we describe our experimental setup .
Parse:
describe VBP ROOT
 +-- Before IN prep
 |   +-- Setup NN npadvmod
 |   |   +-- 6.2 CD num
 |   |   +-- Experimental JJ amod
 |   +-- presenting VBG pcomp
 |       +-- results NNS dobj
 |           +-- our PRP$ poss
 +-- we PRP nsubj
 +-- setup NN dobj
 |   +-- our PRP$ poss
 |   +-- experimental JJ amod
 +-- . . punct
Input: We use two systems in our experiments .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- systems NNS dobj
 |   +-- two CD num
 +-- in IN prep
 |   +-- experiments NNS pobj
 |       +-- our PRP$ poss
 +-- . . punct
Input: The Base system runs Thor distributed object storage system -LRB- 23 -RRB- with clients connecting directly to the servers .
Parse:
runs VBZ ROOT
 +-- system NN nsubj
 |   +-- The DT det
 |   +-- Base NN nn
 +-- system NN dobj
 |   +-- Thor NNP nn
 |   +-- distributed VBN amod
 |   +-- storage NN nn
 |   |   +-- object NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- 23 CD dep
 |   +-- -RRB- -RRB- punct
 +-- with IN prep
 |   +-- clients NNS pobj
 |       +-- connecting VBG partmod
 |           +-- directly RB advmod
 |           +-- to IN prep
 |               +-- servers NNS pobj
 |                   +-- the DT det
 +-- . . punct
Input: The Buddy system runs our implementation of BuddyCache prototype in Thor , supporting peer fetch , peer update , and solo commit , but not the failover .
Parse:
runs VBZ ROOT
 +-- system NN nsubj
 |   +-- The DT det
 |   +-- Buddy NNP nn
 +-- implementation NN dobj
 |   +-- our PRP$ poss
 |   +-- of IN prep
 |       +-- prototype NN pobj
 |           +-- BuddyCache NNP nn
 |           +-- in IN prep
 |               +-- Thor NNP pobj
 +-- , , punct
 +-- supporting VBG partmod
 |   +-- fetch NN dobj
 |       +-- peer NN nn
 |       +-- , , punct
 |       +-- update NN conj
 |       |   +-- peer NN nn
 |       +-- and CC cc
 |       +-- commit VBP conj
 |       |   +-- solo NN nn
 |       +-- but CC cc
 |       +-- not RB conj
 |       +-- failover NN dep
 |           +-- the DT det
 +-- . . punct
Input: Our workloads are based on the multi user OO7 benchmark -LRB- 8 -RRB- ; this benchmark is intended to capture the characteristics of many different multi user CAD CAM CASE applications , but does not model any specific application .
Parse:
based VBN ROOT
 +-- workloads NNS nsubjpass
 |   +-- Our PRP$ poss
 +-- are VBP auxpass
 +-- on IN prep
 |   +-- benchmark NN pobj
 |       +-- the DT det
 |       +-- multi JJ amod
 |       +-- user NN nn
 |       |   +-- OO7 CD num
 |       +-- -LRB- -LRB- punct
 |       +-- 8 CD dep
 |       +-- -RRB- -RRB- punct
 +-- ; : punct
 +-- intended VBN parataxis
 |   +-- benchmark NN nsubjpass
 |   |   +-- this DT det
 |   +-- is VBZ auxpass
 |   +-- capture VB xcomp
 |   |   +-- to TO aux
 |   |   +-- characteristics NNS dobj
 |   |       +-- the DT det
 |   |       +-- of IN prep
 |   |           +-- applications NNS pobj
 |   |               +-- user NN nn
 |   |               |   +-- many JJ amod
 |   |               |   +-- different JJ amod
 |   |               |   +-- multi JJ nn
 |   |               +-- CAD NNP nn
 |   |               +-- CAM NNP nn
 |   |               +-- CASE NNP nn
 |   +-- , , punct
 |   +-- but CC cc
 |   +-- model VB conj
 |       +-- does VBZ aux
 |       +-- not RB neg
 |       +-- application NN dobj
 |           +-- any DT det
 |           +-- specific JJ amod
 +-- . . punct
Input: We use OO7 because it is a standard benchmark for measuring object storage system performance .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- OO7 CD dobj
 +-- benchmark NN advcl
 |   +-- because IN mark
 |   +-- it PRP nsubj
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- standard JJ amod
 |   +-- for IN prep
 |       +-- measuring VBG pcomp
 |           +-- performance NN dobj
 |               +-- system NN nn
 |                   +-- storage NN nn
 |                       +-- object NN nn
 +-- . . punct
Input: The OO7 database contains a tree of assembly objects with leaves pointing to three composite parts chosen randomly from among 500 such objects .
Parse:
contains VBZ ROOT
 +-- database NN nsubj
 |   +-- The DT det
 |   +-- OO7 CD num
 +-- tree NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- objects NNS pobj
 |   |       +-- assembly NN nn
 |   |       +-- with IN prep
 |   |           +-- leaves NNS pobj
 |   +-- pointing VBG partmod
 |       +-- to IN prep
 |           +-- parts NNS pobj
 |               +-- three CD num
 |               +-- composite JJ amod
 |               +-- chosen VBN partmod
 |                   +-- randomly RB advmod
 |                   +-- from IN prep
 |                       +-- among IN pcomp
 |                           +-- objects NNS pobj
 |                               +-- 500 CD num
 |                               +-- such JJ amod
 +-- . . punct
Input: Each composite part contains a graph of atomic parts linked by connection objects ; each atomic part has 3 outgoing connections .
Parse:
contains VBZ ROOT
 +-- part NN nsubj
 |   +-- Each DT det
 |   +-- composite JJ amod
 +-- graph NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- parts NNS pobj
 |           +-- atomic JJ amod
 |           +-- linked VBN partmod
 |               +-- by IN prep
 |                   +-- objects NNS pobj
 |                       +-- connection NN nn
 +-- ; : punct
 +-- has VBZ parataxis
 |   +-- part NN nsubj
 |   |   +-- each DT det
 |   |   +-- atomic JJ amod
 |   +-- connections NNS dobj
 |       +-- 3 CD num
 |       +-- outgoing JJ amod
 +-- . . punct
Input: We use a medium database that has 200 atomic parts per composite part .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- database NN dobj
 |   +-- a DT det
 |   +-- medium JJ amod
 |   +-- has VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- parts NNS dobj
 |           +-- 200 CD num
 |           +-- atomic JJ amod
 |           +-- per IN prep
 |               +-- part NN pobj
 |                   +-- composite JJ amod
 +-- . . punct
Input: The multi user database allocates for each client a private module consisting of one tree of assembly objects , and adds an extra shared module that scales proportionally to the number of clients .
Parse:
allocates NNS ROOT
 +-- database NN nsubj
 |   +-- The DT det
 |   +-- multi JJ amod
 |   +-- user NN nn
 +-- for IN prep
 |   +-- client NN pobj
 |       +-- each DT det
 +-- module NN dobj
 |   +-- a DT det
 |   +-- private JJ amod
 |   +-- consisting VBG partmod
 |       +-- of IN prep
 |           +-- tree NN pobj
 |               +-- one CD num
 |               +-- of IN prep
 |                   +-- objects NNS pobj
 |                       +-- assembly NN nn
 +-- , , punct
 +-- and CC cc
 +-- adds VBZ conj
 |   +-- module NN dobj
 |       +-- an DT det
 |       +-- extra JJ amod
 |       +-- shared VBN amod
 |       +-- scales VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- proportionally RB advmod
 |           +-- to IN prep
 |               +-- number NN pobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- clients NNS pobj
 +-- . . punct
Input: We expect a typical BuddyCache configuration not to be cache limited and therefore focus on workloads where the objects in the client working set fit in the cache .
Parse:
expect VBP ROOT
 +-- We PRP nsubj
 +-- limited VBN ccomp
 |   +-- configuration NN nsubjpass
 |   |   +-- a DT det
 |   |   +-- typical JJ amod
 |   |   +-- BuddyCache NNP nn
 |   +-- not RB neg
 |   +-- to TO aux
 |   +-- be VB auxpass
 |   +-- cache NN npadvmod
 |   +-- and CC cc
 |   +-- therefore RB advmod
 |   +-- focus VBP conj
 |       +-- on IN prep
 |           +-- workloads NNS pobj
 |               +-- set VBN rcmod
 |                   +-- where WRB advmod
 |                   +-- objects NNS nsubj
 |                   |   +-- the DT det
 |                   |   +-- in IN prep
 |                   |       +-- client NN pobj
 |                   |           +-- the DT det
 |                   +-- working VBG dep
 |                   +-- fit NN dobj
 |                   +-- in IN prep
 |                       +-- cache NN pobj
 |                           +-- the DT det
 +-- . . punct
Input: Since the goal of our study is to evaluate how effectively our techniques deal with access to shared objects , in our study we limit client access to shared data only .
Parse:
limit VBP ROOT
 +-- is VBZ advcl
 |   +-- Since IN mark
 |   +-- goal NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- study NN pobj
 |   |           +-- our PRP$ poss
 |   +-- evaluate VB xcomp
 |       +-- to TO aux
 |       +-- deal VBP ccomp
 |           +-- effectively RB advmod
 |           |   +-- how WRB advmod
 |           +-- techniques NNS nsubj
 |           |   +-- our PRP$ poss
 |           +-- with IN prep
 |               +-- access NN pobj
 |                   +-- to IN prep
 |                       +-- objects NNS pobj
 |                           +-- shared VBN amod
 +-- , , punct
 +-- in IN prep
 |   +-- study NN pobj
 |       +-- our PRP$ poss
 +-- we PRP nsubj
 +-- access NN dobj
 |   +-- client NN nn
 |   +-- to IN prep
 |       +-- data NNS pobj
 |           +-- shared VBN amod
 +-- only RB advmod
 +-- . . punct
Input: This allows us to study the effect our techniques have on cold cache and cache consistency misses and isolate as much as possible the effect of cache capacity misses .
Parse:
allows VBZ ROOT
 +-- This DT nsubj
 +-- study VB xcomp
 |   +-- us PRP nsubj
 |   +-- to TO aux
 |   +-- effect NN dobj
 |   |   +-- the DT det
 |   |   +-- have VBP rcmod
 |   |   |   +-- techniques NNS nsubj
 |   |   |       +-- our PRP$ poss
 |   |   +-- on IN prep
 |   |       +-- misses NNS pobj
 |   |           +-- cache NN nn
 |   |               +-- cold JJ amod
 |   |               +-- and CC cc
 |   |               +-- consistency NN conj
 |   |                   +-- cache NN nn
 |   +-- and CC cc
 |   +-- isolate VB conj
 |       +-- much RB advmod
 |       |   +-- as RB advmod
 |       |   +-- as IN prep
 |       |       +-- possible JJ pobj
 |       +-- effect NN dobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- misses NNS pobj
 |                   +-- capacity NN nn
 |                       +-- cache NN nn
 +-- . . punct
Input: To keep the length of our experiments reasonable , we use small caches .
Parse:
use VBP ROOT
 +-- keep VB advcl
 |   +-- To TO aux
 |   +-- length NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- experiments NNS pobj
 |   |           +-- our PRP$ poss
 |   +-- reasonable JJ dep
 +-- , , punct
 +-- we PRP nsubj
 +-- caches NNS dobj
 |   +-- small JJ amod
 +-- . . punct
Input: The OO7 benchmark generates database modules of predefined size .
Parse:
generates VBZ ROOT
 +-- benchmark NN nsubj
 |   +-- The DT det
 |   +-- OO7 CD num
 +-- modules NNS dobj
 |   +-- database NN nn
 |   +-- of IN prep
 |       +-- size NN pobj
 |           +-- predefined VBN amod
 +-- . . punct
Input: In our implementation of OO7 , the private module size is about 38MB .
Parse:
is VBZ ROOT
 +-- In IN prep
 |   +-- implementation NN pobj
 |       +-- our PRP$ poss
 |       +-- of IN prep
 |           +-- OO7 CD pobj
 +-- , , punct
 +-- size NN nsubj
 |   +-- the DT det
 |   +-- private JJ amod
 |   +-- module NN nn
 +-- about IN prep
 |   +-- 38MB CD pobj
 +-- . . punct
Input: To make sure that the entire working set fits into the cache we use a single private module and choose a cache size of 40MB for each client .
Parse:
make VB ROOT
 +-- To TO aux
 +-- sure JJ acomp
 |   +-- fits NNS ccomp
 |       +-- that IN mark
 |       +-- set VBD nsubj
 |       |   +-- the DT det
 |       |   +-- entire JJ amod
 |       |   +-- working VBG amod
 |       +-- into IN prep
 |           +-- cache NN pobj
 |               +-- the DT det
 |               +-- use VBP rcmod
 |                   +-- we PRP nsubj
 |                   +-- module NN dobj
 |                   |   +-- a DT det
 |                   |   +-- single JJ amod
 |                   |   +-- private JJ amod
 |                   +-- and CC cc
 |                   +-- choose VB conj
 |                       +-- size NN dobj
 |                       |   +-- a DT det
 |                       |   +-- cache NN nn
 |                       |   +-- of IN prep
 |                       |       +-- 40MB CD pobj
 |                       +-- for IN prep
 |                           +-- client NN pobj
 |                               +-- each DT det
 +-- . . punct
Input: The OO7 database is generated with modules for 3 clients , only one of which is used in our experiments as we explain above .
Parse:
generated VBN ROOT
 +-- database NN nsubjpass
 |   +-- The DT det
 |   +-- OO7 CD num
 +-- is VBZ auxpass
 +-- with IN prep
 |   +-- modules NNS pobj
 +-- for IN prep
 |   +-- clients NNS pobj
 |       +-- 3 CD num
 |       +-- , , punct
 |       +-- used VBN rcmod
 |           +-- one CD nsubjpass
 |           |   +-- only RB quantmod
 |           |   +-- of IN prep
 |           |       +-- which WDT pobj
 |           +-- is VBZ auxpass
 |           +-- in IN prep
 |           |   +-- experiments NNS pobj
 |           |       +-- our PRP$ poss
 |           +-- explain VBP advcl
 |               +-- as IN mark
 |               +-- we PRP nsubj
 |               +-- above RB advmod
 +-- . . punct
Input: The objects in the database are clustered in 8K pages , which are also the unit of transfer in the fetch requests .
Parse:
clustered VBN ROOT
 +-- objects NNS nsubjpass
 |   +-- The DT det
 |   +-- in IN prep
 |       +-- database NN pobj
 |           +-- the DT det
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- pages NNS pobj
 |       +-- 8K CD num
 |       +-- , , punct
 |       +-- unit NN rcmod
 |           +-- which WDT nsubj
 |           +-- are VBP cop
 |           +-- also RB advmod
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- transfer NN pobj
 |                   +-- in IN prep
 |                       +-- requests NNS pobj
 |                           +-- the DT det
 |                           +-- fetch NN nn
 +-- . . punct
Input: We consider two types of transaction workloads in our analysis , read only and read write .
Parse:
consider VBP ROOT
 +-- We PRP nsubj
 +-- types NNS dobj
 |   +-- two CD num
 |   +-- of IN prep
 |   |   +-- workloads NNS pobj
 |   |       +-- transaction NN nn
 |   +-- in IN prep
 |   |   +-- analysis NN pobj
 |   |       +-- our PRP$ poss
 |   +-- , , punct
 |   +-- read VBN dep
 |       +-- only RB advmod
 |       +-- and CC cc
 |       +-- read VB conj
 |           +-- write VB ccomp
 +-- . . punct
Input: In OO7 benchmark , read only transactions use the T1 traversal that performs a depth first traversal of entire composite part graph .
Parse:
read VB ROOT
 +-- In IN prep
 |   +-- benchmark NN pobj
 |       +-- OO7 CD num
 +-- , , punct
 +-- use VBP ccomp
 |   +-- transactions NNS nsubj
 |   |   +-- only RB advmod
 |   +-- traversal NN dobj
 |       +-- the DT det
 |       +-- T1 CD num
 |       +-- performs VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- traversal NN dobj
 |               +-- a DT det
 |               +-- depth NN amod
 |               +-- first JJ amod
 |               +-- of IN prep
 |                   +-- graph NN pobj
 |                       +-- entire JJ amod
 |                       +-- part NN nn
 |                           +-- composite JJ amod
 +-- . . punct
Input: Write transactions use the T2b traversal that is identical to T1 except that it modifies all the atomic parts in a single composite .
Parse:
use VBP ROOT
 +-- transactions NNS nsubj
 |   +-- Write NN nn
 +-- traversal NN dobj
 |   +-- the DT det
 |   +-- T2b CD num
 |   +-- identical JJ rcmod
 |       +-- that WDT nsubj
 |       +-- is VBZ cop
 |       +-- to IN prep
 |           +-- T1 CD pobj
 +-- modifies VBZ advcl
 |   +-- except IN mark
 |   +-- that IN mark
 |   +-- it PRP nsubj
 |   +-- parts NNS dobj
 |   |   +-- all PDT predet
 |   |   +-- the DT det
 |   |   +-- atomic JJ amod
 |   +-- in IN prep
 |       +-- composite NN pobj
 |           +-- a DT det
 |           +-- single JJ amod
 +-- . . punct
Input: A single transaction includes one traversal and there is no sleep time between transactions .
Parse:
includes VBZ ROOT
 +-- transaction NN nsubj
 |   +-- A DT det
 |   +-- single JJ amod
 +-- traversal NN dobj
 |   +-- one CD num
 +-- and CC cc
 +-- is VBZ conj
 |   +-- there EX expl
 |   +-- time NN nsubj
 |       +-- no DT det
 |       +-- sleep NN nn
 |       +-- between IN prep
 |           +-- transactions NNS pobj
 +-- . . punct
Input: Both read only and read write transactions always work with data from the same module .
Parse:
read VBD ROOT
 +-- Both DT nsubj
 +-- only RB advmod
 +-- and CC cc
 +-- read VB conj
 +-- work VBP ccomp
 |   +-- transactions NNS nsubj
 |   |   +-- write NN nn
 |   +-- always RB advmod
 |   +-- with IN prep
 |       +-- data NNS pobj
 |           +-- from IN prep
 |               +-- module NN pobj
 |                   +-- the DT det
 |                   +-- same JJ amod
 +-- . . punct
Input: Clients running read write transactions don '' t modify in every transaction , instead they have a 50 % probability of running read only transactions .
Parse:
write NN ROOT
 +-- Clients NNS nsubj
 |   +-- running VBG partmod
 |       +-- read VBN acomp
 +-- don NN dobj
 |   +-- transactions NNS nn
 +-- '' '' punct
 +-- modify VBP ccomp
 |   +-- t NN nsubj
 |   +-- in IN prep
 |       +-- transaction NN pobj
 |           +-- every DT det
 +-- , , punct
 +-- have VBP ccomp
 |   +-- instead RB advmod
 |   +-- they PRP nsubj
 |   +-- probability NN dobj
 |       +-- a DT det
 |       +-- % NN nn
 |       |   +-- 50 CD num
 |       +-- of IN prep
 |           +-- running VBG pcomp
 |               +-- read VBN dep
 |               +-- transactions NNS dobj
 |                   +-- only JJ amod
 +-- . . punct
Input: The database was stored by a server on a 40GB IBM 7200RPM hard drive , with a 8.5 average seek time and 40 MB sec data transfer rates .
Parse:
stored VBN ROOT
 +-- database NN nsubjpass
 |   +-- The DT det
 +-- was VBD auxpass
 +-- by IN prep
 |   +-- server NN pobj
 |       +-- a DT det
 +-- on IN prep
 |   +-- drive NN pobj
 |       +-- a DT det
 |       +-- 40GB CD num
 |       +-- 7200RPM NNP nn
 |       |   +-- IBM NNP nn
 |       +-- hard JJ amod
 +-- , , punct
 +-- with IN prep
 |   +-- average JJ pobj
 |       +-- a DT det
 |       +-- 8.5 CD num
 |       +-- seek NN amod
 |       |   +-- time NN dobj
 |       +-- and CC cc
 |       +-- rates NNS conj
 |           +-- MB NN nn
 |           |   +-- 40 CD num
 |           +-- sec NN nn
 |           +-- transfer NN nn
 |               +-- data NNS nn
 +-- . . punct
Input: In Base system clients connect directly to the database .
Parse:
connect VBP ROOT
 +-- In IN prep
 |   +-- system NN pobj
 |       +-- Base NN nn
 +-- clients NNS nsubj
 +-- directly RB advmod
 +-- to IN prep
 |   +-- database NN pobj
 |       +-- the DT det
 +-- . . punct
Input: In Buddy system clients connect to the redirector that connects to the database .
Parse:
connect VBP ROOT
 +-- In IN prep
 |   +-- Buddy NNP pobj
 +-- clients NNS nsubj
 |   +-- system NN nn
 +-- to IN prep
 |   +-- redirector NN pobj
 |       +-- the DT det
 |       +-- connects VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- to IN prep
 |               +-- database NN pobj
 |                   +-- the DT det
 +-- . . punct
Input: We run the experiments with 1 10 clients in Base , and one or two 1 10 client groups in Buddy .
Parse:
run VBP ROOT
 +-- We PRP nsubj
 +-- experiments NNS dobj
 |   +-- the DT det
 +-- with IN prep
 |   +-- clients NNS pobj
 |       +-- 10 CD num
 |       |   +-- 1 CD number
 |       +-- in IN prep
 |           +-- Base NNP pobj
 +-- , , punct
 +-- and CC cc
 +-- groups NNS conj
 |   +-- one CD num
 |   |   +-- or CC cc
 |   |   +-- two CD conj
 |   +-- 10 CD num
 |   |   +-- 1 CD number
 |   +-- client NN nn
 |   +-- in IN prep
 |       +-- Buddy NNP pobj
 +-- . . punct
Input: The server , the clients and the redirectors ran on a 850MHz Intel Pentium III processor based PC , 512MB of memory , and Linux Red Hat 6.2 .
Parse:
ran VBD ROOT
 +-- server NN nsubj
 |   +-- The DT det
 |   +-- , , punct
 |   +-- clients NNS conj
 |   |   +-- the DT det
 |   +-- and CC cc
 |   +-- redirectors NNS conj
 |       +-- the DT det
 +-- on IN prep
 |   +-- PC NN pobj
 |       +-- a DT det
 |       +-- III NNP nn
 |       |   +-- 850MHz NNP nn
 |       |   +-- Intel NNP nn
 |       |   +-- Pentium NNP nn
 |       +-- based VBN amod
 |       |   +-- processor NN dep
 |       +-- , , punct
 |       +-- 512MB CD conj
 |       |   +-- of IN prep
 |       |       +-- memory NN pobj
 |       +-- and CC cc
 |       +-- Hat NNP conj
 |           +-- Linux NNP nn
 |           +-- Red NNP nn
 |           +-- 6.2 CD num
 +-- . . punct
Input: They were connected by a 100Mb s Ethernet .
Parse:
connected VBN ROOT
 +-- They PRP nsubjpass
 +-- were VBD auxpass
 +-- by IN prep
 |   +-- Ethernet NNP pobj
 |       +-- 100Mb CD poss
 |           +-- a DT det
 |           +-- s POS possessive
 +-- . . punct
Input: The server was configured with a 50MB cache -LRB- of which 6MB were used for the modified object buffer -RRB- , the client had a 40MB cache .
Parse:
configured VBN ROOT
 +-- server NN nsubjpass
 |   +-- The DT det
 +-- was VBD auxpass
 +-- with IN prep
 |   +-- cache NN pobj
 |       +-- a DT det
 |       +-- 50MB CD num
 |       +-- -LRB- -LRB- punct
 |       +-- used VBN rcmod
 |       |   +-- of IN prep
 |       |   |   +-- which WDT pobj
 |       |   +-- 6MB CD nsubjpass
 |       |   +-- were VBD auxpass
 |       |   +-- for IN prep
 |       |       +-- buffer NN pobj
 |       |           +-- the DT det
 |       |           +-- modified JJ amod
 |       |           +-- object NN nn
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- had VBD ccomp
 |   +-- client NN nsubj
 |   |   +-- the DT det
 |   +-- cache NN dobj
 |       +-- a DT det
 |       +-- 40MB CD num
 +-- . . punct
Input: The experiments ran in Utah experimental testbed emulab.net -LRB- 1 -RRB- .
Parse:
ran VBD ROOT
 +-- experiments NNS nsubj
 |   +-- The DT det
 +-- in IN prep
 |   +-- emulab.net NN pobj
 |       +-- Utah NNP nn
 |       +-- experimental JJ amod
 |       +-- testbed VBN amod
 |       +-- 1 CD appos
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: 34 Latency -LRB- ms -RRB- Base Buddy 3 group 5 group 3 group 5 group Fetch 1.3 1.4 2.4 2.6 Commit 2.5 5.5 2.4 5.7 Table 1
Parse:
group NN ROOT
 +-- 34 CD num
 +-- Buddy NNP nn
 |   +-- Base NN nn
 |       +-- Latency NNP nn
 |       +-- -LRB- -LRB- punct
 |       +-- ms NN nn
 |       +-- -RRB- -RRB- punct
 +-- 3 CD num
 +-- group NN dep
 |   +-- 5 CD num
 +-- Fetch NNP dep
 +-- Table JJ dep
     +-- 1.3 CD num
     +-- 1.4 CD num
     +-- 2.6 CD num
     |   +-- 2.4 CD number
     +-- Commit NN nn
     +-- 5.7 CD num
     |   +-- 5.5 CD number
     |   |   +-- 2.5 CD number
     |   +-- 2.4 CD number
     +-- 1 CD num
Input: 6.3.1 Redirection Fetch and commit requests in the BuddyCache cross the redirector , a cost not incurred in the Base system .
Parse:
cross VBP ROOT
 +-- Fetch NNP nsubj
 |   +-- 6.3.1 CD num
 |   +-- Redirection NNP nn
 |   +-- and CC cc
 |   +-- commit VB conj
 |       +-- requests NNS dobj
 |           +-- in IN prep
 |               +-- BuddyCache NNP pobj
 |                   +-- the DT det
 +-- redirector NN dobj
 |   +-- the DT det
 |   +-- , , punct
 |   +-- cost NN appos
 |       +-- a DT det
 |       +-- incurred VBN partmod
 |           +-- not RB neg
 |           +-- in IN prep
 |               +-- system NN pobj
 |                   +-- the DT det
 |                   +-- Base NN nn
 +-- . . punct
Input: For a request redirected to the server -LRB- server fetch -RRB- the extra cost of redirection includes a local request from the client to redirector on the way to and from the server .
Parse:
includes VBZ ROOT
 +-- For IN prep
 |   +-- request NN pobj
 |       +-- a DT det
 |       +-- redirected VBN partmod
 |           +-- to IN prep
 |               +-- server NN pobj
 |                   +-- the DT det
 |                   +-- -LRB- -LRB- punct
 |                   +-- fetch NN dep
 |                   |   +-- server NN nn
 |                   +-- -RRB- -RRB- punct
 +-- cost NN nsubj
 |   +-- the DT det
 |   +-- extra JJ amod
 |   +-- of IN prep
 |       +-- redirection NN pobj
 +-- request NN dobj
 |   +-- a DT det
 |   +-- local JJ amod
 |   +-- from IN prep
 |   |   +-- client NN pobj
 |   |       +-- the DT det
 |   +-- redirector VB infmod
 |       +-- to TO aux
 |       +-- on IN prep
 |           +-- way NN pobj
 |           |   +-- the DT det
 |           |   +-- to IN prep
 |           +-- and CC cc
 |           +-- from IN conj
 |               +-- server NN pobj
 |                   +-- the DT det
 +-- . . punct
Input: We evaluate this latency overhead indirectly by comparing the measured latency of the Buddy system server fetch or commit request with the measured latency of the corresponding request in the Base system .
Parse:
evaluate VBP ROOT
 +-- We PRP nsubj
 +-- overhead NN dobj
 |   +-- this DT det
 |   +-- latency NN nn
 +-- indirectly RB advmod
 +-- by IN prep
 |   +-- comparing VBG pcomp
 |       +-- fetch VBP ccomp
 |           +-- latency NN nsubj
 |           |   +-- the DT det
 |           |   +-- measured VBN amod
 |           |   +-- of IN prep
 |           |       +-- server NN pobj
 |           |           +-- the DT det
 |           |           +-- system NN nn
 |           |               +-- Buddy NNP nn
 |           +-- or CC cc
 |           +-- commit VB conj
 |           +-- request NN dobj
 |               +-- with IN prep
 |                   +-- latency NN pobj
 |                       +-- the DT det
 |                       +-- measured JJ amod
 |                       +-- of IN prep
 |                           +-- request NN pobj
 |                               +-- the DT det
 |                               +-- corresponding VBG amod
 |                               +-- in IN prep
 |                                   +-- system NN pobj
 |                                       +-- the DT det
 |                                       +-- Base NNP nn
 +-- . . punct
Input: Table 1 shows the latency for the commit and server fetch requests in the Base and Buddy system for 3 client and 5 client groups in a fast local area network .
Parse:
shows VBZ ROOT
 +-- Table JJ nsubj
 |   +-- 1 CD num
 +-- fetch VBP ccomp
 |   +-- latency NN nsubj
 |   |   +-- the DT det
 |   |   +-- for IN prep
 |   |       +-- commit NN pobj
 |   |           +-- the DT det
 |   |           +-- and CC cc
 |   |           +-- server NN conj
 |   +-- requests NNS dobj
 |   |   +-- in IN prep
 |   |       +-- system NN pobj
 |   |           +-- the DT det
 |   |           +-- Base NNP nn
 |   |               +-- and CC cc
 |   |               +-- Buddy NNP conj
 |   +-- for IN prep
 |       +-- client NN pobj
 |           +-- 3 CD num
 |           +-- and CC cc
 |           +-- groups NNS conj
 |           |   +-- 5 CD num
 |           |   +-- client NN nn
 |           +-- in IN prep
 |               +-- network NN pobj
 |                   +-- a DT det
 |                   +-- fast JJ amod
 |                   +-- local JJ amod
 |                   +-- area NN nn
 +-- . . punct
Input: All the numbers were computed by averaging measured request latency over 1000 requests .
Parse:
computed VBN ROOT
 +-- numbers NNS nsubjpass
 |   +-- All PDT predet
 |   +-- the DT det
 +-- were VBD auxpass
 +-- by IN prep
 |   +-- averaging VBG pcomp
 |       +-- latency NN dobj
 |       |   +-- request NN nn
 |       |       +-- measured VBN amod
 |       +-- over IN prep
 |           +-- requests NNS pobj
 |               +-- 1000 CD num
 +-- . . punct
Input: The measurements show that the redirection cost of crossing the redirector in not very high even in a local area network .
Parse:
show VBP ROOT
 +-- measurements NNS nsubj
 |   +-- The DT det
 +-- that IN dobj
 |   +-- cost NN dep
 |       +-- the DT det
 |       +-- redirection NN nn
 |       +-- of IN prep
 |           +-- crossing VBG pcomp
 |               +-- redirector NN dobj
 |               |   +-- the DT det
 |               +-- in IN prep
 |                   +-- even RB advmod
 |                   +-- network NN pobj
 |                       +-- a DT det
 |                       +-- local JJ amod
 |                       +-- area NN nn
 +-- . . punct
Input: The commit cost increases with the number of clients since commits are processed sequentially .
Parse:
processed VBN ROOT
 +-- increases NNS nsubjpass
 |   +-- The DT det
 |   +-- commit NN nn
 |   +-- cost NN nn
 |   +-- with IN prep
 |       +-- number NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |           |   +-- clients NNS pobj
 |           +-- since IN prep
 |               +-- commits NNS pobj
 +-- are VBP auxpass
 +-- sequentially RB advmod
 +-- . . punct
Input: The fetch cost does not increase as much because the server cache reduces this cost .
Parse:
increase VB ROOT
 +-- cost NN nsubj
 |   +-- The DT det
 |   +-- fetch NN nn
 +-- does VBZ aux
 +-- not RB neg
 +-- much RB advmod
 |   +-- as RB advmod
 +-- reduces VBZ advcl
 |   +-- because IN mark
 |   +-- cache NN nsubj
 |   |   +-- the DT det
 |   |   +-- server NN nn
 |   +-- cost NN dobj
 |       +-- this DT det
 +-- . . punct
Input: In a large system with many groups , however , the server cache becomes less efficient .
Parse:
efficient JJ ROOT
 +-- In IN prep
 |   +-- system NN pobj
 |       +-- a DT det
 |       +-- large JJ amod
 |       +-- with IN prep
 |           +-- groups NNS pobj
 |               +-- many JJ amod
 +-- , , punct
 +-- however RB advmod
 +-- cache NN nsubj
 |   +-- the DT det
 |   +-- server NN nn
 +-- becomes VBZ cop
 +-- less RBR advmod
 +-- . . punct
Input: To evaluate the overheads of the peer fetch , we measure the peer fetch latency -LRB- PeerFetch -RRB- at the requesting client and break down its component costs .
Parse:
measure VBP ROOT
 +-- evaluate VB advcl
 |   +-- To TO aux
 |   +-- overheads NNS dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- fetch NN pobj
 |               +-- the DT det
 |               +-- peer NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- latency NN dobj
 |   +-- the DT det
 |   +-- fetch NN nn
 |   |   +-- peer NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- PeerFetch NNP dep
 |   +-- -RRB- -RRB- punct
 +-- at IN prep
 |   +-- client NN pobj
 |       +-- the DT det
 |       +-- requesting JJ amod
 +-- and CC cc
 +-- break VB conj
 |   +-- down RP prt
 |   +-- costs NNS dobj
 |       +-- its PRP$ poss
 |       +-- component NN nn
 +-- . . punct
Input: In peer fetch , the cost of the redirection includes , in addition to the local network request cost , the CPU processing latency of crossing the redirector and crossing the helper , the latter including the time to process the help request and the time to copy , and unswizzle the requested page .
Parse:
includes VBZ ROOT
 +-- In IN prep
 |   +-- fetch NN pobj
 |       +-- peer NN nn
 +-- , , punct
 +-- cost NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- redirection NN pobj
 |           +-- the DT det
 +-- in IN prep
 |   +-- addition NN pobj
 |       +-- to IN prep
 |           +-- cost NN pobj
 |               +-- the DT det
 |               +-- local JJ amod
 |               +-- network NN nn
 |               +-- request NN nn
 |               +-- , , punct
 |               +-- latency NN conj
 |               |   +-- the DT det
 |               |   +-- processing NN nn
 |               |   |   +-- CPU NN nn
 |               |   +-- of IN prep
 |               |       +-- crossing VBG pcomp
 |               |           +-- redirector NN dobj
 |               |           |   +-- the DT det
 |               |           +-- and CC cc
 |               |           +-- crossing VBG conj
 |               |               +-- helper NN dobj
 |               |                   +-- the DT det
 |               +-- latter JJ conj
 |               |   +-- the DT det
 |               |   +-- including VBG prep
 |               |       +-- time NN pobj
 |               |           +-- the DT det
 |               |           +-- process VB infmod
 |               |           |   +-- to TO aux
 |               |           |   +-- help NN dobj
 |               |           |       +-- the DT det
 |               |           |       +-- request NN dobj
 |               |           +-- and CC cc
 |               |           +-- time NN conj
 |               |               +-- the DT det
 |               |               +-- copy VB infmod
 |               |                   +-- to TO aux
 |               +-- and CC cc
 |               +-- unswizzle VB conj
 |                   +-- page NN dobj
 |                       +-- the DT det
 |                       +-- requested VBN amod
 +-- . . punct
Input: We directly measured the time to copy and unswizzle the requested page at the helper , -LRB- CopyUnswizzle -RRB- , and timed the crossing times using a null crossing request .
Parse:
measured VBD ROOT
 +-- We PRP nsubj
 +-- directly RB advmod
 +-- time NN dobj
 |   +-- the DT det
 |   +-- copy VB infmod
 |       +-- to TO aux
 |       +-- and CC cc
 |       +-- unswizzle VB conj
 |       +-- page NN dobj
 |           +-- the DT det
 |           +-- requested VBN amod
 |           +-- at IN prep
 |               +-- helper NN pobj
 |                   +-- the DT det
 |                   +-- , , punct
 |                   +-- -LRB- -LRB- punct
 |                   +-- CopyUnswizzle NNP dep
 |                   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- and CC cc
 +-- timed VBD conj
 |   +-- times NNS dobj
 |   |   +-- the DT det
 |   |   +-- crossing VBG amod
 |   +-- using VBG xcomp
 |       +-- request NN dobj
 |           +-- a DT det
 |           +-- null NN amod
 |           +-- crossing NN nn
 +-- . . punct
Input: Table 2 summarizes the latencies that allows us to break down the peer fetch costs .
Parse:
summarizes VBZ ROOT
 +-- 2 CD nsubj
 |   +-- Table JJ amod
 +-- latencies NNS dobj
 |   +-- the DT det
 |   +-- allows VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- break VB xcomp
 |           +-- us PRP nsubj
 |           +-- to TO aux
 |           +-- down RP prt
 |           +-- costs NNS dobj
 |               +-- the DT det
 |               +-- peer NN nn
 |               +-- fetch NN nn
 +-- . . punct
Input: CrossRedirector , includes the CPU latency of crossing the redirector plus a local network round trip and is measured by timing a round trip null request issued by a client to the redirector .
Parse:
includes VBZ ROOT
 +-- CrossRedirector NN nsubj
 +-- , , punct
 +-- latency NN dobj
 |   +-- the DT det
 |   +-- CPU NN nn
 |   +-- of IN prep
 |   |   +-- crossing VBG pcomp
 |   |       +-- redirector NN dobj
 |   |           +-- the DT det
 |   +-- plus CC cc
 |   +-- trip NN conj
 |       +-- a DT det
 |       +-- local JJ amod
 |       +-- round NN nn
 |           +-- network NN nn
 +-- and CC cc
 +-- measured VBN conj
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- timing VBG pcomp
 |           +-- request NN dobj
 |               +-- trip NN nn
 |               |   +-- a DT det
 |               |   +-- round JJ amod
 |               +-- null NN amod
 |               +-- issued VBN partmod
 |                   +-- by IN prep
 |                   |   +-- client NN pobj
 |                   |       +-- a DT det
 |                   +-- to IN prep
 |                       +-- redirector NN pobj
 |                           +-- the DT det
 +-- . . punct
Input: AlertHelper , includes the time for the helper to notice the request plus a network roundtrip , and is measured by timing a round trip null request issued from an auxiliary client to the helper client .
Parse:
includes VBZ ROOT
 +-- AlertHelper NNP nsubj
 +-- , , punct
 +-- time NN dobj
 |   +-- the DT det
 |   +-- notice VB infmod
 |       +-- for IN mark
 |       +-- helper NN nsubj
 |       |   +-- the DT det
 |       +-- to TO aux
 |       +-- request NN dobj
 |       |   +-- the DT det
 |       |   +-- plus CC cc
 |       |   +-- roundtrip NN conj
 |       |       +-- a DT det
 |       |       +-- network NN nn
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- measured VBN conj
 |           +-- is VBZ auxpass
 |           +-- by IN prep
 |               +-- timing VBG pcomp
 |                   +-- trip NN dobj
 |                       +-- a DT det
 |                       +-- round JJ amod
 |                       +-- null NN prep
 |                           +-- request NN pobj
 |                               +-- issued VBN partmod
 |                                   +-- from IN prep
 |                                   |   +-- client NN pobj
 |                                   |       +-- an DT det
 |                                   |       +-- auxiliary JJ amod
 |                                   +-- to IN prep
 |                                       +-- client NN pobj
 |                                           +-- the DT det
 |                                           +-- helper NN nn
 +-- . . punct
Input: The local network latency is fixed and less than 0.1 ms .
Parse:
fixed VBN ROOT
 +-- latency NN nsubjpass
 |   +-- The DT det
 |   +-- local JJ amod
 |   +-- network NN nn
 +-- is VBZ auxpass
 +-- and CC cc
 +-- ms NNS conj
 |   +-- 0.1 CD num
 |       +-- than IN quantmod
 |           +-- less JJR mwe
 +-- . . punct
Input: The AlertHelper latency which includes the elapsed time from the help request arrival until the start of help request processing is highly variable and therefore contributes to the high variability of the PeerFetch time .
Parse:
variable JJ ROOT
 +-- latency NN nsubj
 |   +-- The DT det
 |   +-- AlertHelper NNP nn
 |   +-- includes VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- time NN dobj
 |       |   +-- the DT det
 |       |   +-- elapsed JJ amod
 |       |   +-- from IN prep
 |       |       +-- arrival NN pobj
 |       |           +-- the DT det
 |       |           +-- request NN nn
 |       |               +-- help NN nn
 |       +-- until IN prep
 |           +-- start NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- processing NN pobj
 |                       +-- help NN nn
 |                       +-- request NN nn
 +-- is VBZ cop
 +-- highly RB advmod
 +-- and CC cc
 +-- therefore RB advmod
 +-- contributes VBZ conj
 |   +-- to IN prep
 |       +-- variability NN pobj
 |           +-- the DT det
 |           +-- high JJ amod
 |           +-- of IN prep
 |               +-- time NN pobj
 |                   +-- the DT det
 |                   +-- PeerFetch NNP nn
 +-- . . punct
Input: This is because the client in Buddy system is currently single threaded and therefore only starts processing a help request when blocked waiting for a fetch or commit reply .
Parse:
is VBZ ROOT
 +-- This DT nsubj
 +-- threaded VBN advcl
 |   +-- because IN mark
 |   +-- client NN nsubj
 |   |   +-- the DT det
 |   |   +-- in IN prep
 |   |       +-- system NN pobj
 |   |           +-- Buddy NNP nn
 |   +-- is VBZ cop
 |   +-- currently RB advmod
 |   +-- single JJ amod
 |   +-- and CC cc
 |   +-- starts VBZ conj
 |       +-- therefore RB advmod
 |       +-- only RB advmod
 |       +-- processing VBG xcomp
 |           +-- help NN dobj
 |               +-- a DT det
 |               +-- request NN dep
 |                   +-- blocked VBN dep
 |                       +-- when WRB advmod
 |                       +-- waiting VBG xcomp
 |                       |   +-- for IN prep
 |                       |       +-- fetch NN pobj
 |                       |           +-- a DT det
 |                       +-- or CC cc
 |                       +-- commit VB conj
 |                           +-- reply NN dobj
 +-- . . punct
Input: This overhead is not inherent to the BuddyCache architecture and could be mitigated by a multi threaded implementation in a system with pre emptive scheduling .
Parse:
inherent JJ ROOT
 +-- overhead NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- not RB neg
 +-- to IN prep
 |   +-- architecture NN pobj
 |       +-- the DT det
 |       +-- BuddyCache NNP nn
 +-- and CC cc
 +-- mitigated VBN conj
 |   +-- could MD aux
 |   +-- be VB auxpass
 |   +-- by IN prep
 |       +-- implementation NN pobj
 |           +-- a DT det
 |           +-- multi JJ amod
 |           +-- threaded VBN amod
 |           +-- in IN prep
 |               +-- system NN pobj
 |                   +-- a DT det
 |                   +-- with IN prep
 |                       +-- scheduling NN pobj
 |                           +-- pre NN nn
 |                           +-- emptive JJ amod
 +-- . . punct
Input: 6.3.2 Version Cache The solo commit allows a fast client modifying an object to commit independently of a slow peer .
Parse:
allows VBZ ROOT
 +-- Cache NNP nsubj
 |   +-- 6.3.2 CD num
 |   +-- Version NNP nn
 |   +-- commit VBP rcmod
 |       +-- solo NN nsubj
 |           +-- The DT det
 +-- modifying VBG dep
 |   +-- client NN nsubj
 |   |   +-- a DT det
 |   |   +-- fast JJ amod
 |   +-- object NN dobj
 |       +-- an DT det
 |       +-- commit VB infmod
 |           +-- to TO aux
 |           +-- independently RB advmod
 |           +-- of IN prep
 |               +-- peer NN pobj
 |                   +-- a DT det
 |                   +-- slow JJ amod
 +-- . . punct
Input: The solo commit mechanism introduces extra processing at the server at transaction validation time , and extra processing at the client at transaction commit time and at update or invalidation processing time .
Parse:
introduces VBZ ROOT
 +-- mechanism NN nsubj
 |   +-- The DT det
 |   +-- commit VBP nn
 |       +-- solo NN nn
 +-- processing NN dobj
 |   +-- extra JJ amod
 +-- at IN prep
 |   +-- time NN pobj
 |       +-- transaction NN nn
 |       +-- validation NN nn
 +-- , , punct
 +-- and CC cc
 +-- commit VBP conj
 |   +-- processing NN nsubj
 |   |   +-- extra JJ amod
 |   |   +-- at IN prep
 |   |       +-- transaction NN pobj
 |   +-- time NN dobj
 |       +-- and CC cc
 |       +-- at IN conj
 |           +-- time NN pobj
 |               +-- update NN nn
 |               |   +-- or CC cc
 |               |   +-- invalidation NN conj
 |               +-- processing NN nn
 +-- . . punct
Input: The server side overheads are minimal and consist of a page version number update at commit time , and a version number comparison at transaction validation time .
Parse:
minimal JJ ROOT
 +-- overheads NNS nsubj
 |   +-- The DT det
 |   +-- side NN nn
 |       +-- server NN nn
 +-- are VBP cop
 +-- and CC cc
 +-- consist VB conj
 +-- of IN prep
 |   +-- update NN pobj
 |       +-- a DT det
 |       +-- version NN nn
 |       |   +-- page NN nn
 |       +-- number NN nn
 |       +-- at IN prep
 |       |   +-- time NN pobj
 |       |       +-- commit NN nn
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- comparison NN conj
 |           +-- a DT det
 |           +-- number NN nn
 |           |   +-- version NN nn
 |           +-- at IN prep
 |               +-- time NN pobj
 |                   +-- transaction NN nn
 |                   +-- validation NN nn
 +-- . . punct
Input: The version cache has an entry only when invalidations or updates arrive out of order .
Parse:
has VBZ ROOT
 +-- cache NN nsubj
 |   +-- The DT det
 |   +-- version NN nn
 +-- entry NN dobj
 |   +-- an DT det
 |   +-- arrive VBP rcmod
 |       +-- when WRB advmod
 |       |   +-- only RB advmod
 |       +-- invalidations NNS nsubj
 |       |   +-- or CC cc
 |       |   +-- updates NNS conj
 |       +-- out IN prep
 |           +-- of IN pcomp
 |               +-- order NN pobj
 +-- . . punct
Input: This may happen when a transaction accesses objects in multiple servers .
Parse:
happen VB ROOT
 +-- This DT nsubj
 +-- may MD aux
 +-- objects VBZ advcl
 |   +-- when WRB advmod
 |   +-- accesses VBZ nsubj
 |   |   +-- a DT det
 |   |   +-- transaction NN nn
 |   +-- in IN prep
 |       +-- servers NNS pobj
 |           +-- multiple JJ amod
 +-- . . punct
Input: Our experiments run in a single server system and therefore , the commit time overhead of version cache management at the client does not contribute in the results presented in the section below .
Parse:
run VBP ROOT
 +-- experiments NNS nsubj
 |   +-- Our PRP$ poss
 +-- in IN prep
 |   +-- system NN pobj
 |       +-- a DT det
 |       +-- single JJ amod
 |       +-- server NN nn
 +-- and CC cc
 +-- contribute VB conj
 |   +-- therefore RB advmod
 |   +-- , , punct
 |   +-- time NN nsubj
 |   |   +-- the DT det
 |   |   +-- commit NN nn
 |   |   +-- overhead NN advmod
 |   |   |   +-- of IN prep
 |   |   |       +-- management NN pobj
 |   |   |           +-- version NN nn
 |   |   |           +-- cache NN nn
 |   |   +-- at IN prep
 |   |       +-- client NN pobj
 |   |           +-- the DT det
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- in IN prep
 |       +-- results NNS pobj
 |           +-- the DT det
 |           +-- presented VBN partmod
 |               +-- in IN prep
 |                   +-- section NN pobj
 |                       +-- the DT det
 |                       +-- below RB advmod
 +-- . . punct
Input: To gauge these client side overheads in a multiple server system , we instrumented the version cache implementation to run with a workload trace that included reordered invalidations and timed the basic operations .
Parse:
instrumented VBD ROOT
 +-- gauge VB advcl
 |   +-- To TO aux
 |   +-- overheads VBZ dobj
 |   |   +-- these DT det
 |   |   +-- side NN nn
 |   |       +-- client NN nn
 |   +-- in IN prep
 |       +-- system NN pobj
 |           +-- a DT det
 |           +-- multiple JJ amod
 |           +-- server NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- implementation NN dobj
 |   +-- the DT det
 |   +-- version NN nn
 |   +-- cache NN nn
 |   +-- run VB infmod
 |       +-- to TO aux
 |       +-- with IN prep
 |           +-- trace NN pobj
 |               +-- a DT det
 |               +-- workload NN nn
 |               +-- included VBD rcmod
 |                   +-- that WDT nsubj
 |                   +-- invalidations NNS dobj
 |                   |   +-- reordered VBN amod
 |                   +-- and CC cc
 |                   +-- timed VBN conj
 |                       +-- operations NNS dobj
 |                           +-- the DT det
 |                           +-- basic JJ amod
 +-- . . punct
Input: The extra client commit time processing includes a version cache lookup operation for each object read by the transaction at commit request preparation time , and a version cache insert operation for each object updated by a transaction at commit reply processing time , but only if the updated page is missing some earlier invalidations or updates .
Parse:
commit VBP ROOT
 +-- client NN nsubj
 |   +-- The DT det
 |   +-- extra JJ amod
 +-- includes VBZ ccomp
 |   +-- processing NN nsubj
 |   |   +-- time NN nn
 |   +-- operation NN dobj
 |   |   +-- a DT det
 |   |   +-- cache NN nn
 |   |   |   +-- version NN nn
 |   |   +-- lookup NN nn
 |   |   +-- for IN prep
 |   |       +-- object NN pobj
 |   |           +-- each DT det
 |   |           +-- read VBN partmod
 |   |               +-- by IN prep
 |   |                   +-- transaction NN pobj
 |   |                       +-- the DT det
 |   +-- at IN prep
 |       +-- commit VB pcomp
 |           +-- request NN dobj
 |               +-- time NN dobj
 |                   +-- preparation NN nn
 +-- , , punct
 +-- and CC cc
 +-- operation NN conj
 |   +-- a DT det
 |   +-- cache NN nn
 |   |   +-- version NN nn
 |   +-- insert JJ amod
 |   +-- for IN prep
 |   |   +-- object NN pobj
 |   |       +-- each DT det
 |   +-- updated VBN dep
 |       +-- by IN prep
 |       |   +-- transaction NN pobj
 |       |       +-- a DT det
 |       +-- at IN prep
 |       |   +-- time NN pobj
 |       |       +-- reply NN nn
 |       |       |   +-- commit NN nn
 |       |       +-- processing NN nn
 |       +-- , , punct
 |       +-- but CC cc
 |       +-- missing VBG conj
 |           +-- only RB advmod
 |           +-- if IN mark
 |           +-- page NN nsubj
 |           |   +-- the DT det
 |           |   +-- updated VBN amod
 |           +-- is VBZ aux
 |           +-- invalidations NNS dobj
 |               +-- some DT det
 |               +-- earlier JJR amod
 |               +-- or CC cc
 |               +-- updates NNS conj
 +-- . . punct
Input: It is important that the extra commit time costs are kept to a minimum since client is synchronously waiting for the commit completion .
Parse:
important JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- kept VBN ccomp
 |   +-- that IN mark
 |   +-- costs NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- commit NN nn
 |   |   |   +-- extra JJ amod
 |   |   +-- time NN nn
 |   +-- are VBP auxpass
 |   +-- to IN prep
 |   |   +-- minimum NN pobj
 |   |       +-- a DT det
 |   +-- waiting VBG advcl
 |       +-- since IN mark
 |       +-- client NN nsubj
 |       +-- is VBZ aux
 |       +-- synchronously RB advmod
 |       +-- for IN prep
 |           +-- completion NN pobj
 |               +-- the DT det
 |               +-- commit NN nn
 +-- . . punct
Input: The measurements show that in the worst case , when a large number of invalidations arrive out of order , and about half of the objects modified by T2a -LRB- 200 objects -RRB- reside on reordered pages , the cost of updating the version cache is 0.6 ms .
Parse:
show VBP ROOT
 +-- measurements NNS nsubj
 |   +-- The DT det
 +-- arrive VBP ccomp
 |   +-- that IN mark
 |   +-- in IN prep
 |   |   +-- case NN pobj
 |   |       +-- the DT det
 |   |       +-- worst JJS amod
 |   +-- , , punct
 |   +-- when WRB advmod
 |   +-- number NN nsubj
 |   |   +-- a DT det
 |   |   +-- large JJ amod
 |   |   +-- of IN prep
 |   |       +-- invalidations NNS pobj
 |   +-- out IN prep
 |   |   +-- of IN pcomp
 |   |       +-- order NN pobj
 |   +-- and CC cc
 |   +-- reside NN conj
 |       +-- half NN nsubj
 |       |   +-- about RB quantmod
 |       |   +-- of IN prep
 |       |       +-- objects NNS pobj
 |       |           +-- the DT det
 |       |           +-- modified VBN partmod
 |       |               +-- by IN prep
 |       |                   +-- objects NNS pobj
 |       |                       +-- T2a CD num
 |       |                       +-- -LRB- -LRB- punct
 |       |                       +-- 200 CD num
 |       |                       +-- -RRB- -RRB- punct
 |       +-- on IN prep
 |       |   +-- pages NNS pobj
 |       |       +-- reordered VBN amod
 |       +-- , , punct
 |       +-- ms NNS ccomp
 |           +-- cost NN nsubj
 |           |   +-- the DT det
 |           |   +-- of IN prep
 |           |       +-- updating VBG pcomp
 |           |           +-- cache NN dobj
 |           |               +-- the DT det
 |           |               +-- version NN nn
 |           +-- is VBZ cop
 |           +-- 0.6 CD num
 +-- . . punct
Input: The invalidation time cost are comparable , but since invalidations and updates are processed in the background this cost is less important for the overall performance .
Parse:
comparable JJ ROOT
 +-- cost NN nsubj
 |   +-- The DT det
 |   +-- invalidation NN nn
 |   +-- time NN nn
 +-- are VBP cop
 +-- , , punct
 +-- but CC cc
 +-- important JJ conj
 |   +-- processed VBN advcl
 |   |   +-- since IN mark
 |   |   +-- invalidations NNS nsubjpass
 |   |   |   +-- and CC cc
 |   |   |   +-- updates NNS conj
 |   |   +-- are VBP auxpass
 |   |   +-- in IN prep
 |   |       +-- background NN pobj
 |   |           +-- the DT det
 |   +-- cost NN nsubj
 |   |   +-- this DT det
 |   +-- is VBZ cop
 |   +-- less RBR advmod
 |   +-- for IN prep
 |       +-- performance NN pobj
 |           +-- the DT det
 |           +-- overall JJ amod
 +-- . . punct
Input: We are currently working on optimizing the version cache implementation to further reduce these costs .
Parse:
working VBG ROOT
 +-- We PRP nsubj
 +-- are VBP aux
 +-- currently RB advmod
 +-- on IN prep
 |   +-- optimizing VBG pcomp
 |       +-- implementation NN dobj
 |       |   +-- the DT det
 |       |   +-- cache NN nn
 |       |       +-- version NN nn
 |       +-- reduce VB xcomp
 |           +-- to TO aux
 |           +-- further RB advmod
 |           +-- costs NNS dobj
 |               +-- these DT det
 +-- . . punct
Input: 6.4 Overall Performance This section examines the performance gains seen by an application running OO7 benchmark with a BuddyCache in a wide area network .
Parse:
examines VBZ ROOT
 +-- section NN nsubj
 |   +-- 6.4 CD num
 |   +-- Overall JJ amod
 |   +-- Performance NN nn
 |   +-- This DT det
 +-- gains NNS dobj
 |   +-- the DT det
 |   +-- performance NN nn
 |   +-- seen VBN partmod
 |       +-- by IN prep
 |           +-- application NN pobj
 |               +-- an DT det
 |               +-- running VBG partmod
 |                   +-- benchmark NN dobj
 |                   |   +-- OO7 CD num
 |                   |   +-- with IN prep
 |                   |       +-- BuddyCache NNP pobj
 |                   |           +-- a DT det
 |                   +-- in IN prep
 |                       +-- network NN pobj
 |                           +-- a DT det
 |                           +-- wide JJ amod
 |                           +-- area NN nn
 +-- . . punct
Input: 6.4.1 Cold Misses To evaluate the performance gains from avoiding cold misses we compare the cold cache performance of OO7 benchmark running read only workload in the Buddy and Base systems .
Parse:
compare VBP ROOT
 +-- Misses NNPS nsubj
 |   +-- 6.4.1 CD num
 |   +-- Cold NNP nn
 |   +-- evaluate VB infmod
 |       +-- To TO aux
 |       +-- gains NNS dobj
 |       |   +-- the DT det
 |       |   +-- performance NN nn
 |       +-- from IN prep
 |           +-- avoiding VBG pcomp
 |               +-- misses NNS dobj
 |                   +-- cold JJ amod
 +-- we PRP nsubj
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- cache NN nn
 |   |   +-- cold JJ amod
 |   +-- of IN prep
 |   |   +-- benchmark NN pobj
 |   |       +-- OO7 CD num
 |   |       +-- running VBG partmod
 |   +-- read VBN partmod
 |       +-- workload NN dobj
 |           +-- only RB advmod
 |           +-- in IN prep
 |               +-- systems NNS pobj
 |                   +-- the DT det
 |                   +-- Buddy NNP nn
 |                       +-- and CC cc
 |                       +-- Base NNP conj
 +-- . . punct
Input: We derive the times by timing the execution of the systems in the local area network environment and substituting 40 ms and 80 ms delays for the requests crossing the redirector and the server to estimate the performance in the wide area network .
Parse:
derive VBP ROOT
 +-- We PRP nsubj
 +-- times NNS dobj
 |   +-- the DT det
 +-- by IN prep
 |   +-- timing VBG pcomp
 |       +-- execution NN dobj
 |       |   +-- the DT det
 |       |   +-- of IN prep
 |       |   |   +-- systems NNS pobj
 |       |   |       +-- the DT det
 |       |   +-- in IN prep
 |       |       +-- environment NN pobj
 |       |           +-- the DT det
 |       |           +-- local JJ amod
 |       |           +-- area NN nn
 |       |           +-- network NN nn
 |       +-- and CC cc
 |       +-- substituting VBG conj
 |           +-- ms NNS dobj
 |           |   +-- 40 CD num
 |           |   +-- and CC cc
 |           |   +-- delays NNS conj
 |           |       +-- 80 CD num
 |           |       +-- ms NNS nn
 |           +-- for IN prep
 |               +-- requests NNS pobj
 |                   +-- the DT det
 |                   +-- crossing VBG partmod
 |                       +-- redirector NN dobj
 |                       |   +-- the DT det
 |                       |   +-- and CC cc
 |                       |   +-- server NN conj
 |                       |       +-- the DT det
 |                       +-- estimate VB xcomp
 |                           +-- to TO aux
 |                           +-- performance NN dobj
 |                               +-- the DT det
 |                               +-- in IN prep
 |                                   +-- network NN pobj
 |                                       +-- the DT det
 |                                       +-- area NN nn
 |                                           +-- wide JJ amod
 +-- . . punct
Input: Figures 7 and 8 show the overall time to complete 1000 cold cache transactions .
Parse:
show VB ROOT
 +-- Figures NNS nsubj
 |   +-- 7 CD num
 |   +-- and CC cc
 |   +-- 8 CD conj
 +-- time NN dobj
 |   +-- the DT det
 |   +-- overall JJ amod
 |   +-- complete VB infmod
 |       +-- to TO aux
 |       +-- transactions NNS dobj
 |           +-- 1000 CD num
 |           +-- cache NN nn
 |               +-- cold JJ amod
 +-- . . punct
Input: The numbers were 35 0 5 0 100 150 200 250 Base Buddy Base Buddy Base Buddy 3 Clients 5 Clients 10 Clients -LRB- ms -RRB- CPU Commit Server Fetch Peer Fetch Figure 7
Parse:
Clients NNS ROOT
 +-- numbers NNS nsubj
 |   +-- The DT det
 +-- were VBD cop
 +-- 200 CD num
 |   +-- 35 CD number
 |   +-- 0 NFP dep
 |   +-- 5 CD number
 |   +-- 0 CD number
 |   +-- 100 CD number
 |   +-- 150 CD number
 +-- 250 CD num
 +-- Buddy NNP nn
 |   +-- Buddy NNP nn
 |   |   +-- Base NNP nn
 |   +-- Base NNP nn
 +-- 3 CD num
 +-- Clients NNS dep
 |   +-- 10 CD num
 |   +-- ms NNS appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- CPU NN dep
 +-- Server NNP dep
 |   +-- Commit NNP nn
 |   +-- Fetch NNP dep
 |       +-- Fetch NNP nn
 |       +-- Peer NNP nn
 +-- Figure NN dep
     +-- 7 CD num
Input: The results show that in a 40 ms network Buddy system reduces significantly the overall time compared to the Base system , providing a 39 % improvement in a three client group , 46 % improvement in the five client group and 56 % improvement in the ten client case .
Parse:
show VBP ROOT
 +-- results NNS nsubj
 |   +-- The DT det
 +-- reduces VBZ ccomp
 |   +-- that IN mark
 |   +-- in IN prep
 |   |   +-- network NN pobj
 |   |       +-- a DT det
 |   |       +-- 40 CD num
 |   |       +-- ms NNS nn
 |   +-- system NN nsubj
 |   |   +-- Buddy NNP nn
 |   +-- significantly RB advmod
 |   +-- time NN dobj
 |   |   +-- the DT det
 |   |   +-- overall JJ amod
 |   |   +-- compared VBN prep
 |   |       +-- to IN pcomp
 |   |           +-- system NN pobj
 |   |               +-- the DT det
 |   |               +-- Base NNP nn
 |   +-- , , punct
 |   +-- providing VBG partmod
 |       +-- improvement NN dobj
 |           +-- a DT det
 |           +-- % NN nn
 |           |   +-- 39 CD num
 |           +-- in IN prep
 |           |   +-- group NN pobj
 |           |       +-- a DT det
 |           |       +-- three CD num
 |           |       +-- client NN nn
 |           +-- , , punct
 |           +-- improvement NN conj
 |           |   +-- % NN nn
 |           |   |   +-- 56 CD num
 |           |   +-- in IN prep
 |           |       +-- case NN pobj
 |           |           +-- the DT det
 |           |           +-- ten CD num
 |           |           +-- client NN nn
 |           +-- and CC cc
 +-- . . punct
Input: The overall time includes time spent performing client computation , direct fetch requests , peer fetches , and commit requests .
Parse:
includes VBZ ROOT
 +-- time NN nsubj
 |   +-- The DT det
 |   +-- overall JJ amod
 +-- spent VBD ccomp
 |   +-- time NN nsubj
 |   +-- performing VBG ccomp
 |       +-- computation NN dobj
 |       |   +-- client NN nn
 |       |   +-- , , punct
 |       |   +-- requests NNS conj
 |       |   |   +-- fetch NN nn
 |       |   |       +-- direct JJ amod
 |       |   +-- fetches NNS conj
 |       |       +-- peer NN nn
 |       +-- and CC cc
 |       +-- commit VB conj
 |           +-- requests NNS dobj
 +-- . . punct
Input: In the three client group , Buddy and Base incur almost the same commit cost and therefore the entire performance benefit of Buddy is due to peer fetch avoiding direct fetches .
Parse:
cost NN ROOT
 +-- In IN prep
 |   +-- group NN pobj
 |       +-- the DT det
 |       +-- three CD num
 |       +-- client NN nn
 |       +-- , , punct
 |       +-- Buddy NNP appos
 |           +-- and CC cc
 |           +-- Base NNP conj
 +-- incur NN nsubj
 +-- almost RB advmod
 +-- the DT det
 +-- same JJ amod
 +-- commit NN nn
 +-- and CC cc
 +-- due JJ conj
 |   +-- therefore RB advmod
 |   +-- benefit NN nsubj
 |   |   +-- the DT det
 |   |   +-- entire JJ amod
 |   |   +-- performance NN nn
 |   |   +-- of IN prep
 |   |       +-- Buddy NNP pobj
 |   +-- is VBZ cop
 |   +-- fetch VB xcomp
 |       +-- to TO aux
 |       +-- peer NN aux
 |       +-- avoiding VBG xcomp
 |           +-- fetches NNS dobj
 |               +-- direct JJ amod
 +-- . . punct
Input: In the five and ten client group the server fetch cost for individual client decreases because with more clients faulting in a fixed size shared module into BuddyCache , each client needs to perform less server fetches .
Parse:
decreases NNS ROOT
 +-- In IN prep
 |   +-- group NN pobj
 |       +-- the DT det
 |       +-- five CD nn
 |       |   +-- and CC cc
 |       |   +-- ten CD conj
 |       +-- client NN nn
 +-- cost NN nsubj
 |   +-- the DT det
 |   +-- fetch NN nn
 |   |   +-- server NN nn
 |   +-- for IN prep
 |       +-- client NN pobj
 |           +-- individual JJ amod
 +-- with IN prep
 |   +-- because IN mwe
 |   +-- faulting VBG pcomp
 |       +-- clients NNS nsubj
 |       |   +-- more JJR amod
 |       +-- in IN prep
 |       |   +-- size NN pobj
 |       |       +-- a DT det
 |       |       +-- fixed VBN amod
 |       +-- module NN dobj
 |           +-- shared VBN amod
 |           +-- into IN prep
 |               +-- BuddyCache NNP pobj
 +-- , , punct
 +-- needs VBZ ccomp
 |   +-- client NN nsubj
 |   |   +-- each DT det
 |   +-- perform VB xcomp
 |       +-- to TO aux
 |       +-- fetches NNS dobj
 |           +-- less JJR amod
 |           +-- server NN nn
 +-- . . punct
Input: Figure 8 shows the overall time and cost break down in the 80 ms network .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 8 CD num
 +-- time NN dobj
 |   +-- the DT det
 |   +-- overall JJ amod
 +-- and CC cc
 +-- break VB conj
 |   +-- cost VB aux
 |   +-- down RP prt
 |   +-- in IN prep
 |       +-- network NN pobj
 |           +-- the DT det
 |           +-- 80 CD num
 |           +-- ms NN nn
 +-- . . punct
Input: The BuddyCache provides similar performance improvements as with the 40ms network .
Parse:
provides VBZ ROOT
 +-- BuddyCache NNP nsubj
 |   +-- The DT det
 +-- improvements NNS dobj
 |   +-- similar JJ amod
 |   +-- performance NN nn
 |   +-- as IN prep
 |       +-- with IN pcomp
 |           +-- network NN pobj
 |               +-- the DT det
 |               +-- 40ms CD num
 +-- . . punct
Input: Higher network latency increases the relative performance advantage provided by peer fetch relative to direct fetch but this benefit is offset by the increased commit times .
Parse:
increases VBZ ROOT
 +-- latency NN nsubj
 |   +-- network NN nn
 |       +-- Higher JJR amod
 +-- advantage NN dobj
 |   +-- the DT det
 |   +-- performance NN nn
 |       +-- relative JJ amod
 +-- provided VBN dep
 |   +-- by IN prep
 |       +-- fetch NN pobj
 |           +-- peer NN amod
 |           +-- relative JJ amod
 |               +-- to TO prep
 |                   +-- fetch NN pobj
 |                       +-- direct JJ amod
 +-- but CC cc
 +-- offset VBN conj
 |   +-- benefit NN nsubjpass
 |   |   +-- this DT det
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- commit NN pobj
 |           +-- the DT det
 |           +-- increased VBN amod
 |           +-- times NNS num
 +-- . . punct
Input: Figure 9 shows the relative latency improvement provided by BuddyCache -LRB- computed as the overall measured time difference between Buddy and Base relative to Base -RRB- as a 10 % 0 % 10 % 20 % 30 % 40 % 50 % 60 % 70 % 1 5 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 100 Latency -LRB- ms -RRB- 3 Clients 3 Clients -LRB- Perf model -RRB- 5 Clients 5 Clients -LRB- Perf model -RRB- 10 Clients 10 FEs -LRB- perf model -RRB- Figure 9
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 9 CD num
 +-- improvement NN dobj
 |   +-- the DT det
 |   +-- relative JJ amod
 |   +-- latency NN nn
 |   +-- provided VBN partmod
 |   |   +-- by IN prep
 |   |       +-- BuddyCache NNP pobj
 |   +-- -LRB- -LRB- punct
 |   +-- computed VBN partmod
 |   |   +-- as IN prep
 |   |       +-- difference NN pobj
 |   |           +-- the DT det
 |   |           +-- overall JJ amod
 |   |           +-- time NN nn
 |   |           |   +-- measured VBN amod
 |   |           +-- between IN prep
 |   |           |   +-- Buddy NNP pobj
 |   |           |       +-- and CC cc
 |   |           |       +-- Base NNP conj
 |   |           +-- relative NN partmod
 |   |               +-- to IN prep
 |   |                   +-- Base NNP pobj
 |   +-- -RRB- -RRB- punct
 +-- as IN prep
     +-- % NN pobj
         +-- a DT det
         +-- % NN nn
         |   +-- 10 CD num
         +-- 0 CD num
         +-- % NN dep
         |   +-- 60 CD num
         +-- 0 CD cc
         |   +-- % NN dep
         |   |   +-- 70 CD num
         |   +-- 0 CD number
         |   +-- 3 CD number
         |   +-- 0 NFP dep
         |   +-- 4 CD number
         |   +-- 5 CD number
         |   +-- 0 CD dep
         |   +-- 6 CD number
         |   +-- 7 CD number
         |   +-- 8 CD number
         |   +-- 9 CD number
         +-- Latency NN conj
         |   +-- 100 CD num
         |   +-- ms NNP appos
         |       +-- -LRB- -LRB- punct
         |       +-- -RRB- -RRB- punct
         +-- Clients NNS dep
         |   +-- 3 CD num
         +-- Clients NNP conj
             +-- 3 CD num
             +-- model NN ROOT
                 +-- -LRB- -LRB- punct
                 +-- Perf NNP nn
                 +-- -RRB- -RRB- punct
                 +-- Clients NNS dep
                     +-- 5 CD num
                     +-- Clients NNS dep
                         +-- 10 CD num
                         +-- model NN dep
                             +-- 10 CD num
                             +-- FEs NNP dep
                             +-- -LRB- -LRB- punct
                             +-- perf NN nn
                             +-- -RRB- -RRB- punct
                             +-- Figure NN dep
                                 +-- 9 CD num
Input: The cost of the extra mechanism dominates BuddyCache benefit when network latency is low .
Parse:
dominates VBZ ROOT
 +-- cost NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- mechanism NN pobj
 |           +-- the DT det
 |           +-- extra JJ amod
 +-- benefit VBP dobj
 |   +-- BuddyCache NNP nn
 +-- low JJ advcl
 |   +-- when WRB advmod
 |   +-- latency NN nsubj
 |   |   +-- network NN nn
 |   +-- is VBZ cop
 +-- . . punct
Input: At typical Internet latencies 20ms 60ms the benefit increases with latency and levels off around 60ms with significant -LRB- up to 62 % for ten clients -RRB- improvement .
Parse:
60ms NNS ROOT
 +-- At IN prep
 |   +-- latencies NNS pobj
 |       +-- typical JJ amod
 |       +-- Internet NN nn
 +-- 20ms NNS nsubj
 +-- increases NNS dobj
 |   +-- the DT det
 |   +-- benefit NN nn
 |   +-- with IN prep
 |   |   +-- latency NN pobj
 |   +-- and CC cc
 |   +-- levels NNS conj
 |       +-- off RP prep
 |           +-- 60ms NNS pobj
 |               +-- around RB amod
 +-- with IN prep
 |   +-- improvement NN pobj
 |       +-- % NN nn
 |           +-- significant JJ amod
 |           +-- 62 CD num
 |           |   +-- to IN quantmod
 |           |       +-- up IN dep
 |           |           +-- -LRB- -LRB- punct
 |           +-- for IN prep
 |           |   +-- clients NNS pobj
 |           |       +-- ten CD num
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: Figure 9 includes both the measured improvement and the improvement derived using the analytical model.Remarkably , the analytical results predict the measured improvement very closely , albeit being somewhat higher than the empirical values .
Parse:
includes VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 9 CD num
 +-- improvement NN dobj
 |   +-- both CC preconj
 |   +-- the DT det
 |   +-- measured JJ amod
 |   +-- and CC cc
 |   +-- improvement NN conj
 |       +-- the DT det
 |       +-- derived VBN partmod
 |           +-- using VBG xcomp
 |               +-- model.Remarkably RB dobj
 |                   +-- the DT det
 |                   +-- analytical JJ amod
 +-- , , punct
 +-- predict VBP ccomp
 |   +-- results NNS nsubj
 |   |   +-- the DT det
 |   |   +-- analytical JJ amod
 |   +-- improvement NN dobj
 |   |   +-- the DT det
 |   |   +-- measured VBN amod
 |   +-- closely RB advmod
 |   |   +-- very RB advmod
 |   +-- , , punct
 |   +-- albeit IN prep
 |       +-- higher JJR pcomp
 |           +-- being VBG cop
 |           +-- somewhat RB advmod
 |           +-- than IN prep
 |               +-- values NNS pobj
 |                   +-- the DT det
 |                   +-- empirical JJ amod
 +-- . . punct
Input: The main reason why the simplified model works well is it captures the dominant performance component , network latency cost .
Parse:
is VBZ ROOT
 +-- reason NN nsubj
 |   +-- The DT det
 |   +-- main JJ amod
 |   +-- works VBZ rcmod
 |       +-- why WRB advmod
 |       +-- model NN nsubj
 |       |   +-- the DT det
 |       |   +-- simplified JJ amod
 |       +-- well RB advmod
 +-- captures VBZ ccomp
 |   +-- it PRP nsubj
 |   +-- component NN dobj
 |       +-- the DT det
 |       +-- dominant JJ amod
 |       +-- performance NN nn
 |       +-- , , punct
 |       +-- cost NN appos
 |           +-- network NN nn
 |           +-- latency NN nn
 +-- . . punct
Input: 6.4.2 Invalidation Misses To evaluate the performance benefits provided by BuddyCache due to avoided invalidation misses , we compared the hot cache performance of the Base system with two different Buddy system configurations .
Parse:
compared VBD ROOT
 +-- Misses NNPS nsubj
 |   +-- 6.4.2 CD num
 |   +-- Invalidation NNP nn
 +-- evaluate VB advcl
 |   +-- To TO aux
 |   +-- benefits NNS dobj
 |   |   +-- the DT det
 |   |   +-- performance NN nn
 |   |   +-- provided VBN partmod
 |   |       +-- by IN prep
 |   |           +-- BuddyCache NNP pobj
 |   +-- to IN prep
 |       +-- due IN mwe
 |       +-- misses NNS pobj
 |           +-- avoided VBN amod
 |           +-- invalidation NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- cache JJ nn
 |   |   +-- hot JJ amod
 |   +-- of IN prep
 |       +-- system NN pobj
 |           +-- the DT det
 |           +-- Base NNP nn
 |           +-- with IN prep
 |               +-- configurations NNS pobj
 |                   +-- two CD num
 |                   +-- different JJ amod
 |                   +-- system NN nn
 |                       +-- Buddy NNP nn
 +-- . . punct
Input: One of the Buddy system configurations represents a collaborating peer group modifying shared objects -LRB- Writer group -RRB- , the other represents a group where the peers share a read only interest in the modified objects -LRB- Reader group -RRB- and the writer resides outside the BuddyCache group .
Parse:
represents VBZ ROOT
 +-- One CD nsubj
 |   +-- of IN prep
 |       +-- configurations NNS pobj
 |           +-- the DT det
 |           +-- system NN nn
 |               +-- Buddy NNP nn
 +-- group NN dobj
 |   +-- a DT det
 |   +-- collaborating VBG amod
 |   +-- peer NN nn
 |   +-- modifying VBG partmod
 |       +-- objects NNS dobj
 |           +-- shared VBN amod
 |           +-- -LRB- -LRB- punct
 |           +-- group NN dep
 |           |   +-- Writer NN nn
 |           +-- -RRB- -RRB- punct
 +-- , , punct
 +-- represents VBZ ccomp
 |   +-- other JJ nsubj
 |   |   +-- the DT det
 |   +-- group NN dobj
 |       +-- a DT det
 |       +-- share VBP rcmod
 |           +-- where WRB advmod
 |           +-- peers NNS nsubj
 |           |   +-- the DT det
 |           +-- interest NN dobj
 |           |   +-- a DT det
 |           |   +-- read NN nn
 |           |   +-- only JJ amod
 |           +-- in IN prep
 |           |   +-- objects NNS pobj
 |           |       +-- the DT det
 |           |       +-- modified JJ amod
 |           |       +-- -LRB- -LRB- punct
 |           |       +-- group NN dep
 |           |       |   +-- Reader NN nn
 |           |       +-- -RRB- -RRB- punct
 |           +-- and CC cc
 |           +-- resides VBZ conj
 |               +-- writer NN nsubj
 |               |   +-- the DT det
 |               +-- outside IN prep
 |                   +-- group NN pobj
 |                       +-- the DT det
 |                       +-- BuddyCache NNP nn
 +-- . . punct
Input: In each of the three systems , a single client runs a readwrite workload -LRB- writer -RRB- and three other clients run read only workload -LRB- readers -RRB- .
Parse:
runs VBZ ROOT
 +-- In IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- systems NNS pobj
 |               +-- the DT det
 |               +-- three CD num
 +-- , , punct
 +-- client NN nsubj
 |   +-- a DT det
 |   +-- single JJ amod
 +-- workload NN dobj
 |   +-- a DT det
 |   +-- readwrite JJ amod
 |   +-- -LRB- -LRB- punct
 |   +-- writer NN dep
 |   +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- run VBP conj
 |   +-- clients NNS nsubj
 |   |   +-- three CD num
 |   |   +-- other JJ amod
 |   +-- read VB ccomp
 |       +-- workload NN dobj
 |           +-- only RB amod
 |           +-- -LRB- -LRB- punct
 |           +-- readers NNS dep
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: Buddy system with one group contain36 0 5 0 100 150 200 250 300 Base Buddy Reader Buddy Writer -LRB- ms -RRB- CPU Commit Server Fetch Peer Fetch Figure 11
Parse:
system NN ROOT
 +-- Buddy NN nn
 +-- with IN prep
     +-- group NN pobj
         +-- one CD num
         +-- contain36 CD num
         +-- 0 NFP punct
         +-- Figure NNP appos
             +-- Server NNP nn
             |   +-- CPU NN dep
             |   |   +-- ms NNS nn
             |   |       +-- Writer NNP dep
             |   |       |   +-- 250 CD num
             |   |       |   |   +-- 5 CD number
             |   |       |   |   +-- 0 CD dep
             |   |       |   |   +-- 100 CD number
             |   |       |   |   +-- 150 CD number
             |   |       |   |   +-- 200 CD number
             |   |       |   |   +-- 300 CD number
             |   |       |   +-- Reader NNP nn
             |   |       |   |   +-- Base NN nn
             |   |       |   |   +-- Buddy NNP nn
             |   |       |   +-- Buddy NNP nn
             |   |       +-- -LRB- -LRB- punct
             |   |       +-- -RRB- -RRB- punct
             |   +-- Commit NNP nn
             +-- Fetch NNP nn
             +-- Peer NNP nn
             +-- 11 CD num
Input: Buddy system with one group containing a single writer and another group running three readers models the Reader group .
Parse:
system NN ROOT
 +-- Buddy NN nn
 +-- with IN prep
 |   +-- group NN pobj
 |       +-- one CD num
 |       +-- containing VBG partmod
 |           +-- writer NN dobj
 |               +-- a DT det
 |               +-- single JJ amod
 |               +-- and CC cc
 |               +-- group NN conj
 |                   +-- another DT det
 |                   +-- running VBG partmod
 |                       +-- models NNS dobj
 |                           +-- three CD num
 |                           +-- readers NNS nn
 |                           +-- group NN dep
 |                               +-- the DT det
 |                               +-- Reader NNP nn
 +-- . . punct
Input: In Base , one writer and three readers access the server directly .
Parse:
access VBP ROOT
 +-- In IN prep
 |   +-- Base NNP pobj
 +-- , , punct
 +-- writer NN nsubj
 |   +-- one CD num
 |   +-- and CC cc
 |   +-- readers NNS conj
 |       +-- three CD num
 +-- server NN dobj
 |   +-- the DT det
 +-- directly RB advmod
 +-- . . punct
Input: This simple configuration is sufficient to show the impact of BuddyCache techniques .
Parse:
sufficient JJ ROOT
 +-- configuration NN nsubj
 |   +-- This DT det
 |   +-- simple JJ amod
 +-- is VBZ cop
 +-- show VB xcomp
 |   +-- to TO aux
 |   +-- impact NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- techniques NNS pobj
 |               +-- BuddyCache NNP nn
 +-- . . punct
Input: Figures 10 and 11 show the overall time to complete 1000 hot cache OO7 read only transactions .
Parse:
show VB ROOT
 +-- Figures NNS nsubj
 |   +-- 10 CD num
 |   +-- and CC cc
 |   +-- 11 CD conj
 +-- time NN dobj
 |   +-- the DT det
 |   +-- overall JJ amod
 |   +-- complete VB infmod
 |       +-- to TO aux
 |       +-- OO7 CD dobj
 |           +-- 1000 CD num
 |           +-- cache NN nn
 |           |   +-- hot JJ amod
 |           +-- read VBN partmod
 |               +-- transactions NNS dobj
 |                   +-- only JJ amod
 +-- . . punct
Input: We obtain the numbers by running 2000 transactions to filter out cold misses and then time the next 1000 transactions .
Parse:
obtain VBP ROOT
 +-- We PRP nsubj
 +-- numbers NNS dobj
 |   +-- the DT det
 +-- by IN prep
 |   +-- running VBG pcomp
 |       +-- transactions NNS dobj
 |       |   +-- 2000 CD num
 |       +-- filter VB xcomp
 |           +-- to TO aux
 |           +-- out RP prt
 |           +-- misses NNS dobj
 |           |   +-- cold JJ amod
 |           +-- and CC cc
 |           +-- then RB advmod
 |           +-- time VB conj
 |               +-- transactions NNS dobj
 |                   +-- the DT det
 |                   +-- next JJ amod
 |                   +-- 1000 CD num
 +-- . . punct
Input: Here again , the reported numbers are derived from the local area network experiment results .
Parse:
derived VBN ROOT
 +-- again RB advmod
 |   +-- Here RB advmod
 +-- , , punct
 +-- numbers NNS nsubjpass
 |   +-- the DT det
 |   +-- reported VBN amod
 +-- are VBP auxpass
 +-- from IN prep
 |   +-- results NNS pobj
 |       +-- the DT det
 |       +-- local JJ amod
 |       +-- area NN nn
 |       +-- experiment NN nn
 |           +-- network NN nn
 +-- . . punct
Input: The results show that the BuddyCache reduces significantly the completion time compared to the Base system .
Parse:
show VBP ROOT
 +-- results NNS nsubj
 |   +-- The DT det
 +-- reduces VBZ ccomp
 |   +-- that IN mark
 |   +-- BuddyCache NNP nsubj
 |   |   +-- the DT det
 |   +-- significantly RB advmod
 |   +-- time NN dobj
 |   |   +-- the DT det
 |   |   +-- completion NN nn
 |   +-- compared VBN prep
 |       +-- to IN pcomp
 |           +-- system NN pobj
 |               +-- the DT det
 |               +-- Base NNP nn
 +-- . . punct
Input: In a 40 ms network , the overall time in the Writer group improves by 62 % compared to Base .
Parse:
improves VBZ ROOT
 +-- In IN prep
 |   +-- network NN pobj
 |       +-- a DT det
 |       +-- 40 CD num
 |       +-- ms NNS nn
 +-- , , punct
 +-- time NN nsubj
 |   +-- the DT det
 |   +-- overall JJ amod
 |   +-- in IN prep
 |       +-- group NN pobj
 |           +-- the DT det
 |           +-- Writer NN nn
 +-- by IN prep
 |   +-- % NN pobj
 |       +-- 62 CD num
 +-- compared VBN prep
 |   +-- to IN pcomp
 |       +-- Base NNP pobj
 +-- . . punct
Input: This benefit is due to peer update that avoids all misses due to updates .
Parse:
due JJ ROOT
 +-- benefit NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- peer VB xcomp
 |   +-- to TO aux
 |   +-- update NN dobj
 |       +-- avoids VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- misses NNS dobj
 |               +-- all DT det
 |               +-- due JJ amod
 |                   +-- to IN prep
 |                       +-- updates NNS pobj
 +-- . . punct
Input: The overall time in the Reader group improves by 30 % and is due to peer fetch that allows a client to access an invalidated object at the cost of a local fetch avoiding the delay of fetching from the server .
Parse:
improves VBZ ROOT
 +-- time NN nsubj
 |   +-- The DT det
 |   +-- overall JJ amod
 |   +-- in IN prep
 |       +-- group NN pobj
 |           +-- the DT det
 |           +-- Reader NN nn
 +-- by IN prep
 |   +-- % NN pobj
 |       +-- 30 CD num
 +-- and CC cc
 +-- due JJ conj
 |   +-- is VBZ cop
 |   +-- to TO prep
 |       +-- fetch VB pobj
 |           +-- peer NN nn
 |           +-- allows VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- access VB xcomp
 |                   +-- client NN nsubj
 |                   |   +-- a DT det
 |                   +-- to TO aux
 |                   +-- object NN dobj
 |                   |   +-- an DT det
 |                   |   +-- invalidated JJ amod
 |                   +-- at IN prep
 |                       +-- cost NN pobj
 |                           +-- the DT det
 |                           +-- of IN prep
 |                               +-- fetch NN pobj
 |                                   +-- a DT det
 |                                   +-- local JJ amod
 |                                   +-- avoiding VBG partmod
 |                                       +-- delay NN dobj
 |                                           +-- the DT det
 |                                           +-- of IN prep
 |                                               +-- fetching VBG pcomp
 |                                                   +-- from IN prep
 |                                                       +-- server NN pobj
 |                                                           +-- the DT det
 +-- . . punct
Input: The latter is an important benefit because it shows that on workloads with updates , peer fetch allows an invalidation based protocol to provide some of the benefits of update based protocol .
Parse:
benefit NN ROOT
 +-- latter JJ nsubj
 |   +-- The DT det
 +-- is VBZ cop
 +-- an DT det
 +-- important JJ amod
 +-- shows VBZ advcl
 |   +-- because IN mark
 |   +-- it PRP nsubj
 |   +-- allows VBZ ccomp
 |       +-- that IN mark
 |       +-- on IN prep
 |       |   +-- workloads NNS pobj
 |       |       +-- with IN prep
 |       |           +-- updates NNS pobj
 |       +-- , , punct
 |       +-- fetch NN nsubj
 |       |   +-- peer NN nn
 |       +-- protocol NN dobj
 |           +-- an DT det
 |           +-- based VBN amod
 |           |   +-- invalidation NN dep
 |           +-- provide VB infmod
 |               +-- to TO aux
 |               +-- some DT dobj
 |                   +-- of IN prep
 |                       +-- benefits NNS pobj
 |                           +-- the DT det
 |                           +-- of IN prep
 |                               +-- protocol NN pobj
 |                                   +-- based VBN amod
 |                                       +-- update NN dep
 +-- . . punct
Input: Note that the performance benefit delivered by the peer fetch in the Reader group is approximately 50 % less than the performance benefit delivered by peer update in the Writer group .
Parse:
Note VB ROOT
 +-- less JJR ccomp
 |   +-- that IN mark
 |   +-- benefit NN nsubj
 |   |   +-- the DT det
 |   |   +-- performance NN nn
 |   |   +-- delivered VBN partmod
 |   |       +-- by IN prep
 |   |           +-- fetch NN pobj
 |   |               +-- the DT det
 |   |               +-- peer NN nn
 |   |               +-- in IN prep
 |   |                   +-- group NN pobj
 |   |                       +-- the DT det
 |   |                       +-- Reader NNP nn
 |   +-- is VBZ cop
 |   +-- % NN npadvmod
 |   |   +-- 50 CD num
 |   |       +-- approximately RB quantmod
 |   +-- than IN prep
 |       +-- benefit NN pobj
 |           +-- the DT det
 |           +-- performance NN nn
 |           +-- delivered VBN partmod
 |               +-- by IN prep
 |                   +-- update NN pobj
 |                       +-- peer NN nn
 |                       +-- in IN prep
 |                           +-- group NN pobj
 |                               +-- the DT det
 |                               +-- Writer NN nn
 +-- . . punct
Input: This difference is similar in 80ms network .
Parse:
similar JJ ROOT
 +-- difference NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- in IN prep
 |   +-- network NN pobj
 |       +-- 80ms CD num
 +-- . . punct
Input: Figure 12 shows the relative latency improvement provided by BuddyCache in Buddy Reader and Buddy Writer configurations -LRB- computed as the overall time difference between BuddyReader and Base relative to Base , and Buddy Writer and Base relative to Base -RRB- in a hot cache experiment as a function of increasing network latency , for fixed server load .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 12 CD num
 +-- improvement NN dobj
 |   +-- the DT det
 |   +-- relative JJ amod
 |   +-- latency NN nn
 |   +-- provided VBN partmod
 |       +-- by IN prep
 |       |   +-- BuddyCache NNP pobj
 |       +-- in IN prep
 |           +-- experiment NN pobj
 |               +-- a DT det
 |               +-- cache NN nn
 |               |   +-- hot JJ amod
 |               +-- as IN prep
 |               |   +-- function NN pobj
 |               |       +-- a DT det
 |               |       +-- of IN prep
 |               |           +-- latency NN pobj
 |               |               +-- increasing VBG amod
 |               |               +-- network NN nn
 |               +-- , , punct
 |               +-- for IN prep
 |                   +-- load NN pobj
 |                       +-- server NN nn
 |                           +-- fixed VBN amod
 +-- . . punct
Input: The peer update benefit dominates overhead in Writer configuration even in low latency network -LRB- peer update incurs minimal overhead -RRB- and offers significant 44 64 % improvement for entire latency range .
Parse:
dominates NNS ROOT
 +-- benefit NN nsubj
 |   +-- The DT det
 |   +-- update NN nn
 |       +-- peer NN nn
 +-- overhead RB advmod
 +-- in IN prep
 |   +-- even RB advmod
 |   +-- network NN pobj
 |       +-- low JJ amod
 |       +-- latency NN nn
 |       +-- incurs NNS dep
 |           +-- -LRB- -LRB- punct
 |           +-- update NN nsubj
 |           |   +-- peer NN nn
 |           +-- overhead NN dobj
 |           |   +-- minimal JJ amod
 |           +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- offers VBZ conj
 |   +-- improvement NN dobj
 |       +-- significant JJ amod
 |       +-- % NN nn
 |       |   +-- 64 CD num
 |       |       +-- 44 CD number
 |       +-- for IN prep
 |           +-- range NN pobj
 |               +-- entire JJ amod
 |               +-- latency NN nn
 +-- . . punct
Input: The figure includes both the measured improvement and the improvement derived using the analytical model .
Parse:
includes VBZ ROOT
 +-- figure NN nsubj
 |   +-- The DT det
 +-- improvement NN dobj
 |   +-- both CC preconj
 |   +-- the DT det
 |   +-- measured JJ amod
 |   +-- and CC cc
 |   +-- improvement NN conj
 |       +-- the DT det
 |       +-- derived VBN partmod
 |           +-- using VBG xcomp
 |               +-- model NN dobj
 |                   +-- the DT det
 |                   +-- analytical JJ amod
 +-- . . punct
Input: As in cold cache experiments , here the analytical results predict the measured improvement closely .
Parse:
predict VBP ROOT
 +-- As IN prep
 |   +-- in IN pcomp
 |       +-- experiments NNS pobj
 |           +-- cache NN nn
 |               +-- cold JJ amod
 +-- , , punct
 +-- here RB advmod
 +-- results NNS nsubj
 |   +-- the DT det
 |   +-- analytical JJ amod
 +-- improvement NN dobj
 |   +-- the DT det
 |   +-- measured VBN amod
 +-- closely RB advmod
 +-- . . punct
Input: The difference is 10 % 0 % 10 % 20 % 30 % 40 % 50 % 60 % 70 % 1 5 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 100 Latency -LRB- ms -RRB- Benefits -LRB- % -RRB- Buddy Reader Buddy Reader -LRB- perf model -RRB- Buddy Writer Buddy Writer -LRB- perf model -RRB- Figure 12
Parse:
% NN ROOT
 +-- difference NN nsubj
 |   +-- The DT det
 +-- is VBZ cop
 +-- 10 CD num
 +-- % NN dep
 |   +-- % NN dep
 |   |   +-- 60 CD num
 |   |   +-- % NN dep
 |   |       +-- 70 CD num
 |   +-- 0 CD number
 |   |   +-- 0 CD number
 |   |   +-- 3 CD number
 |   |   +-- 0 NFP dep
 |   |   +-- 4 CD number
 |   |   +-- 5 CD number
 |   |   +-- 0 CD dep
 |   |   +-- 6 CD number
 |   |   +-- 7 CD number
 |   |   +-- 8 CD number
 |   |   +-- 9 CD number
 |   +-- 100 CD number
 |   +-- Latency NN dep
 |   +-- ms NNS dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- -RRB- -RRB- punct
 |   +-- Benefits NNS dep
 |   +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- Reader NNP rcmod
     +-- Buddy NNP nn
     +-- Reader NNP dep
     |   +-- Buddy NNP nn
     +-- -LRB- -LRB- punct
     +-- model NN dep
     |   +-- perf NN nn
     +-- -RRB- -RRB- punct
     +-- Writer NNP dep
     |   +-- Buddy NNP nn
     |   +-- Writer NNP nn
     |   +-- model NN appos
     |       +-- -LRB- -LRB- punct
     |       +-- perf NN nn
     |       +-- -RRB- -RRB- punct
     +-- Figure NN dep
         +-- 12 CD num
Input: As in cold cache case , the reason why the simplified analytical model works well is because it captures the costs of network latency , the dominant performance cost. .
Parse:
is VBZ ROOT
 +-- As IN prep
 |   +-- in IN pcomp
 |       +-- case NN pobj
 |           +-- cache NN nn
 |               +-- cold JJ amod
 +-- , , punct
 +-- reason NN nsubj
 |   +-- the DT det
 |   +-- works VBZ rcmod
 |       +-- why WRB advmod
 |       +-- model NN nsubj
 |       |   +-- the DT det
 |       |   +-- simplified VBN amod
 |       |   +-- analytical JJ amod
 |       +-- well RB advmod
 +-- captures VBZ advcl
 |   +-- because IN mark
 |   +-- it PRP nsubj
 |   +-- costs NNS dobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- latency NN pobj
 |       |       +-- network NN nn
 |       +-- , , punct
 |       +-- cost. NN appos
 |           +-- the DT det
 |           +-- dominant JJ amod
 |           +-- performance NN nn
 +-- . . punct
