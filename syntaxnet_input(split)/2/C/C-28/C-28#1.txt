Input: In this paper , we propose an adaptive task allocation framework to perform BLAST searches in a grid environment against sequence database segments .
Parse:
propose VBP ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- framework NN dobj
 |   +-- an DT det
 |   +-- adaptive JJ amod
 |   +-- allocation NN nn
 |   |   +-- task NN nn
 |   +-- perform VB infmod
 |       +-- to TO aux
 |       +-- searches NNS dobj
 |       |   +-- BLAST NNP nn
 |       +-- in IN prep
 |           +-- environment NN pobj
 |               +-- a DT det
 |               +-- grid NN nn
 |               +-- against IN prep
 |                   +-- segments NNS pobj
 |                       +-- database NN nn
 |                           +-- sequence NN nn
 +-- . . punct
Input: The framework , called PackageBLAST , provides an infrastructure to choose or incorporate task allocation strategies .
Parse:
provides VBZ ROOT
 +-- framework NN nsubj
 |   +-- The DT det
 |   +-- , , punct
 |   +-- called VBN partmod
 |       +-- PackageBLAST NNP dep
 +-- infrastructure NN dobj
 |   +-- an DT det
 |   +-- choose VB infmod
 |       +-- to TO aux
 |       +-- or CC cc
 |       +-- incorporate VB conj
 |       +-- strategies NNS dobj
 |           +-- allocation NN nn
 |               +-- task NN nn
 +-- . . punct
Input: Furthermore , we propose a mechanism to compute grid nodes execution weight , adapting the chosen allocation policy to the current computational power of the nodes .
Parse:
propose VBP ROOT
 +-- Furthermore RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- mechanism NN dobj
 |   +-- a DT det
 |   +-- compute VB infmod
 |       +-- to TO aux
 |       +-- weight NN dobj
 |           +-- nodes NNS nn
 |           |   +-- grid NN nn
 |           +-- execution NN nn
 +-- adapting VBG partmod
 |   +-- policy NN dobj
 |   |   +-- the DT det
 |   |   +-- chosen VBN amod
 |   |   +-- allocation NN nn
 |   +-- to IN prep
 |       +-- power NN pobj
 |           +-- the DT det
 |           +-- current JJ amod
 |           +-- computational JJ amod
 |           +-- of IN prep
 |               +-- nodes NNS pobj
 |                   +-- the DT det
 +-- . . punct
Input: Our results present very good speedups and also show that no single allocation strategy is able to achieve the lowest execution times for all scenarios. .
Parse:
present VBP ROOT
 +-- results NNS nsubj
 |   +-- Our PRP$ poss
 +-- speedups NNS dobj
 |   +-- good JJ amod
 |       +-- very RB advmod
 +-- and CC cc
 +-- also RB advmod
 +-- show VBP conj
 |   +-- able JJ ccomp
 |       +-- that IN mark
 |       +-- strategy NN nsubj
 |       |   +-- no DT det
 |       |   +-- single JJ amod
 |       |   +-- allocation NN nn
 |       +-- is VBZ cop
 |       +-- achieve VB xcomp
 |           +-- to TO aux
 |           +-- execution NN dobj
 |               +-- the DT det
 |               +-- lowest JJS amod
 |               +-- times NNS advmod
 |               +-- for IN prep
 |                   +-- scenarios. NNS pobj
 |                       +-- all DT det
 +-- . . punct
