Input: We propose enforcing access control in a decentralised broker network by encrypting the contents of published events and controlling access to the encryption keys .
Parse:
propose VBP ROOT
 +-- We PRP nsubj
 +-- enforcing VBG xcomp
 |   +-- control NN dobj
 |   |   +-- access NN nn
 |   |   +-- in IN prep
 |   |       +-- network NN pobj
 |   |           +-- a DT det
 |   |           +-- decentralised VBN amod
 |   |           +-- broker NN nn
 |   +-- by IN prep
 |       +-- encrypting VBG pcomp
 |           +-- contents NNS dobj
 |           |   +-- the DT det
 |           |   +-- of IN prep
 |           |       +-- events NNS pobj
 |           |           +-- published VBN amod
 |           +-- and CC cc
 |           +-- controlling VBG conj
 |               +-- access NN dobj
 |                   +-- to IN prep
 |                       +-- keys NNS pobj
 |                           +-- the DT det
 |                           +-- encryption NN nn
 +-- . . punct
Input: Effectively we move the responsibility for access control from the broker network to the key managers .
Parse:
move VBP ROOT
 +-- Effectively RB advmod
 +-- we PRP nsubj
 +-- responsibility NN dobj
 |   +-- the DT det
 |   +-- for IN prep
 |       +-- control NN pobj
 |           +-- access NN nn
 |           +-- from IN prep
 |           |   +-- network NN pobj
 |           |       +-- the DT det
 |           |       +-- broker NN nn
 |           +-- to IN prep
 |               +-- managers NNS pobj
 |                   +-- the DT det
 |                   +-- key JJ amod
 +-- . . punct
Input: It is assumed that all clients have access to a broker that they can trust and that is authorised to access the event content required by the client .
Parse:
assumed VBN ROOT
 +-- It PRP nsubjpass
 +-- is VBZ auxpass
 +-- have VBP ccomp
 |   +-- that IN mark
 |   +-- clients NNS nsubj
 |   |   +-- all DT det
 |   +-- access NN dobj
 |   |   +-- to IN prep
 |   |   |   +-- broker NN pobj
 |   |   |       +-- a DT det
 |   |   +-- trust VB dep
 |   |       +-- that IN mark
 |   |       +-- they PRP nsubj
 |   |       +-- can MD aux
 |   +-- and CC cc
 |   +-- authorised VBN conj
 |       +-- that DT nsubj
 |       +-- is VBZ cop
 |       +-- access VB xcomp
 |           +-- to TO aux
 |           +-- content NN dobj
 |               +-- the DT det
 |               +-- event NN nn
 |               +-- required VBN partmod
 |                   +-- by IN prep
 |                       +-- client NN pobj
 |                           +-- the DT det
 +-- . . punct
Input: This allows us to implement the event content encryption within the broker network without involving the clients .
Parse:
allows VBZ ROOT
 +-- This DT nsubj
 +-- implement VB xcomp
 |   +-- us PRP nsubj
 |   +-- to TO aux
 |   +-- encryption NN dobj
 |   |   +-- the DT det
 |   |   +-- event NN nn
 |   |   +-- content NN nn
 |   |   +-- within IN prep
 |   |       +-- network NN pobj
 |   |           +-- the DT det
 |   |           +-- broker NN nn
 |   +-- without IN prep
 |       +-- involving VBG pcomp
 |           +-- clients NNS dobj
 |               +-- the DT det
 +-- . . punct
Input: By delegating the encryption tasks to the brokers , we lower the number of nodes required to have access to a given encryption key1 .
Parse:
lower VBD ROOT
 +-- By IN prep
 |   +-- delegating VBG pcomp
 |       +-- tasks NNS dobj
 |       |   +-- the DT det
 |       |   +-- encryption NN nn
 |       +-- to IN prep
 |           +-- brokers NNS pobj
 |               +-- the DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- have VB ccomp
 |   +-- number NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- nodes NNS pobj
 |   |           +-- required VBN partmod
 |   |               +-- to TO prep
 |   +-- access NN dobj
 |       +-- to IN prep
 |           +-- key1 CD pobj
 |               +-- a DT det
 |                   +-- given VBN prep
 |                       +-- encryption NN dep
 +-- . . punct
Input: The benefits are three fold
Parse:
fold NN ROOT
 +-- benefits NNS nsubj
 |   +-- The DT det
 +-- are VBP cop
 +-- three CD num
Input: This is discussed in Sect .
Parse:
discussed VBN ROOT
 +-- This DT nsubjpass
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- Sect NNP pobj
 +-- . . punct
Input: 4.2 having to decrypt the same event .
Parse:
having VBG ROOT
 +-- 4.2 LS dep
 +-- decrypt VB xcomp
 |   +-- to TO aux
 |   +-- event NN dobj
 |       +-- the DT det
 |       +-- same JJ amod
 +-- . . punct
Input: Delegating encryption tasks to the local broker is appropriate , because encryption is a middleware feature used to enforce access control within the middleware system .
Parse:
appropriate JJ ROOT
 +-- tasks NNS nsubj
 |   +-- Delegating VBG amod
 |   +-- encryption NN nn
 |   +-- to IN prep
 |       +-- broker NN pobj
 |           +-- the DT det
 |           +-- local JJ amod
 +-- is VBZ cop
 +-- , , punct
 +-- feature NN advcl
 |   +-- because IN mark
 |   +-- encryption NN nsubj
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- middleware JJ amod
 |   +-- used VBN partmod
 |       +-- enforce VB xcomp
 |           +-- to TO aux
 |           +-- control NN dobj
 |               +-- access NN nn
 |               +-- within IN prep
 |                   +-- system NN pobj
 |                       +-- the DT det
 |                       +-- middleware NN nn
 +-- . . punct
Input: If applications need to handle encrypted data in the application layer , they are free to publish encrypted data over the publish subscribe system .
Parse:
free JJ ROOT
 +-- need VBP advcl
 |   +-- If IN mark
 |   +-- applications NNS nsubj
 |   +-- handle VB xcomp
 |       +-- to TO aux
 |       +-- data NNS dobj
 |       |   +-- encrypted VBN amod
 |       +-- in IN prep
 |           +-- layer NN pobj
 |               +-- the DT det
 |               +-- application NN nn
 +-- , , punct
 +-- they PRP nsubj
 +-- are VBP cop
 +-- publish VB xcomp
 |   +-- to TO aux
 |   +-- data NNS dobj
 |   |   +-- encrypted VBN amod
 |   +-- over IN prep
 |       +-- system NN pobj
 |           +-- the DT det
 |           +-- subscribe NN nn
 |               +-- publish NN nn
 +-- . . punct
Input: We can implement encryption either at the event level or the attribute level .
Parse:
implement VB ROOT
 +-- We PRP nsubj
 +-- can MD aux
 +-- encryption NN dobj
 +-- at IN prep
 |   +-- either CC preconj
 |   +-- level NN pobj
 |       +-- the DT det
 |       +-- event NN nn
 |       +-- or CC cc
 |       +-- level NN conj
 |           +-- the DT det
 |           +-- attribute JJ amod
 +-- . . punct
Input: Event encryption is simpler , requires fewer keys , fewer independent cryptographic operations , and thus is usually faster .
Parse:
simpler JJR ROOT
 +-- encryption NN nsubj
 |   +-- Event JJ amod
 +-- is VBZ cop
 +-- , , punct
 +-- requires VBZ conj
 |   +-- keys NNS dobj
 |       +-- fewer JJR amod
 |       +-- , , punct
 |       +-- operations NNS appos
 |           +-- fewer JJR amod
 |           +-- independent JJ amod
 |           +-- cryptographic JJ amod
 +-- and CC cc
 +-- faster JJR conj
 |   +-- thus RB nsubj
 |   +-- is VBZ cop
 |   +-- usually RB advmod
 +-- . . punct
Input: Attribute encryption enables access control at the attribute level , which means that we have a more expressive and powerful access control mechanism , while usually incurring a larger performance penalty .
Parse:
enables VBZ ROOT
 +-- encryption NN nsubj
 |   +-- Attribute VB amod
 +-- control NN dobj
 |   +-- access NN nn
 +-- at IN prep
 |   +-- level NN pobj
 |       +-- the DT det
 |       +-- attribute JJ amod
 |       +-- , , punct
 |       +-- means VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- have VBP ccomp
 |               +-- that IN mark
 |               +-- we PRP nsubj
 |               +-- mechanism NN dobj
 |               |   +-- a DT det
 |               |   +-- expressive JJ amod
 |               |   |   +-- more RBR advmod
 |               |   |   +-- and CC cc
 |               |   |   +-- powerful JJ conj
 |               |   +-- control NN nn
 |               |       +-- access NN nn
 |               +-- , , punct
 |               +-- incurring VBG advcl
 |                   +-- while IN mark
 |                   +-- usually RB advmod
 |                   +-- penalty NN dobj
 |                       +-- a DT det
 |                       +-- larger JJR amod
 |                       +-- performance NN nn
 +-- . . punct
Input: In this section we discuss encrypting event content both at the event level and the attribute level ; avoiding leaking information to unauthorised brokers by encrypting subscription filters ; avoiding unnecessary encryptions between authorised brokers ; and finally , how event content encryption was implemented in our prototype .
Parse:
discuss VBP ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- encrypting VBG xcomp
 |   +-- content NN dobj
 |   |   +-- event NN nn
 |   +-- at IN prep
 |       +-- both CC preconj
 |       +-- level NN pobj
 |           +-- the DT det
 |           +-- event NN nn
 |           +-- and CC cc
 |           +-- level NN conj
 |               +-- the DT det
 |               +-- attribute JJ amod
 +-- ; : punct
 +-- avoiding VBG parataxis
 |   +-- leaking VBG partmod
 |   |   +-- information NN dobj
 |   |   +-- to IN prep
 |   |   |   +-- brokers NNS pobj
 |   |   |       +-- unauthorised JJ amod
 |   |   +-- by IN prep
 |   |       +-- encrypting VBG pcomp
 |   |           +-- filters NNS dobj
 |   |               +-- subscription NN nn
 |   +-- ; : punct
 |   +-- avoiding VBG conj
 |   |   +-- encryptions NNS dobj
 |   |       +-- unnecessary JJ amod
 |   |       +-- between IN prep
 |   |           +-- brokers NNS pobj
 |   |               +-- authorised VBN amod
 |   +-- and CC cc
 |   +-- implemented VBN conj
 |       +-- finally RB advmod
 |       +-- , , punct
 |       +-- how WRB advmod
 |       +-- encryption NN nsubjpass
 |       |   +-- event NN nn
 |       |   +-- content NN nn
 |       +-- was VBD auxpass
 |       +-- in IN prep
 |           +-- prototype NN pobj
 |               +-- our PRP$ poss
 +-- . . punct
Input: Note that since no publish subscribe client is ever given access to encryption keys , any encryption performed by the brokers is necessarily completely transparent to all clients .
Parse:
Note VB ROOT
 +-- transparent JJ ccomp
 |   +-- that IN mark
 |   +-- subscribe NN advcl
 |   |   +-- since IN mark
 |   |   +-- publish NN nsubj
 |   |   |   +-- no DT det
 |   |   +-- given VBN rcmod
 |   |       +-- client NN nsubjpass
 |   |       +-- is VBZ auxpass
 |   |       +-- ever RB advmod
 |   |       +-- access NN dobj
 |   |           +-- to IN prep
 |   |               +-- keys NNS pobj
 |   |                   +-- encryption NN nn
 |   +-- , , punct
 |   +-- encryption NN nsubj
 |   |   +-- any DT det
 |   |   +-- performed VBN partmod
 |   |       +-- by IN prep
 |   |           +-- brokers NNS pobj
 |   |               +-- the DT det
 |   +-- is VBZ cop
 |   +-- necessarily RB advmod
 |   +-- completely RB advmod
 |   +-- to IN prep
 |       +-- clients NNS pobj
 |           +-- all DT det
 +-- . . punct
Input: 3.1 Event Encryption In event encryption all the event attributes are encrypted as a single block of plaintext .
Parse:
encrypted VBN ROOT
 +-- Encryption NNP nsubjpass
 |   +-- 3.1 CD num
 |   +-- Event NNP nn
 |   +-- In IN prep
 |   |   +-- encryption NN pobj
 |   |       +-- event NN nn
 |   +-- attributes NNS rcmod
 |       +-- event NN nsubj
 |           +-- all PDT predet
 |           +-- the DT det
 +-- are VBP auxpass
 +-- as IN prep
 |   +-- block NN pobj
 |       +-- a DT det
 |       +-- single JJ amod
 |       +-- of IN prep
 |           +-- plaintext NN pobj
 +-- . . punct
Input: The event type identifier is left intact -LRB- i.e .
Parse:
left VBN ROOT
 +-- identifier NN nsubjpass
 |   +-- The DT det
 |   +-- type NN nn
 |       +-- event NN nn
 +-- is VBZ auxpass
 +-- intact JJ acomp
 +-- -LRB- -LRB- punct
 +-- i.e NN dobj
 +-- . . punct
Input: in plaintext -RRB- in order to facilitate event routing in the broker network .
Parse:
in IN ROOT
 +-- plaintext NN pobj
 +-- -RRB- -RRB- punct
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- facilitate VB infmod
 |           +-- to TO aux
 |           +-- routing VBG dobj
 |               +-- event NN nn
 |               +-- in IN prep
 |                   +-- network NN pobj
 |                       +-- the DT det
 |                       +-- broker NN nn
 +-- . . punct
Input: The globally unique event type identifier specifies the encryption key used to encrypt the event content .
Parse:
specifies NNS ROOT
 +-- identifier NN nsubj
 |   +-- The DT det
 |   +-- unique JJ amod
 |   |   +-- globally RB advmod
 |   +-- type NN nn
 |       +-- event NN nn
 +-- key NN dobj
 |   +-- the DT det
 |   +-- encryption NN nn
 |   +-- used VBN partmod
 |       +-- encrypt VB xcomp
 |           +-- to TO aux
 |           +-- content NN dobj
 |               +-- the DT det
 |               +-- event NN nn
 +-- . . punct
Input: Each event type in the system will have its own individual encryption key .
Parse:
have VB ROOT
 +-- type NN nsubj
 |   +-- Each DT det
 |   +-- event NN nn
 |   +-- in IN prep
 |       +-- system NN pobj
 |           +-- the DT det
 +-- will MD aux
 +-- key NN dobj
 |   +-- its PRP$ poss
 |   +-- own JJ amod
 |   +-- individual JJ amod
 |   +-- encryption NN nn
 +-- . . punct
Input: Keys are refreshed , as discussed in Sect .
Parse:
refreshed VBN ROOT
 +-- Keys NNS nsubj
 +-- are VBP cop
 +-- , , punct
 +-- discussed VBN advcl
 |   +-- as IN mark
 |   +-- in IN prep
 |       +-- Sect NNP pobj
 +-- . . punct
Input: 4.2 .
Parse:
4.2 LS ROOT
 +-- . . punct
Input: While in transit the event will consist of a tuple containing the type identifier , a publication timestamp , ciphertext , and a message authentication tag
Parse:
consist VB ROOT
 +-- While IN mark
 +-- in IN prep
 |   +-- transit NN pobj
 +-- event NN nsubj
 |   +-- the DT det
 +-- will MD aux
 +-- of IN prep
     +-- tuple NN pobj
         +-- a DT det
         +-- containing VBG partmod
             +-- identifier NN dobj
                 +-- the DT det
                 +-- type NN nn
                 +-- , , punct
                 +-- timestamp NN conj
                 |   +-- a DT det
                 |   +-- publication NN nn
                 +-- ciphertext NN conj
                 +-- and CC cc
                 +-- tag NN conj
                     +-- a DT det
                     +-- message NN nn
                     +-- authentication NN nn
Input: Event brokers that are authorised to access the event , and thus have access to the encryption key , can decrypt the event and implement content based routing .
Parse:
have VBP ROOT
 +-- brokers NNS nsubj
 |   +-- Event NN nn
 |   +-- authorised VBN rcmod
 |       +-- that WDT nsubj
 |       +-- are VBP cop
 |       +-- access VB xcomp
 |       |   +-- to TO aux
 |       |   +-- event NN dobj
 |       |       +-- the DT det
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- thus RB advmod
 +-- access NN dobj
 |   +-- to IN prep
 |       +-- key NN pobj
 |           +-- the DT det
 |           +-- encryption NN nn
 +-- , , punct
 +-- decrypt VB conj
 |   +-- can MD aux
 |   +-- event NN dobj
 |       +-- the DT det
 +-- and CC cc
 +-- implement VB conj
 |   +-- routing NN dobj
 |       +-- based VBN amod
 |           +-- content NN dep
 +-- . . punct
Input: Event brokers that do not have access to the encryption key will be forced to route the event based only on its type .
Parse:
forced VBN ROOT
 +-- brokers NNS nsubjpass
 |   +-- Event NN nn
 |   +-- have VB rcmod
 |       +-- that WDT nsubj
 |       +-- do VBP aux
 |       +-- not RB neg
 |       +-- access NN dobj
 |           +-- to IN prep
 |               +-- key NN pobj
 |                   +-- the DT det
 |                   +-- encryption NN nn
 +-- will MD aux
 +-- be VB auxpass
 +-- route VB xcomp
 |   +-- to TO aux
 |   +-- event NN dobj
 |   |   +-- the DT det
 |   +-- based VBN prep
 |       +-- on IN pcomp
 |           +-- only RB advmod
 |           +-- type NN pobj
 |               +-- its PRP$ poss
 +-- . . punct
Input: That is , they will not be able to make intelligent decisions about whether events need not be transmitted down their outgoing links .
Parse:
is VBZ ROOT
 +-- That DT nsubj
 +-- , , punct
 +-- able JJ ccomp
 |   +-- they PRP nsubj
 |   +-- will MD aux
 |   +-- not RB neg
 |   +-- be VB cop
 |   +-- make VB xcomp
 |       +-- to TO aux
 |       +-- decisions NNS dobj
 |           +-- intelligent JJ amod
 |           +-- about IN prep
 |               +-- transmitted VBN pcomp
 |                   +-- whether IN mark
 |                   +-- events NNS nsubjpass
 |                   +-- need VBP aux
 |                   +-- not RB neg
 |                   +-- be VB auxpass
 |                   +-- down RP prt
 |                   +-- links NNS dobj
 |                       +-- their PRP$ poss
 |                       +-- outgoing JJ amod
 +-- . . punct
Input: Event encryption results in one encryption at the publisher hosting broker , and one decryption at each filtering intermediate broker and subscriber hosting broker that the event passes through , regardless of the number of attributes .
Parse:
broker NN ROOT
 +-- results NNS nsubj
 |   +-- encryption NN nn
 |   |   +-- Event JJ amod
 |   +-- in IN prep
 |   |   +-- encryption NN pobj
 |   |       +-- one CD num
 |   |       +-- at IN prep
 |   |           +-- publisher NN pobj
 |   |               +-- the DT det
 |   +-- hosting VBG partmod
 |       +-- broker NN dobj
 |       |   +-- , , punct
 |       |   +-- and CC cc
 |       |   +-- decryption NN conj
 |       |       +-- one CD num
 |       +-- at IN prep
 |           +-- broker NN pobj
 |               +-- each DT det
 |               +-- filtering VBG amod
 |               +-- intermediate JJ amod
 |               +-- and CC cc
 |               +-- subscriber NN conj
 +-- hosting VBG amod
 +-- passes VBZ ccomp
 |   +-- that IN mark
 |   +-- event NN nsubj
 |   |   +-- the DT det
 |   +-- through RB prt
 |   +-- , , punct
 |   +-- regardless RB advmod
 |       +-- of IN prep
 |           +-- number NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- attributes NNS pobj
 +-- . . punct
Input: This results in a significant performance advantage compared to attribute encryption .
Parse:
results VBZ ROOT
 +-- This DT nsubj
 +-- in IN prep
 |   +-- advantage NN pobj
 |       +-- a DT det
 |       +-- performance NN nn
 |           +-- significant JJ amod
 +-- compared VBN prep
 |   +-- attribute VB pcomp
 |       +-- to TO aux
 |       +-- encryption NN dobj
 +-- . . punct
Input: 3.2 Attribute Encryption In attribute encryption each attribute value in an event is encrypted separately with its own encryption key .
Parse:
encrypted VBN ROOT
 +-- Encryption NN nsubjpass
 |   +-- 3.2 CD num
 |   +-- Attribute NNP nn
 |   +-- In IN prep
 |   |   +-- encryption NN pobj
 |   |       +-- attribute NN amod
 |   +-- attribute NN rcmod
 |       +-- each DT nsubj
 |       +-- value NN dobj
 |       +-- in IN prep
 |           +-- event NN pobj
 |               +-- an DT det
 +-- is VBZ auxpass
 +-- separately RB advmod
 +-- with IN prep
 |   +-- key NN pobj
 |       +-- its PRP$ poss
 |       +-- own JJ amod
 |       +-- encryption NN nn
 +-- . . punct
Input: The encryption key is identified by the attribute '' s globally unique identifier -LRB- the globally unique event identifier defines a namespace inside which the attribute identifier is a fully qualified name -RRB- .
Parse:
identified VBN ROOT
 +-- key NN nsubjpass
 |   +-- The DT det
 |   +-- encryption NN nn
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- identifier NN pobj
 |       +-- attribute NN poss
 |       |   +-- the DT det
 |       |   +-- '' '' punct
 |       |   +-- s POS possessive
 |       +-- unique JJ amod
 |       |   +-- globally RB advmod
 |       +-- defines VBZ dep
 |           +-- -LRB- -LRB- punct
 |           +-- identifier NN nsubj
 |           |   +-- the DT det
 |           |   +-- unique JJ amod
 |           |   |   +-- globally RB advmod
 |           |   +-- event NN nn
 |           +-- namespace NN dobj
 |           |   +-- a DT det
 |           |   +-- name NN rcmod
 |           |       +-- inside IN prep
 |           |       |   +-- which WDT pobj
 |           |       +-- identifier NN nsubj
 |           |       |   +-- the DT det
 |           |       |   +-- attribute NN amod
 |           |       +-- is VBZ cop
 |           |       +-- a DT det
 |           |       +-- qualified JJ amod
 |           |           +-- fully RB advmod
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: 107 The event type identifier is left intact to facilitate event routing for unauthorised brokers .
Parse:
left VBN ROOT
 +-- identifier NN nsubjpass
 |   +-- 107 CD num
 |   +-- The DT det
 |   +-- event NN nn
 |   +-- type NN nn
 +-- is VBZ auxpass
 +-- intact JJ acomp
 +-- facilitate VB xcomp
 |   +-- to TO aux
 |   +-- routing VBG dobj
 |       +-- event NN nn
 |       +-- for IN prep
 |           +-- brokers NNS pobj
 |               +-- unauthorised JJ amod
 +-- . . punct
Input: The attribute identifiers are also left intact to allow authorised brokers to decrypt the attribute values with the correct keys .
Parse:
left VBN ROOT
 +-- identifiers NNS nsubjpass
 |   +-- The DT det
 |   +-- attribute NN amod
 +-- are VBP auxpass
 +-- also RB advmod
 +-- intact JJ acomp
 +-- allow VB xcomp
 |   +-- to TO aux
 |   +-- decrypt VB xcomp
 |       +-- brokers NNS nsubj
 |       |   +-- authorised VBN amod
 |       +-- to TO aux
 |       +-- values NNS dobj
 |       |   +-- the DT det
 |       |   +-- attribute NN amod
 |       +-- with IN prep
 |           +-- keys NNS pobj
 |               +-- the DT det
 |               +-- correct JJ amod
 +-- . . punct
Input: Brokers that are authorised to access some of the attributes in an event , can implement content based routing over the attributes that are accessible to them .
Parse:
implement VB ROOT
 +-- Brokers NNS nsubj
 |   +-- authorised VBN rcmod
 |       +-- that WDT nsubj
 |       +-- are VBP cop
 |       +-- access VB xcomp
 |           +-- to TO aux
 |           +-- some DT dobj
 |           |   +-- of IN prep
 |           |       +-- attributes NNS pobj
 |           |           +-- the DT det
 |           +-- in IN prep
 |               +-- event NN pobj
 |                   +-- an DT det
 +-- , , punct
 +-- can MD aux
 +-- content NN dobj
 |   +-- based VBN prep
 |       +-- routing VBG pcomp
 |           +-- over IN prep
 |               +-- attributes NNS pobj
 |                   +-- the DT det
 |                   +-- accessible JJ rcmod
 |                       +-- that WDT nsubj
 |                       +-- are VBP cop
 |                       +-- to IN prep
 |                           +-- them PRP pobj
 +-- . . punct
Input: An attribute encrypted event in transit consists of the event type identifier , a publication timestamp , and a set of attribute tuples
Parse:
consists VBZ ROOT
 +-- event NN nsubj
 |   +-- An DT det
 |   +-- encrypted VBN amod
 |   |   +-- attribute NN dep
 |   +-- in IN prep
 |       +-- transit NN pobj
 +-- of IN prep
     +-- identifier NN pobj
         +-- the DT det
         +-- type NN nn
         |   +-- event NN nn
         +-- , , punct
         +-- timestamp NN conj
         |   +-- a DT det
         |   +-- publication NN nn
         +-- and CC cc
         +-- set NN conj
             +-- a DT det
             +-- of IN prep
                 +-- tuples NNS pobj
                     +-- attribute NN amod
Input: Attribute tuples consist of an attribute identifier , ciphertext , and a message authentication tag
Parse:
consist VBP ROOT
 +-- tuples NNS nsubj
 |   +-- Attribute JJ amod
 +-- of IN prep
     +-- identifier NN pobj
         +-- an DT det
         +-- attribute NN amod
         +-- , , punct
         +-- ciphertext NN conj
         +-- and CC cc
         +-- tag NN conj
             +-- a DT det
             +-- message NN nn
             +-- authentication NN nn
Input: The attribute identifier is the SHA 1 hash of the attribute name used in the event type definition .
Parse:
hash NN ROOT
 +-- identifier NN nsubj
 |   +-- The DT det
 |   +-- attribute NN amod
 +-- is VBZ cop
 +-- the DT det
 +-- SHA NNP nn
 +-- 1 CD num
 +-- of IN prep
 |   +-- name NN pobj
 |       +-- the DT det
 |       +-- attribute NN nn
 |       +-- used VBN partmod
 |           +-- in IN prep
 |               +-- definition NN pobj
 |                   +-- the DT det
 |                   +-- type NN nn
 |                       +-- event NN nn
 +-- . . punct
Input: Using the attribute identifier in the published event instead of the attribute name prevents unauthorised parties from learning which attributes are included in the publication .
Parse:
prevents VBZ ROOT
 +-- Using VBG csubj
 |   +-- identifier NN dobj
 |   |   +-- the DT det
 |   |   +-- attribute NN amod
 |   +-- in IN prep
 |   |   +-- event NN pobj
 |   |       +-- the DT det
 |   |       +-- published VBN amod
 |   +-- of IN prep
 |       +-- instead RB advmod
 |       +-- name NN pobj
 |           +-- the DT det
 |           +-- attribute NN amod
 +-- parties NNS dobj
 |   +-- unauthorised JJ amod
 +-- from IN prep
 |   +-- learning NN pobj
 +-- included VBN dep
 |   +-- attributes NNS nsubjpass
 |   |   +-- which WDT det
 |   +-- are VBP auxpass
 |   +-- in IN prep
 |       +-- publication NN pobj
 |           +-- the DT det
 +-- . . punct
Input: Compared with event encryption , attribute encryption usually results in larger processing overheads , because each attribute is encrypted separately .
Parse:
results VBZ ROOT
 +-- Compared VBN prep
 |   +-- with IN pcomp
 |       +-- encryption NN pobj
 |           +-- event NN nn
 +-- , , punct
 +-- encryption NN nsubj
 |   +-- attribute NN nn
 +-- usually RB advmod
 +-- in IN prep
 |   +-- overheads NNS pobj
 |       +-- larger JJR amod
 |       +-- processing NN nn
 +-- encrypted VBN advcl
 |   +-- because IN mark
 |   +-- attribute NN nsubjpass
 |   |   +-- each DT det
 |   +-- is VBZ auxpass
 |   +-- separately RB advmod
 +-- . . punct
Input: In the encryption process the initialisation of the encryption algorithm takes a significant portion of the total running time of the algorithm .
Parse:
takes VBZ ROOT
 +-- In IN prep
 |   +-- process NN pobj
 |       +-- the DT det
 |       +-- encryption NN nn
 +-- initialisation NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- the DT det
 |           +-- encryption NN nn
 +-- portion NN dobj
 |   +-- a DT det
 |   +-- significant JJ amod
 |   +-- of IN prep
 |       +-- time NN pobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- running VBG nn
 |           +-- of IN prep
 |               +-- algorithm NN pobj
 |                   +-- the DT det
 +-- . . punct
Input: Once the algorithm is initialised , increasing the amount of data to be encrypted does not affect the running time very much .
Parse:
affect VB ROOT
 +-- initialised VBN advcl
 |   +-- Once IN mark
 |   +-- algorithm NN nsubjpass
 |   |   +-- the DT det
 |   +-- is VBZ auxpass
 +-- , , punct
 +-- increasing VBG csubj
 |   +-- amount NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- data NNS pobj
 |               +-- encrypted VBN infmod
 |                   +-- to TO aux
 |                   +-- be VB auxpass
 +-- does VBZ aux
 +-- not RB neg
 +-- time NN dobj
 |   +-- the DT det
 |   +-- running VBG nn
 +-- much RB advmod
 |   +-- very RB advmod
 +-- . . punct
Input: This disparity is emphasised in attribute encryption , where an encryption algorithm must be initialised for each attribute separately , and the amount of data encrypted is relatively small .
Parse:
emphasised VBN ROOT
 +-- disparity NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- encryption NN pobj
 |       +-- attribute NN nn
 |       +-- , , punct
 |       +-- initialised VBN rcmod
 |           +-- where WRB advmod
 |           +-- encryption NN nsubj
 |           |   +-- an DT det
 |           |   +-- algorithm PRP dep
 |           +-- must MD aux
 |           +-- be VB cop
 |           +-- for IN prep
 |           |   +-- attribute NN pobj
 |           |       +-- each DT det
 |           +-- separately RB advmod
 +-- , , punct
 +-- and CC cc
 +-- small JJ conj
 |   +-- amount NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- data NNS pobj
 |   |           +-- encrypted VBN partmod
 |   +-- is VBZ cop
 |   +-- relatively RB advmod
 +-- . . punct
Input: As a result attribute encryption incurs larger processing overheads when compared with event encryption which can be clearly seen from the performance results in Sect .
Parse:
incurs NNS ROOT
 +-- encryption NN nsubj
 |   +-- attribute NN amod
 |       +-- As IN prep
 |           +-- result NN pobj
 |               +-- a DT det
 +-- overheads NNS dobj
 |   +-- larger JJR amod
 |   +-- processing NN nn
 +-- compared VBN advcl
 |   +-- when WRB advmod
 |   +-- with IN prep
 |       +-- encryption NN pobj
 |           +-- event NN nn
 |           +-- seen VBN rcmod
 |               +-- which WDT nsubjpass
 |               +-- can MD aux
 |               +-- be VB auxpass
 |               +-- clearly RB advmod
 |               +-- from IN prep
 |                   +-- results NNS pobj
 |                       +-- the DT det
 |                       +-- performance NN nn
 |                       +-- in IN prep
 |                           +-- Sect NNP pobj
 +-- . . punct
Input: 5 .
Parse:
5 CD ROOT
 +-- . . punct
Input: The advantage of attribute encryption is that the type owner is able to control access to the event type at the attribute level .
Parse:
is VBZ ROOT
 +-- advantage NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- attribute NN pcomp
 |           +-- encryption NN dobj
 +-- able JJ ccomp
 |   +-- that IN mark
 |   +-- owner NN nsubj
 |   |   +-- the DT det
 |   |   +-- type NN nn
 |   +-- is VBZ cop
 |   +-- control VB xcomp
 |       +-- to TO aux
 |       +-- access NN dobj
 |       |   +-- to IN prep
 |       |       +-- type NN pobj
 |       |           +-- the DT det
 |       |           +-- event NN nn
 |       +-- at IN prep
 |           +-- level NN pobj
 |               +-- the DT det
 |               +-- attribute JJ amod
 +-- . . punct
Input: The event type owner can therefore allow clients to have different levels of access to the same event type .
Parse:
allow VB ROOT
 +-- owner NN nsubj
 |   +-- The DT det
 |   +-- event NN nn
 |   +-- type NN nn
 +-- can MD aux
 +-- therefore RB advmod
 +-- have VB xcomp
 |   +-- clients NNS nsubj
 |   +-- to TO aux
 |   +-- levels NNS dobj
 |       +-- different JJ amod
 |       +-- of IN prep
 |           +-- access NN pobj
 |               +-- to IN prep
 |                   +-- type NN pobj
 |                       +-- the DT det
 |                       +-- same JJ amod
 |                       +-- event NN nn
 +-- . . punct
Input: Also , attribute level encryption enables content based routing in cases where an intermediate broker has access only to some of the attributes of the event , thus reducing the overall impact of event delivery on the broker network .
Parse:
enables VBZ ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- encryption NN nsubj
 |   +-- level NN nn
 |       +-- attribute JJ amod
 +-- routing NN dobj
 |   +-- based VBN amod
 |       +-- content NN dep
 +-- in IN prep
 |   +-- cases NNS pobj
 |       +-- has VBZ rcmod
 |           +-- where WRB advmod
 |           +-- broker NN nsubj
 |           |   +-- an DT det
 |           |   +-- intermediate JJ amod
 |           +-- access NN dobj
 |           |   +-- to IN prep
 |           |       +-- only RB advmod
 |           |       +-- some DT pobj
 |           |           +-- of IN prep
 |           |               +-- attributes NNS pobj
 |           |                   +-- the DT det
 |           |                   +-- of IN prep
 |           |                       +-- event NN pobj
 |           |                           +-- the DT det
 |           +-- , , punct
 |           +-- reducing VBG partmod
 |               +-- thus RB advmod
 |               +-- impact NN dobj
 |                   +-- the DT det
 |                   +-- overall JJ amod
 |                   +-- of IN prep
 |                       +-- delivery NN pobj
 |                           +-- event NN nn
 |                           +-- on IN prep
 |                               +-- network NN pobj
 |                                   +-- the DT det
 |                                   +-- broker NN nn
 +-- . . punct
Input: Therefore the choice between event and attribute encryption is a trade off between expressiveness and performance , and depends on the requirements of the distributed application .
Parse:
trade NN ROOT
 +-- Therefore RB advmod
 +-- choice NN nsubj
 |   +-- the DT det
 |   +-- between IN prep
 |       +-- event NN pobj
 |           +-- and CC cc
 |           +-- attribute NN conj
 |               +-- encryption NN dobj
 +-- is VBZ cop
 +-- a DT det
 +-- off RP prt
 +-- between IN prep
 |   +-- expressiveness NN pobj
 |       +-- and CC cc
 |       +-- performance NN conj
 +-- , , punct
 +-- and CC cc
 +-- depends VBZ conj
 |   +-- on IN prep
 |       +-- requirements NNS pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- application NN pobj
 |                   +-- the DT det
 |                   +-- distributed VBN amod
 +-- . . punct
Input: The expressiveness provided by attribute encryption can be emulated by introducing a new event type for each group of subscribers with the same authorisation .
Parse:
emulated VBN ROOT
 +-- expressiveness NN nsubjpass
 |   +-- The DT det
 |   +-- provided VBN partmod
 |       +-- by IN prep
 |           +-- encryption NN pobj
 |               +-- attribute NN amod
 +-- can MD aux
 +-- be VB auxpass
 +-- by IN prep
 |   +-- introducing VBG pcomp
 |       +-- type NN dobj
 |       |   +-- a DT det
 |       |   +-- new JJ amod
 |       |   +-- event NN nn
 |       |   +-- for IN prep
 |       |       +-- group NN pobj
 |       |           +-- each DT det
 |       |           +-- of IN prep
 |       |               +-- subscribers NNS pobj
 |       +-- with IN prep
 |           +-- authorisation NN pobj
 |               +-- the DT det
 |               +-- same JJ amod
 +-- . . punct
Input: The publisher would then publish an instance of each of these types instead of publishing just a combined event .
Parse:
publish VB ROOT
 +-- publisher NN nsubj
 |   +-- The DT det
 +-- would MD aux
 +-- then RB advmod
 +-- instance NN dobj
 |   +-- an DT det
 |   +-- of IN prep
 |       +-- each DT pobj
 |           +-- of IN prep
 |               +-- types NNS pobj
 |                   +-- these DT det
 +-- of IN prep
 |   +-- instead RB advmod
 |   +-- publishing VBG pcomp
 |       +-- event NN dobj
 |           +-- just RB advmod
 |           +-- a DT det
 |           +-- combined JJ amod
 +-- . . punct
Input: For example , in our London police network , the congestion control cameras would have to publish one event for the CCS and another for the detective .
Parse:
have VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- in IN prep
 |   +-- network NN pobj
 |       +-- our PRP$ poss
 |       +-- London NNP nn
 |       +-- police NN nn
 +-- cameras NNS nsubj
 |   +-- the DT det
 |   +-- control NN nn
 |       +-- congestion NN nn
 +-- would MD aux
 +-- publish VB xcomp
 |   +-- to TO aux
 |   +-- event NN dobj
 |       +-- one CD num
 |       +-- for IN prep
 |       |   +-- CCS NNP pobj
 |       |       +-- the DT det
 |       +-- and CC cc
 |       +-- another DT conj
 |           +-- for IN prep
 |               +-- detective NN pobj
 |                   +-- the DT det
 +-- . . punct
Input: This approach could become difficult to manage if the attributes have a variety of security properties , since a large number of event types would be required and policies and subscriptions may change dynamically .
Parse:
difficult JJ ROOT
 +-- approach NN nsubj
 |   +-- This DT det
 +-- could MD aux
 +-- become VB cop
 +-- manage VB ccomp
 |   +-- to TO aux
 +-- have VBP advcl
 |   +-- if IN mark
 |   +-- attributes NNS nsubj
 |   |   +-- the DT det
 |   +-- variety NN dobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- properties NNS pobj
 |               +-- security NN nn
 +-- , , punct
 +-- required VBN advcl
 |   +-- since IN mark
 |   +-- number NN nsubjpass
 |   |   +-- a DT det
 |   |   +-- large JJ amod
 |   |   +-- of IN prep
 |   |       +-- types NNS pobj
 |   |           +-- event NN nn
 |   +-- would MD aux
 |   +-- be VB auxpass
 |   +-- and CC cc
 |   +-- change VB conj
 |       +-- policies NNS nsubj
 |       |   +-- and CC cc
 |       |   +-- subscriptions NNS conj
 |       +-- may MD aux
 |       +-- dynamically RB advmod
 +-- . . punct
Input: This approach creates a large number of extra events that must be routed through the network , as is shown in Sect .
Parse:
creates VBZ ROOT
 +-- approach NN nsubj
 |   +-- This DT det
 +-- number NN dobj
 |   +-- a DT det
 |   +-- large JJ amod
 |   +-- of IN prep
 |       +-- events NNS pobj
 |           +-- extra JJ amod
 |           +-- routed VBN rcmod
 |               +-- that WDT nsubjpass
 |               +-- must MD aux
 |               +-- be VB auxpass
 |               +-- through IN prep
 |               |   +-- network NN pobj
 |               |       +-- the DT det
 |               +-- , , punct
 |               +-- shown VBN advcl
 |                   +-- as IN mark
 |                   +-- is VBZ auxpass
 |                   +-- in IN prep
 |                       +-- Sect NNP pobj
 +-- . . punct
Input: 5.3 .
Parse:
5.3 CD ROOT
 +-- . . punct
Input: 3.3 Encrypting Subscriptions In order to fully protect the confidentiality of event content we must also encrypt subscriptions .
Parse:
encrypt VB ROOT
 +-- 3.3 CD dep
 |   +-- Encrypting VBG dep
 |       +-- Subscriptions NNPS dobj
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- protect VB infmod
 |           +-- to TO aux
 |           +-- fully RB advmod
 |           +-- confidentiality NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- content NN pobj
 |                       +-- event NN nn
 +-- we PRP nsubj
 +-- must MD aux
 +-- also RB advmod
 +-- subscriptions NNS dobj
 +-- . . punct
Input: Encrypted subscriptions guarantee
Parse:
guarantee VBP ROOT
 +-- subscriptions NNS nsubj
     +-- Encrypted VBN amod
Input: For example , in the first case an unauthorised broker can create subscriptions with appropriately chosen filters , route them towards the root of the event dissemination tree , and monitor which events were delivered to it as matching the subscription .
Parse:
create VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- in IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- first JJ amod
 +-- broker NN nsubj
 |   +-- an DT det
 |   +-- unauthorised JJ amod
 +-- can MD aux
 +-- subscriptions NNS dobj
 |   +-- with IN prep
 |       +-- filters NNS pobj
 |           +-- chosen VBN amod
 |               +-- appropriately RB advmod
 +-- route VB conj
 |   +-- them PRP dobj
 |   +-- towards IN prep
 |       +-- root NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- tree NN pobj
 |                   +-- the DT det
 |                   +-- event NN nn
 |                   +-- dissemination NN nn
 +-- and CC cc
 +-- monitor VB conj
 |   +-- delivered VBN ccomp
 |       +-- which WDT mark
 |       +-- events NNS nsubjpass
 |       +-- were VBD auxpass
 |       +-- to IN prep
 |       |   +-- it PRP pobj
 |       +-- as IN prep
 |           +-- matching VBG pcomp
 |               +-- subscription NN dobj
 |                   +-- the DT det
 +-- . . punct
Input: The fact that the event matched the subscription would leak information to the broker about the event content even if the event was still encrypted .
Parse:
fact NN ROOT
 +-- The DT det
 +-- leak VB ccomp
 |   +-- that IN mark
 |   +-- event NN nsubj
 |   |   +-- the DT det
 |   |   +-- matched VBD partmod
 |   |       +-- subscription NN dobj
 |   |           +-- the DT det
 |   +-- would MD aux
 |   +-- information NN dobj
 |   +-- to IN prep
 |   |   +-- broker NN pobj
 |   |       +-- the DT det
 |   +-- about IN prep
 |   |   +-- content NN pobj
 |   |       +-- the DT det
 |   |       +-- event NN nn
 |   +-- encrypted VBN advcl
 |       +-- even RB advmod
 |       +-- if IN mark
 |       +-- event NN nsubjpass
 |       |   +-- the DT det
 |       +-- was VBD auxpass
 |       +-- still RB advmod
 +-- . . punct
Input: In the second case , even if an unauthorised broker was unable to create subscriptions itself , it could still look at subscriptions that were routed through it , take note of the filters on those subscriptions , and monitor which events are delivered to it by upstream brokers as matching the subscription filters .
Parse:
look VB ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- second JJ amod
 +-- , , punct
 +-- unable JJ advcl
 |   +-- even RB advmod
 |   +-- if IN mark
 |   +-- broker NN nsubj
 |   |   +-- an DT det
 |   |   +-- unauthorised JJ amod
 |   +-- was VBD cop
 |   +-- create VB xcomp
 |       +-- to TO aux
 |       +-- subscriptions NNS iobj
 |       +-- itself PRP dobj
 +-- it PRP nsubj
 +-- could MD aux
 +-- still RB advmod
 +-- at IN prep
 |   +-- subscriptions NNS pobj
 |       +-- routed VBN rcmod
 |           +-- that WDT nsubjpass
 |           +-- were VBD auxpass
 |           +-- through IN prep
 |               +-- it PRP pobj
 +-- take VB conj
 |   +-- note NN dobj
 |   |   +-- of IN prep
 |   |       +-- filters NNS pobj
 |   |           +-- the DT det
 |   +-- on IN prep
 |       +-- subscriptions NNS pobj
 |           +-- those DT det
 +-- and CC cc
 +-- monitor VB conj
 |   +-- delivered VBN ccomp
 |       +-- which WDT mark
 |       +-- events NNS nsubjpass
 |       +-- are VBP auxpass
 |       +-- to IN prep
 |       |   +-- it PRP pobj
 |       +-- by IN prep
 |       |   +-- brokers NNS pobj
 |       |       +-- upstream JJ amod
 |       +-- as IN prep
 |           +-- matching VBG pcomp
 |               +-- filters NNS dobj
 |                   +-- the DT det
 |                   +-- subscription NN nn
 +-- . . punct
Input: This would again reveal information about the event content to the unauthorised broker .
Parse:
reveal VB ROOT
 +-- This DT nsubj
 +-- would MD aux
 +-- again RB advmod
 +-- information NN dobj
 |   +-- about IN prep
 |       +-- content NN pobj
 |           +-- the DT det
 |           +-- event NN nn
 |           +-- to IN prep
 |               +-- broker NN pobj
 |                   +-- the DT det
 |                   +-- unauthorised JJ amod
 +-- . . punct
Input: In the case of encrypting complete events , we also encrypt the complete subscription filter .
Parse:
encrypt VBP ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- encrypting VBG pcomp
 |               +-- events NNS dobj
 |                   +-- complete JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- also RB advmod
 +-- filter NN dobj
 |   +-- the DT det
 |   +-- complete JJ amod
 |   +-- subscription NN nn
 +-- . . punct
Input: The event type identifier in the subscription must be left intact to allow brokers to route events based on their topic when they are not authorised to access the filter .
Parse:
left VBN ROOT
 +-- identifier NN nsubjpass
 |   +-- The DT det
 |   +-- type NN nn
 |   |   +-- event NN nn
 |   +-- in IN prep
 |       +-- subscription NN pobj
 |           +-- the DT det
 +-- must MD aux
 +-- be VB auxpass
 +-- intact JJ acomp
 +-- allow VB xcomp
 |   +-- to TO aux
 |   +-- route NN xcomp
 |       +-- brokers NNS nsubj
 |       +-- to TO aux
 |       +-- events NNS dobj
 |       |   +-- based VBN partmod
 |       |       +-- on IN prep
 |       |           +-- topic NN pobj
 |       |               +-- their PRP$ poss
 |       +-- authorised VBN advcl
 |           +-- when WRB advmod
 |           +-- they PRP nsubj
 |           +-- are VBP cop
 |           +-- not RB neg
 |           +-- access VB xcomp
 |               +-- to TO aux
 |               +-- filter NN dobj
 |                   +-- the DT det
 +-- . . punct
Input: In such cases the unauthorised broker is required to assume that events of such a type match all filter expressions .
Parse:
required VBN ROOT
 +-- In IN prep
 |   +-- cases NNS pobj
 |       +-- such JJ amod
 +-- broker NN nsubjpass
 |   +-- the DT det
 |   +-- unauthorised JJ amod
 +-- is VBZ auxpass
 +-- assume VB xcomp
 |   +-- to TO aux
 |   +-- match NN ccomp
 |       +-- that IN mark
 |       +-- events NNS nsubj
 |       |   +-- of IN prep
 |       |       +-- type NN pobj
 |       |           +-- such PDT predet
 |       |           +-- a DT det
 |       +-- expressions NNS dobj
 |           +-- all DT det
 |           +-- filter NN nn
 +-- . . punct
Input: Each attribute filter is encrypted individually , much as when encrypting a publication .
Parse:
encrypted VBN ROOT
 +-- filter NN nsubjpass
 |   +-- Each DT det
 |   +-- attribute NN nn
 +-- is VBZ auxpass
 +-- individually RB advmod
 +-- , , punct
 +-- as IN prep
 |   +-- much JJ advmod
 |   +-- encrypting VBG pcomp
 |       +-- when WRB advmod
 |       +-- publication NN dobj
 |           +-- a DT det
 +-- . . punct
Input: In addition to the event type identifier the attribute identifiers are also left intact to allow authorised brokers to decrypt those filters that they have access to , and route the event based on its matching the decrypted filters .
Parse:
In IN ROOT
 +-- addition NN pobj
 |   +-- to IN prep
 |       +-- type NN pobj
 |           +-- the DT det
 |           +-- event NN nn
 |           +-- identifier JJR amod
 |           +-- left VBN rcmod
 |               +-- identifiers NNS nsubjpass
 |               |   +-- the DT det
 |               |   +-- attribute NN amod
 |               +-- are VBP auxpass
 |               +-- also RB advmod
 |               +-- intact JJ acomp
 |               +-- allow VB xcomp
 |                   +-- to TO aux
 |                   +-- decrypt VB xcomp
 |                       +-- brokers NNS nsubj
 |                       |   +-- authorised VBN amod
 |                       +-- to TO aux
 |                       +-- filters NNS dobj
 |                           +-- those DT det
 |                           +-- have VBP rcmod
 |                               +-- that IN dobj
 |                               +-- they PRP nsubj
 |                               +-- access NN dobj
 |                                   +-- to IN prep
 +-- , , punct
 +-- and CC cc
 +-- route VB conj
 |   +-- event NN dobj
 |       +-- the DT det
 +-- based VBN prep
 |   +-- on IN pcomp
 |       +-- matching VBG pcomp
 |           +-- its PRP$ nsubj
 |           +-- filters NNS dobj
 |               +-- the DT det
 |               +-- decrypted VBN amod
 +-- . . punct
Input: 3.4 Avoiding Unnecessary Cryptographic Operations Encrypting the event content is not necessary if the current broker and the next broker down the event dissemination tree have the same credentials with respect to the event type at hand .
Parse:
necessary JJ ROOT
 +-- 3.4 CD nsubj
 |   +-- Avoiding VBG partmod
 |       +-- Operations NNPS dobj
 |           +-- Unnecessary NNP nn
 |           +-- Cryptographic NNP nn
 |           +-- Encrypting VBG partmod
 |               +-- content NN dobj
 |                   +-- the DT det
 |                   +-- event NN nn
 +-- is VBZ cop
 +-- not RB neg
 +-- have VBP advcl
 |   +-- if IN mark
 |   +-- broker NN nsubj
 |   |   +-- the DT det
 |   |   +-- current JJ amod
 |   |   +-- and CC cc
 |   |   +-- broker NN conj
 |   |       +-- the DT det
 |   |       +-- next JJ amod
 |   |       +-- down RP prep
 |   |           +-- tree NN pobj
 |   |               +-- the DT det
 |   |               +-- event NN nn
 |   |               +-- dissemination NN nn
 |   +-- credentials NNS dobj
 |       +-- the DT det
 |       +-- same JJ amod
 |       +-- with IN prep
 |           +-- respect NN pobj
 |               +-- to IN prep
 |                   +-- type NN pobj
 |                       +-- the DT det
 |                       +-- event NN nn
 |                       +-- at IN prep
 |                           +-- hand NN pobj
 +-- . . punct
Input: For example , one can assume that all brokers inside an organisation would share the same credentials and therefore , as long as the next broker is a member of the same domain , the event can be routed to it in plaintext .
Parse:
assume VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- one PRP nsubj
 +-- can MD aux
 +-- share VB ccomp
 |   +-- that IN mark
 |   +-- brokers NNS nsubj
 |   |   +-- all DT det
 |   |   +-- inside IN prep
 |   |       +-- organisation NN pobj
 |   |           +-- an DT det
 |   +-- would MD aux
 |   +-- credentials NNS dobj
 |   |   +-- the DT det
 |   |   +-- same JJ amod
 |   +-- and CC cc
 |   +-- therefore RB advmod
 |   +-- , , punct
 |   +-- long RB advmod
 |   |   +-- as RB advmod
 |   |   +-- member NN ccomp
 |   |       +-- as IN mark
 |   |       +-- broker NN nsubj
 |   |       |   +-- the DT det
 |   |       |   +-- next JJ amod
 |   |       +-- is VBZ cop
 |   |       +-- a DT det
 |   |       +-- of IN prep
 |   |           +-- domain NN pobj
 |   |               +-- the DT det
 |   |               +-- same JJ amod
 |   +-- routed VBN parataxis
 |       +-- event NN nsubjpass
 |       |   +-- the DT det
 |       +-- can MD aux
 |       +-- be VB auxpass
 |       +-- to IN prep
 |       |   +-- it PRP pobj
 |       +-- in IN prep
 |           +-- plaintext NN pobj
 +-- . . punct
Input: With attribute encryption it is possible that the neighbouring broker is authorised to access a subset of the decrypted attributes , in which case those attributes that the broker is not authorised to access would be passed to it encrypted .
Parse:
possible JJ ROOT
 +-- With IN prep
 |   +-- attribute NN pcomp
 |       +-- encryption NN dobj
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- authorised VBN ccomp
 |   +-- that IN mark
 |   +-- broker NN nsubj
 |   |   +-- the DT det
 |   |   +-- neighbouring NN amod
 |   +-- is VBZ cop
 |   +-- access VB xcomp
 |       +-- to TO aux
 |       +-- subset NN dobj
 |       |   +-- a DT det
 |       |   +-- of IN prep
 |       |       +-- attributes NNS pobj
 |       |           +-- the DT det
 |       |           +-- decrypted VBN amod
 |       +-- , , punct
 |       +-- in IN prep
 |           +-- case NN pobj
 |               +-- which WDT det
 |               +-- passed VBN ccomp
 |                   +-- attributes NNS nsubjpass
 |                   |   +-- those DT det
 |                   |   +-- authorised VBN ccomp
 |                   |       +-- that WDT mark
 |                   |       +-- broker NN nsubj
 |                   |       |   +-- the DT det
 |                   |       +-- is VBZ cop
 |                   |       +-- not RB neg
 |                   |       +-- to TO prep
 |                   |           +-- access NN pobj
 |                   +-- would MD aux
 |                   +-- be VB auxpass
 |                   +-- encrypted VBN advcl
 |                       +-- to IN mark
 |                       +-- it PRP nsubj
 +-- . . punct
Input: In order to know when it is safe to pass the event in plaintext form , the brokers exchange credentials as part of a handshake when they connect to each other .
Parse:
exchange NN ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- know VB infmod
 |           +-- to TO aux
 |           +-- safe JJ advcl
 |               +-- when WRB advmod
 |               +-- it PRP nsubj
 |               +-- is VBZ cop
 |               +-- pass VB xcomp
 |                   +-- to TO aux
 |                   +-- event NN dobj
 |                       +-- the DT det
 |                       +-- in IN prep
 |                           +-- form NN pobj
 |                               +-- plaintext NN nn
 +-- , , punct
 +-- brokers NNS nsubj
 |   +-- the DT det
 +-- credentials NNS dobj
 +-- as IN prep
 |   +-- part NN pobj
 |       +-- of IN prep
 |           +-- handshake NN pobj
 |               +-- a DT det
 +-- connect VBP advcl
 |   +-- when WRB advmod
 |   +-- they PRP nsubj
 |   +-- to IN prep
 |       +-- other JJ pobj
 |           +-- each DT det
 +-- . . punct
Input: In cases when the brokers are able to verify each others '' credentials , they will add them to the routing table for future reference .
Parse:
add VB ROOT
 +-- In IN prep
 |   +-- cases NNS pobj
 +-- able JJ advcl
 |   +-- when WRB advmod
 |   +-- brokers NNS nsubj
 |   |   +-- the DT det
 |   +-- are VBP cop
 |   +-- verify VB xcomp
 |       +-- to TO aux
 |       +-- credentials NNS dobj
 |           +-- each DT det
 |           +-- others NNS amod
 |           +-- '' '' punct
 +-- , , punct
 +-- they PRP nsubj
 +-- will MD aux
 +-- them PRP dobj
 +-- to IN prep
 |   +-- table NN pobj
 |       +-- the DT det
 |       +-- routing NN nn
 +-- for IN prep
 |   +-- reference NN pobj
 |       +-- future JJ amod
 +-- . . punct
Input: If a broker acquires new credentials after the initial handshake , it will present these new credentials to its neighbours while in session .
Parse:
present VB ROOT
 +-- acquires VBZ advcl
 |   +-- If IN mark
 |   +-- broker NN nsubj
 |   |   +-- a DT det
 |   +-- credentials NNS dobj
 |   |   +-- new JJ amod
 |   +-- after IN prep
 |       +-- handshake NN pobj
 |           +-- the DT det
 |           +-- initial JJ amod
 +-- , , punct
 +-- it PRP nsubj
 +-- will MD aux
 +-- credentials NNS dobj
 |   +-- these DT det
 |   +-- new JJ amod
 +-- to IN prep
 |   +-- neighbours NNS pobj
 |       +-- its PRP$ poss
 +-- in IN advcl
 |   +-- while IN mark
 |   +-- session NN pobj
 +-- . . punct
Input: Regardless of its neighbouring brokers , the PHB will always encrypt the event content , because it is cheaper to encrypt the event once at the root of the event dissemination tree .
Parse:
encrypt VB ROOT
 +-- Regardless RB advmod
 |   +-- of IN prep
 |       +-- brokers NNS pobj
 |           +-- its PRP$ poss
 |           +-- neighbouring VBG amod
 +-- , , punct
 +-- PHB NNP nsubj
 |   +-- the DT det
 +-- will MD aux
 +-- always RB advmod
 +-- content NN dobj
 |   +-- the DT det
 |   +-- event NN nn
 +-- cheaper JJR advcl
 |   +-- because IN mark
 |   +-- it PRP nsubj
 |   +-- is VBZ cop
 |   +-- encrypt VB xcomp
 |       +-- to TO aux
 |       +-- event NN dobj
 |       |   +-- the DT det
 |       +-- once RB advmod
 |       +-- at IN prep
 |           +-- root NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- tree NN pobj
 |                       +-- the DT det
 |                       +-- event NN nn
 |                       +-- dissemination NN nn
 +-- . . punct
Input: In Hermes the rendezvous node for each event type is selected uniformly randomly -LRB- the event type name is hashed with the SHA 1 hash algorithm to produce the event type 108 PHB IBIB IB SHB RN IB SHB Figure 2
Parse:
selected VBN ROOT
 +-- In IN prep
 |   +-- Hermes NNS pobj
 +-- node NN nsubjpass
 |   +-- the DT det
 |   +-- rendezvous JJ nn
 |   +-- for IN prep
 |       +-- type NN pobj
 |           +-- each DT det
 |           +-- event NN nn
 +-- is VBZ auxpass
 +-- uniformly RB advmod
 +-- randomly RB advmod
 +-- hashed VBN parataxis
     +-- -LRB- -LRB- punct
     +-- name NN nsubj
     |   +-- the DT det
     |   +-- event NN nn
     |   +-- type NN nn
     +-- is VBZ cop
     +-- with IN prep
     |   +-- algorithm NN pobj
     |       +-- the DT det
     |       +-- SHA NNP nn
     |       +-- hash NN nn
     |           +-- 1 CD num
     +-- produce VB xcomp
         +-- to TO aux
         +-- type NN dobj
             +-- the DT det
             +-- event NN nn
             +-- Figure NN dep
                 +-- 108 CD num
                 +-- PHB NNP nn
                 +-- IBIB NNP nn
                 +-- IB NNP nn
                 +-- SHB NNP nn
                 +-- RN NNP nn
                 +-- SHB NN nn
                 +-- 2 CD num
Input: Therefore it is probable that the rendezvous node will reside outside the current domain .
Parse:
probable JJ ROOT
 +-- Therefore RB advmod
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- reside VB ccomp
 |   +-- that IN mark
 |   +-- node NN nsubj
 |   |   +-- the DT det
 |   |   +-- rendezvous NN nn
 |   +-- will MD aux
 |   +-- outside IN prep
 |       +-- domain NN pobj
 |           +-- the DT det
 |           +-- current JJ amod
 +-- . . punct
Input: This situation is illustrated in the event dissemination tree in Fig .
Parse:
illustrated VBN ROOT
 +-- situation NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- tree NN pobj
 |       +-- the DT det
 |       +-- event NN nn
 |       +-- dissemination NN nn
 |       +-- in IN prep
 |           +-- Fig NNP pobj
 +-- . . punct
Input: 2 .
Parse:
2 LS ROOT
 +-- . . punct
Input: So even with domain internal applications , where the event can be routed from the publisher to all subscribers in plaintext form , the event content will in most cases have to be encrypted for it to be routed to the rendezvous node .
Parse:
have VBP ROOT
 +-- So RB advmod
 +-- with IN prep
 |   +-- even RB advmod
 |   +-- applications NNS pobj
 |       +-- domain NN nn
 |       +-- internal JJ amod
 |       +-- , , punct
 |       +-- routed VBN rcmod
 |           +-- where WRB advmod
 |           +-- event NN nsubjpass
 |           |   +-- the DT det
 |           +-- can MD aux
 |           +-- be VB auxpass
 |           +-- from IN prep
 |           |   +-- publisher NN pobj
 |           |       +-- the DT det
 |           +-- to IN prep
 |               +-- subscribers NNS pobj
 |                   +-- all DT det
 |                   +-- in IN prep
 |                       +-- form NN pobj
 |                           +-- plaintext NN nn
 +-- , , punct
 +-- content NN nsubj
 |   +-- the DT det
 |   +-- event NN nn
 +-- will MD aux
 +-- in IN prep
 |   +-- cases NNS pobj
 |       +-- most JJS amod
 +-- encrypted VBN xcomp
 |   +-- to TO aux
 |   +-- be VB auxpass
 |   +-- routed VBN advcl
 |       +-- for IN mark
 |       +-- it PRP nsubjpass
 |       +-- to TO aux
 |       +-- be VB auxpass
 |       +-- to IN prep
 |           +-- node NN pobj
 |               +-- the DT det
 |               +-- rendezvous NN nn
 +-- . . punct
Input: To avoid unnecessary decryptions , we attach a plaintext content cache to encrypted events .
Parse:
attach VBP ROOT
 +-- avoid VB advcl
 |   +-- To TO aux
 |   +-- decryptions NNS dobj
 |       +-- unnecessary JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- cache NN dobj
 |   +-- a DT det
 |   +-- plaintext NN nn
 |   +-- content NN nn
 +-- to TO prep
 |   +-- events NNS pobj
 |       +-- encrypted VBN amod
 +-- . . punct
Input: A broker fills the cache with content that it has decrypted , for example , in order to filter on the content .
Parse:
fills VBZ ROOT
 +-- broker NN nsubj
 |   +-- A DT det
 +-- cache NN dobj
 |   +-- the DT det
 +-- with IN prep
 |   +-- content NN pobj
 |       +-- decrypted VBN ccomp
 |           +-- that IN mark
 |           +-- it PRP nsubj
 |           +-- has VBZ aux
 |           +-- , , punct
 |           +-- for IN prep
 |           |   +-- example NN pobj
 |           +-- in IN prep
 |               +-- order NN pobj
 |                   +-- filter VB infmod
 |                       +-- to TO aux
 |                       +-- on IN prep
 |                           +-- content NN pobj
 |                               +-- the DT det
 +-- . . punct
Input: The cache is accessed by the broker when it delivers an event to a local subscriber after first seeing if the event matches the subscription filter , but the broker also sends the cache to the next broker with the encrypted event .
Parse:
accessed VBN ROOT
 +-- cache NN nsubjpass
 |   +-- The DT det
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- broker NN pobj
 |       +-- the DT det
 +-- delivers VBZ advcl
 |   +-- when WRB advmod
 |   +-- it PRP nsubj
 |   +-- event NN dobj
 |   |   +-- an DT det
 |   +-- to IN prep
 |   |   +-- subscriber NN pobj
 |   |       +-- a DT det
 |   |       +-- local JJ amod
 |   +-- after IN prep
 |   |   +-- first JJ pobj
 |   +-- seeing VBG xcomp
 |       +-- matches VBZ advcl
 |           +-- if IN mark
 |           +-- event NN nsubj
 |           |   +-- the DT det
 |           +-- filter NN dobj
 |               +-- the DT det
 |               +-- subscription NN nn
 +-- , , punct
 +-- but CC cc
 +-- sends VBZ conj
 |   +-- broker NN nsubj
 |   |   +-- the DT det
 |   +-- also RB advmod
 |   +-- cache NN dobj
 |   |   +-- the DT det
 |   +-- to IN prep
 |   |   +-- broker NN pobj
 |   |       +-- the DT det
 |   |       +-- next JJ amod
 |   +-- with IN prep
 |       +-- event NN pobj
 |           +-- the DT det
 |           +-- encrypted VBN amod
 +-- . . punct
Input: The next broker can look the attribute up from the cache instead of having to decrypt it .
Parse:
look VB ROOT
 +-- broker NN nsubj
 |   +-- The DT det
 |   +-- next JJ amod
 +-- can MD aux
 +-- attribute NN dobj
 |   +-- the DT det
 +-- up RP prt
 +-- from IN prep
 |   +-- cache NN pobj
 |       +-- the DT det
 +-- of IN prep
 |   +-- instead RB advmod
 |   +-- having VBG pcomp
 |       +-- decrypt VB xcomp
 |           +-- to TO aux
 |           +-- it PRP dobj
 +-- . . punct
Input: If the event is being sent to an unauthorised broker , the cache will be discarded before the event is sent .
Parse:
discarded VBN ROOT
 +-- sent VBN advcl
 |   +-- before IN mark
 |   +-- event NN nsubjpass
 |   |   +-- the DT det
 |   +-- is VBZ auxpass
 +-- , , punct
 +-- cache NN nsubjpass
 |   +-- the DT det
 +-- will MD aux
 +-- be VB auxpass
 +-- . . punct
Input: Obviously sending the cache with the encrypted event will add to the communication cost , but this is outweighed by the saving in encryption decryption processing .
Parse:
add VB ROOT
 +-- sending VBG csubj
 |   +-- Obviously RB advmod
 |   +-- cache NN dobj
 |   |   +-- the DT det
 |   +-- with IN prep
 |       +-- event NN pobj
 |           +-- the DT det
 |           +-- encrypted VBN amod
 +-- will MD aux
 +-- to IN prep
 |   +-- cost NN pobj
 |       +-- the DT det
 |       +-- communication NN nn
 +-- , , punct
 +-- but CC cc
 +-- outweighed VBN conj
 |   +-- this DT nsubjpass
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- saving NN pobj
 |           +-- the DT det
 |           +-- in IN prep
 |               +-- processing NN pobj
 |                   +-- encryption NN nn
 |                   +-- decryption NN nn
 +-- . . punct
Input: In Fig .
Parse:
In IN ROOT
 +-- Fig NNP pobj
 +-- . . punct
Input: 3 we see two separate cached plaintext streams accompanying an event depending on the inter broker relationships in two different domains .
Parse:
see VBP ROOT
 +-- 3 CD nsubj
 +-- we PRP nsubj
 +-- streams NNS dobj
 |   +-- two CD num
 |   +-- separate JJ amod
 |   +-- cached VBN amod
 |   +-- plaintext NN nn
 |   +-- accompanying VBG partmod
 |       +-- event NN dobj
 |           +-- an DT det
 |           +-- depending VBG prep
 |               +-- on IN pcomp
 |                   +-- relationships NNS pobj
 |                       +-- the DT det
 |                       +-- inter NN nn
 |                       +-- broker NN nn
 |                       +-- in IN prep
 |                           +-- domains NNS pobj
 |                               +-- two CD num
 |                               +-- different JJ amod
 +-- . . punct
Input: We show in Sect .
Parse:
show VBP ROOT
 +-- We PRP nsubj
 +-- in IN prep
 |   +-- Sect NNP pobj
 +-- . . punct
Input: 5.2 that the overhead of sending encrypted messages with a full plaintext cache incurs almost no overhead compared to sending plaintext messages .
Parse:
incurs NNS ROOT
 +-- 5.2 LS dep
 +-- that IN mark
 +-- overhead NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- sending VBG pcomp
 |           +-- messages NNS dobj
 |           |   +-- encrypted VBN amod
 |           +-- with IN prep
 |               +-- cache NN pobj
 |                   +-- a DT det
 |                   +-- full JJ amod
 |                   +-- plaintext NN nn
 +-- overhead RB advmod
 |   +-- almost RB advmod
 |   +-- no DT advmod
 +-- compared VBN prep
 |   +-- to IN pcomp
 |       +-- sending VBG pcomp
 |           +-- messages NNS dobj
 |               +-- plaintext NN nn
 +-- . . punct
Input: 3.5 Implementation In our implementation we have used the EAX mode -LRB- 2 -RRB- of operation when encrypting events , attributes , and subscription filters .
Parse:
used VBN ROOT
 +-- Implementation NN nsubj
 |   +-- 3.5 CD num
 |   +-- In IN prep
 |       +-- implementation NN pobj
 |           +-- our PRP$ poss
 +-- we PRP nsubj
 +-- have VBP aux
 +-- mode NN dobj
 |   +-- the DT det
 |   +-- EAX NN nn
 |   +-- 2 LS appos
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- -RRB- -RRB- punct
 |   +-- of IN prep
 |       +-- operation NN pobj
 +-- encrypting VBG advcl
 |   +-- when WRB advmod
 |   +-- events NNS dobj
 |       +-- , , punct
 |       +-- attributes VBZ conj
 |       +-- and CC cc
 |       +-- filters NNS conj
 |           +-- subscription NN nn
 +-- . . punct
Input: EAX is a mode of operation for block ciphers , also called an Authenticated Encryption with Associated Data algorithm that provides simultaneously both data confidentiality and integrity protection .
Parse:
called VBD ROOT
 +-- mode NN ccomp
 |   +-- EAX NNP nsubj
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- operation NN pobj
 |   +-- for IN prep
 |       +-- ciphers NNS pobj
 |           +-- block NN nn
 +-- , , punct
 +-- also RB advmod
 +-- Encryption NNP nsubj
 |   +-- an DT det
 |   +-- Authenticated NNP nn
 |   +-- with IN prep
 |   |   +-- algorithm NN pobj
 |   |       +-- Data NNP nn
 |   |           +-- Associated NNP nn
 |   +-- provides VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- simultaneously RB advmod
 |       +-- confidentiality NN dobj
 |           +-- both DT preconj
 |           +-- data NNS nn
 |           +-- and CC cc
 |           +-- protection NN conj
 |               +-- integrity NN nn
 +-- . . punct
Input: The algorithm implements a two pass scheme where during the first pass the plain text is encrypted , and on the second pass a message authentication code is generated for the encrypted data .
Parse:
implements VBZ ROOT
 +-- algorithm NN nsubj
 |   +-- The DT det
 +-- scheme NN dobj
 |   +-- a DT det
 |   +-- two CD num
 |   +-- pass NN nn
 |   +-- encrypted VBN rcmod
 |       +-- where WRB advmod
 |       +-- during IN prep
 |       |   +-- pass VBP pobj
 |       |       +-- the DT det
 |       |       +-- first JJ amod
 |       +-- text NN nsubjpass
 |       |   +-- the DT det
 |       |   +-- plain JJ amod
 |       +-- is VBZ auxpass
 +-- , , punct
 +-- and CC cc
 +-- pass VB conj
 |   +-- on IN prep
 |   |   +-- second JJ pobj
 |   |       +-- the DT det
 |   +-- message NN dobj
 |       +-- a DT det
 |       +-- generated VBN rcmod
 |           +-- code NN nsubjpass
 |           |   +-- authentication NN nn
 |           +-- is VBZ auxpass
 |           +-- for IN prep
 |               +-- data NNS pobj
 |                   +-- the DT det
 |                   +-- encrypted VBN amod
 +-- . . punct
Input: The EAX mode is compatible with any block cipher .
Parse:
compatible JJ ROOT
 +-- mode NN nsubj
 |   +-- The DT det
 |   +-- EAX NN nn
 +-- is VBZ cop
 +-- with IN prep
 |   +-- cipher NN pobj
 |       +-- any DT det
 |       +-- block NN nn
 +-- . . punct
Input: We decided to use the Advanced Encryption Standard -LRB- 9 -RRB- algorithm in our implementation , because of its standard status and the fact that the algorithm has gone through thorough cryptanalysis during its existence and no serious vulnerabilities have been found thus far .
Parse:
decided VBD ROOT
 +-- We PRP nsubj
 +-- use VB xcomp
 |   +-- to TO aux
 |   +-- algorithm NN dobj
 |   |   +-- the DT det
 |   |   +-- 9 CD nn
 |   |       +-- Standard NNP dep
 |   |       |   +-- Advanced NNP nn
 |   |       |   +-- Encryption NNP nn
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- -RRB- -RRB- punct
 |   +-- in IN prep
 |   |   +-- implementation NN pobj
 |   |       +-- our PRP$ poss
 |   +-- , , punct
 |   +-- of IN prep
 |       +-- because IN mwe
 |       +-- status NN pobj
 |           +-- its PRP$ poss
 |           +-- standard JJ amod
 |           +-- and CC cc
 |           +-- fact NN conj
 |               +-- the DT det
 |               +-- gone VBN ccomp
 |                   +-- that IN mark
 |                   +-- algorithm NN nsubj
 |                   |   +-- the DT det
 |                   +-- has VBZ aux
 |                   +-- through IN prep
 |                   |   +-- cryptanalysis NN pobj
 |                   |       +-- thorough JJ amod
 |                   +-- during IN prep
 |                   |   +-- existence NN pobj
 |                   |       +-- its PRP$ poss
 |                   +-- and CC cc
 |                   +-- found VBN conj
 |                       +-- vulnerabilities NNS nsubjpass
 |                       |   +-- no DT det
 |                       |   +-- serious JJ amod
 |                       +-- have VBP aux
 |                       +-- been VBN auxpass
 |                       +-- far RB advmod
 |                           +-- thus RB advmod
 +-- . . punct
Input: In addition to providing both confidentiality and integrity protection , the EAX mode uses the underlying block cipher in counter mode -LRB- CTR mode -RRB- -LRB- 21 -RRB- .
Parse:
uses VBZ ROOT
 +-- In IN prep
 |   +-- addition NN pobj
 |       +-- to IN prep
 |           +-- providing VBG pcomp
 |               +-- confidentiality NN dobj
 |                   +-- both DT preconj
 |                   +-- and CC cc
 |                   +-- protection NN conj
 |                       +-- integrity NN nn
 +-- , , punct
 +-- mode NN nsubj
 |   +-- the DT det
 |   +-- EAX NN nn
 +-- cipher NN dobj
 |   +-- the DT det
 |   +-- block NN nn
 |       +-- underlying JJ amod
 +-- in IN prep
 |   +-- mode NN pobj
 |       +-- counter NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- mode NN dep
 |       |   +-- CTR NNP nn
 |       +-- -RRB- -RRB- punct
 |       +-- 21 CD appos
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: A block cipher in counter mode is used to produce a stream of key bits that are then XORed with the plaintext .
Parse:
used VBN ROOT
 +-- cipher NN nsubjpass
 |   +-- A DT det
 |   +-- block NN nn
 |   +-- in IN prep
 |       +-- mode NN pobj
 |           +-- counter NN amod
 +-- is VBZ auxpass
 +-- produce VB xcomp
 |   +-- to TO aux
 |   +-- stream NN dobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- bits NNS pobj
 |               +-- key JJ amod
 |               +-- XORed VBN rcmod
 |                   +-- that WDT nsubjpass
 |                   +-- are VBP auxpass
 |                   +-- then RB advmod
 |                   +-- with IN prep
 |                       +-- plaintext NN pobj
 |                           +-- the DT det
 +-- . . punct
Input: Effectively CTR mode transforms a block cipher into a stream cipher .
Parse:
transforms VBZ ROOT
 +-- mode NN nsubj
 |   +-- Effectively RB amod
 |   +-- CTR NNP nn
 +-- cipher NN dobj
 |   +-- a DT det
 |   +-- block NN nn
 +-- into IN prep
 |   +-- cipher NN pobj
 |       +-- a DT det
 |       +-- stream NN nn
 +-- . . punct
Input: The advantage of stream ciphers is that the ciphertext is the same length as the plaintext , whereas with block ciphers the plaintext must be padded to a multiple of the block cipher '' s block length -LRB- e.g .
Parse:
is VBZ ROOT
 +-- advantage NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- ciphers NNS pobj
 |           +-- stream NN nn
 +-- length NN ccomp
 |   +-- that IN mark
 |   +-- ciphertext NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 |   +-- the DT det
 |   +-- same JJ amod
 |   +-- as IN prep
 |   |   +-- plaintext NN pobj
 |   |       +-- the DT det
 |   +-- , , punct
 |   +-- padded VBN advcl
 |       +-- whereas IN mark
 |       +-- with IN prep
 |       |   +-- ciphers NNS pobj
 |       |       +-- block NN nn
 |       +-- plaintext NN nsubjpass
 |       |   +-- the DT det
 |       +-- must MD aux
 |       +-- be VB auxpass
 |       +-- to IN prep
 |           +-- multiple NN pobj
 |               +-- a DT det
 |               +-- of IN prep
 |                   +-- length NN pobj
 |                       +-- cipher NN poss
 |                       |   +-- the DT det
 |                       |   +-- block NN nn
 |                       |   +-- '' '' punct
 |                       |   +-- s POS possessive
 |                       +-- block NN nn
 |                       +-- -LRB- -LRB- punct
 |                       +-- e.g UH dep
 +-- . . punct
Input: the AES block size is 128 bits -RRB- .
Parse:
bits NNS ROOT
 +-- size NN nsubj
 |   +-- the DT det
 |   +-- block NN nn
 |       +-- AES NNP nn
 +-- is VBZ cop
 +-- 128 CD num
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: Avoiding padding is very important in attribute encryption , because the padding might increase the size of the attribute disproportionally .
Parse:
important JJ ROOT
 +-- Avoiding VBG csubj
 |   +-- padding NN dobj
 +-- is VBZ cop
 +-- very RB advmod
 +-- in IN prep
 |   +-- encryption NN pobj
 |       +-- attribute NN amod
 +-- , , punct
 +-- increase VB advcl
 |   +-- because IN mark
 |   +-- padding NN nsubj
 |   |   +-- the DT det
 |   +-- might MD aux
 |   +-- size NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- attribute NN pobj
 |               +-- the DT det
 |               +-- disproportionally RB advmod
 +-- . . punct
Input: For example , a single integer might be 32 bits in length , which would be padded to 128 bits if we used a block cipher .
Parse:
bits NNS ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- integer NN nsubj
 |   +-- a DT det
 |   +-- single JJ amod
 +-- might MD aux
 +-- be VB cop
 +-- 32 CD num
 +-- in IN prep
 |   +-- length NN pobj
 +-- padded VBN dep
 |   +-- which WDT nsubjpass
 |   +-- would MD aux
 |   +-- be VB auxpass
 |   +-- to IN prep
 |   |   +-- bits NNS pobj
 |   |       +-- 128 CD num
 |   +-- used VBD advcl
 |       +-- if IN mark
 |       +-- we PRP nsubj
 |       +-- cipher NN dobj
 |           +-- a DT det
 |           +-- block NN nn
 +-- . . punct
Input: With event encryption the message expansion is not that relevant , since the length of padding required to reach the next 16 byte multiple will probably be a small proportion of the overall plaintext length .
Parse:
relevant JJ ROOT
 +-- With IN prep
 |   +-- encryption NN pobj
 |       +-- event NN nn
 +-- expansion NN nsubj
 |   +-- the DT det
 |   +-- message NN nn
 +-- is VBZ cop
 +-- not RB neg
 +-- that DT advmod
 +-- , , punct
 +-- proportion NN advcl
 |   +-- since IN mark
 |   +-- length NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- padding NN pobj
 |   |   +-- required VBN partmod
 |   |       +-- reach VB xcomp
 |   |           +-- to TO aux
 |   |           +-- multiple NN dobj
 |   |               +-- the DT det
 |   |               +-- next JJ amod
 |   |               +-- byte NN nn
 |   |                   +-- 16 CD num
 |   +-- will MD aux
 |   +-- probably RB advmod
 |   +-- be VB cop
 |   +-- a DT det
 |   +-- small JJ amod
 |   +-- of IN prep
 |       +-- length NN pobj
 |           +-- the DT det
 |           +-- overall JJ amod
 |           +-- plaintext NN nn
 +-- . . punct
Input: In encryption mode the EAX algorithm takes as input a nonce -LRB- a number used once -RRB- , an encryption key and the plaintext , and it returns the ciphertext and an authentication tag .
Parse:
takes VBZ ROOT
 +-- In IN prep
 |   +-- mode NN pobj
 |       +-- encryption NN nn
 +-- algorithm NN nsubj
 |   +-- the DT det
 |   +-- EAX NN nn
 +-- as IN prep
 |   +-- input NN pcomp
 |       +-- nonce NN dobj
 |           +-- a DT det
 |           +-- -LRB- -LRB- punct
 |           +-- number NN dep
 |           |   +-- a DT det
 |           |   +-- used VBN partmod
 |           |       +-- once RB advmod
 |           +-- -RRB- -RRB- punct
 |           +-- , , punct
 |           +-- key NN appos
 |               +-- an DT det
 |               +-- encryption NN nn
 |               +-- and CC cc
 |               +-- plaintext NN conj
 |                   +-- the DT det
 +-- , , punct
 +-- and CC cc
 +-- returns VBZ conj
 |   +-- it PRP nsubj
 |   +-- ciphertext NN dobj
 |       +-- the DT det
 |       +-- and CC cc
 |       +-- tag NN conj
 |           +-- an DT det
 |           +-- authentication NN nn
 +-- . . punct
Input: In decryption mode the algorithm takes as input the encryption key , the ciphertext and the authentication tag , and it returns either the plaintext , or an error if the authentication check failed .
Parse:
takes VBZ ROOT
 +-- In IN prep
 |   +-- mode NN pobj
 |       +-- decryption NN nn
 +-- algorithm NN nsubj
 |   +-- the DT det
 +-- as IN prep
 |   +-- input NN pobj
 |       +-- key NN dobj
 |           +-- the DT det
 |           +-- encryption NN nn
 |           +-- , , punct
 |           +-- ciphertext NN conj
 |           |   +-- the DT det
 |           +-- and CC cc
 |           +-- tag NN conj
 |               +-- the DT det
 |               +-- authentication NN nn
 +-- , , punct
 +-- and CC cc
 +-- returns VBZ conj
 |   +-- it PRP nsubj
 |   +-- plaintext NN dobj
 |   |   +-- either CC preconj
 |   |   +-- the DT det
 |   |   +-- , , punct
 |   |   +-- or CC cc
 |   |   +-- error NN conj
 |   |       +-- an DT det
 |   +-- failed VBD advcl
 |       +-- if IN mark
 |       +-- check NN nsubj
 |           +-- the DT det
 |           +-- authentication NN nn
 +-- . . punct
Input: The nonce is expanded to the block length of the underlying block cipher by passing it through an OMAC construct -LRB- see -LRB- 7 -RRB- -RRB- .
Parse:
expanded VBN ROOT
 +-- nonce NN nsubjpass
 |   +-- The DT det
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- length NN pobj
 |       +-- the DT det
 |       +-- block NN nn
 |       +-- of IN prep
 |           +-- cipher NN pobj
 |               +-- the DT det
 |               +-- underlying JJ amod
 |               +-- block NN nn
 +-- by IN prep
 |   +-- passing VBG pcomp
 |       +-- it PRP dobj
 |       +-- through IN prep
 |           +-- construct NN pobj
 |               +-- an DT det
 |               +-- OMAC JJ amod
 |               +-- see VB dep
 |                   +-- -LRB- -LRB- punct
 |                   +-- 7 CD dobj
 |                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: It is important that particular nonce values are not reused , otherwise the block cipher in CTR mode would produce an identical key stream .
Parse:
important JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- reused VBN ccomp
 |   +-- that IN mark
 |   +-- values NNS nsubjpass
 |   |   +-- particular JJ amod
 |   |   +-- nonce NN nn
 |   +-- are VBP auxpass
 |   +-- not RB neg
 +-- , , punct
 +-- produce VB ccomp
 |   +-- otherwise RB advmod
 |   +-- cipher NN nsubj
 |   |   +-- the DT det
 |   |   +-- block NN nn
 |   |   +-- in IN prep
 |   |       +-- mode NN pobj
 |   |           +-- CTR NNP nn
 |   +-- would MD aux
 |   +-- stream NN dobj
 |       +-- an DT det
 |       +-- identical JJ amod
 |       +-- key JJ amod
 +-- . . punct
Input: In our implementation we used the PHB defined event timestamp -LRB- 64 bit value counting the milliseconds since January 1 , 1970 UTC -RRB- appended by the PHB '' s identity -LRB- i.e .
Parse:
used VBD ROOT
 +-- In IN prep
 |   +-- implementation NN pobj
 |       +-- our PRP$ poss
 +-- we PRP nsubj
 +-- timestamp NN dobj
 |   +-- the DT det
 |   +-- PHB NNP nn
 |   +-- event NN nn
 |       +-- defined VBN amod
 +-- -LRB- -LRB- punct
 +-- counting VBG dep
 |   +-- value NN nsubj
 |   |   +-- 64 CD num
 |   |   +-- bit NN nn
 |   +-- milliseconds NNS dobj
 |   |   +-- the DT det
 |   +-- since IN prep
 |   |   +-- January NNP pobj
 |   |       +-- 1 CD num
 |   +-- , , punct
 |   +-- i.e NN parataxis
 |       +-- UTC NN nsubj
 |       |   +-- 1970 CD num
 |       |   +-- -RRB- -RRB- punct
 |       |   +-- appended VBN partmod
 |       |       +-- by IN prep
 |       |           +-- identity NN pobj
 |       |               +-- PHB NNP poss
 |       |                   +-- the DT det
 |       |                   +-- '' '' punct
 |       |                   +-- s POS possessive
 |       +-- -LRB- -LRB- punct
 +-- . . punct
Input: public key -RRB- as the nonce .
Parse:
key NN ROOT
 +-- public JJ amod
 +-- -RRB- -RRB- punct
 +-- as IN prep
 |   +-- nonce NN pobj
 |       +-- the DT det
 +-- . . punct
Input: The broker is responsible for ensuring that the timestamps increase monotonically .
Parse:
responsible JJ ROOT
 +-- broker NN nsubj
 |   +-- The DT det
 +-- is VBZ cop
 +-- for IN prep
 |   +-- ensuring VBG pcomp
 |       +-- increase VB ccomp
 |           +-- that IN mark
 |           +-- timestamps NNS nsubj
 |           |   +-- the DT det
 |           +-- monotonically RB advmod
 +-- . . punct
Input: The authentication tag is appended to the produced cipher text to create a two tuple .
Parse:
appended VBN ROOT
 +-- tag NN nsubjpass
 |   +-- The DT det
 |   +-- authentication NN nn
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- text NN pobj
 |       +-- the DT det
 |       +-- produced VBN amod
 |       +-- cipher NN nn
 |       +-- create VB infmod
 |           +-- to TO aux
 |           +-- tuple NN dobj
 |               +-- a DT det
 |               +-- two CD num
 +-- . . punct
Input: With event encryption a single tag is created for the encrypted event .
Parse:
created VBN ROOT
 +-- With IN prep
 |   +-- encryption NN pobj
 |       +-- event NN nn
 +-- tag NN nsubjpass
 |   +-- a DT det
 |   +-- single JJ amod
 +-- is VBZ auxpass
 +-- for IN prep
 |   +-- event NN pobj
 |       +-- the DT det
 |       +-- encrypted VBN amod
 +-- . . punct
Input: With attribute 109 encryption each attribute is encrypted and authenticated separately , and they all have their individual tags .
Parse:
encrypted VBN ROOT
 +-- With IN prep
 |   +-- attribute NN pcomp
 |       +-- encryption NN dobj
 |           +-- 109 CD num
 +-- attribute NN nsubjpass
 |   +-- each DT det
 +-- is VBZ auxpass
 +-- and CC cc
 +-- authenticated VBN conj
 +-- separately RB advmod
 +-- , , punct
 +-- have VBP conj
 |   +-- they PRP nsubj
 |   |   +-- all DT det
 |   +-- tags NNS dobj
 |       +-- their PRP$ poss
 |       +-- individual JJ amod
 +-- . . punct
Input: The tag length is configurable in EAX without restrictions , which allows the user to make a trade off between the authenticity guarantees provided by EAX and the added communication overhead .
Parse:
configurable JJ ROOT
 +-- length NN nsubj
 |   +-- The DT det
 |   +-- tag NN nn
 +-- is VBZ cop
 +-- in IN prep
 |   +-- EAX NN pobj
 +-- without IN prep
 |   +-- restrictions NNS pobj
 |       +-- , , punct
 |       +-- allows VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- make VB xcomp
 |               +-- user NN nsubj
 |               |   +-- the DT det
 |               +-- to TO aux
 |               +-- trade NN dobj
 |               |   +-- a DT det
 |               +-- off RP prt
 |               +-- between IN prep
 |                   +-- guarantees NNS pobj
 |                       +-- the DT det
 |                       +-- authenticity NN nn
 |                       +-- provided VBN partmod
 |                       |   +-- by IN prep
 |                       |       +-- EAX NN pobj
 |                       +-- and CC cc
 |                       +-- communication NN conj
 |                           +-- the DT det
 |                           +-- added VBN amod
 |                           +-- overhead RB advmod
 +-- . . punct
Input: We used a tag length of 16 bytes in our implementation , but one could make the tag length a publisher subscriber defined parameter for each publication subscription or include it in the event type definition to make it a type specific parameter .
Parse:
used VBD ROOT
 +-- We PRP nsubj
 +-- length NN dobj
 |   +-- a DT det
 |   +-- tag NN nn
 |   +-- of IN prep
 |       +-- bytes NNS pobj
 |           +-- 16 CD num
 +-- in IN prep
 |   +-- implementation NN pobj
 |       +-- our PRP$ poss
 +-- , , punct
 +-- but CC cc
 +-- make VB conj
 |   +-- one PRP nsubj
 |   +-- could MD aux
 |   +-- subscription NN dobj
 |   |   +-- length NN nn
 |   |       +-- tag NN nsubj
 |   |       |   +-- the DT det
 |   |       +-- parameter NN dobj
 |   |           +-- a DT det
 |   |           +-- defined VBN amod
 |   |           |   +-- subscriber NN dep
 |   |           |       +-- publisher NN nn
 |   |           +-- for IN prep
 |   |               +-- publication NN pobj
 |   |                   +-- each DT det
 |   +-- or CC cc
 |   +-- include VBP conj
 |       +-- it PRP dobj
 |       +-- in IN prep
 |           +-- definition NN pobj
 |               +-- the DT det
 |               +-- type NN nn
 |               |   +-- event NN nn
 |               +-- make VB infmod
 |                   +-- to TO aux
 |                   +-- type NN xcomp
 |                       +-- it PRP nsubj
 |                       +-- a DT det
 |                       +-- parameter NN dobj
 |                           +-- specific JJ amod
 +-- . . punct
Input: EAX also supports including unencrypted associated data in the tag calculation .
Parse:
supports VBZ ROOT
 +-- EAX NNP nsubj
 +-- also RB advmod
 +-- including VBG prep
 |   +-- data NNS pobj
 |       +-- unencrypted VBN amod
 |       +-- associated VBN amod
 |       +-- in IN prep
 |           +-- calculation NN pobj
 |               +-- the DT det
 |               +-- tag NN nn
 +-- . . punct
Input: The integrity of this data is protected , but it is still readable by everyone .
Parse:
protected VBN ROOT
 +-- integrity NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- data NN pobj
 |           +-- this DT det
 +-- is VBZ auxpass
 +-- , , punct
 +-- but CC cc
 +-- readable JJ conj
 |   +-- it PRP nsubj
 |   +-- is VBZ cop
 |   +-- still RB advmod
 |   +-- by IN prep
 |       +-- everyone NN pobj
 +-- . . punct
Input: This feature could be used with event encryption in cases where some of the event content is public and thus would be useful for content based routing .
Parse:
used VBN ROOT
 +-- feature NN nsubjpass
 |   +-- This DT det
 +-- could MD aux
 +-- be VB auxpass
 +-- with IN prep
 |   +-- encryption NN pobj
 |       +-- event NN nn
 +-- in IN prep
 |   +-- cases NNS pobj
 |       +-- public JJ rcmod
 |           +-- where WRB advmod
 |           +-- some DT nsubj
 |           |   +-- of IN prep
 |           |       +-- content NN pobj
 |           |           +-- the DT det
 |           |           +-- event NN nn
 |           +-- is VBZ cop
 |           +-- and CC cc
 |           +-- thus RB advmod
 |           +-- useful JJ conj
 |               +-- would MD aux
 |               +-- be VB cop
 |               +-- for IN prep
 |                   +-- routing NN pobj
 |                       +-- based VBN amod
 |                           +-- content NN dep
 +-- . . punct
Input: The integrity of the data would still be protected against changes , but unauthorised brokers would be able to apply filters .
Parse:
protected VBN ROOT
 +-- integrity NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- data NNS pobj
 |           +-- the DT det
 +-- would MD aux
 +-- still RB advmod
 +-- be VB auxpass
 +-- against IN prep
 |   +-- changes NNS pobj
 +-- , , punct
 +-- but CC cc
 +-- able JJ conj
 |   +-- brokers NNS nsubj
 |   |   +-- unauthorised JJ amod
 |   +-- would MD aux
 |   +-- be VB cop
 |   +-- apply VB xcomp
 |       +-- to TO aux
 |       +-- filters NNS dobj
 +-- . . punct
Input: We have included the event type identifier as associated data in order to protect its integrity .
Parse:
included VBN ROOT
 +-- We PRP nsubj
 +-- have VBP aux
 +-- identifier NN dobj
 |   +-- the DT det
 |   +-- type NN nn
 |   |   +-- event NN nn
 |   +-- as IN prep
 |       +-- data NNS pobj
 |           +-- associated VBN amod
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- protect VB infmod
 |           +-- to TO aux
 |           +-- integrity NN dobj
 |               +-- its PRP$ poss
 +-- . . punct
Input: Other AEAD algorithms include the offset codebook mode -LRB- 17 -RRB- and the counter with CBC MAC mode -LRB- 22 -RRB- .
Parse:
include VBP ROOT
 +-- algorithms NNS nsubj
 |   +-- Other JJ amod
 |   +-- AEAD NNP nn
 +-- mode NN dobj
 |   +-- the DT det
 |   +-- offset NN amod
 |   +-- codebook NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- 17 CD dep
 |   +-- -RRB- -RRB- punct
 |   +-- and CC cc
 |   +-- counter NN conj
 |       +-- the DT det
 |       +-- with IN prep
 |       |   +-- mode NN pobj
 |       |       +-- MAC NNP nn
 |       |           +-- CBC NNP nn
 |       +-- -LRB- -LRB- punct
 |       +-- 22 CD dep
 |       +-- -RRB- -RRB- punct
 +-- . . punct
Input: Contrarily to the EAX mode the OCB mode requires only one pass over the plaintext , which makes it roughly twice as fast as EAX .
Parse:
requires VBZ ROOT
 +-- Contrarily RB advmod
 |   +-- to IN prep
 |       +-- mode NN pobj
 |           +-- the DT det
 |           +-- EAX NNP nn
 +-- mode NN nsubj
 |   +-- the DT det
 |   +-- OCB NNP nn
 +-- pass NN dobj
 |   +-- one CD num
 |   |   +-- only RB quantmod
 |   +-- over IN prep
 |       +-- plaintext NN pobj
 |           +-- the DT det
 |           +-- , , punct
 |           +-- makes VBZ rcmod
 |               +-- which WDT nsubj
 |               +-- fast JJ xcomp
 |                   +-- it PRP nsubj
 |                   +-- roughly RB advmod
 |                   +-- twice RB advmod
 |                   +-- as RB advmod
 |                   +-- as IN prep
 |                       +-- EAX NNP pobj
 +-- . . punct
Input: Unfortunately the OCB mode has a patent application in place in the USA , which restricts its use .
Parse:
has VBZ ROOT
 +-- Unfortunately RB advmod
 +-- mode NN nsubj
 |   +-- the DT det
 |   +-- OCB NN nn
 +-- application NN dobj
 |   +-- a DT det
 |   +-- patent NN nn
 |   +-- in IN prep
 |   |   +-- place NN pobj
 |   |       +-- in IN prep
 |   |           +-- USA NNP pobj
 |   |               +-- the DT det
 |   +-- , , punct
 |   +-- restricts VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- use NN dobj
 |           +-- its PRP$ poss
 +-- . . punct
Input: The CCM mode is the predecessor of the EAX mode .
Parse:
predecessor NN ROOT
 +-- mode NN nsubj
 |   +-- The DT det
 |   +-- CCM NNP nn
 +-- is VBZ cop
 +-- the DT det
 +-- of IN prep
 |   +-- mode NN pobj
 |       +-- the DT det
 |       +-- EAX NN nn
 +-- . . punct
Input: It was developed in order to provide a free alternative to OCB .
Parse:
developed VBN ROOT
 +-- It PRP nsubjpass
 +-- was VBD auxpass
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- provide VB infmod
 |           +-- to TO aux
 |           +-- alternative NN dobj
 |               +-- a DT det
 |               +-- free JJ amod
 |               +-- to IN prep
 |                   +-- OCB NNP pobj
 +-- . . punct
Input: The EAX was developed later to address some issues with CCM -LRB- 18 -RRB- .
Parse:
developed VBN ROOT
 +-- EAX NN nsubjpass
 |   +-- The DT det
 +-- was VBD auxpass
 +-- later RB advmod
 +-- address VB xcomp
 |   +-- to TO aux
 |   +-- issues NNS dobj
 |       +-- some DT det
 |       +-- with IN prep
 |           +-- CCM NNP pobj
 |               +-- -LRB- -LRB- punct
 |               +-- 18 CD dep
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: Similarly to EAX , CCM is also a two pass mode. .
Parse:
mode. NN ROOT
 +-- Similarly RB advmod
 |   +-- to IN prep
 |       +-- EAX UH pobj
 +-- , , punct
 +-- CCM NNP nsubj
 +-- is VBZ cop
 +-- also RB advmod
 +-- a DT det
 +-- two CD num
 +-- pass NN nn
 +-- . . punct
