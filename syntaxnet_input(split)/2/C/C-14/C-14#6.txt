Input: the west the east and b Dijkstra '' s algorithm 10 .
Parse:
west NN ROOT
 +-- the DT det
 +-- east NN dep
 |   +-- the DT det
 +-- and CC cc
 +-- Dijkstra NNP conj
 |   +-- b NFP punct
 |   +-- '' '' punct
 |   +-- s POS punct
 +-- algorithm RB dep
 |   +-- 10 CD num
 +-- . . punct
Input: Let w equal the total weight of P .
Parse:
Let VB ROOT
 +-- equal VB ccomp
 |   +-- w RB advmod
 |   +-- weight NN dobj
 |       +-- the DT det
 |       +-- total JJ amod
 |       +-- of IN prep
 |           +-- P NN pobj
 +-- . . punct
Input: 11 .
Parse:
11 CD ROOT
 +-- . . punct
Input: Return P as the least exposure path with an exposure equal to 10 ? w .
Parse:
Return VB ROOT
 +-- P NN dobj
 +-- as IN prep
 |   +-- path NN pobj
 |       +-- the DT det
 |       +-- exposure NN amod
 |       |   +-- least JJS advmod
 |       +-- with IN prep
 |           +-- exposure NN pobj
 |               +-- an DT det
 |               +-- equal JJ amod
 |                   +-- to IN prep
 |                       +-- 10 CD pobj
 +-- ? . punct
 +-- w RB advmod
 +-- . . punct
Input: Figure 2
Parse:
Figure NN ROOT
 +-- 2 CD num
Input: it need not be detected at any point u lying between any two adjacent grid points of P .
Parse:
detected VBN ROOT
 +-- it PRP nsubjpass
 +-- need VBP aux
 +-- not RB neg
 +-- be VB auxpass
 +-- at IN prep
 |   +-- point NN pobj
 |       +-- any DT det
 |       +-- lying VBG rcmod
 |           +-- u PRP nsubj
 |           +-- between IN prep
 |               +-- points NNS pobj
 |                   +-- any DT det
 |                   +-- two CD num
 |                   +-- adjacent JJ amod
 |                   +-- grid NN nn
 |                   +-- of IN prep
 |                       +-- P NN pobj
 +-- . . punct
Input: We therefore subdivide any path P as a chain of grid segments .
Parse:
subdivide VBP ROOT
 +-- We PRP nsubj
 +-- therefore RB advmod
 +-- path NN dobj
 |   +-- any DT det
 |   +-- P NN amod
 |   +-- as IN prep
 |       +-- chain NN pobj
 |           +-- a DT det
 |           +-- of IN prep
 |               +-- segments NNS pobj
 |                   +-- grid NN nn
 +-- . . punct
Input: Let us consider two adjacent points , say v1 and v2 on the grid .
Parse:
Let VB ROOT
 +-- consider VB ccomp
 |   +-- us PRP nsubj
 |   +-- say VBP ccomp
 |       +-- points NNS nsubj
 |       |   +-- two CD num
 |       |   +-- adjacent JJ amod
 |       |   +-- , , punct
 |       +-- v1 CD dobj
 |       |   +-- and CC cc
 |       |   +-- v2 CD conj
 |       +-- on IN prep
 |           +-- grid NN pobj
 |               +-- the DT det
 +-- . . punct
Input: Let l denote the line segment between v1 and v2 .
Parse:
Let VB ROOT
 +-- denote VB ccomp
 |   +-- l PRP nsubj
 |   +-- segment NN dobj
 |       +-- the DT det
 |       +-- line NN nn
 |       +-- between IN prep
 |           +-- v1 CD pobj
 |               +-- and CC cc
 |               +-- v2 CD conj
 +-- . . punct
Input: Also , let ml denote the probability of not detecting a target traveling between v1 and v2 on the line segment l .
Parse:
let VB ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- denote VB ccomp
 |   +-- ml PRP nsubj
 |   +-- probability NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- detecting VBG pcomp
 |               +-- not RB neg
 |               +-- target NN dobj
 |                   +-- a DT det
 |                   +-- traveling VBG partmod
 |                       +-- between IN prep
 |                       |   +-- v1 CD pobj
 |                       |       +-- and CC cc
 |                       |       +-- v2 CD conj
 |                       +-- on IN prep
 |                           +-- segment NN pobj
 |                               +-- the DT det
 |                               +-- line NN nn
 |                               +-- l NNP appos
 +-- . . punct
Input: Then , from the discussion above , log ml = u ? l log -LRB- 1 ? D -LRB- u -RRB- -RRB- du -LRB- 3 -RRB- The probability ml can be evaluated by finding the detection probability D -LRB- u -RRB- at each point u ? l .
Parse:
ml NN ROOT
 +-- Then RB advmod
 +-- , , punct
 +-- from IN prep
 |   +-- discussion NN pobj
 |       +-- the DT det
 |       +-- above IN advmod
 +-- log VB amod
 +-- = : punct
 +-- u NNP dep
 +-- ? . punct
 +-- log NN dep
 |   +-- l NNP nn
 +-- 1 CD dep
 |   +-- -LRB- -LRB- punct
 +-- D NNP dep
 |   +-- -LRB- -LRB- punct
 |   +-- u NNP dep
 |   +-- -RRB- -RRB- punct
 +-- -RRB- -RRB- punct
 +-- du NN dep
 +-- 3 CD appos
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- evaluated VBN dep
 |   +-- ml NN nsubjpass
 |   |   +-- The DT det
 |   |   +-- probability NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- by IN prep
 |       +-- finding VBG pcomp
 |           +-- D NNP dobj
 |           |   +-- the DT det
 |           |   +-- probability NN nn
 |           |   |   +-- detection NN nn
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- u LS dep
 |           |   +-- -RRB- -RRB- punct
 |           +-- at IN prep
 |           |   +-- point NN pobj
 |           |       +-- each DT det
 |           |       +-- u NNP appos
 |           +-- ? . punct
 |           +-- l NNP dobj
 +-- . . punct
Input: Note that , ml lies between 0 and 1 and , therefore , log ml is negative .
Parse:
Note VB ROOT
 +-- lies VBZ ccomp
 |   +-- that IN mark
 |   +-- , , punct
 |   +-- ml NNP nsubj
 |   +-- between IN prep
 |       +-- 0 CD pobj
 |           +-- and CC cc
 |           +-- 1 CD conj
 |           +-- negative JJ conj
 |               +-- , , punct
 |               +-- therefore RB advmod
 |               +-- ml NN nsubj
 |               |   +-- log NN nn
 |               +-- is VBZ cop
 +-- . . punct
Input: To find the least exposed path , a non negative weight equal to | log ml| is assigned to each segment l on this grid .
Parse:
assigned VBN ROOT
 +-- find VB advcl
 |   +-- To TO aux
 |   +-- path NN dobj
 |       +-- the DT det
 |       +-- exposed VBN amod
 |           +-- least JJS advmod
 +-- , , punct
 +-- weight NN nsubjpass
 |   +-- a DT det
 |   +-- non CD num
 |   +-- negative JJ amod
 |   +-- equal JJ amod
 |       +-- to IN prep
 |           +-- ml| NN pobj
 |               +-- log NN nn
 |                   +-- | NN nn
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- segment NN pobj
 |       +-- each DT det
 |       +-- l , punct
 |       +-- on IN prep
 |           +-- grid NN pobj
 |               +-- this DT det
 +-- . . punct
Input: Also , a fictitious point a is created and a line segment is added from a to each grid point on the west periphery of the sensor field .
Parse:
created VBN ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- point NN nsubjpass
 |   +-- a DT det
 |   +-- fictitious JJ amod
 |   +-- a DT amod
 +-- is VBZ auxpass
 +-- and CC cc
 +-- added VBN conj
 |   +-- segment NN nsubjpass
 |   |   +-- a DT det
 |   |   +-- line NN nn
 |   +-- is VBZ auxpass
 |   +-- from IN prep
 |   |   +-- a DT pobj
 |   +-- to IN prep
 |       +-- point NN pobj
 |           +-- each DT det
 |           +-- grid NN nn
 |           +-- on IN prep
 |               +-- periphery NN pobj
 |                   +-- the DT det
 |                   +-- west NN amod
 |                   +-- of IN prep
 |                       +-- field NN pobj
 |                           +-- the DT det
 |                           +-- sensor NN nn
 +-- . . punct
Input: A weight equal to 0 is assigned to each of these line segments .
Parse:
assigned VBN ROOT
 +-- weight NN nsubjpass
 |   +-- A DT det
 |   +-- equal JJ amod
 |       +-- to IN prep
 |           +-- 0 CD pobj
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- segments NNS pobj
 |               +-- these DT det
 |               +-- line NN nn
 +-- . . punct
Input: Similarly , a fictitious point b is created and a line segment is added from b to each grid point on the east periphery of the sensor field .
Parse:
created VBN ROOT
 +-- Similarly RB advmod
 +-- , , punct
 +-- point NN nsubjpass
 |   +-- a DT det
 |   +-- fictitious JJ amod
 +-- b , punct
 +-- is VBZ auxpass
 +-- and CC cc
 +-- added VBN conj
 |   +-- segment NN nsubjpass
 |   |   +-- a DT det
 |   |   +-- line NN nn
 |   +-- is VBZ auxpass
 |   +-- from IN prep
 |   |   +-- b NN pobj
 |   +-- to IN prep
 |       +-- point NN pobj
 |           +-- each DT det
 |           +-- grid NN nn
 |           +-- on IN prep
 |               +-- periphery NN pobj
 |                   +-- the DT det
 |                   +-- east JJ amod
 |                   +-- of IN prep
 |                       +-- field NN pobj
 |                           +-- the DT det
 |                           +-- sensor NN nn
 +-- . . punct
Input: A weight equal to 0 is assigned to each of these line segments .
Parse:
assigned VBN ROOT
 +-- weight NN nsubjpass
 |   +-- A DT det
 |   +-- equal JJ amod
 |       +-- to IN prep
 |           +-- 0 CD pobj
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- segments NNS pobj
 |               +-- these DT det
 |               +-- line NN nn
 +-- . . punct
Input: The problem of finding the least exposed path from west periphery to east periphery is then equivalent to the problem of finding the least weight path from a to b on this grid .
Parse:
equivalent JJ ROOT
 +-- problem NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- finding VBG pcomp
 |           +-- path NN dobj
 |               +-- the DT det
 |               +-- exposed VBN amod
 |               |   +-- least JJS advmod
 |               +-- from IN prep
 |               |   +-- periphery NN pobj
 |               |       +-- west NN amod
 |               +-- east VB infmod
 |                   +-- to TO aux
 |                   +-- periphery NN advmod
 +-- is VBZ cop
 +-- then RB advmod
 +-- to IN prep
 |   +-- problem NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- finding VBG pcomp
 |               +-- path NN dobj
 |                   +-- the DT det
 |                   +-- least JJS amod
 |                   +-- weight NN nn
 |                   +-- from IN prep
 |                   |   +-- a DT pobj
 |                   |   +-- to IN prep
 |                   |       +-- b CD pobj
 |                   +-- on IN prep
 |                       +-- grid NN pobj
 |                           +-- this DT det
 +-- . . punct
Input: Such a path can be efficiently determined using the Dijkstra '' s shortest path algorithm -LRB- 1 -RRB- .
Parse:
determined VBN ROOT
 +-- path NN nsubjpass
 |   +-- Such PDT predet
 |   +-- a DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- efficiently RB advmod
 +-- using VBG xcomp
 |   +-- path NN dobj
 |       +-- Dijkstra NNP poss
 |       |   +-- the DT det
 |       |   +-- '' '' punct
 |       |   +-- s POS possessive
 |       +-- shortest JJS amod
 |       +-- algorithm NNP appos
 |           +-- -LRB- -LRB- punct
 |           +-- 1 CD num
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: A pseudo code of the overall algorithm is shown in Figure 2 .
Parse:
shown VBN ROOT
 +-- code NN nsubjpass
 |   +-- A DT det
 |   +-- pseudo NN nn
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- the DT det
 |           +-- overall JJ amod
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- Figure NN pobj
 |       +-- 2 CD num
 +-- . . punct
Input: Example
Parse:
Example NNP ROOT
Input: Assume the noise process at each sensor is Additive White Gaussian with mean 0 and variance 1 .
Parse:
Assume VB ROOT
 +-- Gaussian NNP ccomp
 |   +-- process NN nsubj
 |   |   +-- the DT det
 |   |   +-- noise NN nn
 |   |   +-- at IN prep
 |   |       +-- sensor NN pobj
 |   |           +-- each DT det
 |   +-- is VBZ cop
 |   +-- Additive JJ amod
 |   +-- White NNP nn
 |   +-- with IN prep
 |       +-- 0 CD pobj
 |           +-- mean JJ amod
 |           +-- and CC cc
 |           +-- variance NN conj
 |               +-- 1 CD num
 +-- . . punct
Input: Further assume that the sensors use value fusion to arrive at a consensus decision .
Parse:
assume VBP ROOT
 +-- Further RB nsubj
 +-- use VBP ccomp
 |   +-- that IN mark
 |   +-- sensors NNS nsubj
 |   |   +-- the DT det
 |   +-- fusion NN dobj
 |   |   +-- value NN nn
 |   +-- arrive VB xcomp
 |       +-- to TO aux
 |       +-- at IN prep
 |           +-- decision NN pobj
 |               +-- a DT det
 |               +-- consensus NN nn
 +-- . . punct
