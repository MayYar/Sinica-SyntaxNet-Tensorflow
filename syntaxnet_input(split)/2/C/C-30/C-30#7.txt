Input: Typically , high bandwidth overlay data streaming takes place over a distribution tree
Parse:
takes VBZ ROOT
 +-- Typically RB advmod
 +-- , , punct
 +-- streaming NN nsubj
 |   +-- overlay NN nn
 |   |   +-- bandwidth NN nn
 |   |       +-- high JJ amod
 |   +-- data NNS nn
 +-- place NN dobj
 +-- over IN prep
     +-- tree NN pobj
         +-- a DT det
         +-- distribution NN nn
Input: In this paper , we argue that , in fact , an overlay mesh is able to deliver fundamentally higher bandwidth
Parse:
argue VBP ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- able JJ ccomp
     +-- that IN mark
     +-- , , punct
     +-- in IN prep
     |   +-- fact NN pobj
     +-- mesh NN nsubj
     |   +-- an DT det
     |   +-- overlay NN nn
     +-- is VBZ cop
     +-- deliver VB xcomp
         +-- to TO aux
         +-- bandwidth NN dobj
             +-- higher JJR amod
                 +-- fundamentally RB advmod
Input: Of course , a number of difficult challenges must be overcome to ensure that nodes in the mesh do not repeatedly receive the same data from peers
Parse:
overcome VBN ROOT
 +-- course RB advmod
 |   +-- Of RB advmod
 +-- , , punct
 +-- number NN nsubjpass
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- challenges NNS pobj
 |           +-- difficult JJ amod
 +-- must MD aux
 +-- be VB auxpass
 +-- ensure VB xcomp
     +-- to TO aux
     +-- receive VB ccomp
         +-- that IN mark
         +-- nodes NNS nsubj
         |   +-- in IN prep
         |       +-- mesh NN pobj
         |           +-- the DT det
         +-- do VBP aux
         +-- not RB neg
         +-- repeatedly RB advmod
         +-- data NNS dobj
         |   +-- the DT det
         |   +-- same JJ amod
         +-- from IN prep
             +-- peers NNS pobj
Input: This paper presents the design and implementation of Bullet , a scalable and efficient overlay construction algorithm that overcomes this challenge to deliver significant bandwidth improvements relative to traditional tree structures
Parse:
presents VBZ ROOT
 +-- paper NN nsubj
 |   +-- This DT det
 +-- design NN dobj
     +-- the DT det
     +-- and CC cc
     +-- implementation NN conj
     +-- of IN prep
         +-- Bullet NNP pobj
             +-- , , punct
             +-- algorithm NN appos
                 +-- a DT det
                 +-- scalable JJ amod
                 |   +-- and CC cc
                 |   +-- efficient JJ conj
                 +-- construction NN nn
                 |   +-- overlay NN nn
                 +-- overcomes VBZ rcmod
                     +-- that WDT nsubj
                     +-- challenge NN dobj
                     |   +-- this DT det
                     +-- deliver VB xcomp
                         +-- to TO aux
                         +-- improvements NNS dobj
                             +-- significant JJ amod
                             +-- bandwidth NN nn
                             +-- relative JJ amod
                                 +-- to IN prep
                                     +-- structures NNS pobj
                                         +-- traditional JJ amod
                                         +-- tree NN nn
Input: Specifically , this paper makes the following contributions
Parse:
makes VBZ ROOT
 +-- Specifically RB advmod
 +-- , , punct
 +-- paper NN nsubj
 |   +-- this DT det
 +-- contributions NNS dobj
     +-- the DT det
     +-- following VBG amod
Input: As a related benefit , we eliminate the overhead required to probe for available bandwidth in traditional distributed tree construction techniques
Parse:
eliminate VBP ROOT
 +-- As IN prep
 |   +-- benefit NN pobj
 |       +-- a DT det
 |       +-- related JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- overhead NN dobj
     +-- the DT det
     +-- required VBN partmod
         +-- probe VB xcomp
             +-- to TO aux
             +-- for IN prep
                 +-- bandwidth NN pobj
                     +-- available JJ amod
                     +-- in IN prep
                         +-- techniques NNS pobj
                             +-- traditional JJ amod
                             +-- distributed VBN amod
                             +-- construction NN nn
                                 +-- tree NN nn
Input: ? We provide a technique for recovering missing data from peers in a scalable and efficient manner
Parse:
provide VBP ROOT
 +-- ? , punct
 +-- We PRP nsubj
 +-- technique NN dobj
     +-- a DT det
     +-- for IN prep
         +-- recovering VBG pcomp
             +-- data NNS dobj
             |   +-- missing VBG amod
             |   +-- from IN prep
             |       +-- peers NNS pobj
             +-- in IN prep
                 +-- manner NN pobj
                     +-- a DT det
                     +-- scalable JJ amod
                         +-- and CC cc
                         +-- efficient JJ conj
Input: RanSub periodically disseminates summaries of data sets received by a changing , uniformly random subset of global participants
Parse:
disseminates VBZ ROOT
 +-- RanSub NNP nsubj
 +-- periodically RB advmod
 +-- summaries NNS dobj
     +-- of IN prep
         +-- sets NNS pobj
             +-- data NNS nn
             +-- received VBN partmod
                 +-- by IN prep
                     +-- subset NN pobj
                         +-- a DT det
                         +-- changing NN amod
                         +-- , , punct
                         +-- random JJ amod
                         |   +-- uniformly RB advmod
                         +-- of IN prep
                             +-- participants NNS pobj
                                 +-- global JJ amod
Input: ? We propose a mechanism for making data disjoint and then distributing it in a uniform way that makes the probability of finding a peer containing missing data equal for all nodes
Parse:
propose VBP ROOT
 +-- ? , punct
 +-- We PRP nsubj
 +-- mechanism NN dobj
     +-- a DT det
     +-- for IN prep
         +-- making VBG pcomp
             +-- disjoint NN dobj
             |   +-- data NN nn
             +-- and CC cc
             +-- then RB advmod
             +-- distributing VBG conj
                 +-- it PRP dobj
                 +-- in IN prep
                     +-- way NN pobj
                         +-- a DT det
                         +-- uniform JJ amod
                         +-- makes VBZ rcmod
                             +-- that WDT nsubj
                             +-- probability NN dobj
                                 +-- the DT det
                                 +-- of IN prep
                                     +-- finding VBG pcomp
                                         +-- peer NN dobj
                                             +-- a DT det
                                             +-- containing VBG partmod
                                                 +-- data NNS dobj
                                                     +-- missing VBG amod
                                                     +-- equal JJ amod
                                                         +-- for IN prep
                                                             +-- nodes NNS pobj
                                                                 +-- all DT det
Input: ? A large scale evaluation of 1000 overlay participants running in an emulated 20 , 000 node network topology , as well as experimentation on top of the PlanetLab Internet testbed , shows that Bullet running over a random tree can achieve twice the throughput of streaming over a traditional bandwidth tree
Parse:
shows VBZ ROOT
 +-- ? , punct
 +-- evaluation NN nsubj
 |   +-- A DT det
 |   +-- scale NN nn
 |   |   +-- large JJ amod
 |   +-- of IN prep
 |       +-- participants NNS pobj
 |           +-- 1000 CD num
 |           +-- overlay NN nn
 |           +-- running VBG partmod
 |               +-- in IN prep
 |                   +-- topology NN pobj
 |                       +-- an DT det
 |                       +-- emulated JJ amod
 |                       +-- 000 CD nn
 |                       |   +-- 20 CD num
 |                       |   +-- , , punct
 |                       +-- network NN nn
 |                       |   +-- node NN nn
 |                       +-- , , punct
 |                       +-- well RB cc
 |                       |   +-- as RB advmod
 |                       |   +-- as IN mwe
 |                       +-- experimentation NN conj
 |                           +-- on IN prep
 |                               +-- top NN pobj
 |                                   +-- of IN prep
 |                                       +-- testbed VBN pobj
 |                                           +-- the DT det
 |                                           +-- PlanetLab NNP nn
 |                                           +-- Internet NN nn
 +-- , , punct
 +-- achieve VB ccomp
     +-- that IN mark
     +-- Bullet NNP nsubj
     |   +-- running VBG partmod
     |       +-- over IN prep
     |           +-- tree NN pobj
     |               +-- a DT det
     |               +-- random JJ amod
     +-- can MD aux
     +-- twice RB advmod
     +-- throughput NN dobj
         +-- the DT det
         +-- of IN prep
             +-- streaming VBG pcomp
                 +-- over IN prep
                     +-- tree NN pobj
                         +-- a DT det
                         +-- traditional JJ amod
                         +-- bandwidth NN nn
Input: Acknowledgments We would like to thank David Becker for his invaluable help with our ModelNet experiments and Ken Yocum for his help with ModelNet emulation optimizations
Parse:
Acknowledgments NNS ROOT
 +-- like VB rcmod
     +-- We PRP nsubj
     +-- would MD aux
     +-- thank VB xcomp
         +-- to TO aux
         +-- Becker NNP dobj
         |   +-- David NNP nn
         +-- for IN prep
             +-- help NN pobj
                 +-- his PRP$ poss
                 +-- invaluable JJ amod
                 +-- with IN prep
                 |   +-- experiments NNS pobj
                 |       +-- our PRP$ poss
                 |       +-- ModelNet NNP nn
                 |       +-- and CC cc
                 |       +-- Yocum NNP conj
                 |           +-- Ken NNP nn
                 +-- for IN prep
                     +-- help NN pobj
                         +-- his PRP$ poss
                         +-- with IN prep
                             +-- optimizations NNS pobj
                                 +-- ModelNet NNP nn
                                 +-- emulation NN nn
Input: In addition , we thank our shepherd Barbara Liskov and our anonymous reviewers who provided excellent feedback .
Parse:
thank VBP ROOT
 +-- In IN prep
 |   +-- addition NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- shepherd NN dobj
 |   +-- our PRP$ poss
 |   +-- Liskov NNP dep
 |   |   +-- Barbara NNP nn
 |   +-- and CC cc
 |   +-- reviewers NNS conj
 |       +-- our PRP$ poss
 |       +-- anonymous JJ amod
 |       +-- provided VBD rcmod
 |           +-- who WP nsubj
 |           +-- feedback NN dobj
 |               +-- excellent JJ amod
 +-- . . punct
