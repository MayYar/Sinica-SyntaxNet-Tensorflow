Input: Bullet is an efficient data distribution system for bandwidth intensive applications .
Parse:
system NN ROOT
 +-- Bullet NNP nsubj
 +-- is VBZ cop
 +-- an DT det
 +-- efficient JJ amod
 +-- distribution NN nn
 |   +-- data NN nn
 +-- for IN prep
 |   +-- applications NNS pobj
 |       +-- intensive JJ amod
 |           +-- bandwidth NN npadvmod
 +-- . . punct
Input: While many current overlay network distribution algorithms use a distribution tree to deliver data from the tree '' s root to all other nodes , Bullet layers a mesh on top of an original overlay tree to increase overall bandwidth to all nodes in the tree .
Parse:
layers VBZ ROOT
 +-- use VBP advcl
 |   +-- While IN mark
 |   +-- algorithms NNS nsubj
 |   |   +-- many JJ amod
 |   |   +-- current JJ amod
 |   |   +-- network NN nn
 |   |   |   +-- overlay NN nn
 |   |   +-- distribution NN nn
 |   +-- tree NN dobj
 |   |   +-- a DT det
 |   |   +-- distribution NN nn
 |   +-- deliver VB xcomp
 |       +-- to TO aux
 |       +-- data NNS dobj
 |       +-- from IN prep
 |       |   +-- root NN pobj
 |       |       +-- tree NN poss
 |       |           +-- the DT det
 |       |           +-- '' '' punct
 |       |           +-- s POS possessive
 |       +-- to IN prep
 |           +-- nodes NNS pobj
 |               +-- all DT det
 |               +-- other JJ amod
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- mesh NN dobj
 |   +-- a DT det
 +-- on IN prep
 |   +-- top NN pobj
 |       +-- of IN prep
 |           +-- tree NN pobj
 |               +-- an DT det
 |               +-- original JJ amod
 |               +-- overlay NN nn
 +-- increase VB xcomp
 |   +-- to TO aux
 |   +-- bandwidth NN dobj
 |   |   +-- overall JJ amod
 |   +-- to IN prep
 |       +-- nodes NNS pobj
 |           +-- all DT det
 |           +-- in IN prep
 |               +-- tree NN pobj
 |                   +-- the DT det
 +-- . . punct
Input: Hence , each node receives a parent stream from its parent in the tree and some number of perpendicular streams from chosen peers in the overlay .
Parse:
receives VBZ ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- node NN nsubj
 |   +-- each DT det
 +-- stream NN dobj
 |   +-- a DT det
 |   +-- parent NN nn
 |   +-- from IN prep
 |   |   +-- parent NN pobj
 |   |       +-- its PRP$ poss
 |   +-- in IN prep
 |   |   +-- tree NN pobj
 |   |       +-- the DT det
 |   +-- and CC cc
 |   +-- number NN conj
 |       +-- some DT det
 |       +-- of IN prep
 |           +-- streams NNS pobj
 |               +-- perpendicular JJ amod
 |               +-- from IN prep
 |                   +-- peers NNS pobj
 |                       +-- chosen VBN amod
 |                       +-- in IN prep
 |                           +-- overlay NN pobj
 |                               +-- the DT det
 +-- . . punct
Input: This has significant bandwidth impact when a single node in the overlay is unable to deliver adequate bandwidth to a receiving node .
Parse:
has VBZ ROOT
 +-- This DT nsubj
 +-- impact NN dobj
 |   +-- significant JJ amod
 |   +-- bandwidth JJ nn
 +-- unable JJ advcl
 |   +-- when WRB advmod
 |   +-- node NN nsubj
 |   |   +-- a DT det
 |   |   +-- single JJ amod
 |   |   +-- in IN prep
 |   |       +-- overlay NN pobj
 |   |           +-- the DT det
 |   +-- is VBZ cop
 |   +-- deliver VB xcomp
 |       +-- to TO aux
 |       +-- bandwidth NN dobj
 |       |   +-- adequate JJ amod
 |       +-- to IN prep
 |           +-- node NN pobj
 |               +-- a DT det
 |               +-- receiving VBG nn
 +-- . . punct
Input: Bullet requires an underlying overlay tree for RanSub to deliver random subsets of participants '' s state to nodes in the overlay , informing them of a set of nodes that may be good candidates for retrieving data not available from any of the node '' s current peers and parent .
Parse:
requires VBZ ROOT
 +-- Bullet NNP nsubj
 +-- tree NN dobj
 |   +-- an DT det
 |   +-- underlying JJ amod
 |   +-- overlay NN nn
 |   +-- for IN prep
 |       +-- RanSub NNP pobj
 +-- deliver VB xcomp
 |   +-- to TO aux
 |   +-- subsets NNS dobj
 |   |   +-- random JJ amod
 |   |   +-- of IN prep
 |   |       +-- state NN pobj
 |   |           +-- participants NNS poss
 |   |               +-- '' '' punct
 |   |               +-- s POS possessive
 |   +-- to IN prep
 |   |   +-- nodes NNS pobj
 |   |       +-- in IN prep
 |   |           +-- overlay NN pobj
 |   |               +-- the DT det
 |   +-- , , punct
 |   +-- informing VBG partmod
 |       +-- them PRP dobj
 |       +-- of IN prep
 |           +-- peers NNS pobj
 |               +-- set NN poss
 |               |   +-- a DT det
 |               |   +-- of IN prep
 |               |   |   +-- nodes NNS pobj
 |               |   +-- candidates NNS rcmod
 |               |   |   +-- that WDT nsubj
 |               |   |   +-- may MD aux
 |               |   |   +-- be VB cop
 |               |   |   +-- good JJ amod
 |               |   |   +-- for IN prep
 |               |   |       +-- retrieving VBG pcomp
 |               |   |           +-- data NNS dobj
 |               |   |               +-- available JJ amod
 |               |   |                   +-- not RB neg
 |               |   |                   +-- from IN prep
 |               |   |                       +-- any DT pobj
 |               |   |                           +-- of IN prep
 |               |   |                               +-- node NN pobj
 |               |   |                                   +-- the DT det
 |               |   +-- '' '' punct
 |               |   +-- s POS possessive
 |               +-- current JJ amod
 |               +-- and CC cc
 |               +-- parent NN conj
 +-- . . punct
Input: While we also use the underlying tree for baseline streaming , this is not critical to Bullet '' s ability to efficiently deliver data to nodes in the overlay .
Parse:
critical JJ ROOT
 +-- use VBP advcl
 |   +-- While IN mark
 |   +-- we PRP nsubj
 |   +-- also RB advmod
 |   +-- tree NN dobj
 |   |   +-- the DT det
 |   |   +-- underlying VBG amod
 |   +-- for IN prep
 |       +-- streaming NN pobj
 |           +-- baseline NN amod
 +-- , , punct
 +-- this DT nsubj
 +-- is VBZ cop
 +-- not RB neg
 +-- to IN prep
 |   +-- ability NN pobj
 |       +-- Bullet NNP poss
 |       |   +-- '' '' punct
 |       |   +-- s POS possessive
 |       +-- deliver VB infmod
 |           +-- to TO aux
 |           +-- efficiently RB advmod
 |           +-- data NNS dobj
 |           +-- to IN prep
 |               +-- nodes NNS pobj
 |                   +-- in IN prep
 |                       +-- overlay NN pobj
 |                           +-- the DT det
 +-- . . punct
Input: As a result , Bullet is capable of functioning on top of essentially any overlay tree .
Parse:
capable JJ ROOT
 +-- As IN prep
 |   +-- result NN pobj
 |       +-- a DT det
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- is VBZ cop
 +-- of IN prep
 |   +-- functioning VBG pcomp
 |       +-- on IN prep
 |           +-- top NN pobj
 |               +-- of IN prep
 |                   +-- tree NN pobj
 |                       +-- essentially RB advmod
 |                       +-- any DT det
 |                       +-- overlay JJ amod
 +-- . . punct
Input: In our experiments , we have run Bullet over random and bandwidth optimized trees created o ? ine -LRB- with global topological knowledge -RRB- .
Parse:
run VBN ROOT
 +-- In IN prep
 |   +-- experiments NNS pobj
 |       +-- our PRP$ poss
 +-- , , punct
 +-- we PRP nsubj
 +-- have VBP aux
 +-- Bullet NNP dobj
 +-- over IN prep
 |   +-- trees NNS pobj
 |       +-- random JJ amod
 |       |   +-- and CC cc
 |       |   +-- bandwidth NN conj
 |       +-- optimized VBN amod
 |       +-- created VBN partmod
 |       |   +-- o RB advmod
 |       |   +-- ? . punct
 |       |   +-- ine NN dobj
 |       +-- -LRB- -LRB- punct
 |       +-- with IN prep
 |       |   +-- knowledge NN pobj
 |       |       +-- global JJ amod
 |       |       +-- topological JJ amod
 |       +-- -RRB- -RRB- punct
 +-- . . punct
Input: Bullet registers itself with the underlying overlay tree so that it is informed when the overlay changes as nodes come and go or make performance transformations in the overlay .
Parse:
registers VBZ ROOT
 +-- Bullet NN nsubj
 +-- itself PRP dobj
 +-- with IN prep
 |   +-- tree NN pobj
 |       +-- the DT det
 |       +-- underlying VBG amod
 |       +-- overlay NN nn
 +-- informed VBN advcl
 |   +-- so IN mark
 |   +-- that IN mark
 |   +-- it PRP nsubjpass
 |   +-- is VBZ auxpass
 |   +-- come VBP advcl
 |       +-- when WRB advmod
 |       +-- changes NNS nsubj
 |       |   +-- the DT det
 |       |   +-- overlay NN nn
 |       |   +-- as IN prep
 |       |       +-- nodes NNS pobj
 |       +-- and CC cc
 |       +-- go VB conj
 |           +-- or CC cc
 |           +-- make VB conj
 |           |   +-- transformations NNS dobj
 |           |       +-- performance NN nn
 |           +-- in IN prep
 |               +-- overlay NN pobj
 |                   +-- the DT det
 +-- . . punct
Input: As with streaming overlays trees , Bullet can use standard transports such as TCP and UDP as well as our implementation of TFRC .
Parse:
use VB ROOT
 +-- As IN prep
 |   +-- with IN pcomp
 |       +-- trees NNS pobj
 |           +-- streaming VBG amod
 |           +-- overlays NNS nn
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- can MD aux
 +-- transports NNS dobj
 |   +-- standard JJ amod
 |   +-- as IN prep
 |       +-- such JJ mwe
 |       +-- TCP NNP pobj
 |           +-- and CC cc
 |           +-- UDP NNP conj
 |           +-- well RB cc
 |           |   +-- as RB advmod
 |           |   +-- as IN mwe
 |           +-- implementation NN conj
 |               +-- our PRP$ poss
 |               +-- of IN prep
 |                   +-- TFRC NNP pobj
 +-- . . punct
Input: For the remainder of this paper , we assume the use of TFRC since we primarily target streaming highbandwidth content and we do not require reliable or in order delivery .
Parse:
assume VBP ROOT
 +-- For IN prep
 |   +-- remainder NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- paper NN pobj
 |               +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- use NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- TFRC NNP pobj
 +-- target VBP advcl
 |   +-- since IN mark
 |   +-- we PRP nsubj
 |   +-- primarily RB advmod
 |   +-- streaming VBG xcomp
 |   |   +-- content NN dobj
 |   |       +-- highbandwidth JJ amod
 |   +-- and CC cc
 |   +-- require VB conj
 |       +-- we PRP nsubj
 |       +-- do VBP aux
 |       +-- not RB neg
 |       +-- delivery NN dobj
 |           +-- reliable JJ amod
 |           |   +-- or CC cc
 |           |   +-- in IN conj
 |           +-- order NN nn
 +-- . . punct
Input: For simplicity , we assume that packets originate at the root of the tree and are tagged with increasing sequence numbers .
Parse:
assume VBP ROOT
 +-- For IN prep
 |   +-- simplicity NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- originate VBP ccomp
 |   +-- that IN mark
 |   +-- packets NNS nsubj
 |   +-- at IN prep
 |   |   +-- root NN pobj
 |   |       +-- the DT det
 |   |       +-- of IN prep
 |   |           +-- tree NN pobj
 |   |               +-- the DT det
 |   +-- and CC cc
 |   +-- tagged VBN conj
 |       +-- are VBP auxpass
 |       +-- with IN prep
 |           +-- numbers NNS pobj
 |               +-- increasing VBG amod
 |               +-- sequence NN nn
 +-- . . punct
Input: Each node receiving a packet will optionally forward it to each of its children , depending on a number of factors relating to the child '' s bandwidth and its relative position in the tree .
Parse:
forward VB ROOT
 +-- node NN nsubj
 |   +-- Each DT det
 |   +-- receiving VBG partmod
 |       +-- packet NN dobj
 |           +-- a DT det
 +-- will MD aux
 +-- optionally RB advmod
 +-- it PRP dobj
 +-- to IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- children NNS pobj
 |               +-- its PRP$ poss
 +-- , , punct
 +-- depending VBG prep
 |   +-- on IN pcomp
 |       +-- bandwidth NN pobj
 |           +-- number NN poss
 |           |   +-- a DT det
 |           |   +-- of IN prep
 |           |   |   +-- factors NNS pobj
 |           |   |       +-- relating VBG partmod
 |           |   |           +-- to IN prep
 |           |   |               +-- child NN pobj
 |           |   |                   +-- the DT det
 |           |   +-- '' '' punct
 |           |   +-- s POS possessive
 |           +-- and CC cc
 |           +-- position NN conj
 |               +-- its PRP$ poss
 |               +-- relative JJ amod
 |               +-- in IN prep
 |                   +-- tree NN pobj
 |                       +-- the DT det
 +-- . . punct
Input: 3.1 Finding Overlay Peers RanSub periodically delivers subsets of uniformly random selected nodes to each participant in the overlay .
Parse:
delivers VBZ ROOT
 +-- 3.1 CD nsubj
 +-- Finding VBG csubj
 |   +-- RanSub NNP dobj
 |   |   +-- Overlay NNP nn
 |   |   +-- Peers NNPS nn
 |   +-- periodically RB advmod
 +-- subsets NNS dobj
 |   +-- of IN prep
 |       +-- nodes NNS pobj
 |           +-- selected VBN amod
 |               +-- uniformly RB advmod
 |               +-- random JJ dep
 +-- to IN prep
 |   +-- participant NN pobj
 |       +-- each DT det
 |       +-- in IN prep
 |           +-- overlay NN pobj
 |               +-- the DT det
 +-- . . punct
Input: Bullet receivers use these lists to locate remote peers able to transmit missing data items with good bandwidth .
Parse:
use VBP ROOT
 +-- receivers NNS nsubj
 |   +-- Bullet NN nn
 +-- lists NNS dobj
 |   +-- these DT det
 +-- locate VB xcomp
 |   +-- to TO aux
 |   +-- peers NNS dobj
 |       +-- remote JJ amod
 |       +-- able JJ amod
 |           +-- transmit VB xcomp
 |               +-- to TO aux
 |               +-- items NNS dobj
 |                   +-- missing VBG amod
 |                   +-- data NNS nn
 |                   +-- with IN prep
 |                       +-- bandwidth NN pobj
 |                           +-- good JJ amod
 +-- . . punct
Input: RanSub messages contain a set of summary tickets that include a small -LRB- 120 286 bytes -RRB- summary of the data that each node contains .
Parse:
contain VBP ROOT
 +-- messages NNS nsubj
 |   +-- RanSub NN nn
 +-- set NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- tickets NNS pobj
 |           +-- summary NN nn
 |           +-- include VBP rcmod
 |               +-- that WDT nsubj
 |               +-- summary NN dobj
 |                   +-- a DT det
 |                   +-- bytes NNS nn
 |                   |   +-- small JJ amod
 |                   |   +-- -LRB- -LRB- punct
 |                   |   +-- 286 CD num
 |                   |   |   +-- 120 CD number
 |                   |   +-- -RRB- -RRB- punct
 |                   +-- of IN prep
 |                       +-- data NNS pobj
 |                           +-- the DT det
 |                           +-- contains VBZ rcmod
 |                               +-- that WDT dobj
 |                               +-- node NN nsubj
 |                                   +-- each DT det
 +-- . . punct
Input: RanSub delivers subsets of these summary tickets to nodes every configurable epoch -LRB- 5 seconds by default -RRB- .
Parse:
delivers VBZ ROOT
 +-- RanSub NNP nsubj
 +-- subsets NNS dobj
 |   +-- of IN prep
 |       +-- tickets NNS pobj
 |           +-- these DT det
 |           +-- summary NN nn
 +-- to IN prep
 |   +-- nodes NNS pobj
 +-- epoch NN dobj
 |   +-- every DT det
 |   +-- configurable JJ amod
 |   +-- -LRB- -LRB- punct
 |   +-- seconds NNS dep
 |   |   +-- 5 CD num
 |   |   +-- by IN prep
 |   |       +-- default NN pobj
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: Each node in the tree maintains a working set of the packets it has received thus far , indexed by sequence numbers .
Parse:
maintains VBZ ROOT
 +-- node NN nsubj
 |   +-- Each DT det
 |   +-- in IN prep
 |       +-- tree NN pobj
 |           +-- the DT det
 +-- set NN dobj
 |   +-- a DT det
 |   +-- working VBG amod
 |   +-- of IN prep
 |       +-- packets NNS pobj
 |           +-- the DT det
 |           +-- received VBN rcmod
 |           |   +-- it PRP nsubj
 |           |   +-- has VBZ aux
 |           |   +-- far RB advmod
 |           |       +-- thus RB advmod
 |           +-- , , punct
 |           +-- indexed VBN partmod
 |               +-- by IN prep
 |                   +-- numbers NNS pobj
 |                       +-- sequence NN nn
 +-- . . punct
Input: Nodes associate each working set with a Bloom filter that maintains a summary of the packets received thus far .
Parse:
associate VB ROOT
 +-- Nodes NNS nsubj
 +-- set VBN dobj
 |   +-- each DT det
 |   +-- working VBG amod
 +-- with IN prep
 |   +-- filter NN pobj
 |       +-- a DT det
 |       +-- Bloom NNP nn
 |       +-- maintains VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- summary NN dobj
 |               +-- a DT det
 |               +-- of IN prep
 |               |   +-- packets NNS pobj
 |               |       +-- the DT det
 |               +-- received VBD partmod
 |                   +-- far RB advmod
 |                       +-- thus RB advmod
 +-- . . punct
Input: Since the Bloom filter does not exceed a specific size -LRB- m -RRB- and we would like to limit the rate of false positives , Bullet periodically cleans up the Bloom filter by removing lower sequence numbers from it .
Parse:
cleans VBZ ROOT
 +-- exceed VB advcl
 |   +-- Since IN mark
 |   +-- filter NN nsubj
 |   |   +-- the DT det
 |   |   +-- Bloom NNP nn
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- size NN dobj
 |   |   +-- a DT det
 |   |   +-- specific JJ amod
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- m NN dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- and CC cc
 |   +-- like VB conj
 |       +-- we PRP nsubj
 |       +-- would MD aux
 |       +-- limit VB xcomp
 |           +-- to TO aux
 |           +-- rate NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- positives NNS pobj
 |                       +-- false JJ amod
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- periodically RB advmod
 +-- up RP prt
 +-- filter NN dobj
 |   +-- the DT det
 |   +-- Bloom NNP nn
 +-- by IN prep
 |   +-- removing VBG pcomp
 |       +-- numbers NNS dobj
 |       |   +-- lower JJR amod
 |       |   +-- sequence NN nn
 |       +-- from IN prep
 |           +-- it PRP pobj
 +-- . . punct
Input: This allows us to keep the Bloom filter population n from growing at an unbounded rate .
Parse:
allows VBZ ROOT
 +-- This DT nsubj
 +-- keep VB xcomp
 |   +-- us PRP nsubj
 |   +-- to TO aux
 |   +-- population NN dobj
 |   |   +-- the DT det
 |   |   +-- Bloom NNP nn
 |   |   +-- filter NN nn
 |   +-- n CC dep
 |       +-- from IN prep
 |           +-- growing VBG pcomp
 |               +-- at IN prep
 |                   +-- rate NN pobj
 |                       +-- an DT det
 |                       +-- unbounded JJ amod
 +-- . . punct
Input: The net effect is that a node will attempt to recover packets for a finite amount of time depending on the packet arrival rate .
Parse:
is VBZ ROOT
 +-- effect NN nsubj
 |   +-- The DT det
 |   +-- net JJ amod
 +-- attempt VB ccomp
 |   +-- that IN mark
 |   +-- node NN nsubj
 |   |   +-- a DT det
 |   +-- will MD aux
 |   +-- recover VB xcomp
 |       +-- to TO aux
 |       +-- packets NNS dobj
 |       +-- for IN prep
 |           +-- amount NN pobj
 |               +-- a DT det
 |               +-- finite JJ amod
 |               +-- of IN prep
 |               |   +-- time NN pobj
 |               +-- depending VBG prep
 |                   +-- on IN pcomp
 |                       +-- rate NN pobj
 |                           +-- the DT det
 |                           +-- packet NN nn
 |                           +-- arrival NN nn
 +-- . . punct
Input: Similarly , Bullet removes older items that are not needed for data reconstruction from its working set and summary ticket .
Parse:
removes VBZ ROOT
 +-- Similarly RB advmod
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- items NNS dobj
 |   +-- older JJR amod
 |   +-- needed VBN rcmod
 |       +-- that WDT nsubjpass
 |       +-- are VBP auxpass
 |       +-- not RB neg
 |       +-- for IN prep
 |           +-- reconstruction NN pobj
 |               +-- data NNS nn
 |               +-- from IN prep
 |                   +-- ticket NN pobj
 |                       +-- its PRP$ poss
 |                       +-- set VBN nn
 |                           +-- working NN nn
 |                           +-- and CC cc
 |                           +-- summary NN conj
 +-- . . punct
Input: We use the collect and distribute phases of RanSub to carry Bullet summary tickets up and down the tree .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- phases NNS dobj
 |   +-- the DT det
 |   +-- collect JJ amod
 |   |   +-- and CC cc
 |   |   +-- distribute JJ conj
 |   +-- of IN prep
 |       +-- RanSub NNP pobj
 +-- carry VB xcomp
 |   +-- to TO aux
 |   +-- tickets NNS dobj
 |   |   +-- Bullet NNP nn
 |   |   +-- summary NN nn
 |   +-- up RB prep
 |       +-- and CC cc
 |       +-- down IN conj
 |       +-- tree NN pobj
 |           +-- the DT det
 +-- . . punct
Input: In our current implementation , we use a set size of 10 summary tickets , allowing each collect and distribute to fit well within the size of a non fragmented IP packet .
Parse:
use VBP ROOT
 +-- In IN prep
 |   +-- implementation NN pobj
 |       +-- our PRP$ poss
 |       +-- current JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- size NN dobj
 |   +-- a DT det
 |   +-- set VBN amod
 |   +-- of IN prep
 |       +-- tickets NNS pobj
 |           +-- 10 CD num
 |           +-- summary NN nn
 +-- allowing VBG partmod
 |   +-- collect JJ xcomp
 |       +-- each DT nsubj
 +-- and CC cc
 +-- distribute VBP conj
 |   +-- fit VB xcomp
 |       +-- to TO aux
 |       +-- well RB advmod
 |       +-- within IN prep
 |           +-- size NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- packet NN pobj
 |                       +-- a DT det
 |                       +-- fragmented JJ amod
 |                       |   +-- non NN npadvmod
 |                       +-- IP NN nn
 +-- . . punct
Input: Though Bullet supports larger set sizes , we expect this parameter to be tunable to specific applications '' needs .
Parse:
expect VBP ROOT
 +-- supports VBZ advcl
 |   +-- Though IN mark
 |   +-- Bullet NNP nsubj
 |   +-- sizes NNS dobj
 |       +-- larger JJR amod
 |       +-- set VBN amod
 +-- , , punct
 +-- we PRP nsubj
 +-- tunable JJ xcomp
 |   +-- parameter NN nsubj
 |   |   +-- this DT det
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- to IN prep
 |       +-- needs NNS pobj
 |           +-- applications NNS nn
 |           |   +-- specific JJ amod
 |           +-- '' '' punct
 +-- . . punct
Input: In practice , our default size of 10 yields favorable results for a variety of overlays and network topologies .
Parse:
results NNS ROOT
 +-- In IN prep
 |   +-- practice NN pobj
 +-- , , punct
 +-- size NN nsubj
 |   +-- our PRP$ poss
 |   +-- default NN nn
 |   +-- of IN prep
 |       +-- yields NNS pobj
 |           +-- 10 CD num
 +-- favorable JJ amod
 +-- for IN prep
 |   +-- variety NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- overlays NNS pobj
 |               +-- and CC cc
 |               +-- topologies NNS conj
 |                   +-- network NN nn
 +-- . . punct
Input: In essence , during an epoch a node receives a summarized partial view of the system '' s state at that time .
Parse:
receives VBZ ROOT
 +-- In IN prep
 |   +-- essence NN pobj
 +-- , , punct
 +-- during IN prep
 |   +-- epoch NN pobj
 |       +-- an DT det
 +-- node NN nsubj
 |   +-- a DT det
 +-- view NN dobj
 |   +-- a DT det
 |   +-- summarized VBN amod
 |   +-- partial JJ amod
 |   +-- of IN prep
 |       +-- state NN pobj
 |           +-- system NN poss
 |               +-- the DT det
 |               +-- '' '' punct
 |               +-- s POS possessive
 +-- at IN prep
 |   +-- time NN pobj
 |       +-- that DT det
 +-- . . punct
Input: Upon receiving a random subset each epoch , a Bullet node may choose to peer with the node having the lowest similarity ratio when compared to its own summary ticket .
Parse:
choose VB ROOT
 +-- Upon IN prep
 |   +-- receiving VBG pcomp
 |       +-- subset NN iobj
 |       |   +-- a DT det
 |       |   +-- random JJ amod
 |       +-- epoch NN dobj
 |           +-- each DT det
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 |   +-- Bullet NNP nn
 +-- may MD aux
 +-- peer VB xcomp
 |   +-- to TO aux
 |   +-- with IN prep
 |       +-- having VBG pcomp
 |           +-- node NN nsubj
 |           |   +-- the DT det
 |           +-- ratio NN dobj
 |           |   +-- the DT det
 |           |   +-- lowest JJS amod
 |           |   +-- similarity NN amod
 |           +-- compared VBN advcl
 |               +-- when WRB advmod
 |               +-- to IN prep
 |                   +-- ticket NN pobj
 |                       +-- its PRP$ poss
 |                       +-- own JJ amod
 |                       +-- summary NN nn
 +-- . . punct
Input: This is done only when the node has sufficient space in its sender list to accept another sender -LRB- senders with lackluster performance are removed from the current sender list as described in section 3.4 -RRB- .
Parse:
done VBN ROOT
 +-- This DT nsubjpass
 +-- is VBZ auxpass
 +-- has VBZ advcl
 |   +-- when WRB advmod
 |   |   +-- only RB advmod
 |   +-- node NN nsubj
 |   |   +-- the DT det
 |   +-- space NN dobj
 |   |   +-- sufficient JJ amod
 |   |   +-- in IN prep
 |   |       +-- list NN pobj
 |   |           +-- its PRP$ poss
 |   |           +-- sender NN nn
 |   +-- accept VB xcomp
 |       +-- to TO aux
 |       +-- sender NN dobj
 |           +-- another DT det
 |           +-- removed VBN dep
 |               +-- -LRB- -LRB- punct
 |               +-- senders NNS nsubjpass
 |               |   +-- with IN prep
 |               |       +-- performance NN pobj
 |               |           +-- lackluster JJ amod
 |               +-- are VBP auxpass
 |               +-- from IN prep
 |               |   +-- list NN pobj
 |               |       +-- the DT det
 |               |       +-- current JJ amod
 |               |       +-- sender NN nn
 |               +-- described VBN advcl
 |               |   +-- as IN mark
 |               |   +-- in IN prep
 |               |       +-- section NN pobj
 |               |           +-- 3.4 CD num
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: Once a node has chosen the best node it sends it a peering request containing the requesting node '' s Bloom filter .
Parse:
sends VBZ ROOT
 +-- chosen VBN advcl
 |   +-- Once IN mark
 |   +-- node NN nsubj
 |   |   +-- a DT det
 |   +-- has VBZ aux
 |   +-- node NN dobj
 |       +-- the DT det
 |       +-- best JJS amod
 +-- it PRP nsubj
 +-- it PRP iobj
 +-- request NN dobj
 |   +-- a DT det
 |   +-- peering VBG amod
 |   +-- containing VBG partmod
 |       +-- filter NN dobj
 |           +-- node NN poss
 |           |   +-- the DT det
 |           |   +-- requesting VBG amod
 |           |   +-- '' '' punct
 |           |   +-- s POS possessive
 |           +-- Bloom NNP nn
 +-- . . punct
Input: Such a request is accepted by the potential sender if it has sufficient space in its receiver list for the incoming receiver .
Parse:
accepted VBN ROOT
 +-- request NN nsubjpass
 |   +-- Such PDT predet
 |   +-- a DT det
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- sender NN pobj
 |       +-- the DT det
 |       +-- potential JJ amod
 +-- has VBZ advcl
 |   +-- if IN mark
 |   +-- it PRP nsubj
 |   +-- space NN dobj
 |       +-- sufficient JJ amod
 |       +-- in IN prep
 |           +-- list NN pobj
 |               +-- its PRP$ poss
 |               +-- receiver NN nn
 |               +-- for IN prep
 |                   +-- receiver NN pobj
 |                       +-- the DT det
 |                       +-- incoming JJ amod
 +-- . . punct
Input: Otherwise , the send request is rejected -LRB- space is periodically created in the receiver lists as further described in section 3.4 -RRB- .
Parse:
rejected VBN ROOT
 +-- Otherwise RB advmod
 +-- , , punct
 +-- request NN nsubjpass
 |   +-- the DT det
 |   +-- send VB amod
 +-- is VBZ auxpass
 +-- created VBN parataxis
 |   +-- -LRB- -LRB- punct
 |   +-- space NN nsubjpass
 |   +-- is VBZ auxpass
 |   +-- periodically RB advmod
 |   +-- in IN prep
 |   |   +-- lists NNS pobj
 |   |       +-- the DT det
 |   |       +-- receiver NN nn
 |   +-- described VBN advcl
 |   |   +-- as IN mark
 |   |   +-- further RB advmod
 |   |   +-- in IN prep
 |   |       +-- section NN pobj
 |   |           +-- 3.4 CD num
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: 3.2 Recovering Data From Peers Assuming it has space for the new peer , a recipient of the peering request installs the received Bloom filter and will periodically transmit keys not present in the Bloom filter to the requesting node .
Parse:
has VBZ ROOT
 +-- Data NNP nsubj
 |   +-- 3.2 CD num
 |   +-- Recovering VBG amod
 |   +-- From IN prep
 |   |   +-- Peers NNPS pobj
 |   +-- Assuming VBG partmod
 |       +-- it PRP dobj
 +-- installs VBZ ccomp
 |   +-- space NN nsubj
 |   |   +-- for IN prep
 |   |       +-- peer NN pobj
 |   |           +-- the DT det
 |   |           +-- new JJ amod
 |   |           +-- , , punct
 |   |           +-- recipient NN appos
 |   |               +-- a DT det
 |   |               +-- of IN prep
 |   |                   +-- request NN pobj
 |   |                       +-- the DT det
 |   |                       +-- peering JJ amod
 |   +-- filter NN dobj
 |   |   +-- the DT det
 |   |   +-- received VBN amod
 |   |   +-- Bloom NNP nn
 |   +-- and CC cc
 |   +-- transmit VB conj
 |       +-- will MD aux
 |       +-- periodically RB advmod
 |       +-- keys NNS dobj
 |       |   +-- present JJ amod
 |       |       +-- not RB neg
 |       |       +-- in IN prep
 |       |           +-- filter NN pobj
 |       |               +-- the DT det
 |       |               +-- Bloom NNP nn
 |       +-- to IN prep
 |           +-- node NN pobj
 |               +-- the DT det
 |               +-- requesting VBG amod
 +-- . . punct
Input: The requesting node will refresh its installed Bloom filters at each of its sending peers periodically .
Parse:
refresh VB ROOT
 +-- node NN nsubj
 |   +-- The DT det
 |   +-- requesting VBG amod
 +-- will MD aux
 +-- filters NNS dobj
 |   +-- its PRP$ poss
 |   +-- installed JJ amod
 |   +-- Bloom NNP nn
 +-- at IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- sending VBG pcomp
 |               +-- its PRP$ nsubj
 |               +-- peers NNS dobj
 |               +-- periodically RB advmod
 +-- . . punct
Input: Along with the fresh filter , a receiving node will also assign a portion of the sequence space to each of its senders .
Parse:
assign VB ROOT
 +-- Along IN prep
 |   +-- with IN pcomp
 |       +-- filter NN pobj
 |           +-- the DT det
 |           +-- fresh JJ amod
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 |   +-- receiving VBG nn
 +-- will MD aux
 +-- also RB advmod
 +-- portion NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- space NN pobj
 |           +-- the DT det
 |           +-- sequence NN nn
 +-- to IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- senders NNS pobj
 |               +-- its PRP$ poss
 +-- . . punct
Input: In this way , a node is able the reduce the likelihood that two peers simultaneously transmit the same key to it , wasting network resources .
Parse:
able JJ ROOT
 +-- In IN prep
 |   +-- way NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 +-- is VBZ cop
 +-- reduce VB ccomp
 |   +-- the DT nsubj
 |   +-- likelihood NN dobj
 |       +-- the DT det
 |       +-- transmit VBP ccomp
 |           +-- that WDT mark
 |           +-- peers NNS nsubj
 |           |   +-- two CD num
 |           +-- simultaneously RB advmod
 |           +-- key NN dobj
 |           |   +-- the DT det
 |           |   +-- same JJ amod
 |           |   +-- to IN prep
 |           |       +-- it PRP pobj
 |           +-- , , punct
 |           +-- wasting VBG partmod
 |               +-- resources NNS dobj
 |                   +-- network NN nn
 +-- . . punct
Input: A node divides the sequence space in its current working set among each of its senders uniformly .
Parse:
divides VBZ ROOT
 +-- node NN nsubj
 |   +-- A DT det
 +-- space NN dobj
 |   +-- the DT det
 |   +-- sequence NN nn
 |   +-- in IN prep
 |   |   +-- set NN pobj
 |   |       +-- its PRP$ poss
 |   |       +-- current JJ amod
 |   |       +-- working NN nn
 |   +-- among IN prep
 |       +-- each DT pobj
 |           +-- of IN prep
 |               +-- senders NNS pobj
 |                   +-- its PRP$ poss
 +-- uniformly RB advmod
 +-- . . punct
Input: As illustrated in Figure 4 , a Bullet receiver views the data space as a matrix of packet sequences containing s rows , where s is its current number of sending peers .
Parse:
views VBZ ROOT
 +-- illustrated VBN advcl
 |   +-- As IN mark
 |   +-- in IN prep
 |       +-- Figure NN pobj
 |           +-- 4 CD num
 +-- , , punct
 +-- receiver NN nsubj
 |   +-- a DT det
 |   +-- Bullet NNP nn
 +-- space NN dobj
 |   +-- the DT det
 |   +-- data NNS nn
 +-- as IN prep
 |   +-- matrix NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |       |   +-- sequences NNS pobj
 |       |       +-- packet NN nn
 |       +-- containing VBG partmod
 |       |   +-- rows NNS dobj
 |       |       +-- s POS poss
 |       +-- , , punct
 |       +-- number NN rcmod
 |           +-- where WRB advmod
 |           +-- s PRP nsubj
 |           +-- is VBZ cop
 |           +-- its PRP$ poss
 |           +-- current JJ amod
 |           +-- of IN prep
 |               +-- sending VBG pcomp
 |                   +-- peers NNS dobj
 +-- . . punct
Input: A receiver periodically -LRB- every 5 seconds by default -RRB- updates each sender with its current Bloom filter and the range of sequences covered in its Bloom filter .
Parse:
updates VBZ ROOT
 +-- receiver NN nsubj
 |   +-- A DT det
 |   +-- periodically RB advmod
 |   +-- -LRB- -LRB- punct
 |   +-- seconds NNS dep
 |   |   +-- every DT det
 |   |   +-- 5 CD num
 |   |   +-- by IN prep
 |   |       +-- default NN pobj
 |   +-- -RRB- -RRB- punct
 +-- sender NN dobj
 |   +-- each DT det
 +-- with IN prep
 |   +-- filter NN pobj
 |       +-- its PRP$ poss
 |       +-- current JJ amod
 |       +-- Bloom NNP nn
 |       +-- and CC cc
 |       +-- range NN conj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- sequences NNS pobj
 |                   +-- covered VBN partmod
 |                       +-- in IN prep
 |                           +-- filter NN pobj
 |                               +-- its PRP$ poss
 |                               +-- Bloom NNP nn
 +-- . . punct
Input: This identifies the range of packets that the receiver is currently interested in recovering .
Parse:
identifies VBZ ROOT
 +-- This DT nsubj
 +-- range NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- packets NNS pobj
 |           +-- interested JJ rcmod
 |               +-- that WDT dobj
 |               +-- receiver NN nsubj
 |               |   +-- the DT det
 |               +-- is VBZ cop
 |               +-- currently RB advmod
 |               +-- in IN prep
 |                   +-- recovering VBG pcomp
 +-- . . punct
Input: Over time , this range shifts as depicted in Figure 4 b -RRB- .
Parse:
shifts VBZ ROOT
 +-- Over IN prep
 |   +-- time NN pobj
 +-- , , punct
 +-- range NN nsubj
 |   +-- this DT det
 +-- depicted VBN advcl
 |   +-- as IN mark
 |   +-- in IN prep
 |       +-- b NN pobj
 |           +-- Figure NN nn
 |               +-- 4 CD num
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: In addition , the receiving node assigns to each sender a row from the matrix , labeled mod .
Parse:
assigns VBZ ROOT
 +-- In IN prep
 |   +-- addition NN pobj
 +-- , , punct
 +-- node NN nsubj
 |   +-- the DT det
 |   +-- receiving VBG nn
 +-- to IN prep
 |   +-- sender VB pobj
 |       +-- each DT det
 +-- row NN dobj
 |   +-- a DT det
 +-- from IN prep
 |   +-- matrix NN pobj
 |       +-- the DT det
 |       +-- , , punct
 |       +-- labeled VBD partmod
 |           +-- mod NN dobj
 +-- . . punct
Input: A sender will forward packets to b -RRB- Mod = 3 00000000000000000000000000000000001111111111111111111111111111111111 7 1 2 8 a -RRB- Senders = 7Mod = 2 Low High Time 00000000000000000000000000000000001111111111111111111111111111111111 Figure 4
Parse:
2 CD ROOT
 +-- forward VB dep
 |   +-- sender NN nsubj
 |   |   +-- A DT det
 |   +-- will MD aux
 |   +-- packets NNS dobj
 |   +-- to IN prep
 |       +-- Mod NNP pobj
 |           +-- b LS dep
 |               +-- -RRB- -RRB- punct
 +-- = SYM dep
 +-- 3 CD number
 +-- 00000000000000000000000000000000001111111111111111111111111111111111 CD number
 +-- 7 CD number
 +-- 1 CD number
 +-- Time NNP dep
     +-- 8 CD num
     +-- a ADD dep
     +-- -RRB- -RRB- punct
     +-- Senders NNPS nn
     +-- = SYM dep
     |   +-- 2 CD num
     +-- 7Mod CD num
     +-- Low JJ amod
     +-- High JJ amod
     +-- Figure NN dep
         +-- 00000000000000000000000000000000001111111111111111111111111111111111 CD num
         +-- 4 CD num
Input: It requests data within the range -LRB- Low , High -RRB- of sequence numbers based on what it has received .
Parse:
requests VBZ ROOT
 +-- It PRP nsubj
 +-- data NNS dobj
 |   +-- within IN prep
 |   |   +-- range NN pobj
 |   |       +-- the DT det
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- High NNP dep
 |   |       |   +-- Low UH nn
 |   |       |   +-- , , punct
 |   |       +-- -RRB- -RRB- punct
 |   |       +-- of IN prep
 |   |           +-- numbers NNS pobj
 |   |               +-- sequence NN nn
 |   +-- based VBN partmod
 |       +-- on IN prep
 |           +-- received VBN pcomp
 |               +-- what WP dobj
 |               +-- it PRP nsubj
 |               +-- has VBZ aux
 +-- . . punct
Input: a -RRB- The receiver requests a specific row in the sequence matrix from each sender .
Parse:
requests VBZ ROOT
 +-- a LS dep
 |   +-- -RRB- -RRB- punct
 +-- receiver NN nsubj
 |   +-- The DT det
 +-- row NN dobj
 |   +-- a DT det
 |   +-- specific JJ amod
 +-- in IN prep
 |   +-- matrix NN pobj
 |       +-- the DT det
 |       +-- sequence NN nn
 |       +-- from IN prep
 |           +-- sender NN pobj
 |               +-- each DT det
 +-- . . punct
Input: b -RRB- As it receives more data , the range of sequences advances and the receiver requests different rows from senders .
Parse:
advances NNS ROOT
 +-- b LS dep
 |   +-- -RRB- -RRB- punct
 +-- receives VBZ advcl
 |   +-- As IN mark
 |   +-- it PRP nsubj
 |   +-- data NNS dobj
 |       +-- more JJR amod
 +-- , , punct
 +-- range NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- sequences NNS pobj
 +-- and CC cc
 +-- requests NNS conj
 |   +-- receiver NN nsubj
 |   |   +-- the DT det
 |   +-- rows NNS dobj
 |   |   +-- different JJ amod
 |   +-- from IN prep
 |       +-- senders NNS pobj
 +-- . . punct
Input: the receiver that have a sequence number x such that x modulo s equals the mod number .
Parse:
receiver NN ROOT
 +-- the DT det
 +-- have VBP rcmod
 |   +-- that WDT nsubj
 |   +-- number NN dobj
 |       +-- a DT det
 |       +-- sequence NN nn
 +-- x , punct
 +-- equals VBZ dep
 |   +-- such JJ dep
 |   +-- that IN mark
 |   +-- x , punct
 |   +-- modulo NN nsubj
 |   |   +-- s POS possessive
 |   +-- number NN dobj
 |       +-- the DT det
 |       +-- mod NN nn
 +-- . . punct
Input: In this fashion , receivers register to receive disjoint data from their sending peers .
Parse:
register VBP ROOT
 +-- In IN prep
 |   +-- fashion NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- receivers NNS nsubj
 +-- receive VB xcomp
 |   +-- to TO aux
 |   +-- data NNS dobj
 |   |   +-- disjoint NN nn
 |   +-- from IN prep
 |       +-- peers NNS pobj
 |           +-- their PRP$ poss
 |           +-- sending VBG nn
 +-- . . punct
Input: By specifying ranges and matrix rows , a receiver is unlikely to receive duplicate data items , which would result in wasted bandwidth .
Parse:
unlikely JJ ROOT
 +-- By IN prep
 |   +-- specifying VBG pcomp
 |       +-- ranges NNS dobj
 |           +-- and CC cc
 |           +-- rows NNS conj
 |               +-- matrix NN nn
 +-- , , punct
 +-- receiver NN nsubj
 |   +-- a DT det
 +-- is VBZ cop
 +-- receive VB xcomp
 |   +-- to TO aux
 |   +-- items NNS dobj
 |       +-- duplicate JJ amod
 |       +-- data NNS nn
 |       +-- , , punct
 |       +-- result VB rcmod
 |           +-- which WDT nsubj
 |           +-- would MD aux
 |           +-- in IN prep
 |               +-- bandwidth NN pobj
 |                   +-- wasted JJ amod
 +-- . . punct
Input: A duplicate packet , however , may be received when a parent recovers a packet from one of its peers and relays the packet to its children -LRB- and descendants -RRB- .
Parse:
received VBN ROOT
 +-- packet NN nsubjpass
 |   +-- A DT det
 |   +-- duplicate JJ amod
 +-- , , punct
 +-- however RB advmod
 +-- may MD aux
 +-- be VB auxpass
 +-- recovers VBZ advcl
 |   +-- when WRB advmod
 |   +-- parent NN nsubj
 |   |   +-- a DT det
 |   +-- packet NN dobj
 |   |   +-- a DT det
 |   |   +-- from IN prep
 |   |       +-- one CD pobj
 |   |           +-- of IN prep
 |   |               +-- peers NNS pobj
 |   |                   +-- its PRP$ poss
 |   +-- and CC cc
 |   +-- relays VBZ conj
 |       +-- packet NN dobj
 |       |   +-- the DT det
 |       +-- to IN prep
 |           +-- children NNS pobj
 |               +-- its PRP$ poss
 |               +-- -LRB- -LRB- punct
 |               +-- and CC cc
 |               +-- descendants NNS conj
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: In this case , a descendant would receive the packet out of order and may have already recovered it from one of its peers .
Parse:
receive VB ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- descendant NN nsubj
 |   +-- a DT det
 +-- would MD aux
 +-- packet NN dobj
 |   +-- the DT det
 +-- out IN prep
 |   +-- of IN pcomp
 |       +-- order NN pobj
 +-- and CC cc
 +-- recovered VBN conj
 |   +-- may MD aux
 |   +-- have VB aux
 |   +-- already RB advmod
 |   +-- it PRP dobj
 |   +-- from IN prep
 |       +-- one CD pobj
 |           +-- of IN prep
 |               +-- peers NNS pobj
 |                   +-- its PRP$ poss
 +-- . . punct
Input: In practice , this wasteful reception of duplicate packets is tolerable ; less than 10 % of all received packets are duplicates in our experiments .
Parse:
tolerable JJ ROOT
 +-- In IN prep
 |   +-- practice NN pobj
 +-- , , punct
 +-- reception NN nsubj
 |   +-- this DT det
 |   +-- wasteful JJ amod
 |   +-- of IN prep
 |       +-- packets NNS pobj
 |           +-- duplicate JJ amod
 +-- is VBZ cop
 +-- ; : punct
 +-- duplicates NNS parataxis
 |   +-- % NN nsubj
 |   |   +-- 10 CD num
 |   |   |   +-- than IN quantmod
 |   |   |       +-- less JJR mwe
 |   |   +-- of IN prep
 |   |       +-- packets NNS pobj
 |   |           +-- all DT det
 |   |           +-- received VBN amod
 |   +-- are VBP cop
 |   +-- in IN prep
 |       +-- experiments NNS pobj
 |           +-- our PRP$ poss
 +-- . . punct
Input: 3.3 Making Data Disjoint We now provide details of Bullet '' s mechanisms to increase the ease by which nodes can find disjoint data not provided by parents .
Parse:
Making VBG ROOT
 +-- 3.3 CD dep
 +-- Disjoint NNP dobj
 |   +-- Data NNP nn
 +-- provide VBP dep
 |   +-- We PRP nsubj
 |   +-- now RB advmod
 |   +-- details NNS dobj
 |       +-- of IN prep
 |       |   +-- mechanisms NNS pobj
 |       |       +-- Bullet NNP poss
 |       |           +-- '' '' punct
 |       |           +-- s POS possessive
 |       +-- increase VB infmod
 |           +-- to TO aux
 |           +-- ease NN dobj
 |               +-- the DT det
 |               +-- find VB rcmod
 |                   +-- by IN prep
 |                   |   +-- which WDT pobj
 |                   +-- nodes NNS nsubj
 |                   +-- can MD aux
 |                   +-- data NNS dobj
 |                       +-- disjoint NN nn
 |                       +-- provided VBN partmod
 |                           +-- not RB neg
 |                           +-- by IN prep
 |                               +-- parents NNS pobj
 +-- . . punct
Input: We operate on the premise that the main challenge in recovering lost data packets transmitted over an overlay distribution tree lies in finding the peer node housing the data to recover .
Parse:
operate VBP ROOT
 +-- We PRP nsubj
 +-- on IN prep
 |   +-- premise NN pobj
 |       +-- the DT det
 |       +-- lies VBZ ccomp
 |           +-- that IN mark
 |           +-- challenge NN nsubj
 |           |   +-- the DT det
 |           |   +-- main JJ amod
 |           |   +-- in IN prep
 |           |       +-- recovering VBG pcomp
 |           |           +-- packets NNS dobj
 |           |               +-- lost VBN amod
 |           |               +-- data NNS nn
 |           |               +-- transmitted VBN partmod
 |           |                   +-- over IN prep
 |           |                       +-- tree NN pobj
 |           |                           +-- an DT det
 |           |                           +-- overlay JJ amod
 |           |                           +-- distribution NN nn
 |           +-- in IN prep
 |               +-- finding VBG pcomp
 |                   +-- node NN dobj
 |                       +-- the DT det
 |                       +-- peer NN nn
 |                       +-- housing VBG partmod
 |                       |   +-- data NNS dobj
 |                       |       +-- the DT det
 |                       +-- recover VB infmod
 |                           +-- to TO aux
 +-- . . punct
Input: Many systems take a hierarchical approach to this problem , propagating repair requests up the distribution tree until the request can be satisfied .
Parse:
take VBP ROOT
 +-- systems NNS nsubj
 |   +-- Many JJ amod
 +-- approach NN dobj
 |   +-- a DT det
 |   +-- hierarchical JJ amod
 +-- to IN prep
 |   +-- problem NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- requests VBZ ccomp
 |   +-- repair NN nsubj
 |   |   +-- propagating VBG nn
 |   +-- up RP prt
 |   +-- tree NN dobj
 |   |   +-- the DT det
 |   |   +-- distribution NN nn
 |   +-- satisfied JJ advcl
 |       +-- until IN mark
 |       +-- request NN nsubj
 |       |   +-- the DT det
 |       +-- can MD aux
 |       +-- be VB cop
 +-- . . punct
Input: This ultimately leads to scalability issues at higher levels in the hierarchy particularly when overlay links are bandwidthconstrained .
Parse:
leads VBZ ROOT
 +-- This DT nsubj
 +-- ultimately RB advmod
 +-- to IN prep
 |   +-- issues NNS pobj
 |       +-- scalability NN nn
 |       +-- at IN prep
 |           +-- levels NNS pobj
 |               +-- higher JJR amod
 |               +-- in IN prep
 |                   +-- hierarchy NN pobj
 |                       +-- the DT det
 +-- bandwidthconstrained VBN advcl
 |   +-- when WRB advmod
 |   |   +-- particularly RB advmod
 |   +-- links NNS nsubj
 |   |   +-- overlay NN nn
 |   +-- are VBP cop
 +-- . . punct
Input: On the other hand , Bullet attempts to recover lost data from any non descendant node , not just ancestors , thereby increasing overall system scalability .
Parse:
lost VBN ROOT
 +-- On IN prep
 |   +-- hand NN pobj
 |       +-- the DT det
 |       +-- other JJ amod
 +-- , , punct
 +-- attempts NNS nsubj
 |   +-- Bullet NNP nn
 |   +-- recover VB infmod
 |       +-- to TO aux
 +-- data NNS dobj
 +-- from IN prep
 |   +-- node NN pobj
 |       +-- any DT det
 |       +-- descendant NN nn
 |       |   +-- non CD nn
 |       +-- , , punct
 |       +-- not RB neg
 |       +-- ancestors NNS dep
 |           +-- just RB advmod
 +-- increasing VBG xcomp
 |   +-- thereby RB advmod
 |   +-- scalability NN dobj
 |       +-- overall JJ amod
 |       +-- system NN nn
 +-- . . punct
Input: In traditional overlay distribution trees , packets are lost by the transmission transport and or the network .
Parse:
lost VBN ROOT
 +-- In IN prep
 |   +-- trees NNS pobj
 |       +-- traditional JJ amod
 |       +-- overlay NN nn
 |       +-- distribution NN nn
 +-- , , punct
 +-- packets NNS nsubjpass
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- transport NN pobj
 |       +-- the DT det
 |       +-- transmission NN nn
 |       +-- and CC cc
 |       +-- or CC cc
 |       +-- network NN conj
 |           +-- the DT det
 +-- . . punct
Input: Nodes attempt to stream data as fast as possible to each child and have essentially no control over which portions of the data stream are dropped by the transport or network .
Parse:
attempt VBP ROOT
 +-- Nodes NNS nsubj
 +-- stream VB xcomp
 |   +-- to TO aux
 |   +-- data NNS dobj
 |   +-- fast RB advmod
 |   |   +-- as RB advmod
 |   |   +-- as IN prep
 |   |       +-- possible JJ pobj
 |   |           +-- to IN prep
 |   |               +-- child NN pobj
 |   |                   +-- each DT det
 |   +-- and CC cc
 |   +-- dropped VBN conj
 |       +-- have VBP aux
 |       +-- control NN dobj
 |       |   +-- no DT amod
 |       |       +-- essentially RB advmod
 |       +-- over IN prep
 |       |   +-- which WDT pobj
 |       +-- portions NNS nsubjpass
 |       |   +-- of IN prep
 |       |       +-- stream NN pobj
 |       |           +-- the DT det
 |       |           +-- data NNS nn
 |       +-- are VBP auxpass
 |       +-- by IN prep
 |           +-- transport NN pobj
 |               +-- the DT det
 |               +-- or CC cc
 |               +-- network NN conj
 +-- . . punct
Input: As a result , the streaming subsystem has no control over how many nodes in the system will ultimately receive a particular portion of the data .
Parse:
has VBZ ROOT
 +-- As IN prep
 |   +-- result NN pobj
 |       +-- a DT det
 +-- , , punct
 +-- subsystem NN nsubj
 |   +-- the DT det
 |   +-- streaming NN amod
 +-- control NN dobj
 |   +-- no DT det
 |   +-- over IN prep
 |       +-- receive VB pcomp
 |           +-- nodes NNS nsubj
 |           |   +-- many JJ amod
 |           |   |   +-- how WRB advmod
 |           |   +-- in IN prep
 |           |       +-- system NN pobj
 |           |           +-- the DT det
 |           +-- will MD aux
 |           +-- ultimately RB advmod
 |           +-- portion NN dobj
 |               +-- a DT det
 |               +-- particular JJ amod
 |               +-- of IN prep
 |                   +-- data NNS pobj
 |                       +-- the DT det
 +-- . . punct
Input: If few nodes receive a particular range of packets , recovering these pieces of data becomes more difficult , requiring increased communication costs , and leading to scalability problems .
Parse:
difficult JJ ROOT
 +-- receive VBP advcl
 |   +-- If IN mark
 |   +-- nodes NNS nsubj
 |   |   +-- few JJ amod
 |   +-- range NN dobj
 |       +-- a DT det
 |       +-- particular JJ amod
 |       +-- of IN prep
 |           +-- packets NNS pobj
 +-- , , punct
 +-- recovering VBG csubj
 |   +-- pieces NNS dobj
 |       +-- these DT det
 |       +-- of IN prep
 |           +-- data NNS pobj
 +-- becomes VBZ cop
 +-- more RBR advmod
 +-- requiring VBG ccomp
 |   +-- costs NNS dobj
 |   |   +-- increased VBN amod
 |   |   +-- communication NN nn
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- leading VBG conj
 |       +-- to IN prep
 |           +-- problems NNS pobj
 |               +-- scalability NN nn
 +-- . . punct
Input: In contrast , Bullet nodes are aware of the bandwidth achievable to each of its children using the underlying transport .
Parse:
aware JJ ROOT
 +-- In IN prep
 |   +-- contrast NN pobj
 +-- , , punct
 +-- nodes NNS nsubj
 |   +-- Bullet NNP nn
 +-- are VBP cop
 +-- of IN prep
 |   +-- bandwidth NN pobj
 |       +-- the DT det
 |       +-- achievable JJ amod
 |       |   +-- to IN prep
 |       |       +-- each DT pobj
 |       |           +-- of IN prep
 |       |               +-- children NNS pobj
 |       |                   +-- its PRP$ poss
 |       +-- using VBG partmod
 |           +-- transport NN dobj
 |               +-- the DT det
 |               +-- underlying JJ amod
 +-- . . punct
Input: If 287 a child is unable to receive the streaming rate that the parent receives , the parent consciously decides which portion of the data stream to forward to the constrained child .
Parse:
decides VBZ ROOT
 +-- unable JJ advcl
 |   +-- If IN mark
 |   +-- child NN nsubj
 |   |   +-- 287 CD num
 |   |   +-- a DT det
 |   +-- is VBZ cop
 |   +-- receive VB xcomp
 |       +-- to TO aux
 |       +-- rate NN dobj
 |           +-- the DT det
 |           +-- streaming NN amod
 |           +-- receives VBZ rcmod
 |               +-- that WDT dobj
 |               +-- parent NN nsubj
 |                   +-- the DT det
 +-- , , punct
 +-- parent NN nsubj
 |   +-- the DT det
 +-- consciously RB advmod
 +-- forward VB xcomp
 |   +-- portion NN nsubj
 |   |   +-- which WDT det
 |   |   +-- of IN prep
 |   |       +-- stream NN pobj
 |   |           +-- the DT det
 |   |           +-- data NNS nn
 |   +-- to TO aux
 |   +-- to IN prep
 |       +-- child NN pobj
 |           +-- the DT det
 |           +-- constrained JJ amod
 +-- . . punct
Input: In addition , because nodes recover data from participants chosen uniformly at random from the set of non descendants , it is advantageous to make each transmitted packet recoverable from approximately the same number of participant nodes .
Parse:
advantageous JJ ROOT
 +-- In IN prep
 |   +-- addition NN pobj
 +-- , , punct
 +-- recover VBP advcl
 |   +-- because IN mark
 |   +-- nodes NNS nsubj
 |   +-- data NNS dobj
 |       +-- from IN prep
 |           +-- participants NNS pobj
 |               +-- chosen VBN partmod
 |                   +-- uniformly RB advmod
 |                   +-- at IN prep
 |                       +-- random JJ pobj
 |                           +-- from IN prep
 |                               +-- set NN pobj
 |                                   +-- the DT det
 |                                   +-- of IN prep
 |                                       +-- descendants NNS pobj
 |                                           +-- non FW nn
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- make VB xcomp
 |   +-- to TO aux
 |   +-- recoverable JJ xcomp
 |       +-- packet NN nsubj
 |       |   +-- each DT det
 |       |   +-- transmitted VBN amod
 |       +-- from IN prep
 |           +-- number NN pobj
 |               +-- approximately RB advmod
 |               +-- the DT det
 |               +-- same JJ amod
 |               +-- of IN prep
 |                   +-- nodes NNS pobj
 |                       +-- participant NN nn
 +-- . . punct
Input: That is , given a randomly chosen subset of peer nodes , it is with the same probability that each node has a particular data packet .
Parse:
given VBN ROOT
 +-- That DT nsubjpass
 +-- is VBZ auxpass
 +-- , , punct
 +-- subset NN dobj
 |   +-- a DT det
 |   +-- chosen VBN amod
 |   |   +-- randomly RB advmod
 |   +-- of IN prep
 |       +-- nodes NNS pobj
 |           +-- peer NN nn
 +-- is VBZ ccomp
 |   +-- it PRP nsubj
 |   +-- with IN prep
 |       +-- probability NN pobj
 |           +-- the DT det
 |           +-- same JJ amod
 |           +-- has VBZ ccomp
 |               +-- that WDT mark
 |               +-- node NN nsubj
 |               |   +-- each DT det
 |               +-- packet NN dobj
 |                   +-- a DT det
 |                   +-- particular JJ amod
 |                   +-- data NNS nn
 +-- . . punct
Input: While not explicitly proven here , we believe that this approach maximizes the probability that a lost data packet can be recovered , regardless of which packet is lost .
Parse:
believe VBP ROOT
 +-- proven VBN advcl
 |   +-- While IN mark
 |   +-- not RB neg
 |   +-- explicitly RB advmod
 |   +-- here RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- maximizes VBZ ccomp
 |   +-- that IN mark
 |   +-- approach NN nsubj
 |   |   +-- this DT det
 |   +-- lost VBN ccomp
 |       +-- probability NN nsubjpass
 |       |   +-- the DT det
 |       |   +-- recovered VBN ccomp
 |       |       +-- that WDT mark
 |       |       +-- packet NN nsubjpass
 |       |       |   +-- a DT det
 |       |       |   +-- lost VBN amod
 |       |       |   +-- data NNS nn
 |       |       +-- can MD aux
 |       |       +-- be VB auxpass
 |       |       +-- , , punct
 |       |       +-- regardless RB advmod
 |       |           +-- of IN prep
 |       |               +-- packet NN pobj
 |       |                   +-- which WDT det
 |       +-- is VBZ auxpass
 +-- . . punct
Input: To this end , Bullet distributes incoming packets among one or more children in hopes that the expected number of nodes receiving each packet is approximately the same .
Parse:
distributes VBZ ROOT
 +-- To IN prep
 |   +-- end NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- packets NNS dobj
 |   +-- incoming JJ amod
 +-- among IN prep
 |   +-- children NNS pobj
 |       +-- one CD num
 |           +-- or CC cc
 |           +-- more JJR conj
 +-- in IN prep
 |   +-- hopes NNS pobj
 |       +-- same JJ ccomp
 |           +-- that IN mark
 |           +-- number NN nsubj
 |           |   +-- the DT det
 |           |   +-- expected VBN amod
 |           |   +-- of IN prep
 |           |   |   +-- nodes NNS pobj
 |           |   +-- receiving VBG partmod
 |           |       +-- packet NN dobj
 |           |           +-- each DT det
 |           +-- is VBZ cop
 |           +-- approximately RB advmod
 |           +-- the DT det
 +-- . . punct
Input: A node p maintains for each child , i , a limiting and sending factor , lfi and sfi .
Parse:
maintains NNS ROOT
 +-- p NN nsubj
 |   +-- A DT det
 |   +-- node NN nn
 +-- for IN prep
 |   +-- child NN pobj
 |       +-- each DT det
 |       +-- , , punct
 |       +-- i PRP conj
 |       +-- factor NN conj
 |       |   +-- a DT det
 |       |   +-- limiting VBG amod
 |       |       +-- and CC cc
 |       |       +-- sending VBG conj
 |       +-- lfi NNP conj
 |       +-- and CC cc
 |       +-- sfi NN conj
 +-- . . punct
Input: These factors determine the proportion of p '' s received data rate that it will forward to each child .
Parse:
determine VBP ROOT
 +-- factors NNS nsubj
 |   +-- These DT det
 +-- rate NN dobj
 |   +-- proportion NN poss
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- p FW pobj
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- received VBN amod
 |   +-- data NNS nn
 |   +-- forward VB rcmod
 |       +-- that WDT dobj
 |       +-- it PRP nsubj
 |       +-- will MD aux
 |       +-- to IN prep
 |           +-- child NN pobj
 |               +-- each DT det
 +-- . . punct
Input: The sending factor sfi is the portion of the parent stream -LRB- rate -RRB- that each child should own based on the number of descendants the child has .
Parse:
portion NN ROOT
 +-- factor NN nsubj
 |   +-- The DT det
 |   +-- sending VBG amod
 |   +-- sfi NNP appos
 +-- is VBZ cop
 +-- the DT det
 +-- of IN prep
 |   +-- stream NN pobj
 |       +-- the DT det
 |       +-- parent NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- rate NN dep
 |       +-- -RRB- -RRB- punct
 +-- own VB rcmod
 |   +-- that IN dobj
 |   +-- child NN nsubj
 |   |   +-- each DT det
 |   +-- should MD aux
 |   +-- based VBN prep
 |       +-- on IN pcomp
 |           +-- number NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- descendants NNS pobj
 |                       +-- has VBZ rcmod
 |                           +-- child NN nsubj
 |                               +-- the DT det
 +-- . . punct
Input: The more descendants a child has , the larger the portion of received data it should own .
Parse:
has VBZ ROOT
 +-- descendants NNS nsubj
 |   +-- The DT det
 |   +-- more JJR amod
 |   +-- child NN dep
 |       +-- a DT det
 +-- , , punct
 +-- portion NN dobj
 |   +-- the DT det
 |   +-- larger JJR amod
 |   +-- of IN prep
 |   |   +-- data NNS pobj
 |   |       +-- received VBN amod
 |   +-- own VB rcmod
 |       +-- it PRP nsubj
 |       +-- should MD aux
 +-- . . punct
Input: The limiting factor lfi represents the proportion of the parent rate beyond the sending factor that each child can handle .
Parse:
represents VBZ ROOT
 +-- factor NN nsubj
 |   +-- The DT det
 |   +-- limiting VBG amod
 |   +-- lfi NNP appos
 +-- proportion NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- rate NN pobj
 |   |       +-- the DT det
 |   |       +-- parent NN nn
 |   +-- beyond IN prep
 |       +-- factor NN pobj
 |           +-- the DT det
 |           +-- sending VBG nn
 |           +-- handle VB rcmod
 |               +-- that IN dobj
 |               +-- child NN nsubj
 |               |   +-- each DT det
 |               +-- can MD aux
 +-- . . punct
Input: For example , a child with one descendant , but high bandwidth would have a low sending factor , but a very high limiting factor .
Parse:
have VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- child NN nsubj
 |   +-- a DT det
 |   +-- with IN prep
 |       +-- descendant NN pobj
 |           +-- one CD num
 |           +-- , , punct
 |           +-- but CC cc
 |           +-- bandwidth NN conj
 |               +-- high JJ amod
 +-- would MD aux
 +-- factor NN dobj
 |   +-- a DT det
 |   +-- low JJ amod
 |   +-- sending VBG nn
 +-- but CC cc
 +-- factor NN conj
 |   +-- a DT det
 |   +-- high JJ amod
 |   |   +-- very RB advmod
 |   +-- limiting VBG amod
 +-- . . punct
Input: Though the child is responsible for owning a small portion of the received data , it actually can receive a large portion of it .
Parse:
receive VB ROOT
 +-- responsible JJ advcl
 |   +-- Though IN mark
 |   +-- child NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 |   +-- for IN prep
 |       +-- owning VBG pcomp
 |           +-- portion NN dobj
 |               +-- a DT det
 |               +-- small JJ amod
 |               +-- of IN prep
 |                   +-- data NN pobj
 |                       +-- the DT det
 |                       +-- received VBN amod
 +-- , , punct
 +-- it PRP nsubj
 +-- actually RB advmod
 +-- can MD aux
 +-- portion NN dobj
 |   +-- a DT det
 |   +-- large JJ amod
 |   +-- of IN prep
 |       +-- it PRP pobj
 +-- . . punct
Input: Because RanSub collects descendant counts di for each child i , Bullet simply makes a call into RanSub when sending data to determine the current sending factors of its children .
Parse:
makes VBZ ROOT
 +-- collects VBZ advcl
 |   +-- Because IN mark
 |   +-- RanSub NNP nsubj
 |   +-- counts NNS dobj
 |       +-- descendant NN nn
 |       +-- di JJ amod
 |           +-- for IN prep
 |               +-- child NN pobj
 |                   +-- each DT det
 +-- i PRP nsubj
 |   +-- , , punct
 |   +-- Bullet NNP appos
 +-- simply RB advmod
 +-- call NN dobj
 |   +-- a DT det
 |   +-- into IN prep
 |       +-- RanSub NNP pobj
 +-- sending VBG advcl
 |   +-- when WRB advmod
 |   +-- data NNS dobj
 |   +-- determine VB xcomp
 |       +-- to TO aux
 |       +-- factors NNS dobj
 |           +-- the DT det
 |           +-- current JJ amod
 |           +-- sending VBG nn
 |           +-- of IN prep
 |               +-- children NNS pobj
 |                   +-- its PRP$ poss
 +-- . . punct
Input: For each child i out of k total , we set the sending factor to be
Parse:
set VBD ROOT
 +-- For IN prep
 |   +-- child NN pobj
 |       +-- each DT det
 +-- i PRP nsubj
 +-- out IN prep
 |   +-- of IN pcomp
 |       +-- total NN pobj
 |           +-- k CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- factor NN dobj
 |   +-- the DT det
 |   +-- sending VBG amod
 +-- be VB xcomp
     +-- to TO aux
Input: In addition , a node tracks the data successfully transmitted via the transport .
Parse:
tracks VBZ ROOT
 +-- In IN prep
 |   +-- addition NN pobj
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 +-- data NNS dobj
 |   +-- the DT det
 |   +-- transmitted VBN partmod
 |       +-- successfully RB advmod
 |       +-- via IN prep
 |           +-- transport NN pobj
 |               +-- the DT det
 +-- . . punct
Input: That is , Bullet data transport sockets are non blocking ; successful transmissions are send attempts that are accepted by the non blocking transport .
Parse:
is VBZ ROOT
 +-- That DT nsubj
 +-- , , punct
 +-- blocking VBG ccomp
 |   +-- sockets NNS nsubj
 |   |   +-- Bullet NNP nn
 |   |   +-- transport NN nn
 |   |       +-- data NNS nn
 |   +-- are VBP cop
 |   +-- non NNP nn
 +-- ; : punct
 +-- send VB parataxis
 |   +-- transmissions NNS nsubj
 |   |   +-- successful JJ amod
 |   +-- are VBP aux
 |   +-- attempts NNS dobj
 |       +-- accepted VBN rcmod
 |           +-- that WDT nsubjpass
 |           +-- are VBP auxpass
 |           +-- by IN prep
 |               +-- transport NN pobj
 |                   +-- the DT det
 |                   +-- blocking NN nn
 |                       +-- non FW nn
 +-- . . punct
Input: If the transport would block on a send -LRB- i.e. , transmission of the packet would exceed the TCP friendly fair share of network resources -RRB- , the send fails and is counted as an unsuccessful send attempt .
Parse:
fails NNS ROOT
 +-- block VB advcl
 |   +-- If IN mark
 |   +-- transport NN nsubj
 |   |   +-- the DT det
 |   +-- would MD aux
 |   +-- on IN prep
 |       +-- send NN pobj
 |           +-- a DT det
 |           +-- exceed VB dep
 |               +-- -LRB- -LRB- punct
 |               +-- i.e. FW advmod
 |               +-- , , punct
 |               +-- transmission NN nsubj
 |               |   +-- of IN prep
 |               |       +-- packet NN pobj
 |               |           +-- the DT det
 |               +-- would MD aux
 |               +-- share NN dobj
 |               |   +-- the DT det
 |               |   +-- TCP NNP nn
 |               |   +-- friendly JJ amod
 |               |   +-- fair JJ amod
 |               |   +-- of IN prep
 |               |       +-- resources NNS pobj
 |               |           +-- network NN nn
 |               +-- -RRB- -RRB- punct
 +-- , , punct
 +-- send NN nsubj
 |   +-- the DT det
 +-- and CC cc
 +-- counted VBN conj
 |   +-- is VBZ auxpass
 |   +-- as IN prep
 |       +-- attempt NN pobj
 |           +-- an DT det
 |           +-- unsuccessful JJ amod
 |           +-- send NN nn
 +-- . . punct
Input: When a data packet is received by a parent , it calculates the proportion of the total data stream that has been sent to each child , thus far , in this epoch .
Parse:
calculates VBZ ROOT
 +-- received VBN advcl
 |   +-- When WRB advmod
 |   +-- packet NN nsubjpass
 |   |   +-- a DT det
 |   |   +-- data NN nn
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- parent NN pobj
 |           +-- a DT det
 +-- , , punct
 +-- it PRP nsubj
 +-- proportion NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- stream NN pobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- data NNS nn
 |           +-- sent VBN rcmod
 |               +-- that WDT nsubjpass
 |               +-- has VBZ aux
 |               +-- been VBN auxpass
 |               +-- to IN prep
 |               |   +-- child NN pobj
 |               |       +-- each DT det
 |               +-- , , punct
 |               +-- far RB advmod
 |               |   +-- thus RB advmod
 |               +-- in IN prep
 |                   +-- epoch NN pobj
 |                       +-- this DT det
 +-- . . punct
Input: It then assigns ownership of the current packet to the child with sending proportion farthest away from its sfi as illustrated in Figure 5 .
Parse:
assigns VBZ ROOT
 +-- It PRP nsubj
 +-- then RB advmod
 +-- ownership NN dobj
 |   +-- of IN prep
 |       +-- packet NN pobj
 |           +-- the DT det
 |           +-- current JJ amod
 +-- to IN prep
 |   +-- child NN pobj
 |       +-- the DT det
 +-- with IN prep
 |   +-- sending VBG pcomp
 |       +-- proportion NN dobj
 |       +-- away RB advmod
 |       |   +-- farthest RBS advmod
 |       |   +-- from IN prep
 |       |       +-- sfi NN pobj
 |       |           +-- its PRP$ poss
 |       +-- illustrated VBN advcl
 |           +-- as IN mark
 |           +-- in IN prep
 |               +-- Figure NNP pobj
 |                   +-- 5 CD num
 +-- . . punct
Input: Having chosen the target of a particular packet , the parent attempts to forward the packet to the child .
Parse:
attempts VBZ ROOT
 +-- chosen VBN partmod
 |   +-- Having VBG aux
 |   +-- target NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- packet NN pobj
 |               +-- a DT det
 |               +-- particular JJ amod
 +-- , , punct
 +-- parent NN nsubj
 |   +-- the DT det
 +-- forward VB xcomp
 |   +-- to TO aux
 |   +-- packet NN dobj
 |   |   +-- the DT det
 |   +-- to IN prep
 |       +-- child NN pobj
 |           +-- the DT det
 +-- . . punct
Input: If the send is not successful , the node must find an alternate child to own the packet .
Parse:
find VB ROOT
 +-- successful JJ advcl
 |   +-- If IN mark
 |   +-- send NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 |   +-- not RB neg
 +-- , , punct
 +-- node NN nsubj
 |   +-- the DT det
 +-- must MD aux
 +-- own VB xcomp
 |   +-- child NN nsubj
 |   |   +-- an DT det
 |   |   +-- alternate JJ amod
 |   +-- to TO aux
 |   +-- packet NN dobj
 |       +-- the DT det
 +-- . . punct
Input: This occurs when a child '' s bandwidth is not adequate to fulfill its responsibilities based on its descendants -LRB- sfi -RRB- .
Parse:
occurs VBZ ROOT
 +-- This DT nsubj
 +-- adequate JJ advcl
 |   +-- when WRB advmod
 |   +-- bandwidth NN nsubj
 |   |   +-- child NN poss
 |   |       +-- a DT det
 |   |       +-- '' '' punct
 |   |       +-- s POS possessive
 |   +-- is VBZ cop
 |   +-- not RB neg
 |   +-- fulfill VB xcomp
 |       +-- to TO aux
 |       +-- responsibilities NNS dobj
 |           +-- its PRP$ poss
 |           +-- based VBN partmod
 |               +-- on IN prep
 |                   +-- descendants NNS pobj
 |                       +-- its PRP$ poss
 |                       +-- -LRB- -LRB- punct
 |                       +-- sfi NN dep
 |                       +-- -RRB- -RRB- punct
 +-- . . punct
Input: To compensate , the node attempts to deterministically find a child that can own the packet -LRB- as evidenced by its transport accepting the packet -RRB- .
Parse:
attempts VBZ ROOT
 +-- compensate VB advcl
 |   +-- To TO aux
 +-- , , punct
 +-- node NN nsubj
 |   +-- the DT det
 +-- find VB xcomp
 |   +-- to TO aux
 |   +-- deterministically RB advmod
 |   +-- child NN dobj
 |       +-- a DT det
 |       +-- own VB rcmod
 |           +-- that WDT nsubj
 |           +-- can MD aux
 |           +-- packet NN dobj
 |           |   +-- the DT det
 |           +-- -LRB- -LRB- punct
 |           +-- evidenced VBN advcl
 |           |   +-- as IN mark
 |           |   +-- by IN prep
 |           |       +-- transport NN pobj
 |           |           +-- its PRP$ poss
 |           |           +-- accepting VBG partmod
 |           |               +-- packet NN dobj
 |           |                   +-- the DT det
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: The net result is that children with more than adequate bandwidth will own more of their share of packets than those with inadequate bandwidth .
Parse:
is VBZ ROOT
 +-- result NN nsubj
 |   +-- The DT det
 |   +-- net JJ amod
 +-- own VB ccomp
 |   +-- that IN mark
 |   +-- children NNS nsubj
 |   |   +-- with IN prep
 |   |       +-- bandwidth NN pobj
 |   |           +-- adequate JJ amod
 |   |               +-- than IN advmod
 |   |                   +-- more JJR mwe
 |   +-- will MD aux
 |   +-- more JJR dobj
 |       +-- of IN prep
 |       |   +-- share NN pobj
 |       |       +-- their PRP$ poss
 |       |       +-- of IN prep
 |       |           +-- packets NNS pobj
 |       +-- than IN prep
 |           +-- those DT pobj
 |               +-- with IN prep
 |                   +-- bandwidth NN pobj
 |                       +-- inadequate JJ amod
 +-- . . punct
Input: In the event that no child can accept a packet , it must be dropped , corresponding to the case where the sum of all children bandwidths is inadequate to serve the received foreach child in children -LRB- if -LRB- -LRB- child > sent total_sent -RRB- < child > sending_factor -RRB- target_child = child ; -RRB- if -LRB- ! senddata -LRB- target_child > addr , msg , size , key -RRB- -RRB- -LRB- send succeeded target_child > sent++ ; target_child > child_filter.insert -LRB- got_key -RRB- ; sent_packet = 1 ; -RRB- foreach child in children -LRB- should_send = 0 ; if -LRB- ! sent_packet -RRB- transfer ownership should_send = 1 ; else test for available bandwidth if -LRB- key % -LRB- 1.0 child > limiting_factor -RRB- == 0 -RRB- should_send = 1 ; if -LRB- should_send -RRB- -LRB- if -LRB- ! senddata -LRB- child > addr , msg , size , key -RRB- -RRB- -LRB- if -LRB- ! sent_packet -RRB- i received ownership child > sent++ ; else increase -LRB- child > limiting_factor -RRB- ; child > child_filter.insert -LRB- got_key -RRB- ; sent_packet = 1 ; -RRB- else send failed if -LRB- sent_packet -RRB- was for extra bw decrease -LRB- child > limiting_factor -RRB- ; -RRB- -RRB- Figure 5
Parse:
dropped VBN ROOT
 +-- In IN prep
 |   +-- event NN pobj
 |       +-- the DT det
 |       +-- accept VB ccomp
 |           +-- that IN mark
 |           +-- child NN nsubj
 |           |   +-- no DT det
 |           +-- can MD aux
 |           +-- packet NN dobj
 |               +-- a DT det
 +-- , , punct
 +-- it PRP nsubjpass
 +-- must MD aux
 +-- be VB auxpass
 +-- corresponding VBG prep
 |   +-- to IN pcomp
 |       +-- case NN pobj
 |           +-- the DT det
 |           +-- inadequate JJ rcmod
 |               +-- where WRB advmod
 |               +-- sum NN nsubj
 |               |   +-- the DT det
 |               |   +-- of IN prep
 |               |       +-- bandwidths NNS pobj
 |               |           +-- all DT det
 |               |           +-- children NNS nn
 |               +-- is VBZ cop
 |               +-- serve VB xcomp
 |                   +-- to TO aux
 |                   +-- child NN dobj
 |                   |   +-- target_child NN amod
 |                   |   +-- = SYM nn
 |                   +-- in IN prep
 |                   |   +-- children NNS pobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- sending_factor NN advcl
 |                   |   +-- if IN mark
 |                   |   +-- child NN dep
 |                   |   |   +-- -LRB- -LRB- punct
 |                   |   |   +-- > -RRB- punct
 |                   |   |   +-- total_sent NN dep
 |                   |   |   |   +-- sent VBN amod
 |                   |   |   +-- -RRB- -RRB- punct
 |                   |   +-- < -LRB- punct
 |                   |   +-- child NN nn
 |                   |   +-- > -RRB- punct
 |                   +-- -RRB- -RRB- punct
 +-- ; : punct
 +-- -RRB- -RRB- punct
 +-- if IN punct
 +-- -LRB- -LRB- punct
 +-- ! , punct
 +-- senddata NNP dobj
 |   +-- addr NN dep
 |       +-- -LRB- -LRB- punct
 |       +-- target_child NNS nn
 |       +-- > -RRB- punct
 |       +-- , , punct
 |       +-- key NN dep
 |       |   +-- msg NNP dep
 |       |   +-- , , punct
 |       |   +-- size NN dep
 |       +-- -RRB- -RRB- punct
 +-- send VB conj
 |   +-- target_child NN dobj
 |   |   +-- succeeded VBN amod
 |   |   +-- > -RRB- punct
 |   +-- sent++ RB advmod
 +-- target_child VB parataxis
     +-- > -RRB- punct
     +-- child_filter.insert NNP dobj
         +-- -LRB- -LRB- punct
         +-- got_key NN dep
         +-- -RRB- -RRB- punct
         +-- ; : punct
         +-- sent_packet NN conj
         |   +-- = SYM advmod
         |       +-- 1 CD num
         +-- child NN dep
             +-- foreach VB amod
             +-- in IN prep
                 +-- children NNS pobj
                     +-- should_send NN dep
                         +-- -LRB- -LRB- punct
                         +-- = SYM dep
                         |   +-- 0 CD num
                         +-- ; : punct
                         +-- transfer NN ccomp
                         |   +-- if IN mark
                         |   +-- -LRB- -LRB- punct
                         |   +-- ! . punct
                         |   +-- sent_packet NN nn
                         |   +-- -RRB- -RRB- punct
                         |   +-- should_send NN dobj
                         |   |   +-- ownership NN nn
                         |   +-- = SYM dep
                         |       +-- 1 CD num
                         +-- test NN dep
                         |   +-- else JJ amod
                         |   +-- for IN prep
                         |   |   +-- bandwidth NN pobj
                         |   |       +-- available JJ amod
                         |   +-- should_send VB dep
                         |       +-- if IN mark
                         |       +-- -LRB- -LRB- punct
                         |       +-- % NN nsubj
                         |       |   +-- key JJ amod
                         |       |   +-- child NN appos
                         |       |       +-- -LRB- -LRB- punct
                         |       |       +-- 1.0 CD num
                         |       |       +-- limiting_factor NN dep
                         |       |       |   +-- > -RRB- punct
                         |       |       +-- -RRB- -RRB- punct
                         |       +-- == NFP punct
                         |       +-- 0 NFP punct
                         |       +-- -RRB- -RRB- punct
                         |       +-- = SYM prep
                         |           +-- 1 CD pobj
                         +-- Figure NN dep
                             +-- if IN dep
                             |   +-- -LRB- -LRB- punct
                             |   +-- should_send NN dep
                             |   +-- -RRB- -RRB- punct
                             +-- send VBP dep
                             |   +-- -LRB- -LRB- punct
                             |   +-- if IN mark
                             |   +-- ! , punct
                             |   +-- senddata NN nsubj
                             |   |   +-- addr NN dep
                             |   |   |   +-- -LRB- -LRB- punct
                             |   |   |   +-- child NN nn
                             |   |   |   +-- > -RRB- punct
                             |   |   |   +-- , , punct
                             |   |   |   +-- msg NNP appos
                             |   |   |   +-- size NN appos
                             |   |   |   +-- key NN appos
                             |   |   |   +-- -RRB- -RRB- punct
                             |   |   |   +-- received VBD dep
                             |   |   |   |   +-- -LRB- -LRB- punct
                             |   |   |   |   +-- if IN mark
                             |   |   |   |   +-- ! . punct
                             |   |   |   |   +-- sent_packet NN nsubj
                             |   |   |   |   +-- -RRB- -RRB- punct
                             |   |   |   |   +-- i PRP nsubj
                             |   |   |   |   +-- child NN dobj
                             |   |   |   |   +-- sent++ RB advmod
                             |   |   |   |   +-- ; : punct
                             |   |   |   |   +-- else RB advmod
                             |   |   |   |   +-- increase VB dep
                             |   |   |   |   |   +-- limiting_factor NN dobj
                             |   |   |   |   |       +-- -LRB- -LRB- punct
                             |   |   |   |   |       +-- child NN nn
                             |   |   |   |   |       +-- > -RRB- punct
                             |   |   |   |   |       +-- -RRB- -RRB- punct
                             |   |   |   |   +-- > -RRB- punct
                             |   |   |   +-- child_filter.insert NNP dep
                             |   |   |   |   +-- -LRB- -LRB- punct
                             |   |   |   |   +-- got_key NN dep
                             |   |   |   |   +-- -RRB- -RRB- punct
                             |   |   |   +-- ; : punct
                             |   |   |   +-- sent_packet NN dep
                             |   |   |       +-- = SYM prep
                             |   |   |           +-- 1 CD num
                             |   |   +-- else RB advmod
                             |   +-- failed VBN dobj
                             +-- was VBD advcl
                             |   +-- if IN mark
                             |   +-- sent_packet NN nsubj
                             |   |   +-- -LRB- -LRB- punct
                             |   |   +-- -RRB- -RRB- punct
                             |   +-- for IN prep
                             |       +-- decrease NN pobj
                             |           +-- extra JJ amod
                             |           +-- bw GW nn
                             +-- limiting_factor NN dep
                             |   +-- -LRB- -LRB- punct
                             |   +-- child NN nsubj
                             |   +-- > -RRB- punct
                             |   +-- -RRB- -RRB- punct
                             |   +-- ; : punct
                             +-- 5 CD num
Input: While making data more difficult to recover , Bullet still allows for recovery of such data to its children .
Parse:
allows VBZ ROOT
 +-- making VBG advcl
 |   +-- While IN mark
 |   +-- difficult JJ xcomp
 |       +-- data NNS nsubj
 |       +-- more RBR advmod
 |       +-- recover VB ccomp
 |           +-- to TO aux
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- still RB advmod
 +-- for IN prep
 |   +-- recovery NN pobj
 |       +-- of IN prep
 |           +-- data NNS pobj
 |               +-- such JJ amod
 |               +-- to IN prep
 |                   +-- children NNS pobj
 |                       +-- its PRP$ poss
 +-- . . punct
Input: The sending node will cache the data packet and serve it to its requesting peers .
Parse:
cache VB ROOT
 +-- node NN nsubj
 |   +-- The DT det
 |   +-- sending VBG amod
 +-- will MD aux
 +-- packet NN dobj
 |   +-- the DT det
 |   +-- data NNS nn
 +-- and CC cc
 +-- serve VBP conj
 |   +-- it PRP dobj
 |   +-- to IN prep
 |       +-- peers NNS pobj
 |           +-- its PRP$ poss
 |           +-- requesting VBG amod
 +-- . . punct
Input: This process allows its children to potentially recover the packet from one of their own peers , to whom additional bandwidth may be available .
Parse:
allows VBZ ROOT
 +-- process NN nsubj
 |   +-- This DT det
 +-- recover VB xcomp
 |   +-- children NNS nsubj
 |   |   +-- its PRP$ poss
 |   +-- to TO aux
 |   +-- potentially RB advmod
 |   +-- packet NN dobj
 |   |   +-- the DT det
 |   +-- from IN prep
 |       +-- one CD pobj
 |           +-- of IN prep
 |           |   +-- peers NNS pobj
 |           |       +-- their PRP$ poss
 |           |       +-- own JJ amod
 |           +-- , , punct
 |           +-- available JJ rcmod
 |               +-- to TO prep
 |               |   +-- whom WP pobj
 |               +-- bandwidth NN nsubj
 |               |   +-- additional JJ amod
 |               +-- may MD aux
 |               +-- be VB cop
 +-- . . punct
Input: Once a packet has been successfully sent to the owning child , the node attempts to send the packet to all other children depending on the limiting factors lfi .
Parse:
attempts VBZ ROOT
 +-- sent VBN advcl
 |   +-- Once IN mark
 |   +-- packet NN nsubjpass
 |   |   +-- a DT det
 |   +-- has VBZ aux
 |   +-- been VBN auxpass
 |   +-- successfully RB advmod
 |   +-- to IN prep
 |       +-- child NN pobj
 |           +-- the DT det
 |           +-- owning VBG amod
 +-- , , punct
 +-- node NN nsubj
 |   +-- the DT det
 +-- send VB xcomp
 |   +-- to TO aux
 |   +-- packet NN dobj
 |   |   +-- the DT det
 |   +-- to IN prep
 |   |   +-- children NNS pobj
 |   |       +-- all DT det
 |   |       +-- other JJ amod
 |   +-- depending VBG prep
 |       +-- on IN pcomp
 |           +-- factors NNS pobj
 |               +-- the DT det
 |               +-- limiting VBG amod
 |               +-- lfi NNP appos
 +-- . . punct
Input: For each child i , a node attempts to forward the packet deterministically if the packet '' s sequence modulo 1 lfi is zero .
Parse:
attempts VBZ ROOT
 +-- For IN prep
 |   +-- child NN pobj
 |       +-- each DT det
 |       +-- i PRP dep
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 +-- forward VB xcomp
 |   +-- to TO aux
 |   +-- packet NN dobj
 |   |   +-- the DT det
 |   +-- deterministically RB advmod
 |   +-- zero CD advcl
 |       +-- if IN mark
 |       +-- modulo NN nsubj
 |       |   +-- packet NN poss
 |       |   |   +-- the DT det
 |       |   |   +-- '' '' punct
 |       |   |   +-- s POS possessive
 |       |   +-- sequence NN amod
 |       |   +-- lfi NNP dep
 |       |       +-- 1 CD num
 |       +-- is VBZ cop
 +-- . . punct
Input: Essentially , this identifies which lfi fraction of packets of the received data stream should be forwarded to each child to make use of the available bandwidth to each .
Parse:
forwarded VBN ROOT
 +-- Essentially RB advmod
 +-- , , punct
 +-- identifies NNS nsubjpass
 |   +-- this DT det
 |   +-- lfi VBP rcmod
 |       +-- which WDT nsubj
 |       +-- fraction NN dobj
 |           +-- of IN prep
 |               +-- packets NNS pobj
 |                   +-- of IN prep
 |                       +-- stream NN pobj
 |                           +-- the DT det
 |                           +-- received VBN amod
 |                           +-- data NNS nn
 +-- should MD aux
 +-- be VB auxpass
 +-- to IN prep
 |   +-- child NN pobj
 |       +-- each DT det
 +-- make VB xcomp
 |   +-- to TO aux
 |   +-- use NN dobj
 |   |   +-- of IN prep
 |   |       +-- bandwidth NN pobj
 |   |           +-- the DT det
 |   |           +-- available JJ amod
 |   +-- to IN prep
 |       +-- each DT pobj
 +-- . . punct
Input: If the packet transmission is successful , lfi is increased such that one more packet is to be sent per epoch .
Parse:
increased VBN ROOT
 +-- successful JJ advcl
 |   +-- If IN mark
 |   +-- transmission NN nsubj
 |   |   +-- the DT det
 |   |   +-- packet NN nn
 |   +-- is VBZ cop
 +-- , , punct
 +-- lfi , nsubjpass
 +-- is VBZ auxpass
 +-- is VBZ ccomp
 |   +-- that IN mark
 |   |   +-- such JJ mwe
 |   +-- packet NN nsubj
 |   |   +-- one CD num
 |   |       +-- more JJR quantmod
 |   +-- sent VBN xcomp
 |       +-- to TO aux
 |       +-- be VB auxpass
 |       +-- per IN prep
 |           +-- epoch NN pobj
 +-- . . punct
Input: If the transmission fails , lfi is decreased by the same amount .
Parse:
decreased VBN ROOT
 +-- fails VBZ advcl
 |   +-- If IN mark
 |   +-- transmission NN nsubj
 |       +-- the DT det
 +-- , , punct
 +-- lfi NNP nsubjpass
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- amount NN pobj
 |       +-- the DT det
 |       +-- same JJ amod
 +-- . . punct
Input: This allows children limiting factors to be continuously adjusted in response to changing network conditions .
Parse:
allows VBZ ROOT
 +-- This DT nsubj
 +-- limiting VBG dep
 |   +-- children NNS nsubj
 |   +-- factors NNS dobj
 |       +-- adjusted VBN infmod
 |           +-- to TO aux
 |           +-- be VB auxpass
 |           +-- continuously RB advmod
 |           +-- in IN prep
 |               +-- response NN pobj
 |                   +-- to IN prep
 |                       +-- conditions NNS pobj
 |                           +-- changing VBG amod
 |                           +-- network NN nn
 +-- . . punct
Input: It is important to realize that by maintaining limiting factors , we are essentially using feedback from children -LRB- by observing transport behavior -RRB- to determine the best data to stop sending during times when a child can not handle the entire parent stream .
Parse:
important JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- realize VB xcomp
 |   +-- to TO aux
 |   +-- using VBG ccomp
 |       +-- that IN mark
 |       +-- by IN prep
 |       |   +-- observing VBG pcomp
 |       |       +-- behavior NN dobj
 |       |           +-- transport NN nn
 |       +-- , , punct
 |       +-- we PRP nsubj
 |       +-- are VBP aux
 |       +-- essentially RB advmod
 |       +-- feedback NN dobj
 |       |   +-- from IN prep
 |       |       +-- children NNS pobj
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 |       +-- determine VB xcomp
 |           +-- to TO aux
 |           +-- data NNS dobj
 |           |   +-- the DT det
 |           |   +-- best JJS amod
 |           |   +-- stop VB infmod
 |           |       +-- to TO aux
 |           |       +-- sending VBG xcomp
 |           +-- during IN prep
 |           |   +-- times NNS pobj
 |           +-- handle VB advcl
 |               +-- when WRB advmod
 |               +-- child NN nsubj
 |               |   +-- a DT det
 |               +-- can MD aux
 |               +-- not RB neg
 |               +-- stream NN dobj
 |                   +-- the DT det
 |                   +-- entire JJ amod
 |                   +-- parent NN nn
 +-- . . punct
Input: In one extreme , if the sum of children bandwidths is not enough to receive the entire parent stream , each child will receive a completely disjoint data stream of packets it owns .
Parse:
receive VB ROOT
 +-- In IN prep
 |   +-- extreme NN pobj
 |       +-- one CD num
 +-- , , punct
 +-- enough JJ advcl
 |   +-- if IN mark
 |   +-- sum NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- bandwidths NNS pobj
 |   |           +-- children NNS nn
 |   +-- is VBZ cop
 |   +-- not RB neg
 |   +-- receive VB xcomp
 |       +-- to TO aux
 |       +-- stream NN dobj
 |           +-- the DT det
 |           +-- entire JJ amod
 |           +-- parent NN nn
 +-- child NN nsubj
 |   +-- each DT det
 +-- will MD aux
 +-- stream NN dobj
 |   +-- a DT det
 |   +-- disjoint JJ amod
 |   |   +-- completely RB advmod
 |   +-- data NNS nn
 |   +-- of IN prep
 |   |   +-- packets NNS pobj
 |   +-- owns VBZ rcmod
 |       +-- it PRP nsubj
 +-- . . punct
Input: In the other extreme , if each 288 child has ample bandwidth , it will receive the entire parent stream as each lfi would settle on 1.0 .
Parse:
receive VB ROOT
 +-- In IN prep
 |   +-- extreme NN pobj
 |       +-- the DT det
 |       +-- other JJ amod
 +-- , , punct
 +-- has VBZ advcl
 |   +-- if IN mark
 |   +-- child NN nsubj
 |   |   +-- each DT det
 |   |   +-- 288 CD num
 |   +-- bandwidth NN dobj
 |       +-- ample JJ amod
 +-- it PRP nsubj
 +-- will MD aux
 +-- stream NN dobj
 |   +-- the DT det
 |   +-- entire JJ amod
 |   +-- parent NN nn
 +-- settle VB advcl
 |   +-- as IN mark
 |   +-- lfi NN nsubj
 |   |   +-- each DT det
 |   +-- would MD aux
 |   +-- on IN prep
 |       +-- 1.0 CD pobj
 +-- . . punct
Input: In the general case , our owning strategy attempts to make data disjoint among children subtrees with the guiding premise that , as much as possible , the expected number of nodes receiving a packet is the same across all packets .
Parse:
attempts NNS ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- general JJ amod
 +-- , , punct
 +-- strategy NN nsubj
 |   +-- our PRP$ poss
 |   +-- owning VBG nn
 +-- make VB infmod
 |   +-- to TO aux
 |   +-- disjoint NN dobj
 |   |   +-- data NNS nn
 |   +-- among IN prep
 |   |   +-- subtrees NNS pobj
 |   |       +-- children NNS nn
 |   +-- with IN prep
 |       +-- premise NN pobj
 |           +-- the DT det
 |           +-- guiding VBG amod
 |           +-- same JJ rcmod
 |               +-- that WDT nsubj
 |               +-- , , punct
 |               +-- much RB advmod
 |               |   +-- as RB advmod
 |               |   +-- as IN prep
 |               |       +-- possible JJ pobj
 |               +-- number NN nsubj
 |               |   +-- the DT det
 |               |   +-- expected VBN amod
 |               |   +-- of IN prep
 |               |   |   +-- nodes NNS pobj
 |               |   +-- receiving VBG partmod
 |               |       +-- packet NN dobj
 |               |           +-- a DT det
 |               +-- is VBZ cop
 |               +-- the DT det
 |               +-- across IN prep
 |                   +-- packets NNS pobj
 |                       +-- all DT det
 +-- . . punct
Input: 3.4 Improving the Bullet Mesh Bullet allows a maximum number of peering relationships .
Parse:
allows VBZ ROOT
 +-- 3.4 CD nsubj
 |   +-- Improving VBG partmod
 |       +-- Bullet NNP dobj
 |           +-- the DT det
 |           +-- Bullet NNP nn
 |           +-- Mesh NNP nn
 +-- number NN dobj
 |   +-- a DT det
 |   +-- maximum JJ amod
 |   +-- of IN prep
 |       +-- relationships NNS pobj
 |           +-- peering VBG amod
 +-- . . punct
Input: That is , a node can have up to a certain number of receivers and a certain number of senders -LRB- each defaults to 10 in our implementation -RRB- .
Parse:
have VB ROOT
 +-- is VBZ advmod
 |   +-- That DT advmod
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 +-- can MD aux
 +-- up IN advmod
 +-- to IN prep
 |   +-- number NN pobj
 |       +-- a DT det
 |       +-- certain JJ amod
 |       +-- of IN prep
 |       |   +-- receivers NNS pobj
 |       +-- and CC cc
 |       +-- number NN conj
 |           +-- a DT det
 |           +-- certain JJ amod
 |           +-- of IN prep
 |           |   +-- senders NNS pobj
 |           +-- -LRB- -LRB- punct
 |           +-- defaults NNS dep
 |           |   +-- each DT det
 |           |   +-- to IN prep
 |           |   |   +-- 10 CD pobj
 |           |   +-- in IN prep
 |           |       +-- implementation NN pobj
 |           |           +-- our PRP$ poss
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: A number of considerations can make the current peering relationships sub optimal at any given time
Parse:
make VB ROOT
 +-- number NN nsubj
 |   +-- A DT det
 |   +-- of IN prep
 |       +-- considerations NNS pobj
 +-- can MD aux
 +-- optimal NN xcomp
 |   +-- relationships NNS nsubj
 |   |   +-- the DT det
 |   |   +-- current JJ amod
 |   |   +-- peering NN nn
 |   +-- sub VBP nn
 +-- at IN prep
     +-- time NN pobj
         +-- any DT det
         +-- given VBN amod
Input: For example , a sender node may wind up being unable to provide a node with very much useful -LRB- non duplicate -RRB- data .
Parse:
wind VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 |   +-- sender NN nn
 +-- may MD aux
 +-- up RP prt
 +-- unable JJ xcomp
 |   +-- being VBG cop
 |   +-- provide VB xcomp
 |       +-- to TO aux
 |       +-- node NN dobj
 |       |   +-- a DT det
 |       +-- with IN prep
 |           +-- data NNS pobj
 |               +-- useful JJ amod
 |                   +-- much RB advmod
 |                   |   +-- very RB advmod
 |                   +-- -LRB- -LRB- punct
 |                   +-- duplicate JJ dep
 |                   |   +-- non IN dep
 |                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: In such a case , it would be advantageous to remove that sender as a peer and find some other peer that offers better utility .
Parse:
advantageous JJ ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- such PDT predet
 |       +-- a DT det
 +-- , , punct
 +-- it PRP nsubj
 +-- would MD aux
 +-- be VB cop
 +-- remove VB xcomp
 |   +-- to TO aux
 |   +-- sender NN dobj
 |   |   +-- that IN det
 |   +-- as IN prep
 |   |   +-- peer NN pobj
 |   |       +-- a DT det
 |   +-- and CC cc
 |   +-- find VB conj
 |       +-- peer NN dobj
 |           +-- some DT det
 |           +-- other JJ amod
 |           +-- offers VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- utility NN dobj
 |                   +-- better JJR amod
 +-- . . punct
Input: Each node periodically -LRB- every few RanSub epochs -RRB- evaluates the bandwidth performance it is receiving from its sending peers .
Parse:
evaluates VBZ ROOT
 +-- node NN nsubj
 |   +-- Each DT det
 |   +-- periodically RB advmod
 |   +-- -LRB- -LRB- punct
 |   +-- epochs NNS dep
 |   |   +-- every DT det
 |   |   +-- few JJ amod
 |   |   +-- RanSub NNP nn
 |   +-- -RRB- -RRB- punct
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- bandwidth NN nn
 |   +-- receiving VBG rcmod
 |       +-- it PRP nsubj
 |       +-- is VBZ aux
 |       +-- from IN prep
 |           +-- peers NNS pobj
 |               +-- its PRP$ poss
 |               +-- sending VBG nn
 +-- . . punct
Input: A node will drop a peer if it is sending too many duplicate packets when compared to the total number of packets received .
Parse:
drop VB ROOT
 +-- node NN nsubj
 |   +-- A DT det
 +-- will MD aux
 +-- peer NN dobj
 |   +-- a DT det
 +-- sending VBG advcl
 |   +-- if IN mark
 |   +-- it PRP nsubj
 |   +-- is VBZ aux
 |   +-- packets NNS dobj
 |   |   +-- many JJ amod
 |   |   |   +-- too RB advmod
 |   |   +-- duplicate JJ amod
 |   +-- compared VBN advcl
 |       +-- when WRB advmod
 |       +-- to IN prep
 |           +-- number NN pobj
 |               +-- the DT det
 |               +-- total JJ amod
 |               +-- of IN prep
 |                   +-- packets NNS pobj
 |                       +-- received VBN partmod
 +-- . . punct
Input: This threshold is set to 50 % by default .
Parse:
set VBN ROOT
 +-- threshold NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- % NN pobj
 |       +-- 50 CD num
 +-- by IN prep
 |   +-- default NN pobj
 +-- . . punct
Input: If no such wasteful sender is found , a node will drop the sender that is delivering the least amount of useful data to it .
Parse:
drop VB ROOT
 +-- found VBN advcl
 |   +-- If IN mark
 |   +-- sender NN nsubjpass
 |   |   +-- no DT det
 |   |   +-- such JJ amod
 |   |   +-- wasteful JJ amod
 |   +-- is VBZ auxpass
 +-- , , punct
 +-- node NN nsubj
 |   +-- a DT det
 +-- will MD aux
 +-- sender NN dobj
 |   +-- the DT det
 |   +-- delivering VBG rcmod
 |       +-- that WDT nsubj
 |       +-- is VBZ aux
 |       +-- amount NN dobj
 |       |   +-- the DT det
 |       |   +-- least JJS amod
 |       |   +-- of IN prep
 |       |       +-- data NNS pobj
 |       |           +-- useful JJ amod
 |       +-- to IN prep
 |           +-- it PRP pobj
 +-- . . punct
Input: It will replace this sender with some other sending peer candidate , essentially reserving a trial slot in its sender list .
Parse:
replace VB ROOT
 +-- It PRP nsubj
 +-- will MD aux
 +-- sender NN dobj
 |   +-- this DT det
 +-- with IN prep
 |   +-- candidate NN pobj
 |       +-- some DT det
 |       +-- other JJ amod
 |       +-- sending VBG amod
 |       +-- peer NN nn
 +-- , , punct
 +-- reserving VBG partmod
 |   +-- essentially RB advmod
 |   +-- slot NN dobj
 |   |   +-- a DT det
 |   |   +-- trial NN nn
 |   +-- in IN prep
 |       +-- list NN pobj
 |           +-- its PRP$ poss
 |           +-- sender NN nn
 +-- . . punct
Input: In this way , we are assured of keeping the best senders seen so far and will eliminate senders whose performance deteriorates with changing network conditions .
Parse:
assured VBN ROOT
 +-- In IN prep
 |   +-- way NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubjpass
 +-- are VBP auxpass
 +-- of IN prep
 |   +-- keeping VBG pcomp
 |       +-- senders NNS dobj
 |           +-- the DT det
 |           +-- best JJS amod
 |           +-- seen VBN partmod
 |               +-- far RB advmod
 |                   +-- so RB advmod
 +-- and CC cc
 +-- eliminate VB conj
 |   +-- will MD aux
 |   +-- senders NNS dobj
 |       +-- deteriorates VBZ rcmod
 |           +-- performance NN nsubj
 |           |   +-- whose WP$ poss
 |           +-- with IN prep
 |               +-- conditions NNS pobj
 |                   +-- changing VBG amod
 |                   +-- network NN nn
 +-- . . punct
Input: Likewise , a Bullet sender will periodically evaluate its receivers .
Parse:
evaluate VB ROOT
 +-- Likewise RB advmod
 +-- , , punct
 +-- sender NN nsubj
 |   +-- a DT det
 |   +-- Bullet NN nn
 +-- will MD aux
 +-- periodically RB advmod
 +-- receivers NNS dobj
 |   +-- its PRP$ poss
 +-- . . punct
Input: Each receiver updates senders of the total received bandwidth .
Parse:
updates VBZ ROOT
 +-- receiver NN nsubj
 |   +-- Each DT det
 +-- senders NNS dobj
 |   +-- of IN prep
 |       +-- bandwidth NN pobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- received VBN amod
 +-- . . punct
Input: The sender , knowing the amount of data it has sent to each receiver , can determine which receiver is benefiting the least by peering with this sender .
Parse:
determine VB ROOT
 +-- sender NN nsubj
 |   +-- The DT det
 +-- , , punct
 +-- knowing VBG partmod
 |   +-- amount NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- data NNS pobj
 |       +-- sent VBN rcmod
 |           +-- it PRP nsubj
 |           +-- has VBZ aux
 |           +-- to IN prep
 |               +-- receiver NN pobj
 |                   +-- each DT det
 +-- can MD aux
 +-- benefiting VBG ccomp
 |   +-- receiver NN nsubj
 |   |   +-- which WDT det
 |   +-- is VBZ aux
 |   +-- least JJS dobj
 |   |   +-- the DT det
 |   +-- by IN prep
 |       +-- peering VBG pcomp
 |           +-- with IN prep
 |               +-- sender NN pobj
 |                   +-- this DT det
 +-- . . punct
Input: This corresponds to the one receiver acquiring the least portion of its bandwidth through this sender .
Parse:
corresponds VBZ ROOT
 +-- This DT nsubj
 +-- to IN prep
 |   +-- receiver NN pobj
 |       +-- the DT det
 |       +-- one CD num
 +-- acquiring VBG xcomp
 |   +-- portion NN dobj
 |   |   +-- the DT det
 |   |   +-- least JJS amod
 |   |   +-- of IN prep
 |   |       +-- bandwidth NN pobj
 |   |           +-- its PRP$ poss
 |   +-- through IN prep
 |       +-- sender NN pobj
 |           +-- this DT det
 +-- . . punct
Input: The sender drops this receiver , creating an empty slot for some other trial receiver .
Parse:
drops VBZ ROOT
 +-- sender NN nsubj
 |   +-- The DT det
 +-- receiver NN dobj
 |   +-- this DT det
 +-- , , punct
 +-- creating VBG partmod
 |   +-- slot NN dobj
 |   |   +-- an DT det
 |   |   +-- empty JJ amod
 |   +-- for IN prep
 |       +-- receiver NN pobj
 |           +-- some DT det
 |           +-- other JJ amod
 |           +-- trial NN nn
 +-- . . punct
Input: This is similar to the concept of weans presented in -LRB- 24 -RRB- . .
Parse:
similar JJ ROOT
 +-- This DT nsubj
 +-- is VBZ cop
 +-- to IN prep
 |   +-- concept NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- weans NNS pobj
 |               +-- presented VBN partmod
 |                   +-- in IN prep
 |                       +-- 24 CD pobj
 |                           +-- -LRB- -LRB- punct
 |                           +-- -RRB- -RRB- punct
 +-- . . punct
