Input: The co allocation architecture provides a coordinated agent for assigning data blocks
Parse:
provides VBZ ROOT
 +-- architecture NN nsubj
 |   +-- The DT det
 |   +-- allocation NN nn
 |       +-- co NN nn
 +-- agent NN dobj
 |   +-- a DT det
 |   +-- coordinated JJ amod
 +-- for IN prep
     +-- assigning VBG pcomp
         +-- blocks NNS dobj
             +-- data NNS nn
Input: A previous work showed that the dynamic co allocation scheme leads to performance improvements
Parse:
showed VBD ROOT
 +-- work NN nsubj
 |   +-- A DT det
 |   +-- previous JJ amod
 +-- leads NNS ccomp
     +-- that IN mark
     +-- scheme NN nsubj
     |   +-- the DT det
     |   +-- allocation NN nn
     |       +-- dynamic JJ amod
     |       +-- co NN nn
     +-- to IN prep
         +-- improvements NNS pobj
             +-- performance NN nn
Input: However , it can not handle the idle time of faster servers , which must wait for the slowest server to deliver its final block
Parse:
handle VB ROOT
 +-- However RB advmod
 +-- , , punct
 +-- it PRP nsubj
 +-- can MD aux
 +-- not RB neg
 +-- time NN dobj
     +-- the DT det
     +-- idle JJ amod
     +-- of IN prep
         +-- servers NNS pobj
             +-- faster JJR amod
             +-- , , punct
             +-- wait VB rcmod
                 +-- which WDT nsubj
                 +-- must MD aux
                 +-- for IN prep
                 |   +-- server NN pobj
                 |       +-- the DT det
                 |       +-- slowest JJS amod
                 +-- deliver VB xcomp
                     +-- to TO aux
                     +-- block NN dobj
                         +-- its PRP$ poss
                         +-- final JJ amod
Input: We proposed the Recursive Adjustment Co Allocation scheme to improve data transfer performances using the co allocation architecture in -LRB- 17 -RRB-
Parse:
proposed VBD ROOT
 +-- We PRP nsubj
 +-- scheme NN dobj
     +-- the DT det
     +-- Co NNP nn
     |   +-- Recursive NNP nn
     |   +-- Adjustment NNP nn
     +-- Allocation NNP nn
     +-- improve VB infmod
         +-- to TO aux
         +-- performances NNS dobj
             +-- transfer NN nn
             |   +-- data NNS nn
             +-- using VBG partmod
                 +-- architecture NN dobj
                 |   +-- the DT det
                 |   +-- allocation NN nn
                 |       +-- co NN nn
                 +-- in IN prep
                     +-- 17 CD pobj
                         +-- -LRB- -LRB- punct
                         +-- -RRB- -RRB- punct
Input: In this approach , the workloads of selected replica servers are continuously adjusted during data transfers , and we provide a function that enables users to define a final 803 block threshold , according to their data grid environment
Parse:
adjusted VBN ROOT
 +-- In IN prep
 |   +-- approach NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- workloads NNS nsubjpass
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- servers NNS pobj
 |           +-- selected VBN amod
 |           +-- replica NN nn
 +-- are VBP auxpass
 +-- continuously RB advmod
 +-- during IN prep
 |   +-- transfers NNS pobj
 |       +-- data NNS nn
 +-- and CC cc
 +-- provide VBP conj
     +-- we PRP nsubj
     +-- function NN dobj
         +-- a DT det
         +-- enables VBZ rcmod
             +-- that WDT nsubj
             +-- users NNS dobj
             +-- define VB xcomp
             |   +-- to TO aux
             |   +-- threshold NN dobj
             |       +-- a DT det
             |       +-- final JJ amod
             |       +-- 803 CD num
             |       +-- block NN nn
             +-- , , punct
             +-- according VBG prep
                 +-- to IN pcomp
                     +-- environment NN pobj
                         +-- their PRP$ poss
                         +-- grid NN nn
                             +-- data NNS nn
Input: Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server
Parse:
show VBP ROOT
 +-- results NNS nsubj
 |   +-- Experimental JJ amod
 +-- effectiveness NN dobj
     +-- the DT det
     +-- of IN prep
     |   +-- technique NN pobj
     |       +-- our PRP$ poss
     |       +-- proposed VBN amod
     +-- in IN prep
         +-- improving VBG pcomp
             +-- time NN dobj
             |   +-- transfer NN nn
             +-- and CC cc
             +-- reducing VBG conj
                 +-- time NN dobj
                     +-- overall JJ amod
                     +-- idle JJ amod
                     +-- spent VBN partmod
                         +-- waiting VBG xcomp
                             +-- for IN prep
                                 +-- server NN pobj
                                     +-- the DT det
                                     +-- slowest JJS amod
Input: We also discussed the re combination cost and provided an effective scheme for reducing it .
Parse:
discussed VBD ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- cost NN dobj
 |   +-- the DT det
 |   +-- combination NN nn
 |       +-- re IN amod
 +-- and CC cc
 +-- provided VBD conj
 |   +-- scheme NN dobj
 |       +-- an DT det
 |       +-- effective JJ amod
 |       +-- for IN prep
 |           +-- reducing VBG pcomp
 |               +-- it PRP dobj
 +-- . . punct
