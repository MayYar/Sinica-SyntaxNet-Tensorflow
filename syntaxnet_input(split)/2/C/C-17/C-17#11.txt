Input: We now analyze deployment issues associated with conference management .
Parse:
analyze VBP ROOT
 +-- We PRP nsubj
 +-- now RB advmod
 +-- issues NNS dobj
 |   +-- deployment NN nn
 |   +-- associated VBN partmod
 |       +-- with IN prep
 |           +-- management NN pobj
 |               +-- conference NN nn
 +-- . . punct
Input: How are domains to be organized to maximize the number of participants able to join ? To address this , we define some useful parameters .
Parse:
define VBP ROOT
 +-- are VBP advcl
 |   +-- How WRB advmod
 |   +-- domains NNS nsubj
 |       +-- organized VBN infmod
 |           +-- to TO aux
 |           +-- be VB auxpass
 |           +-- maximize VB xcomp
 |               +-- to TO aux
 |               +-- number NN dobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- participants NNS pobj
 |                           +-- able JJ amod
 |                               +-- join VB xcomp
 |                                   +-- to TO aux
 |                                   +-- ? . punct
 |                                   +-- address VB xcomp
 |                                       +-- To TO aux
 |                                       +-- this DT dobj
 +-- , , punct
 +-- we PRP nsubj
 +-- parameters NNS dobj
 |   +-- some DT det
 |   +-- useful JJ amod
 +-- . . punct
Input: ? Let d be the number of different domains in which there are active clients in a given conference .
Parse:
Let VB ROOT
 +-- ? , punct
 +-- number NN ccomp
 |   +-- d PRP nsubj
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- domains NNS pobj
 |           +-- different JJ amod
 |           +-- are VBP rcmod
 |               +-- in IN prep
 |               |   +-- conference NN pobj
 |               |       +-- a DT det
 |               |       +-- given VBN amod
 |               +-- there EX expl
 |               +-- clients NNS nsubj
 |                   +-- active JJ amod
 +-- . . punct
Input: ? Let Mi be the number of active clients present in domain i -LRB- di ? ? 1 -RRB- in a given conference .
Parse:
Let VB ROOT
 +-- ? , punct
 +-- number NN ccomp
 |   +-- Mi NNP nsubj
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- clients NNS pobj
 |   |       +-- active JJ amod
 |   |       +-- present JJ amod
 |   |       |   +-- in IN prep
 |   |       |       +-- i PRP pobj
 |   |       |           +-- domain NN nn
 |   |       +-- di NNP appos
 |   |           +-- -LRB- -LRB- punct
 |   |           +-- ? . punct
 |   |           +-- ? , punct
 |   |           +-- 1 LS num
 |   |           +-- -RRB- -RRB- punct
 |   +-- in IN prep
 |       +-- conference NN pobj
 |           +-- a DT det
 |           +-- given VBN amod
 +-- . . punct
Input: The total number of active clients in the conference is thus ? = = d i iMM 1 .
Parse:
is VBZ ROOT
 +-- number NN nsubj
 |   +-- The DT det
 |   +-- total JJ amod
 |   +-- of IN prep
 |   |   +-- clients NNS pobj
 |   |       +-- active JJ amod
 |   +-- in IN prep
 |       +-- conference NN pobj
 |           +-- the DT det
 +-- thus RB advmod
 +-- ? . punct
 +-- = SYM discourse
 +-- = `` punct
 +-- iMM VBP ccomp
 |   +-- d NN nsubj
 |   +-- i PRP nsubj
 |   +-- 1 CD dobj
 +-- . . punct
Input: ? Let C be the maximum number of audio streams a Conference Server can handle in a packet time , also called capacity .
Parse:
Let VB ROOT
 +-- ? , punct
 +-- number NN ccomp
 |   +-- C PRP nsubj
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- maximum JJ amod
 |   +-- of IN prep
 |   |   +-- streams NNS pobj
 |   |       +-- audio NN nn
 |   +-- handle VB rcmod
 |   |   +-- Server NNP nsubj
 |   |   |   +-- a DT det
 |   |   |   +-- Conference NNP nn
 |   |   +-- can MD aux
 |   |   +-- in IN prep
 |   |       +-- time NN pobj
 |   |           +-- a DT det
 |   |           +-- packet NN nn
 |   +-- , , punct
 |   +-- also RB advmod
 |   +-- called VBD dep
 |       +-- capacity NN dep
 +-- . . punct
Input: C is set according to the processing power of the weakest CS in the conference but as it can not be assumed that we know it a priori , it can be set according to some minimum system requirement a machine must meet in order to take part in a conference .
Parse:
set VBN ROOT
 +-- C NNP nsubjpass
 +-- is VBZ auxpass
 +-- according VBG prep
 |   +-- to IN pcomp
 |       +-- power NN pobj
 |           +-- the DT det
 |           +-- processing NN nn
 |           +-- of IN prep
 |           |   +-- CS NNP pobj
 |           |       +-- the DT det
 |           |       +-- weakest JJS amod
 |           +-- in IN prep
 |               +-- conference NN pobj
 |                   +-- the DT det
 +-- but CC cc
 +-- set VBN conj
 |   +-- assumed VBN advcl
 |   |   +-- as IN mark
 |   |   +-- it PRP nsubjpass
 |   |   +-- can MD aux
 |   |   +-- not RB neg
 |   |   +-- be VB auxpass
 |   |   +-- know VBP ccomp
 |   |       +-- that IN mark
 |   |       +-- we PRP nsubj
 |   |       +-- priori NN xcomp
 |   |           +-- it PRP nsubj
 |   |           +-- a DT det
 |   +-- , , punct
 |   +-- it PRP nsubjpass
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- according VBG prep
 |       +-- requirement VB pcomp
 |           +-- to IN mark
 |           +-- system NN nsubj
 |           |   +-- some DT det
 |           |   +-- minimum JJ amod
 |           +-- meet VB ccomp
 |               +-- machine NN nsubj
 |               |   +-- a DT det
 |               +-- must MD aux
 |               +-- in IN prep
 |                   +-- order NN pobj
 |                       +-- take VB infmod
 |                           +-- to TO aux
 |                           +-- part NN dobj
 |                           +-- in IN prep
 |                               +-- conference NN pobj
 |                                   +-- a DT det
 +-- . . punct
Input: ? Let NMax be the number of output streams a CS has to send to other CSs in remote domains -LRB- see section 6.1 -RRB- .
Parse:
Let VB ROOT
 +-- ? , punct
 +-- number NN ccomp
 |   +-- NMax PRP nsubj
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- streams NNS pobj
 |   |       +-- output NN nn
 |   +-- has VBZ rcmod
 |       +-- CS NNP nsubj
 |       |   +-- a DT det
 |       +-- send VB xcomp
 |           +-- to TO aux
 |           +-- to IN prep
 |           |   +-- CSs NNP pobj
 |           |       +-- other JJ amod
 |           +-- in IN prep
 |           |   +-- domains NNS pobj
 |           |       +-- remote JJ amod
 |           +-- see VB parataxis
 |               +-- -LRB- -LRB- punct
 |               +-- section NN dobj
 |               |   +-- 6.1 CD num
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: We will set NMax =3 -LRB- =|F| -RRB- , according to -LRB- 15 -RRB- .
Parse:
set VB ROOT
 +-- We PRP nsubj
 +-- will MD aux
 +-- =3 CD dobj
 |   +-- NMax NNP nn
 |   +-- =|F| NNP appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- according VBG prep
 |   +-- to IN pcomp
 |       +-- 15 CD pobj
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: The optimization problem is now to find the value of d that maximizes the total number of clients Mi served by one CS in a domain with capacity C .
Parse:
is VBZ ROOT
 +-- problem NN nsubj
 |   +-- The DT det
 |   +-- optimization NN nn
 +-- now RB advmod
 +-- find VB xcomp
 |   +-- to TO aux
 |   +-- value NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- d NN pobj
 |       +-- maximizes VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- number NN dobj
 |               +-- the DT det
 |               +-- total JJ amod
 |               +-- of IN prep
 |                   +-- clients NNS pobj
 |                       +-- served VBN rcmod
 |                           +-- Mi NNP nsubj
 |                           +-- by IN prep
 |                           |   +-- CS NNP pobj
 |                           |       +-- one CD num
 |                           +-- in IN prep
 |                               +-- domain NN pobj
 |                                   +-- a DT det
 |                                   +-- with IN prep
 |                                       +-- C NNP pobj
 |                                           +-- capacity NN nn
 +-- . . punct
Input: We first dispose the case where the capacity is not exceeded -LRB- the existing CS is not overloaded -RRB- , and then proceed to the case where there exists a need to create more CSs when a single CS is overloaded .
Parse:
dispose VBP ROOT
 +-- We PRP nsubj
 +-- first RB advmod
 +-- case NN dobj
 |   +-- the DT det
 |   +-- exceeded VBN rcmod
 |       +-- where WRB advmod
 |       +-- capacity NN nsubjpass
 |       |   +-- the DT det
 |       +-- is VBZ auxpass
 |       +-- not RB neg
 |       +-- overloaded VBN parataxis
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- CS NN nsubjpass
 |       |   |   +-- the DT det
 |       |   |   +-- existing VBG amod
 |       |   +-- is VBZ auxpass
 |       |   +-- not RB neg
 |       |   +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- then RB advmod
 |       +-- proceed VBP conj
 |           +-- to IN prep
 |               +-- case NN pobj
 |                   +-- the DT det
 |                   +-- exists VBZ rcmod
 |                       +-- where WRB advmod
 |                       +-- there EX expl
 |                       +-- need NN dobj
 |                           +-- a DT det
 |                           +-- create VB infmod
 |                               +-- to TO aux
 |                               +-- CSs NNP dobj
 |                               |   +-- more RBR amod
 |                               +-- overloaded VBN advcl
 |                                   +-- when WRB advmod
 |                                   +-- CS NN nsubjpass
 |                                   |   +-- a DT det
 |                                   |   +-- single JJ amod
 |                                   +-- is VBZ auxpass
 +-- . . punct
Input: We assume that clients are equally distributed amongst the domains , as we may not have information to assume an a priori distribution of the clients .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- distributed VBN ccomp
 |   +-- that IN mark
 |   +-- clients NNS nsubjpass
 |   +-- are VBP auxpass
 |   +-- equally RB advmod
 |   +-- amongst IN prep
 |   |   +-- domains NNS pobj
 |   |       +-- the DT det
 |   +-- , , punct
 |   +-- have VB advcl
 |       +-- as IN mark
 |       +-- we PRP nsubj
 |       +-- may MD aux
 |       +-- not RB neg
 |       +-- information NN dobj
 |           +-- assume VB infmod
 |               +-- to TO aux
 |               +-- distribution NN dobj
 |                   +-- an DT det
 |                   +-- a DT det
 |                   +-- priori JJ amod
 |                   +-- of IN prep
 |                       +-- clients NNS pobj
 |                           +-- the DT det
 +-- . . punct
Input: We can specify no more than an upper bound on the number of clients acceptable , given the number of active domains d .
Parse:
specify VB ROOT
 +-- We PRP nsubj
 +-- can MD aux
 +-- more JJR dobj
 |   +-- no DT advmod
 |   +-- than IN prep
 |       +-- upper JJ pobj
 |           +-- an DT det
 |           +-- bound VBN partmod
 |               +-- on IN prep
 |                   +-- number NN pobj
 |                       +-- the DT det
 |                       +-- of IN prep
 |                       |   +-- clients NNS pobj
 |                       +-- acceptable JJ amod
 +-- , , punct
 +-- given VBN prep
 |   +-- d NN dep
 |       +-- number NN nn
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- domains NNS pobj
 |                   +-- active JJ amod
 +-- . . punct
Input: 7.1 Conferencing with only One Level of CSs In this subsection , we consider that we have only one CS , i.e. , a unique M CS in each domain .
Parse:
consider VBP ROOT
 +-- Conferencing VBG nsubj
 |   +-- 7.1 CD num
 |   +-- with IN prep
 |       +-- Level NNP pobj
 |           +-- One CD num
 |           |   +-- only RB quantmod
 |           +-- of IN prep
 |               +-- CSs NNP pobj
 +-- In IN prep
 |   +-- subsection NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- have VBP ccomp
 |   +-- that IN mark
 |   +-- we PRP nsubj
 |   +-- CS NNP dobj
 |       +-- one CD num
 |       |   +-- only RB quantmod
 |       +-- , , punct
 |       +-- i.e. FW num
 |       +-- CS NNP appos
 |           +-- a DT det
 |           +-- unique JJ amod
 |           +-- M NNP nn
 |           +-- in IN prep
 |               +-- domain NN pobj
 |                   +-- each DT det
 +-- . . punct
Input: Thus it can not be overloaded .
Parse:
overloaded VBN ROOT
 +-- Thus RB advmod
 +-- it PRP nsubjpass
 +-- can MD aux
 +-- not RB neg
 +-- be VB auxpass
 +-- . . punct
Input: We consider that the system works as outlined in section 6.1
Parse:
consider VBP ROOT
 +-- We PRP nsubj
 +-- works VBZ ccomp
     +-- that IN mark
     +-- system NN nsubj
     |   +-- the DT det
     +-- outlined VBN advcl
         +-- as IN mark
         +-- in IN prep
             +-- section NN pobj
                 +-- 6.1 CD num
Input: In parallel , it also receives NMax streams for every other CSs before taking a decision on which NMax streams will be selected , sent and played out at each individual clients .
Parse:
receives VBZ ROOT
 +-- In IN prep
 |   +-- parallel NN pobj
 +-- , , punct
 +-- it PRP nsubj
 +-- also RB advmod
 +-- streams NNS dobj
 |   +-- NMax NN nn
 |   +-- for IN prep
 |       +-- CSs NNP pobj
 |           +-- every DT det
 |           +-- other JJ amod
 +-- before IN prep
 |   +-- taking VBG pcomp
 |       +-- decision NN dobj
 |           +-- a DT det
 |           +-- selected VBN rcmod
 |               +-- on IN prep
 |               |   +-- which WDT pobj
 |               +-- streams NNS nsubjpass
 |               |   +-- NMax NN nn
 |               +-- will MD aux
 |               +-- be VB auxpass
 |               +-- , , punct
 |               +-- sent VBN conj
 |               +-- and CC cc
 |               +-- played VBD conj
 |                   +-- out RP prt
 |                   +-- at IN prep
 |                       +-- clients NNS pobj
 |                           +-- each DT det
 |                           +-- individual JJ amod
 +-- . . punct
Input: For system stability , any CS in the conference should be able to handle its local clients in addition to the audio packets from other domains .
Parse:
able JJ ROOT
 +-- For IN prep
 |   +-- stability NN pobj
 |       +-- system NN nn
 +-- , , punct
 +-- CS NNP nsubj
 |   +-- any DT det
 |   +-- in IN prep
 |       +-- conference NN pobj
 |           +-- the DT det
 +-- should MD aux
 +-- be VB cop
 +-- handle VB xcomp
 |   +-- to TO aux
 |   +-- clients NNS dobj
 |   |   +-- its PRP$ poss
 |   |   +-- local JJ amod
 |   +-- in IN prep
 |       +-- addition NN pobj
 |           +-- to IN prep
 |               +-- packets NNS pobj
 |                   +-- the DT det
 |                   +-- audio JJ amod
 |                   +-- from IN prep
 |                       +-- domains NNS pobj
 |                           +-- other JJ amod
 +-- . . punct
Input: Clearly then , the following inequality must hold for every domain
Parse:
hold VB ROOT
 +-- Clearly RB advmod
 +-- then RB advmod
 +-- , , punct
 +-- inequality NN nsubj
 |   +-- the DT det
 |   +-- following VBG amod
 +-- must MD aux
 +-- for IN prep
     +-- domain NN pobj
         +-- every DT det
Input: C d M 50 9 234 100 17 884 150 26 1950 200 34 3434 250 42 5334 300 51 7650 350 59 10384 400 67 13534 450 76 17100 500 84 21084 Table 1 .
Parse:
d NN ROOT
 +-- C NNP nn
 +-- M NNP dep
 +-- 884 CD num
 |   +-- 50 CD number
 |   +-- 9 CD number
 |   +-- 234 CD number
 |   +-- 100 CD number
 |   +-- 17 CD number
 +-- 1 CD dep
 |   +-- 1950 CD num
 |   |   +-- 150 CD number
 |   |   +-- 26 CD number
 |   +-- 17100 CD num
 |   |   +-- 200 CD number
 |   |   +-- 34 CD number
 |   |   +-- 3434 CD number
 |   |   +-- 250 CD number
 |   |   +-- 42 CD number
 |   |   +-- 5334 CD number
 |   |   +-- 300 CD number
 |   |   +-- 51 CD number
 |   |   +-- 7650 CD number
 |   |   +-- 350 CD number
 |   |   +-- 59 CD number
 |   |   +-- 10384 CD number
 |   |   +-- 400 CD number
 |   |   +-- 67 CD number
 |   |   +-- 13534 CD number
 |   |   +-- 450 CD number
 |   |   +-- 76 CD number
 |   +-- 84 CD num
 |   |   +-- 500 CD number
 |   +-- 21084 CD num
 |   +-- Table NNP nn
 +-- . . punct
Input: Values of d and M computed for some values of C with NMax = 3 .
Parse:
computed VBN ROOT
 +-- Values NNS nsubj
 |   +-- of IN prep
 |       +-- d NN pobj
 |           +-- and CC cc
 |           +-- M NNP conj
 +-- for IN prep
 |   +-- values NNS pobj
 |       +-- some DT det
 |       +-- of IN prep
 |           +-- C NN pobj
 |               +-- with IN prep
 |                   +-- 3 CD pobj
 |                       +-- NMax NN nn
 |                       +-- = SYM dep
 +-- . . punct
Input: In Table 1 , we give the values of d and M that were computed using -LRB- 8 -RRB- and -LRB- 6 -RRB- with NMax = 3 .
Parse:
give VBP ROOT
 +-- In IN prep
 |   +-- Table NNP pobj
 |       +-- 1 CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- values NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- d NN pobj
 |   |       +-- and CC cc
 |   |       +-- M NNP conj
 |   +-- computed VBN rcmod
 |       +-- that WDT nsubjpass
 |       +-- were VBD auxpass
 |       +-- using VBG xcomp
 |           +-- 8 CD dobj
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- -RRB- -RRB- punct
 |           |   +-- and CC cc
 |           |   +-- 6 CD conj
 |           |       +-- -LRB- -LRB- punct
 |           |       +-- -RRB- -RRB- punct
 |           +-- with IN prep
 |               +-- = SYM pobj
 |                   +-- NMax NN nn
 |                   +-- 3 CD num
 +-- . . punct
Input: We see that the values of d and M , being dependent of C , are therefore based on the weakest CS .
Parse:
see VBP ROOT
 +-- We PRP nsubj
 +-- based VBN ccomp
 |   +-- that IN mark
 |   +-- values NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- d NN pobj
 |   |   |       +-- and CC cc
 |   |   |       +-- M NNP conj
 |   |   +-- , , punct
 |   |   +-- dependent JJ partmod
 |   |       +-- being VBG cop
 |   |       +-- of IN prep
 |   |           +-- C NNP pobj
 |   +-- , , punct
 |   +-- are VBP auxpass
 |   +-- therefore RB advmod
 |   +-- on IN prep
 |       +-- CS NNP pobj
 |           +-- the DT det
 |           +-- weakest JJS amod
 +-- . . punct
Input: We see that there is a trade off between M and d .
Parse:
see VBP ROOT
 +-- We PRP nsubj
 +-- is VBZ ccomp
 |   +-- that IN mark
 |   +-- there EX expl
 |   +-- trade NN nsubj
 |       +-- a DT det
 |       +-- off RP advmod
 |       +-- between IN prep
 |           +-- M NN pobj
 |               +-- and CC cc
 |               +-- d NNP conj
 +-- . . punct
Input: We could admit more domains in the conference , but at the expense of restricting the total number of clients M in the conference .
Parse:
admit VB ROOT
 +-- We PRP nsubj
 +-- could MD aux
 +-- domains NNS dobj
 |   +-- more JJR amod
 +-- in IN prep
 |   +-- conference NN pobj
 |       +-- the DT det
 +-- , , punct
 +-- but CC cc
 +-- at IN conj
 |   +-- expense NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- restricting VBG pcomp
 |               +-- number NN dobj
 |                   +-- the DT det
 |                   +-- total JJ amod
 |                   +-- of IN prep
 |                   |   +-- M NNP pobj
 |                   |       +-- clients NNS nn
 |                   +-- in IN prep
 |                       +-- conference NN pobj
 |                           +-- the DT det
 +-- . . punct
Input: While implementing and testing the Conference Servers on a Pentium III 1.4 GHz running Windows NT , we were able to set C=300 .
Parse:
able JJ ROOT
 +-- implementing VBG advcl
 |   +-- While IN mark
 |   +-- and CC cc
 |   +-- testing VBG conj
 |   +-- Servers NNPS dobj
 |   |   +-- the DT det
 |   |   +-- Conference NNP nn
 |   +-- on IN prep
 |       +-- GHz NNP pobj
 |           +-- a DT det
 |           +-- III NNP nn
 |           |   +-- Pentium NNP nn
 |           +-- 1.4 CD num
 |           +-- running VBG partmod
 |               +-- NT NNP dobj
 |                   +-- Windows NNP nn
 +-- , , punct
 +-- we PRP nsubj
 +-- were VBD cop
 +-- set VB xcomp
 |   +-- to TO aux
 |   +-- C=300 CD dobj
 +-- . . punct
Input: But with the advent of faster computers -LRB- > 3 GHz -RRB- , one can easily set C to higher values and determine d and M accordingly .
Parse:
set VB ROOT
 +-- But CC cc
 +-- with IN prep
 |   +-- advent NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- computers NNS pobj
 |       |       +-- faster JJR amod
 |       +-- -LRB- -LRB- punct
 |       +-- GHz NNP dep
 |       |   +-- > VBN dep
 |       |   +-- 3 CD num
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- one PRP nsubj
 +-- can MD aux
 +-- easily RB advmod
 +-- C NN dobj
 +-- to IN prep
 |   +-- values NNS pobj
 |       +-- higher JJR amod
 +-- and CC cc
 +-- determine VB conj
 |   +-- d NN dobj
 |   |   +-- and CC cc
 |   |   +-- M NNP conj
 |   +-- accordingly RB advmod
 +-- . . punct
Input: Fig .
Parse:
Fig NNP ROOT
 +-- . . punct
Input: 4 shows a contour plot and Fig .
Parse:
shows VBZ ROOT
 +-- 4 CD nsubj
 +-- plot NN dobj
 |   +-- a DT det
 |   +-- contour JJ amod
 |   +-- and CC cc
 |   +-- Fig NNP conj
 +-- . . punct
Input: 5 , a 3D mesh showing optimized solutions for CSs of different capacities .
Parse:
5 CD ROOT
 +-- , , punct
 +-- mesh NN appos
 |   +-- a DT det
 |   +-- 3D CD nn
 |   +-- showing VBG partmod
 |       +-- solutions NNS dobj
 |           +-- optimized VBN amod
 |           +-- for IN prep
 |               +-- CSs NNP pobj
 |                   +-- of IN prep
 |                       +-- capacities NNS pobj
 |                           +-- different JJ amod
 +-- . . punct
Input: These lead us to maximize the number of domains , and hence , to maximize the total number of clients based on the capacity of various CSs .
Parse:
lead VBP ROOT
 +-- These DT nsubj
 +-- us PRP dobj
 +-- maximize VB xcomp
 |   +-- to TO aux
 |   +-- number NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- domains NNS pobj
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- hence RB advmod
 |   +-- maximize VB xcomp
 |       +-- to TO aux
 |       +-- number NN dobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- of IN prep
 |           |   +-- clients NNS pobj
 |           +-- based VBN partmod
 |               +-- on IN prep
 |                   +-- capacity NN pobj
 |                       +-- the DT det
 |                       +-- of IN prep
 |                           +-- CSs NNP pobj
 |                               +-- various JJ amod
 +-- . . punct
Input: In Fig .
Parse:
In IN ROOT
 +-- Fig NNP pobj
 +-- . . punct
Input: 4 , the individual curves represent the total number of clients targeted , and we select a lower value of d , for capacity C , for targeted M to reduce traffic on WAN .
Parse:
represent VBP ROOT
 +-- 4 LS dep
 |   +-- , , punct
 +-- curves NNS nsubj
 |   +-- the DT det
 |   +-- individual JJ amod
 +-- number NN dobj
 |   +-- the DT det
 |   +-- total JJ amod
 |   +-- of IN prep
 |       +-- clients NNS pobj
 |           +-- targeted VBN partmod
 +-- , , punct
 +-- and CC cc
 +-- select VBP conj
 |   +-- we PRP nsubj
 |   +-- value NN dobj
 |   |   +-- a DT det
 |   |   +-- lower JJR amod
 |   |   +-- of IN prep
 |   |       +-- d NN pobj
 |   +-- , , punct
 |   +-- for IN prep
 |       +-- targeted VBN pcomp
 |           +-- M NNP dobj
 |           +-- reduce VB xcomp
 |               +-- to TO aux
 |               +-- traffic NN dobj
 |                   +-- on IN prep
 |                       +-- WAN NNP pobj
 +-- . . punct
Input: Fig .
Parse:
Fig NNP ROOT
 +-- . . punct
Input: 5 represents a different perspective of the same data in 3D .
Parse:
represents VBZ ROOT
 +-- 5 CD nsubj
 +-- perspective NN dobj
 |   +-- a DT det
 |   +-- different JJ amod
 |   +-- of IN prep
 |       +-- data NNS pobj
 |           +-- the DT det
 |           +-- same JJ amod
 |           +-- in IN prep
 |               +-- 3D NN pobj
 +-- . . punct
Input: Fig .
Parse:
Fig NNP ROOT
 +-- . . punct
Input: 4 .
Parse:
4 LS ROOT
 +-- . . punct
Input: Contour Plot of Capacity versus Optimum number of domains for various conference sizes 7.2 Conferencing with Two Levels of CSs Now considering the case where the number of clients in a particular domain is too large , i.e. , d M Mi ? -LRB- 9 -RRB- one has to avoid the denial of service for new clients due to overloading of Conference Server .
Parse:
considering VBG ROOT
 +-- Plot NNP nsubj
 |   +-- Contour NNP nn
 |   +-- of IN prep
 |   |   +-- Capacity NNP pobj
 |   +-- versus IN prep
 |   |   +-- number NN pobj
 |   |       +-- Optimum NNP nn
 |   |       +-- of IN prep
 |   |       |   +-- domains NNS pobj
 |   |       |       +-- for IN prep
 |   |       |           +-- sizes NNS pobj
 |   |       |               +-- various JJ amod
 |   |       |               +-- conference NN nn
 |   |       +-- 7.2 CD dep
 |   +-- Conferencing VBG partmod
 |       +-- with IN prep
 |           +-- Levels NNPS pobj
 |               +-- Two CD num
 |               +-- of IN prep
 |                   +-- CSs NNP pobj
 +-- Now RB advmod
 +-- case NN dobj
 |   +-- the DT det
 |   +-- has VBZ rcmod
 |       +-- large JJ advcl
 |       |   +-- where WRB advmod
 |       |   +-- number NN nsubj
 |       |   |   +-- the DT det
 |       |   |   +-- of IN prep
 |       |   |   |   +-- clients NNS pobj
 |       |   |   +-- in IN prep
 |       |   |       +-- domain NN pobj
 |       |   |           +-- a DT det
 |       |   |           +-- particular JJ amod
 |       |   +-- is VBZ cop
 |       |   +-- too RB advmod
 |       |   +-- , , punct
 |       |   +-- i.e. FW advmod
 |       +-- one CD nsubj
 |       |   +-- Mi NNP nn
 |       |       +-- d NNP nn
 |       |       +-- M NNP nn
 |       |       +-- ? . punct
 |       |       +-- 9 CD appos
 |       |           +-- -LRB- -LRB- punct
 |       |           +-- -RRB- -RRB- punct
 |       +-- avoid VB xcomp
 |           +-- to TO aux
 |           +-- denial NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |               |   +-- service NN pobj
 |               |       +-- for IN prep
 |               |           +-- clients NNS pobj
 |               |               +-- new JJ amod
 |               +-- to IN prep
 |                   +-- due IN mwe
 |                   +-- overloading VBG pobj
 |                       +-- of IN prep
 |                           +-- Server NNP pobj
 |                               +-- Conference NNP nn
 +-- . . punct
Input: This problem can be solved by introducing a second level of CSs inside the given domain , as in Fig .
Parse:
solved VBN ROOT
 +-- problem NN nsubjpass
 |   +-- This DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- by IN prep
 |   +-- introducing VBG pcomp
 |       +-- level NN dobj
 |       |   +-- a DT det
 |       |   +-- second JJ amod
 |       |   +-- of IN prep
 |       |       +-- CSs NNP pobj
 |       +-- inside IN prep
 |       |   +-- domain NN pobj
 |       |       +-- the DT det
 |       |       +-- given VBN amod
 |       +-- , , punct
 |       +-- as IN prep
 |           +-- in IN pcomp
 |               +-- Fig NNP pobj
 +-- . . punct
Input: 6 .
Parse:
6 CD ROOT
 +-- . . punct
Input: The existing M CS creates a Slave CS -LRB- S CS -RRB- that can handle up to C end users and to which it transfers all its active clients .
Parse:
creates VBZ ROOT
 +-- CS NNP nsubj
 |   +-- The DT det
 |   +-- existing VBG amod
 |   +-- M NNP nn
 +-- CS NNP dobj
 |   +-- a DT det
 |   +-- Slave NNP nn
 |   +-- -LRB- -LRB- punct
 |   +-- CS NNP dep
 |   |   +-- S NNP nn
 |   +-- -RRB- -RRB- punct
 |   +-- handle VB rcmod
 |       +-- that WDT nsubj
 |       +-- can MD aux
 |       +-- up IN prep
 |       |   +-- to IN pcomp
 |       |       +-- C NN pobj
 |       +-- users NNS dobj
 |       |   +-- end NN nn
 |       +-- and CC cc
 |       +-- transfers VBZ conj
 |           +-- to TO prep
 |           |   +-- which WDT pobj
 |           +-- it PRP nsubj
 |           +-- clients NNS dobj
 |               +-- all PDT predet
 |               +-- its PRP$ poss
 |               +-- active JJ amod
 +-- . . punct
Input: Here , the system works differently as outlined in section 6.1
Parse:
works VBZ ROOT
 +-- Here RB advmod
 +-- , , punct
 +-- system NN nsubj
 |   +-- the DT det
 +-- outlined VBN advcl
     +-- differently RB advmod
     +-- as IN mark
     +-- in IN prep
         +-- section NN pobj
             +-- 6.1 CD num
Input: Each newly created S CS must run on a separate machine .
Parse:
run VB ROOT
 +-- CS NNP nsubj
 |   +-- Each DT det
 |   +-- created VBN amod
 |   |   +-- newly RB advmod
 |   +-- S NNP nn
 +-- must MD aux
 +-- on IN prep
 |   +-- machine NN pobj
 |       +-- a DT det
 |       +-- separate JJ amod
 +-- . . punct
Input: The M CS has to create more S CSs if the number of active clients exceeds C in the course of the conference after the transfer .
Parse:
has VBZ ROOT
 +-- CS NNP nsubj
 |   +-- The DT det
 |   +-- M NNP nn
 +-- create VB xcomp
 |   +-- to TO aux
 |   +-- CSs NNP dobj
 |   |   +-- more JJR amod
 |   |   +-- S NNP nn
 |   +-- exceeds VBZ advcl
 |       +-- if IN mark
 |       +-- number NN nsubj
 |       |   +-- the DT det
 |       |   +-- of IN prep
 |       |       +-- clients NNS pobj
 |       |           +-- active JJ amod
 |       +-- C NNP dobj
 |       +-- in IN prep
 |           +-- course NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- conference NN pobj
 |                       +-- the DT det
 |                       +-- after IN prep
 |                           +-- transfer NN pobj
 |                               +-- the DT det
 +-- . . punct
Input: With this mechanism , the M CS will be able to create utmost ? ? ? ? ? ? ? ? ? = Max Max N dNC U -RRB- 1 -LRB- S CSs , -LRB- 10 -RRB- as it must handle 3 -LRB- = NMax -RRB- packets for each local S CSs and 3 -LRB- = NMax -RRB- packets from each other remote domains .
Parse:
able JJ ROOT
 +-- With IN prep
 |   +-- mechanism NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- CS NNP nsubj
 |   +-- the DT det
 |   +-- M NNP nn
 +-- will MD aux
 +-- be VB cop
 +-- create VB xcomp
 |   +-- to TO aux
 |   +-- utmost JJ dobj
 +-- ? . punct
 +-- = NFP punct
 +-- U NNP dobj
 |   +-- Max NNP nn
 |   |   +-- Max NNP nn
 |   +-- N NNP nn
 |   +-- dNC NNP nn
 |   +-- -RRB- -RRB- punct
 |   +-- 1 CD num
 |   +-- CSs NNP appos
 |       +-- -LRB- -LRB- punct
 |       +-- S NNP nn
 |       +-- , , punct
 |       +-- 10 CD dep
 |       +-- -RRB- -RRB- punct
 +-- handle VB advcl
 |   +-- as IN mark
 |   +-- it PRP nsubj
 |   +-- must MD aux
 |   +-- packets NNS dobj
 |   |   +-- 3 CD nn
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- = SYM prep
 |   |   |   |   +-- NMax NN pobj
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- for IN prep
 |   |       +-- CSs NNP pobj
 |   |           +-- each DT det
 |   |           +-- local JJ amod
 |   |           +-- S NNP nn
 |   +-- and CC cc
 |   +-- packets NNS conj
 |       +-- 3 CD num
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- NMax NNP dep
 |       |   |   +-- = SYM nn
 |       |   +-- -RRB- -RRB- punct
 |       +-- from IN prep
 |           +-- domains NNS pobj
 |               +-- each DT det
 |               +-- other JJ amod
 |               +-- remote JJ amod
 +-- . . punct
Input: We can then calculate the maximum theoretical number of active clients CUMi ? = in each domain as well as M , for the whole conference as CUdM ? ? = .
Parse:
calculate VB ROOT
 +-- We PRP nsubj
 +-- can MD aux
 +-- then RB advmod
 +-- number NN dobj
 |   +-- the DT det
 |   +-- maximum JJ amod
 |   +-- theoretical JJ amod
 |   +-- of IN prep
 |       +-- CUMi NNP pobj
 |           +-- clients NNS nn
 |               +-- active JJ amod
 +-- ? , punct
 +-- = , punct
 +-- in IN prep
 |   +-- domain NN pobj
 |       +-- each DT det
 |       +-- well RB cc
 |       |   +-- as RB advmod
 |       |   +-- as IN mwe
 |       +-- M NNP conj
 +-- , , punct
 +-- for IN prep
 |   +-- conference NN pobj
 |       +-- the DT det
 |       +-- whole JJ amod
 |       +-- as IN prep
 |           +-- CUdM NNP pobj
 +-- ? . punct
 +-- = SYM punct
 +-- . . punct
Input: Fig .
Parse:
Fig NNP ROOT
 +-- . . punct
Input: 5 .
Parse:
5 CD ROOT
 +-- . . punct
Input: 3D Plot of Capacity versus Optimum number of domains for various conference sizes Of course , one could further create a third level in the hierarchy , giving the possibility of accommodating even more clients .
Parse:
create VB ROOT
 +-- 3D CD dep
 |   +-- Plot NNP dep
 |       +-- of IN prep
 |       |   +-- Capacity NNP pobj
 |       +-- versus IN prep
 |           +-- number NN pobj
 |               +-- Optimum NNP nn
 |               +-- of IN prep
 |                   +-- domains NNS pobj
 |                       +-- for IN prep
 |                           +-- sizes NNS pobj
 |                               +-- various JJ amod
 |                               +-- conference NN nn
 +-- course RB advmod
 |   +-- Of RB advmod
 +-- , , punct
 +-- one PRP nsubj
 +-- could MD aux
 +-- further RB advmod
 +-- level NN dobj
 |   +-- a DT det
 |   +-- third JJ amod
 |   +-- in IN prep
 |       +-- hierarchy NN pobj
 |           +-- the DT det
 +-- giving VBG partmod
 |   +-- possibility NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- accommodating VBG pcomp
 |               +-- clients NNS dobj
 |                   +-- more JJR amod
 |                       +-- even RB advmod
 +-- . . punct
Input: This may be unnecessary as the number of possible clients is large enough with two levels. .
Parse:
unnecessary JJ ROOT
 +-- This DT nsubj
 +-- may MD aux
 +-- be VB cop
 +-- enough RB advcl
 |   +-- as IN mark
 |   +-- number NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- clients NNS pobj
 |   |           +-- possible JJ amod
 |   +-- is VBZ cop
 |   +-- large JJ amod
 |   +-- with IN prep
 |       +-- levels. NNS pobj
 |           +-- two CD num
 +-- . . punct
