Input: Originally , CONFLEX was intended for use in exploring the conformers of the large bio molecules , such HIV protease .
Parse:
intended VBN ROOT
 +-- Originally RB advmod
 +-- , , punct
 +-- CONFLEX NNP nsubjpass
 +-- was VBD auxpass
 +-- for IN prep
 |   +-- use NN pobj
 |       +-- in IN prep
 |           +-- exploring VBG pcomp
 |               +-- conformers NNS dobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- molecules NNS pobj
 |                           +-- the DT det
 |                           +-- large JJ amod
 |                           +-- bio NN nn
 |                           +-- , , punct
 |                           +-- protease NN appos
 |                               +-- such JJ amod
 |                               +-- HIV NNP nn
 +-- . . punct
Input: In such molecules , the number of trial structures increases and the time required for optimization of RPC Selection of Initial Structure Conformations Database Local Perturbation Comparison and Registration Client program Task Pool of Geometry Optimization RPC RPC Grid environment Cluster B Cluster A Cluster C Trial structureTrial structure Trial structure Trial structure Figure 3
Parse:
increases NNS ROOT
 +-- In IN prep
 |   +-- molecules NNS pobj
 |       +-- such JJ amod
 +-- , , punct
 +-- number NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- structures NNS pobj
 |           +-- trial NN nn
 +-- and CC cc
 +-- time NN conj
     +-- the DT det
     +-- required VBN partmod
         +-- for IN prep
             +-- optimization NN pobj
                 +-- of IN prep
                     +-- Selection NNP pobj
                         +-- RPC NNP nn
                         +-- of IN prep
                             +-- Initial NNP pobj
                                 +-- Structure NNP prep
                                 |   +-- Conformations NNPS pobj
                                 |       +-- Database NNP dep
                                 |           +-- Local NNP dep
                                 |               +-- Comparison NNP dep
                                 |                   +-- Perturbation NNP nn
                                 |                   +-- and CC cc
                                 |                   +-- Pool NNP conj
                                 |                       +-- program NN nn
                                 |                       |   +-- Client NNP nn
                                 |                       |       +-- Registration NNP nn
                                 |                       +-- Task NNP nn
                                 |                       +-- of IN prep
                                 |                           +-- Figure NN pobj
                                 |                               +-- Optimization NNP nn
                                 |                               |   +-- Geometry NNP nn
                                 |                               +-- Cluster NN nn
                                 |                               |   +-- RPC NNP nn
                                 |                               |   +-- environment NN nn
                                 |                               |       +-- Grid NN nn
                                 |                               +-- Cluster NNP nn
                                 |                               |   +-- B NNP nn
                                 |                               +-- structure NN nn
                                 |                                   +-- A DT det
                                 |                                   +-- structure NN nn
                                 |                                   |   +-- Trial JJ amod
                                 |                                   +-- Trial JJ amod
                                 +-- 3 CD num
Input: agent rexrex rex Client jones.tsukuba.ac.jp hpc serv.hpcc.jp hpc1 hpc2 hpc3 Agent invocation communicationNetwork Figure 4
Parse:
hpc NNP ROOT
 +-- agent NN nn
 +-- rexrex FW nn
 +-- rex NNP nn
 +-- Client NNP nn
 +-- jones.tsukuba.ac.jp NNP nn
 +-- serv.hpcc.jp NN dep
     +-- Figure NN dobj
         +-- hpc1 CD num
         +-- hpc2 CD num
         +-- invocation NN nn
         |   +-- hpc3 CD num
         |   +-- Agent NN nn
         +-- communicationNetwork NN nn
         +-- 4 CD num
Input: the trial structure becomes immense .
Parse:
immense JJ ROOT
 +-- structure NN nsubj
 |   +-- the DT det
 |   +-- trial NN nn
 +-- becomes VBZ cop
 +-- . . punct
Input: We implemented the parallelized version of CONFLEX , which can not treat such molecules using only a local PC cluster .
Parse:
implemented VBD ROOT
 +-- We PRP nsubj
 +-- version NN dobj
 |   +-- the DT det
 |   +-- parallelized VBN amod
 |   +-- of IN prep
 |   |   +-- CONFLEX NNP pobj
 |   +-- , , punct
 |   +-- treat VB rcmod
 |       +-- which WDT nsubj
 |       +-- can MD aux
 |       +-- not RB neg
 |       +-- molecules NNS dobj
 |       |   +-- such JJ amod
 |       +-- using VBG xcomp
 |           +-- cluster NN dobj
 |               +-- only RB advmod
 |               +-- a DT det
 |               +-- local JJ amod
 |               +-- PC NN nn
 +-- . . punct
Input: In order to exploit the vast computing resources of a grid environment , we designed and implemented CONFLEX G , which is a grid enabled version of CONFLEX , with the OmniRPC system .
Parse:
designed VBD ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- exploit VB infmod
 |           +-- to TO aux
 |           +-- resources NNS dobj
 |               +-- the DT det
 |               +-- vast JJ amod
 |               +-- computing NN nn
 |               +-- of IN prep
 |                   +-- environment NN pobj
 |                       +-- a DT det
 |                       +-- grid NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- and CC cc
 +-- implemented VBD conj
 +-- G NNP dobj
 |   +-- CONFLEX NNP nn
 |   +-- , , punct
 |   +-- version NN rcmod
 |       +-- which WDT nsubj
 |       +-- is VBZ cop
 |       +-- a DT det
 |       +-- enabled VBN amod
 |       |   +-- grid NN dep
 |       +-- of IN prep
 |       |   +-- CONFLEX NNP pobj
 |       +-- , , punct
 |       +-- with IN prep
 |           +-- system NN pobj
 |               +-- the DT det
 |               +-- OmniRPC NNP nn
 +-- . . punct
Input: CONFLEX G allocates jobs to optimize a trial structure to the computational nodes of each cluster in the grid environment .
Parse:
allocates VBZ ROOT
 +-- G NNP nsubj
 |   +-- CONFLEX NNP nn
 +-- jobs NNS dobj
 +-- optimize VB xcomp
 |   +-- to TO aux
 |   +-- structure NN dobj
 |   |   +-- a DT det
 |   |   +-- trial NN nn
 |   +-- to IN prep
 |       +-- nodes NNS pobj
 |           +-- the DT det
 |           +-- computational JJ amod
 |           +-- of IN prep
 |               +-- cluster NN pobj
 |                   +-- each DT det
 |                   +-- in IN prep
 |                       +-- environment NN pobj
 |                           +-- the DT det
 |                           +-- grid NN nn
 +-- . . punct
Input: Figure 3 shows the process of CONFLEX G .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 3 CD num
 +-- process NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- G NNP pobj
 |           +-- CONFLEX NNP nn
 +-- . . punct
Input: The worker programs are initialized by the initialize method , which is provided by the OmniRPC AIM facility at worker invocation .
Parse:
initialized VBN ROOT
 +-- programs NNS nsubjpass
 |   +-- The DT det
 |   +-- worker NN nn
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- method NN pobj
 |       +-- the DT det
 |       +-- initialize NN nn
 |       +-- , , punct
 |       +-- provided VBN rcmod
 |           +-- which WDT nsubjpass
 |           +-- is VBZ auxpass
 |           +-- by IN prep
 |               +-- facility NN pobj
 |                   +-- the DT det
 |                   +-- OmniRPC NNP nn
 |                   +-- AIM NNP nn
 |                   +-- at IN prep
 |                       +-- invocation NN pobj
 |                           +-- worker NN nn
 +-- . . punct
Input: At each RPC call , the initialized state is reused on the remote host .
Parse:
reused VBN ROOT
 +-- At IN prep
 |   +-- call NN pobj
 |       +-- each DT det
 |       +-- RPC NNP nn
 +-- , , punct
 +-- state NN nsubjpass
 |   +-- the DT det
 |   +-- initialized VBN amod
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- host NN pobj
 |       +-- the DT det
 |       +-- remote JJ amod
 +-- . . punct
Input: In other words , the client program can eliminate the initialization for each RPC call , and can therefore optimize trial structures efficiently .
Parse:
eliminate VB ROOT
 +-- In IN prep
 |   +-- words NNS pobj
 |       +-- other JJ amod
 +-- , , punct
 +-- program NN nsubj
 |   +-- the DT det
 |   +-- client NN nn
 +-- can MD aux
 +-- initialization NN dobj
 |   +-- the DT det
 |   +-- for IN prep
 |       +-- call NN pobj
 |           +-- each DT det
 |           +-- RPC NNP nn
 +-- and CC cc
 +-- optimize VB conj
 |   +-- can MD aux
 |   +-- therefore RB advmod
 |   +-- structures NNS dobj
 |   |   +-- trial NN nn
 |   +-- efficiently RB advmod
 +-- . . punct
Input: 3.1 The OmniRPC system OmniRPC is a Grid RPC system which allows seamless parallel programming from a PC cluster to a grid environment .
Parse:
system NN ROOT
 +-- system NN nsubj
 |   +-- 3.1 CD num
 |   +-- The DT det
 |   +-- OmniRPC NNP nn
 |   +-- OmniRPC NNP appos
 +-- is VBZ cop
 +-- a DT det
 +-- Grid NNP nn
 +-- RPC NNP nn
 +-- allows VBZ rcmod
 |   +-- which WDT nsubj
 |   +-- programming NN dobj
 |       +-- seamless NN amod
 |       +-- parallel JJ amod
 |       +-- from IN prep
 |       |   +-- cluster NN pobj
 |       |       +-- a DT det
 |       |       +-- PC NN nn
 |       +-- to IN prep
 |           +-- environment NN pobj
 |               +-- a DT det
 |               +-- grid NN nn
 +-- . . punct
Input: OmniRPC inherits its API and basic architecture from Ninf .
Parse:
inherits VBZ ROOT
 +-- OmniRPC NNP nsubj
 +-- API NN dobj
 |   +-- its PRP$ poss
 |   +-- and CC cc
 |   +-- architecture NN conj
 |   |   +-- basic JJ amod
 |   +-- from IN prep
 |       +-- Ninf NNP pobj
 +-- . . punct
Input: A client and the remote computational hosts which execute the remote procedures may be connected via a network .
Parse:
connected VBN ROOT
 +-- client NN nsubjpass
 |   +-- A DT det
 |   +-- and CC cc
 |   +-- hosts NNS conj
 |       +-- the DT det
 |       +-- remote JJ amod
 |       +-- computational JJ amod
 |       +-- execute VBP rcmod
 |           +-- which WDT nsubj
 |           +-- procedures NNS dobj
 |               +-- the DT det
 |               +-- remote JJ amod
 +-- may MD aux
 +-- be VB auxpass
 +-- via IN prep
 |   +-- network NN pobj
 |       +-- a DT det
 +-- . . punct
Input: The remote libraries are implemented as an executable program which contains a network stub routine as its main routine .
Parse:
implemented VBN ROOT
 +-- libraries NNS nsubjpass
 |   +-- The DT det
 |   +-- remote JJ amod
 +-- are VBP auxpass
 +-- as IN prep
 |   +-- program NN pobj
 |       +-- an DT det
 |       +-- executable JJ amod
 |       +-- contains VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- stub NN dobj
 |               +-- a DT det
 |               +-- network NN nn
 |               +-- routine JJ amod
 |                   +-- as IN prep
 |                       +-- routine NN pobj
 |                           +-- its PRP$ poss
 |                           +-- main JJ amod
 +-- . . punct
Input: We call this executable program a remote executable program -LRB- rex -RRB- .
Parse:
call VBP ROOT
 +-- We PRP nsubj
 +-- program NN dobj
 |   +-- this DT det
 |   +-- executable JJ amod
 +-- program NN dep
 |   +-- a DT det
 |   +-- remote JJ amod
 |   +-- executable JJ amod
 |   +-- -LRB- -LRB- punct
 |   +-- rex NNP dep
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: When the OmniRPC client program starts , the initialization function of OmniRPC system invokes the OmniRPC agent program omrpc agent in the remote hosts listed in the host file .
Parse:
invokes VBZ ROOT
 +-- starts VBZ advcl
 |   +-- When WRB advmod
 |   +-- program NN nsubj
 |       +-- the DT det
 |       +-- OmniRPC NNP nn
 |       +-- client NN nn
 +-- , , punct
 +-- function NN nsubj
 |   +-- the DT det
 |   +-- initialization NN nn
 |   +-- of IN prep
 |       +-- system NN pobj
 |           +-- OmniRPC NNP nn
 +-- agent NN dobj
 |   +-- the DT det
 |   +-- agent NN nn
 |   |   +-- OmniRPC NNP nn
 |   +-- program NN nn
 |   +-- omrpc NN nn
 +-- in IN prep
 |   +-- hosts NNS pobj
 |       +-- the DT det
 |       +-- remote JJ amod
 |       +-- listed VBN partmod
 |           +-- in IN prep
 |               +-- file NN pobj
 |                   +-- the DT det
 |                   +-- host NN nn
 +-- . . punct
Input: To invoke the agent , the user can use the remote shell command rsh in a local area network , the GRAM -LRB- Globus Resource Allocation Manager -RRB- API of the Globus 156 toolkit -LRB- 12 -RRB- in a grid environment , or the secure remote shell command ssh .
Parse:
use VB ROOT
 +-- invoke VB advcl
 |   +-- To TO aux
 |   +-- agent NN dobj
 |       +-- the DT det
 +-- , , punct
 +-- user NN nsubj
 |   +-- the DT det
 +-- can MD aux
 +-- rsh NNP dobj
 |   +-- the DT det
 |   +-- shell NN nn
 |   |   +-- remote JJ amod
 |   +-- command NN nn
 +-- in IN prep
 |   +-- network NN pobj
 |       +-- a DT det
 |       +-- local JJ amod
 |       +-- area NN nn
 |       +-- , , punct
 |       +-- API NN conj
 |       |   +-- the DT det
 |       |   +-- Manager NNP nn
 |       |   |   +-- GRAM NNP dep
 |       |   |   +-- -LRB- -LRB- punct
 |       |   |   +-- Globus NNP nn
 |       |   |   +-- Resource NNP nn
 |       |   |   +-- Allocation NNP nn
 |       |   |   +-- -RRB- -RRB- punct
 |       |   +-- of IN prep
 |       |   |   +-- toolkit NN pobj
 |       |   |       +-- the DT det
 |       |   |       +-- Globus NNP nn
 |       |   |       +-- 156 CD num
 |       |   |       +-- -LRB- -LRB- punct
 |       |   |       +-- 12 CD dep
 |       |   |       +-- -RRB- -RRB- punct
 |       |   +-- in IN prep
 |       |       +-- environment NN pobj
 |       |           +-- a DT det
 |       |           +-- grid NN nn
 |       +-- or CC cc
 |       +-- shell NN conj
 |           +-- the DT det
 |           +-- secure JJ amod
 |           +-- remote JJ amod
 |           +-- ssh NNP dep
 |               +-- command NN nn
 +-- . . punct
Input: The user can switch the configurations only by changing the host file .
Parse:
switch VB ROOT
 +-- user NN nsubj
 |   +-- The DT det
 +-- can MD aux
 +-- configurations NNS dobj
 |   +-- the DT det
 +-- by IN prep
 |   +-- only RB advmod
 |   +-- changing VBG pcomp
 |       +-- file NN dobj
 |           +-- the DT det
 |           +-- host NN nn
 +-- . . punct
Input: OmniRpcCall is a simple client programming interface for calling remote functions .
Parse:
interface NN ROOT
 +-- OmniRpcCall NNP nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- simple JJ amod
 +-- programming NN nn
 |   +-- client NN nn
 +-- for IN prep
 |   +-- calling VBG pcomp
 |       +-- functions NNS dobj
 |           +-- remote JJ amod
 +-- . . punct
Input: When OmniRpcCall makes a remote procedure call , the call is allocated to an appropriate remote host .
Parse:
allocated VBN ROOT
 +-- makes VBZ advcl
 |   +-- When WRB advmod
 |   +-- OmniRpcCall NNP nsubj
 |   +-- call NN dobj
 |       +-- a DT det
 |       +-- remote JJ amod
 |       +-- procedure NN nn
 +-- , , punct
 +-- call NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- host NN pobj
 |       +-- an DT det
 |       +-- appropriate JJ amod
 |       +-- remote JJ amod
 +-- . . punct
Input: When the client issues the RPC request , it requests that the agent in the selected host submit the job of the remote executable with the local job scheduler specified in the host file .
Parse:
requests VBZ ROOT
 +-- issues VBZ advcl
 |   +-- When WRB advmod
 |   +-- client NN nsubj
 |   |   +-- the DT det
 |   +-- request NN dobj
 |       +-- the DT det
 |       +-- RPC NNP nn
 +-- , , punct
 +-- it PRP nsubj
 +-- submit VB ccomp
 |   +-- that IN mark
 |   +-- agent NN nsubj
 |   |   +-- the DT det
 |   |   +-- in IN prep
 |   |       +-- host NN pobj
 |   |           +-- the DT det
 |   |           +-- selected VBN amod
 |   +-- job NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- executable JJ pobj
 |   |           +-- the DT det
 |   |           +-- remote JJ amod
 |   +-- with IN prep
 |       +-- scheduler NN pobj
 |           +-- the DT det
 |           +-- local JJ amod
 |           +-- job NN nn
 |           +-- specified VBD partmod
 |               +-- in IN prep
 |                   +-- file NN pobj
 |                       +-- the DT det
 |                       +-- host NN nn
 +-- . . punct
Input: If the job scheduler is not specified , the agent executes the remote executable in the same node by the fork system call .
Parse:
executes VBZ ROOT
 +-- specified VBN advcl
 |   +-- If IN mark
 |   +-- scheduler NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- job NN nn
 |   +-- is VBZ auxpass
 |   +-- not RB neg
 +-- , , punct
 +-- agent NN nsubj
 |   +-- the DT det
 +-- executable JJ dobj
 |   +-- the DT det
 |   +-- remote JJ amod
 +-- in IN prep
 |   +-- node NN pobj
 |       +-- the DT det
 |       +-- same JJ amod
 +-- by IN prep
 |   +-- call NN pobj
 |       +-- the DT det
 |       +-- system NN nn
 |           +-- fork NN nn
 +-- . . punct
Input: The client sends the data of the input arguments to the invoked remote executable , and receives the results upon return of the remote function .
Parse:
sends VBZ ROOT
 +-- client NN nsubj
 |   +-- The DT det
 +-- data NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- arguments NNS pobj
 |           +-- the DT det
 |           +-- input NN nn
 +-- to IN prep
 |   +-- executable JJ pobj
 |       +-- the DT det
 |       +-- invoked VBN amod
 |       +-- remote JJ amod
 +-- , , punct
 +-- and CC cc
 +-- receives VBZ conj
 |   +-- results NNS dobj
 |   |   +-- the DT det
 |   +-- upon IN prep
 |       +-- return NN pobj
 |           +-- of IN prep
 |               +-- function NN pobj
 |                   +-- the DT det
 |                   +-- remote JJ amod
 +-- . . punct
Input: Once a remote executable is invoked , the client attempts to use the invoked remote executable for subsequent RPC calls in order to eliminate the cost of invoking the same remote executable again .
Parse:
attempts VBZ ROOT
 +-- invoked VBN advcl
 |   +-- Once IN mark
 |   +-- executable JJ nsubjpass
 |   |   +-- a DT det
 |   |   +-- remote JJ amod
 |   +-- is VBZ auxpass
 +-- , , punct
 +-- client NN nsubj
 |   +-- the DT det
 +-- use VB xcomp
 |   +-- to TO aux
 |   +-- executable JJ dobj
 |   |   +-- the DT det
 |   |   +-- invoked VBN amod
 |   |   +-- remote JJ amod
 |   +-- for IN prep
 |   |   +-- calls NNS pobj
 |   |       +-- subsequent JJ amod
 |   |       +-- RPC NNP nn
 |   +-- in IN prep
 |       +-- order NN pobj
 |           +-- eliminate VB infmod
 |               +-- to TO aux
 |               +-- cost NN dobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- invoking VBG pcomp
 |                           +-- executable JJ dobj
 |                           |   +-- the DT det
 |                           |   +-- same JJ amod
 |                           |   +-- remote JJ amod
 |                           +-- again RB advmod
 +-- . . punct
Input: When the agent and the remote executables are invoked , the remote programs obtain the client address and port from the argument list and connect back to the client by direct TCP IP or Globus IO for data transmission .
Parse:
obtain VBP ROOT
 +-- invoked VBN advcl
 |   +-- When WRB advmod
 |   +-- agent NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- and CC cc
 |   |   +-- executables NNS conj
 |   |       +-- the DT det
 |   |       +-- remote JJ amod
 |   +-- are VBP auxpass
 +-- , , punct
 +-- programs NNS nsubj
 |   +-- the DT det
 |   +-- remote JJ amod
 +-- address NN dobj
 |   +-- the DT det
 |   +-- client NN nn
 |   +-- and CC cc
 |   +-- port NN conj
 +-- from IN prep
 |   +-- list NN pobj
 |       +-- the DT det
 |       +-- argument NN nn
 +-- and CC cc
 +-- connect VB conj
 |   +-- back RB advmod
 |   |   +-- to IN prep
 |   |       +-- client NN pobj
 |   |           +-- the DT det
 |   +-- by IN prep
 |   |   +-- IP NNP pobj
 |   |       +-- direct JJ amod
 |   |       +-- TCP NNP nn
 |   |       +-- or CC cc
 |   |       +-- IO NNP conj
 |   |           +-- Globus NNP nn
 |   +-- for IN prep
 |       +-- transmission NN pobj
 |           +-- data NNS nn
 +-- . . punct
Input: Because the OmniRPC system does not use any fixed service ports , the client program allocates unused ports dynamically to wait for connection from the remote executables .
Parse:
allocates VBZ ROOT
 +-- use VB advcl
 |   +-- Because IN mark
 |   +-- system NN nsubj
 |   |   +-- the DT det
 |   |   +-- OmniRPC NNP nn
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- ports NNS dobj
 |       +-- any DT det
 |       +-- fixed VBN amod
 |       +-- service NN nn
 +-- , , punct
 +-- program NN nsubj
 |   +-- the DT det
 |   +-- client NN nn
 +-- ports NNS dobj
 |   +-- unused JJ amod
 +-- dynamically RB advmod
 +-- wait VB xcomp
 |   +-- to TO aux
 |   +-- for IN prep
 |       +-- connection NN pobj
 |           +-- from IN prep
 |               +-- executables NNS pobj
 |                   +-- the DT det
 |                   +-- remote JJ amod
 +-- . . punct
Input: This avoids possible security problems , and allows the user to install the OmniRPC system without requiring a privileged account .
Parse:
avoids VBZ ROOT
 +-- This DT nsubj
 +-- problems NNS dobj
 |   +-- possible JJ amod
 |   +-- security NN nn
 +-- , , punct
 +-- and CC cc
 +-- allows VBZ conj
 |   +-- install VB xcomp
 |       +-- user NN nsubj
 |       |   +-- the DT det
 |       +-- to TO aux
 |       +-- system NN dobj
 |       |   +-- the DT det
 |       |   +-- OmniRPC NNP nn
 |       +-- without IN prep
 |           +-- requiring VBG pcomp
 |               +-- account NN dobj
 |                   +-- a DT det
 |                   +-- privileged JJ amod
 +-- . . punct
Input: Herein , a typical grid resource is regarded as a cluster of geographically distributed PC clusters .
Parse:
regarded VBN ROOT
 +-- Herein NNP nsubjpass
 |   +-- , , punct
 |   +-- resource NN appos
 |       +-- a DT det
 |       +-- typical JJ amod
 |       +-- grid NN nn
 +-- is VBZ auxpass
 +-- as IN prep
 |   +-- cluster NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- clusters NNS pobj
 |               +-- distributed VBN amod
 |               |   +-- geographically RB advmod
 |               +-- PC NN nn
 +-- . . punct
Input: For PC clusters on a private network , an OmniRPC agent process on the server host functions as a proxy to relay communications between the client and the remote executables by multiplexing the communications using a single connection .
Parse:
functions NNS ROOT
 +-- For IN prep
 |   +-- clusters NNS pobj
 |       +-- PC NN nn
 |       +-- on IN prep
 |           +-- network NN pobj
 |               +-- a DT det
 |               +-- private JJ amod
 +-- , , punct
 +-- process NN nsubj
 |   +-- an DT det
 |   +-- OmniRPC NNP nn
 |   +-- agent NN nn
 |   +-- on IN prep
 |       +-- host NN pobj
 |           +-- the DT det
 |           +-- server NN nn
 +-- as IN prep
 |   +-- proxy NN pobj
 |       +-- a DT det
 |       +-- relay VB infmod
 |           +-- to TO aux
 |           +-- communications NNS dobj
 |           |   +-- between IN prep
 |           |       +-- client NN pobj
 |           |           +-- the DT det
 |           |           +-- and CC cc
 |           |           +-- executables NNS conj
 |           |               +-- the DT det
 |           |               +-- remote JJ amod
 |           +-- by IN prep
 |               +-- multiplexing VBG pcomp
 |                   +-- communications NNS dobj
 |                   |   +-- the DT det
 |                   +-- using VBG partmod
 |                       +-- connection NN dobj
 |                           +-- a DT det
 |                           +-- single JJ amod
 +-- . . punct
Input: This feature , called multiplex IO -LRB- MXIO -RRB- , allows a single client to use up to 1 , 000 remote computing hosts .
Parse:
allows VBZ ROOT
 +-- feature NN nsubj
 |   +-- This DT det
 |   +-- , , punct
 |   +-- called VBN partmod
 |       +-- IO NNP dep
 |           +-- multiplex NN nn
 |           +-- MXIO NNP appos
 |               +-- -LRB- -LRB- punct
 |               +-- -RRB- -RRB- punct
 +-- use VB xcomp
 |   +-- client NN nsubj
 |   |   +-- a DT det
 |   |   +-- single JJ amod
 |   +-- to TO aux
 |   +-- up RP prt
 |   +-- to IN prep
 |   |   +-- 1 CD pobj
 |   +-- , , punct
 |   +-- hosts NNS dobj
 |       +-- 000 CD num
 |       +-- remote JJ amod
 |       +-- computing VBG nn
 +-- . . punct
Input: When the PC cluster is inside a firewall , the port forwarding of SSH enables the node to communicate to the outside with MXIO .
Parse:
enables VBZ ROOT
 +-- is VBZ advcl
 |   +-- When WRB advmod
 |   +-- cluster NN nsubj
 |   |   +-- the DT det
 |   |   +-- PC NN nn
 |   +-- inside IN prep
 |       +-- firewall NN pobj
 |           +-- a DT det
 +-- , , punct
 +-- forwarding NN nsubj
 |   +-- the DT det
 |   +-- port NN nn
 |   +-- of IN prep
 |       +-- SSH NNP pobj
 +-- node NN dobj
 |   +-- the DT det
 +-- communicate VB xcomp
 |   +-- to TO aux
 |   +-- to IN prep
 |   |   +-- outside NN pobj
 |   |       +-- the DT det
 |   +-- with IN prep
 |       +-- MXIO NNP pobj
 +-- . . punct
Input: Figure 4 shows the overview of the OmniRPC system for a remote cluster with a private IP address .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 4 CD num
 +-- overview NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- system NN pobj
 |   |       +-- the DT det
 |   |       +-- OmniRPC NNP nn
 |   +-- for IN prep
 |       +-- cluster NN pobj
 |           +-- a DT det
 |           +-- remote JJ amod
 |           +-- with IN prep
 |               +-- address NN pobj
 |                   +-- a DT det
 |                   +-- private JJ amod
 |                   +-- IP NN nn
 +-- . . punct
Input: For parallel programming , the programmer can use asynchronous remote procedure calls , allowing the client to issue several requests while continuing with other computations .
Parse:
use VB ROOT
 +-- For IN prep
 |   +-- programming NN pobj
 |       +-- parallel JJ amod
 +-- , , punct
 +-- programmer NN nsubj
 |   +-- the DT det
 +-- can MD aux
 +-- calls NNS dobj
 |   +-- asynchronous JJ amod
 |   +-- remote JJ amod
 |   +-- procedure NN nn
 +-- allowing VBG partmod
 |   +-- issue VB xcomp
 |       +-- client NN nsubj
 |       |   +-- the DT det
 |       +-- to TO aux
 |       +-- requests NNS dobj
 |       |   +-- several JJ amod
 |       +-- continuing VBG advcl
 |           +-- while IN mark
 |           +-- with IN prep
 |               +-- computations NNS pobj
 |                   +-- other JJ amod
 +-- . . punct
Input: The requests are dispatched to different remote hosts to be executed in parallel , and the client waits or polls the completed request .
Parse:
dispatched VBN ROOT
 +-- requests NNS nsubjpass
 |   +-- The DT det
 +-- are VBP auxpass
 +-- to IN prep
 |   +-- hosts NNS pobj
 |       +-- different JJ amod
 |       +-- remote JJ amod
 +-- executed VBN xcomp
 |   +-- to TO aux
 |   +-- be VB auxpass
 |   +-- in IN prep
 |       +-- parallel NN pobj
 +-- , , punct
 +-- and CC cc
 +-- waits NNS conj
 |   +-- client NN nsubj
 |   |   +-- the DT det
 |   +-- or CC cc
 |   +-- polls NNS conj
 |   +-- request NN dobj
 |       +-- the DT det
 |       +-- completed VBN amod
 +-- . . punct
Input: In such a programming model with asynchronous remote procedure calls , the programmer should handle outstanding requests explicitly .
Parse:
handle VB ROOT
 +-- In IN prep
 |   +-- model NN pobj
 |       +-- such PDT predet
 |       +-- a DT det
 |       +-- programming NN nn
 |       +-- with IN prep
 |           +-- calls NNS pobj
 |               +-- asynchronous JJ amod
 |               +-- procedure NN nn
 |                   +-- remote JJ amod
 +-- , , punct
 +-- programmer NN nsubj
 |   +-- the DT det
 +-- should MD aux
 +-- requests NNS dobj
 |   +-- outstanding JJ amod
 +-- explicitly RB advmod
 +-- . . punct
Input: Because OmniRPC is a thread safe system , a number of remote procedure calls may be outstanding at any time for multi threaded programs written in OpenMP .
Parse:
outstanding JJ ROOT
 +-- thread NN advcl
 |   +-- Because IN mark
 |   +-- OmniRPC NNP nsubj
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- system NN dobj
 |       +-- safe JJ amod
 +-- , , punct
 +-- number NN nsubj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- calls NNS pobj
 |           +-- remote JJ amod
 |           +-- procedure NN nn
 +-- may MD aux
 +-- be VB cop
 +-- at IN prep
 |   +-- time NN pobj
 |       +-- any DT det
 |       +-- for IN prep
 |           +-- multi NNS pcomp
 |               +-- programs NNS dobj
 |                   +-- threaded VBN amod
 |                   +-- written VBN partmod
 |                       +-- in IN prep
 |                           +-- OpenMP NNP pobj
 +-- . . punct
Input: 3.2 OmniRPC persistence model
Parse:
model NN ROOT
 +-- 3.2 CD num
 +-- OmniRPC NNP nn
 +-- persistence NN nn
Input: For parametric search applications , which often require large amount of identical data for each call , OmniRPC supports a limited persistence model , which is implemented by the automatic initializable module .
Parse:
supports VBZ ROOT
 +-- For IN prep
 |   +-- applications NNS pobj
 |       +-- parametric JJ amod
 |       +-- search NN nn
 |       +-- , , punct
 |       +-- require VBP rcmod
 |           +-- which WDT nsubj
 |           +-- often RB advmod
 |           +-- amount NN dobj
 |               +-- large JJ amod
 |               +-- of IN prep
 |               |   +-- data NNS pobj
 |               |       +-- identical JJ amod
 |               +-- for IN prep
 |                   +-- call NN pobj
 |                       +-- each DT det
 +-- , , punct
 +-- OmniRPC NNP nsubj
 +-- model NN dobj
 |   +-- a DT det
 |   +-- limited JJ amod
 |   +-- persistence NN nn
 |   +-- , , punct
 |   +-- implemented VBN rcmod
 |       +-- which WDT nsubjpass
 |       +-- is VBZ auxpass
 |       +-- by IN prep
 |           +-- module NN pobj
 |               +-- the DT det
 |               +-- automatic JJ amod
 |               +-- initializable JJ amod
 +-- . . punct
Input: The user can define an initialization procedure in the remote executable in order to send and store data automatically in advance of actual remote procedure calls .
Parse:
define VB ROOT
 +-- user NN nsubj
 |   +-- The DT det
 +-- can MD aux
 +-- procedure NN dobj
 |   +-- an DT det
 |   +-- initialization NN nn
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- send VB infmod
 |           +-- to TO aux
 |           +-- and CC cc
 |           +-- store NN conj
 |           +-- data NNS dobj
 |           +-- automatically RB advmod
 |           +-- in IN prep
 |               +-- advance NN pobj
 |                   +-- of IN prep
 |                       +-- calls NNS pobj
 |                           +-- actual JJ amod
 |                           +-- remote JJ amod
 |                           +-- procedure NN nn
 +-- . . punct
Input: Since the remote executable may accept requests for subsequent calls , the data set which has been set by the initialization procedure can be re used .
Parse:
used VBN ROOT
 +-- set VBN nsubjpass
 |   +-- accept VB advcl
 |   |   +-- Since IN mark
 |   |   +-- executable JJ nsubj
 |   |   |   +-- the DT det
 |   |   |   +-- remote JJ amod
 |   |   +-- may MD aux
 |   |   +-- requests NNS dobj
 |   |       +-- for IN prep
 |   |           +-- calls NNS pobj
 |   |               +-- subsequent JJ amod
 |   +-- , , punct
 |   +-- data NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- set VBN partmod
 |   |       +-- which WDT dobj
 |   +-- has VBZ aux
 |   +-- been VBN auxpass
 |   +-- by IN prep
 |       +-- procedure NN pobj
 |           +-- the DT det
 |           +-- initialization NN nn
 +-- can MD aux
 +-- be VB auxpass
 +-- re IN advmod
 +-- . . punct
Input: As a result , the worker program can execute efficiently and reduce the amount of data transmitted for initialization .
Parse:
execute VB ROOT
 +-- As IN prep
 |   +-- result NN pobj
 |       +-- a DT det
 +-- , , punct
 +-- program NN nsubj
 |   +-- the DT det
 |   +-- worker NN nn
 +-- can MD aux
 +-- efficiently RB advmod
 +-- and CC cc
 +-- reduce VB conj
 |   +-- amount NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- data NNS pobj
 |               +-- transmitted VBN partmod
 |                   +-- for IN prep
 |                       +-- initialization NN pobj
 +-- . . punct
Input: Once a remote executable is invoked , the client attempts to use the invoked remote executable for subsequent RPC calls .
Parse:
attempts VBZ ROOT
 +-- invoked VBN advcl
 |   +-- Once IN mark
 |   +-- executable JJ nsubjpass
 |   |   +-- a DT det
 |   |   +-- remote JJ amod
 |   +-- is VBZ auxpass
 +-- , , punct
 +-- client NN nsubj
 |   +-- the DT det
 +-- use VB xcomp
 |   +-- to TO aux
 |   +-- executable JJ dobj
 |   |   +-- the DT det
 |   |   +-- invoked VBN amod
 |   |   +-- remote JJ amod
 |   +-- for IN prep
 |       +-- calls NNS pobj
 |           +-- subsequent JJ amod
 |           +-- RPC NNP nn
 +-- . . punct
Input: However , OmniRPC does not guarantee persistence of the remote executable , so that the data set by the previous call can not be used by subsequent calls .
Parse:
guarantee VB ROOT
 +-- However RB advmod
 +-- , , punct
 +-- OmniRPC NNP nsubj
 +-- does VBZ aux
 +-- not RB neg
 +-- persistence NN dobj
 |   +-- of IN prep
 |       +-- executable JJ pobj
 |           +-- the DT det
 |           +-- remote JJ amod
 +-- used VBN advcl
 |   +-- so IN mark
 |   +-- that IN mark
 |   +-- data NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- set VBN partmod
 |   |       +-- by IN prep
 |   |           +-- call NN pobj
 |   |               +-- the DT det
 |   |               +-- previous JJ amod
 |   +-- can MD aux
 |   +-- not RB neg
 |   +-- be VB auxpass
 |   +-- by IN prep
 |       +-- calls NNS pobj
 |           +-- subsequent JJ amod
 +-- . . punct
Input: This is because a remote call by OmniRpcCall may be scheduled to any remote host dynamically , and remote executables may be terminated accidentally due to dynamic re scheduling or host faults .
Parse:
is VBZ ROOT
 +-- This DT nsubj
 +-- scheduled VBN advcl
 |   +-- because IN mark
 |   +-- call NN nsubjpass
 |   |   +-- a DT det
 |   |   +-- remote JJ amod
 |   |   +-- by IN prep
 |   |       +-- OmniRpcCall NNP pobj
 |   +-- may MD aux
 |   +-- be VB auxpass
 |   +-- to IN prep
 |   |   +-- host NN pobj
 |   |       +-- any DT det
 |   |       +-- remote JJ amod
 |   +-- dynamically RB advmod
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- terminated VBN conj
 |       +-- executables NNS nsubjpass
 |       |   +-- remote JJ amod
 |       +-- may MD aux
 |       +-- be VB auxpass
 |       +-- accidentally RB advmod
 |       +-- to IN prep
 |           +-- due JJ mwe
 |           +-- dynamic JJ pobj
 |               +-- re IN prep
 |                   +-- scheduling NN pobj
 |                       +-- or CC cc
 |                       +-- faults NNS conj
 |                           +-- host NN nn
 +-- . . punct
Input: However , persistence of the remote executable can be exploited in certain applications .
Parse:
exploited VBN ROOT
 +-- However RB advmod
 +-- , , punct
 +-- persistence NN nsubjpass
 |   +-- of IN prep
 |       +-- executable NN pobj
 |           +-- the DT det
 |           +-- remote JJ amod
 +-- can MD aux
 +-- be VB auxpass
 +-- in IN prep
 |   +-- applications NNS pobj
 |       +-- certain JJ amod
 +-- . . punct
Input: An example is a parametric search application
Parse:
application NN ROOT
 +-- example NN nsubj
 |   +-- An DT det
 +-- is VBZ cop
 +-- a DT det
 +-- parametric JJ amod
 +-- search NN nn
Input: This is the case for CONFLEX .
Parse:
case NN ROOT
 +-- This DT nsubj
 +-- is VBZ cop
 +-- the DT det
 +-- for IN prep
 |   +-- CONFLEX NNP pobj
 +-- . . punct
Input: OmniRPC provides a restricted persistence model through the automatic initializable module in order to support this type of application .
Parse:
provides VBZ ROOT
 +-- OmniRPC NNP nsubj
 +-- model NN dobj
 |   +-- a DT det
 |   +-- restricted JJ amod
 |   +-- persistence NN amod
 +-- through IN prep
 |   +-- module NN pobj
 |       +-- the DT det
 |       +-- automatic JJ amod
 |       +-- initializable JJ amod
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- support VB infmod
 |           +-- to TO aux
 |           +-- type NN dobj
 |               +-- this DT det
 |               +-- of IN prep
 |                   +-- application NN pobj
 +-- . . punct
Input: If the initialization procedure is defined in the module , the module is automatically initialized at invocation by calling the initialization procedure .
Parse:
initialized VBN ROOT
 +-- defined VBN advcl
 |   +-- If IN mark
 |   +-- procedure NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- initialization NN nn
 |   +-- is VBZ auxpass
 |   +-- in IN prep
 |       +-- module NN pobj
 |           +-- the DT det
 +-- , , punct
 +-- module NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- automatically RB advmod
 +-- at IN prep
 |   +-- invocation NN pobj
 +-- by IN prep
 |   +-- calling VBG pcomp
 |       +-- procedure NN dobj
 |           +-- the DT det
 |           +-- initialization NN nn
 +-- . . punct
Input: When the remote executable is re scheduled in different hosts , the initialization is called to initialize the newly allocated remote module .
Parse:
called VBN ROOT
 +-- scheduled VBN advcl
 |   +-- When WRB advmod
 |   +-- executable NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- remote JJ amod
 |   +-- is VBZ auxpass
 |   +-- re IN advmod
 |   +-- in IN prep
 |       +-- hosts NNS pobj
 |           +-- different JJ amod
 +-- , , punct
 +-- initialization NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- initialize VB xcomp
 |   +-- to TO aux
 |   +-- module NN dobj
 |       +-- the DT det
 |       +-- allocated VBN amod
 |       |   +-- newly RB advmod
 |       +-- remote JJ amod
 +-- . . punct
Input: This can eliminate unnecessary communications when RPC calls use the same data .
Parse:
eliminate VB ROOT
 +-- This DT nsubj
 +-- can MD aux
 +-- communications NNS dobj
 |   +-- unnecessary JJ amod
 +-- use VBP advcl
 |   +-- when WRB advmod
 |   +-- calls VBZ nsubj
 |   |   +-- RPC NNP nn
 |   +-- data NNS dobj
 |       +-- the DT det
 |       +-- same JJ amod
 +-- . . punct
Input: To reveal more about the difference in progress between the cases with OmniRPC AIM and without OmniRPC AIM , we present two figures .
Parse:
present VBP ROOT
 +-- reveal VB advcl
 |   +-- To TO aux
 |   +-- more JJR dobj
 |       +-- about IN prep
 |           +-- difference NN pobj
 |               +-- the DT det
 |               +-- in IN prep
 |                   +-- progress NN pobj
 |                       +-- between IN prep
 |                           +-- cases NNS pobj
 |                           |   +-- the DT det
 |                           |   +-- with IN prep
 |                           |       +-- AIM NNP pobj
 |                           |           +-- OmniRPC NNP nn
 |                           +-- and CC cc
 |                           +-- without IN conj
 |                               +-- AIM NNP pobj
 |                                   +-- OmniRPC NNP nn
 +-- , , punct
 +-- we PRP nsubj
 +-- figures NNS dobj
 |   +-- two CD num
 +-- . . punct
Input: Figure 5 illustrates the time chart of the progress of a typical OmniRPC application using the OmniRPC AIM facility , and Figure 6 illustrates the time chart of the same application without the OmniRPC AIM facility .
Parse:
illustrates VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 5 CD num
 +-- chart NN dobj
 |   +-- the DT det
 |   +-- time NN nn
 |   +-- of IN prep
 |       +-- progress NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- application NN pobj
 |                   +-- a DT det
 |                   +-- typical JJ amod
 |                   +-- OmniRPC NNP nn
 |                   +-- using VBG partmod
 |                       +-- facility NN dobj
 |                           +-- the DT det
 |                           +-- OmniRPC NNP nn
 |                           +-- AIM NNP nn
 +-- , , punct
 +-- and CC cc
 +-- illustrates VBZ conj
 |   +-- Figure NNP nsubj
 |   |   +-- 6 CD num
 |   +-- chart NN dobj
 |       +-- the DT det
 |       +-- time NN nn
 |       +-- of IN prep
 |           +-- application NN pobj
 |               +-- the DT det
 |               +-- same JJ amod
 |               +-- without IN prep
 |                   +-- facility NN pobj
 |                       +-- the DT det
 |                       +-- OmniRPC NNP nn
 |                       +-- AIM NNP nn
 +-- . . punct
Input: In both figures , the lines between diamonds represent the processes of initialization , and the lines between points represent the calculation .
Parse:
represent VBP ROOT
 +-- In IN prep
 |   +-- figures NNS pobj
 |       +-- both DT det
 +-- , , punct
 +-- lines NNS nsubj
 |   +-- the DT det
 |   +-- between IN prep
 |       +-- diamonds NNS pobj
 +-- processes NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- initialization NN pobj
 +-- and CC cc
 +-- represent VBP conj
 |   +-- lines NNS nsubj
 |   |   +-- the DT det
 |   |   +-- between IN prep
 |   |       +-- points NNS pobj
 |   +-- calculation NN dobj
 |       +-- the DT det
 +-- . . punct
Input: The bold line indicates the time when the client program sends the data to a worker program .
Parse:
indicates VBZ ROOT
 +-- line NN nsubj
 |   +-- The DT det
 |   +-- bold JJ amod
 +-- time NN dobj
 |   +-- the DT det
 |   +-- sends VBZ rcmod
 |       +-- when WRB advmod
 |       +-- program NN nsubj
 |       |   +-- the DT det
 |       |   +-- client NN nn
 |       +-- data NNS dobj
 |       |   +-- the DT det
 |       +-- to IN prep
 |           +-- program NN pobj
 |               +-- a DT det
 |               +-- worker NN nn
 +-- . . punct
Input: It is necessary for the application without the OmniRPC AIM facility to initialize at each RPC .
Parse:
necessary JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- initialize VB advcl
 |   +-- for IN mark
 |   +-- application NN nsubj
 |   |   +-- the DT det
 |   |   +-- without IN prep
 |   |       +-- facility NN pobj
 |   |           +-- the DT det
 |   |           +-- OmniRPC NNP nn
 |   |           +-- AIM NNP nn
 |   +-- to TO aux
 |   +-- at IN prep
 |       +-- RPC NNP pobj
 |           +-- each DT det
 +-- . . punct
Input: The application using the OmniRPC AIM facility can re use the initialized data once the data set is initialized .
Parse:
re VB ROOT
 +-- application NN nsubj
 |   +-- The DT det
 |   +-- using VBG partmod
 |       +-- facility NN dobj
 |           +-- the DT det
 |           +-- OmniRPC NNP nn
 |           +-- AIM NNP nn
 +-- can MD aux
 +-- use VB dobj
 |   +-- data NNS dobj
 |       +-- the DT det
 |       +-- initialized JJ amod
 +-- initialized VBN advcl
 |   +-- once IN mark
 |   +-- set NN nsubj
 |   |   +-- the DT det
 |   |   +-- data NNS nn
 |   +-- is VBZ cop
 +-- . . punct
Input: This can reduce the initialization at each RPC .
Parse:
reduce VB ROOT
 +-- This DT nsubj
 +-- can MD aux
 +-- initialization NN dobj
 |   +-- the DT det
 +-- at IN prep
 |   +-- RPC NNP pobj
 |       +-- each DT det
 +-- . . punct
Input: The workers of the application with the AIM can calculate efficiently compared to the application without the OmniRPC AIM facility .
Parse:
calculate VB ROOT
 +-- workers NNS nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- application NN pobj
 |           +-- the DT det
 |           +-- with IN prep
 |               +-- AIM NNP pobj
 |                   +-- the DT det
 +-- can MD aux
 +-- efficiently RB advmod
 +-- compared VBN prep
 |   +-- to IN pcomp
 |       +-- application NN pobj
 |           +-- the DT det
 |           +-- without IN prep
 |               +-- facility NN pobj
 |                   +-- the DT det
 |                   +-- OmniRPC NNP nn
 |                   +-- AIM NNP nn
 +-- . . punct
Input: 3.3 Implementation of CONFLEX G using OmniRPC Figure 3 shows an overview of the process used in CONFLEXG .
Parse:
shows VBZ ROOT
 +-- Implementation NN nsubj
 |   +-- 3.3 CD num
 |   +-- of IN prep
 |   |   +-- G NNP pobj
 |   |       +-- CONFLEX NNP nn
 |   +-- using VBG partmod
 |       +-- Figure NNP dobj
 |           +-- OmniRPC NNP nn
 |           +-- 3 CD num
 +-- overview NN dobj
 |   +-- an DT det
 |   +-- of IN prep
 |       +-- process NN pobj
 |           +-- the DT det
 |           +-- used VBN partmod
 |               +-- in IN prep
 |                   +-- CONFLEXG NNP pobj
 +-- . . punct
Input: Using RPCs , CONFLEX G allocates the processes of trial structure optimization , which are performed by the computation nodes of a PC cluster in the MPI version of CONFLEX , to the computational nodes of each cluster in a grid environment .
Parse:
allocates VBZ ROOT
 +-- Using VBG partmod
 |   +-- RPCs NNS dobj
 +-- , , punct
 +-- G NNP nsubj
 |   +-- CONFLEX NNP nn
 +-- processes NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- optimization NN pobj
 |           +-- trial NN nn
 |           +-- structure NN nn
 |           +-- , , punct
 |           +-- performed VBN rcmod
 |               +-- which WDT nsubjpass
 |               +-- are VBP auxpass
 |               +-- by IN prep
 |               |   +-- nodes NNS pobj
 |               |       +-- the DT det
 |               |       +-- computation NN nn
 |               |       +-- of IN prep
 |               |           +-- cluster NN pobj
 |               |               +-- a DT det
 |               |               +-- PC NN nn
 |               +-- in IN prep
 |               |   +-- environment NN pobj
 |               |       +-- a DT det
 |               |       +-- grid NN nn
 |               +-- , , punct
 |               +-- to IN prep
 |                   +-- nodes NNS pobj
 |                       +-- the DT det
 |                       +-- computational JJ amod
 |                       +-- of IN prep
 |                           +-- cluster NN pobj
 |                               +-- each DT det
 +-- . . punct
Input: There are two computations which are performed by the worker programs in CONFLEX G .
Parse:
are VBP ROOT
 +-- There EX expl
 +-- computations NNS nsubj
 |   +-- two CD num
 |   +-- performed VBN rcmod
 |       +-- which WDT nsubjpass
 |       +-- are VBP auxpass
 |       +-- by IN prep
 |           +-- programs NNS pobj
 |               +-- the DT det
 |               +-- worker NN nn
 |               +-- in IN prep
 |                   +-- G NNP pobj
 |                       +-- CONFLEX NNP nn
 +-- . . punct
Input: One is the initialization of a worker program , and another is the calculation of trial structure optimization .
Parse:
initialization NN ROOT
 +-- One CD nsubj
 +-- is VBZ cop
 +-- the DT det
 +-- of IN prep
 |   +-- program NN pobj
 |       +-- a DT det
 |       +-- worker NN nn
 +-- , , punct
 +-- and CC cc
 +-- calculation NN conj
 |   +-- another DT nsubj
 |   +-- is VBZ cop
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- optimization NN pobj
 |           +-- structure NN nn
 |               +-- trial NN nn
 +-- . . punct
Input: First , the OmniRPC facility of the AIM is adapted for initialization of a worker program .
Parse:
adapted VBN ROOT
 +-- First RB advmod
 +-- , , punct
 +-- facility NN nsubjpass
 |   +-- the DT det
 |   +-- OmniRPC NNP nn
 |   +-- of IN prep
 |       +-- AIM NNP pobj
 |           +-- the DT det
 +-- is VBZ auxpass
 +-- for IN prep
 |   +-- initialization NN pobj
 |       +-- of IN prep
 |           +-- program NN pobj
 |               +-- a DT det
 |               +-- worker NN nn
 +-- . . punct
Input: This facility automatically calls the initialization function , which is contained in the worker program , once the client program invokes the worker program in a remote node .
Parse:
calls VBZ ROOT
 +-- facility NN nsubj
 |   +-- This DT det
 +-- automatically RB advmod
 +-- function NN dobj
 |   +-- the DT det
 |   +-- initialization NN nn
 |   +-- , , punct
 |   +-- contained VBN rcmod
 |       +-- which WDT nsubjpass
 |       +-- is VBZ auxpass
 |       +-- in IN prep
 |           +-- program NN pobj
 |               +-- the DT det
 |               +-- worker NN nn
 +-- , , punct
 +-- invokes VBZ advcl
 |   +-- once IN mark
 |   +-- program NN nsubj
 |   |   +-- the DT det
 |   |   +-- client NN nn
 |   +-- program NN dobj
 |       +-- the DT det
 |       +-- worker NN nn
 |       +-- in IN prep
 |           +-- node NN pobj
 |               +-- a DT det
 |               +-- remote JJ amod
 +-- . . punct
Input: It is necessary for the common RPC system including GridRPC to initialize a program for every RPC call , since data persistence of worker programs 157 time Client Program Worker Program 1 Worker Program 2 initialization initialization calculation calculation calculation calculation calculation Parallelized using asynchronous RPCs Figure 5
Parse:
necessary JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- for IN prep
 |   +-- system NN pobj
 |       +-- the DT det
 |       +-- common JJ amod
 |       +-- RPC NNP nn
 |       +-- including VBG prep
 |           +-- GridRPC NNP pobj
 |               +-- initialize VB infmod
 |                   +-- to TO aux
 |                   +-- program NN dobj
 |                       +-- a DT det
 |                       +-- for IN prep
 |                           +-- call NN pobj
 |                               +-- every DT det
 |                               +-- RPC NN nn
 +-- , , punct
 +-- since IN prep
     +-- persistence NN pobj
         +-- data NNS nn
         +-- of IN prep
         |   +-- programs NNS pobj
         |       +-- worker NN nn
         +-- time NN dep
             +-- 157 CD num
             +-- Program NNP dep
                 +-- Worker NN nn
                 |   +-- Program NNP nn
                 |       +-- Worker NNP nn
                 |       |   +-- Program NNP nn
                 |       |       +-- Client NNP nn
                 |       +-- 1 CD num
                 +-- 2 CD num
                 +-- initialization NN dep
                     +-- initialization NN dep
                         +-- calculation NN dobj
                             +-- calculation NN prep
                                 +-- calculation NN pobj
                                     +-- calculation NN prep
                                         +-- calculation NN pobj
                                             +-- Parallelized VBN partmod
                                                 +-- using VBG xcomp
                                                     +-- Figure NN dobj
                                                         +-- RPCs NNS nn
                                                         |   +-- asynchronous JJ amod
                                                         +-- 5 CD num
Input: time Client Program Worker Program 1 Worker Program 2 initialization initializationcalculation calculation calculation calculation initialization initialization initialization Parallelized using asynchronous RPCs calculation Figure 6
Parse:
Program NNP ROOT
 +-- Worker NN nn
 |   +-- time NN nn
 |   +-- Program NNP nn
 |       +-- Worker NNP nn
 |       |   +-- Program NNP nn
 |       |       +-- Client NNP nn
 |       +-- 1 CD num
 +-- 2 CD num
 +-- initialization NN dep
     +-- initializationcalculation NN dobj
         +-- calculation NN prep
             +-- calculation NN pobj
                 +-- calculation NN prep
                     +-- initialization NN pobj
                         +-- initialization NN prep
                             +-- initialization NN pobj
                                 +-- Parallelized VBN partmod
                                     +-- using VBG xcomp
                                         +-- Figure NN dobj
                                             +-- calculation NN nn
                                             |   +-- asynchronous JJ amod
                                             |   +-- RPCs NNS nn
                                             +-- 6 CD num
Input: Table 1
Parse:
Table JJ ROOT
 +-- 1 CD num
Input: Site Cluster Name Machine Network Authentication # of Nodes # of CPUs Univ .
Parse:
# NN ROOT
 +-- Cluster NN nsubj
 |   +-- Site NN nn
 |   +-- Network NNP dep
 |       +-- Name NNP nn
 |       +-- Machine NNP nn
 +-- Authentication NNP nn
 +-- of IN prep
 |   +-- # $ pobj
 |       +-- Nodes NNP nn
 |       +-- of IN prep
 |           +-- Univ NNP pobj
 |               +-- CPUs NNS nn
 +-- . . punct
Input: of Tsukuba Dennis Dual Xeon 2.4GHz 1Gb Ethernet Globus , SSH 14 28 Alice Dual Athlon 1800+ 100Mb Ethernet Globus , SSH 18 36 TUT Toyo Dual Athlon 2600+ 100Mb Ethernet SSH 8 16 AIST Ume Dual Pentium3 1.4GHz 1Gb Ethernet Globus , SSH 32 64 is not supported .
Parse:
of IN ROOT
 +-- Xeon NNP pobj
 |   +-- Tsukuba NNP nn
 |   +-- Dennis NNP nn
 |   +-- Dual NNP nn
 |   +-- 2.4GHz CD num
 |   +-- Globus NNP dep
 |   |   +-- 1Gb CD num
 |   |   +-- Ethernet NNP nn
 |   +-- , , punct
 |   +-- Athlon NNP dep
 |       +-- SSH NNP dep
 |       +-- 28 CD num
 |       |   +-- 14 CD number
 |       +-- Alice NNP nn
 |       +-- Dual NNP nn
 |       +-- Globus NNP dep
 |           +-- 100Mb CD num
 |           |   +-- 1800+ CD number
 |           +-- Ethernet NNP nn
 |           +-- , , punct
 |           +-- Athlon NNP appos
 |               +-- SSH NNP dep
 |               +-- 36 CD num
 |               |   +-- 18 CD number
 |               +-- TUT NNP nn
 |               +-- Toyo NNP nn
 |               +-- Dual NNP nn
 |               +-- 2600+ CD dep
 |                   +-- SSH NNP dep
 |                       +-- 100Mb CD num
 |                       +-- Ethernet NNP nn
 |                       +-- Pentium3 NNP dep
 |                           +-- 16 CD num
 |                           |   +-- 8 CD number
 |                           +-- AIST NNP nn
 |                           +-- Ume NNP nn
 |                           +-- Dual NNP nn
 |                           +-- 1.4GHz CD dep
 |                               +-- supported VBN rcmod
 |                                   +-- Globus NNP nsubjpass
 |                                   |   +-- 1Gb CD num
 |                                   |   +-- Ethernet NNP nn
 |                                   |   +-- , , punct
 |                                   |   +-- SSH NNP appos
 |                                   |       +-- 32 CD num
 |                                   +-- 64 CD nsubjpass
 |                                   +-- is VBZ auxpass
 |                                   +-- not RB neg
 +-- . . punct
Input: In OmniRPC , however , when the Initialize remote function is defined in the worker program and a new worker program , corresponding to the other RPC , is assigned to execute , an Initialize function is called automatically .
Parse:
assigned VBN ROOT
 +-- In IN prep
 |   +-- OmniRPC NNP pobj
 +-- , , punct
 +-- however RB advmod
 +-- defined VBN advcl
 |   +-- when WRB advmod
 |   +-- function NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- Initialize NNP nn
 |   |   +-- remote JJ amod
 |   +-- is VBZ auxpass
 |   +-- in IN prep
 |       +-- program NN pobj
 |           +-- the DT det
 |           +-- worker NN nn
 |           +-- and CC cc
 |           +-- program NN conj
 |               +-- a DT det
 |               +-- new JJ amod
 |               +-- worker NN nn
 +-- corresponding VBG partmod
 |   +-- to IN prep
 |       +-- RPC NN pobj
 |           +-- the DT det
 |           +-- other JJ amod
 +-- is VBZ auxpass
 +-- execute VB xcomp
 |   +-- to TO aux
 +-- called VBN ccomp
 |   +-- function NN nsubjpass
 |   |   +-- an DT det
 |   |   +-- Initialize NNP nn
 |   +-- is VBZ auxpass
 |   +-- automatically RB advmod
 +-- . . punct
Input: Therefore , after the Initialize function call to set up common initialization data , a worker program can re use this data and increase the efficiency of it '' s processes .
Parse:
re VB ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- call VB advcl
 |   +-- after IN mark
 |   +-- function NN nsubj
 |   |   +-- the DT det
 |   |   +-- Initialize NNP nn
 |   +-- set VB xcomp
 |       +-- to TO aux
 |       +-- up RP prt
 |       +-- data NNS dobj
 |           +-- common JJ amod
 |           +-- initialization NN nn
 +-- program NN nsubj
 |   +-- a DT det
 |   +-- worker NN nn
 +-- can MD aux
 +-- use VB iobj
 +-- data NNS dobj
 |   +-- this DT det
 +-- and CC cc
 +-- increase VB conj
 |   +-- efficiency NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- it PRP pobj
 +-- '' '' punct
 +-- s POS punct
 +-- processes NNS dobj
 +-- . . punct
Input: Thus , the higher the set up cost , the greater the potential benefit .
Parse:
greater JJR ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- higher JJR advmod
 |   +-- the DT dep
 |   +-- cost NN dep
 |       +-- the DT det
 |       +-- set VBN amod
 |           +-- up RP prt
 +-- the DT dep
 +-- benefit NN dobj
 |   +-- the DT det
 |   +-- potential JJ amod
 +-- . . punct
Input: We implemented the worker program of CONFLEX G to receive data , such as evaluation parameters of energy , from a client program and to be initialized by the Initialize function .
Parse:
implemented VBD ROOT
 +-- We PRP nsubj
 +-- program NN dobj
 |   +-- the DT det
 |   +-- worker NN nn
 |   +-- of IN prep
 |       +-- G NNP pobj
 |           +-- CONFLEX NNP nn
 +-- receive VB xcomp
 |   +-- to TO aux
 |   +-- data NNS dobj
 |   |   +-- , , punct
 |   |   +-- as IN prep
 |   |       +-- such JJ mwe
 |   |       +-- parameters NNS pobj
 |   |           +-- evaluation NN nn
 |   |           +-- of IN prep
 |   |               +-- energy NN pobj
 |   +-- , , punct
 |   +-- from IN prep
 |   |   +-- program NN pobj
 |   |       +-- a DT det
 |   |       +-- client NN nn
 |   +-- and CC cc
 |   +-- initialized VBN conj
 |       +-- to TO aux
 |       +-- be VB auxpass
 |       +-- by IN prep
 |           +-- function NN pobj
 |               +-- the DT det
 |               +-- Initialize NNP nn
 +-- . . punct
Input: We arranged the client program of CONFLEX G to transfer the parameter file at the time of worker initialization .
Parse:
arranged VBD ROOT
 +-- We PRP nsubj
 +-- program NN dobj
 |   +-- the DT det
 |   +-- client NN nn
 |   +-- of IN prep
 |       +-- G NNP pobj
 |           +-- CONFLEX NNP nn
 +-- transfer VB xcomp
 |   +-- to TO aux
 |   +-- file NN dobj
 |   |   +-- the DT det
 |   |   +-- parameter NN nn
 |   +-- at IN prep
 |       +-- time NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- initialization NN pobj
 |                   +-- worker NN nn
 +-- . . punct
Input: This enables execution to be performed by modify only the client setting if the user wants to run CONFLEX G with a different data set .
Parse:
enables VBZ ROOT
 +-- This DT nsubj
 +-- performed VBN xcomp
 |   +-- execution NN nsubjpass
 |   +-- to TO aux
 |   +-- be VB auxpass
 |   +-- by IN prep
 |       +-- modify VB pcomp
 |           +-- client NN dobj
 |               +-- only RB advmod
 |               +-- the DT det
 |               +-- setting VBG partmod
 |                   +-- wants VBZ advcl
 |                       +-- if IN mark
 |                       +-- user NN nsubj
 |                       |   +-- the DT det
 |                       +-- run VB xcomp
 |                           +-- to TO aux
 |                           +-- G NNP dobj
 |                           |   +-- CONFLEX NNP nn
 |                           +-- with IN prep
 |                               +-- set NN pobj
 |                                   +-- a DT det
 |                                   +-- different JJ amod
 |                                   +-- data NNS nn
 +-- . . punct
Input: Second , in order to calculate trial structure optimization in a worker program , the worker program must receive the data , such as the atom arrangement of the trial structure and the internal energy state .
Parse:
receive VB ROOT
 +-- Second RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- calculate VB infmod
 |           +-- to TO aux
 |           +-- optimization NN dobj
 |               +-- structure NN nn
 |               |   +-- trial NN nn
 |               +-- in IN prep
 |                   +-- program NN pobj
 |                       +-- a DT det
 |                       +-- worker NN nn
 +-- program NN nsubj
 |   +-- the DT det
 |   +-- worker NN nn
 +-- must MD aux
 +-- data NNS dobj
 |   +-- the DT det
 |   +-- , , punct
 |   +-- as IN prep
 |       +-- such JJ mwe
 |       +-- arrangement NN pobj
 |           +-- the DT det
 |           +-- atom NN nn
 |           +-- of IN prep
 |           |   +-- structure NN pobj
 |           |       +-- the DT det
 |           |       +-- trial NN nn
 |           +-- and CC cc
 |           +-- state NN conj
 |               +-- the DT det
 |               +-- internal JJ amod
 |               +-- energy NN nn
 +-- . . punct
Input: The result is returned to the client program after the worker has Optimized the trial structure .
Parse:
returned VBN ROOT
 +-- result NN nsubjpass
 |   +-- The DT det
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- program NN pobj
 |       +-- the DT det
 |       +-- client NN nn
 +-- Optimized VBN advcl
 |   +-- after IN mark
 |   +-- worker NN nsubj
 |   |   +-- the DT det
 |   +-- has VBZ aux
 |   +-- structure NN dobj
 |       +-- the DT det
 |       +-- trial NN nn
 +-- . . punct
Input: Since the calculation portion of the structure optimization in this worker program can be calculated independently using different parameters , we parallelized this portion using asynchronous RPCs on the client side .
Parse:
parallelized VBD ROOT
 +-- calculated VBN advcl
 |   +-- Since IN mark
 |   +-- portion NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- calculation NN nn
 |   |   +-- of IN prep
 |   |       +-- optimization NN pobj
 |   |           +-- the DT det
 |   |           +-- structure NN nn
 |   |           +-- in IN prep
 |   |               +-- program NN pobj
 |   |                   +-- this DT det
 |   |                   +-- worker NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- independently RB advmod
 |   +-- using VBG xcomp
 |       +-- parameters NNS dobj
 |           +-- different JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- portion NN dobj
 |   +-- this DT det
 +-- using VBG xcomp
 |   +-- RPCs NNS dobj
 |   |   +-- asynchronous JJ amod
 |   +-- on IN prep
 |       +-- side NN pobj
 |           +-- the DT det
 |           +-- client NN nn
 +-- . . punct
Input: To call the structure optimization function in a worker program from the client program , we use the OmniRpcCallAsync API , which is intended for asynchronous RPC .
Parse:
use VBP ROOT
 +-- call VB advcl
 |   +-- To TO aux
 |   +-- function NN dobj
 |   |   +-- the DT det
 |   |   +-- structure NN nn
 |   |   +-- optimization NN nn
 |   +-- in IN prep
 |       +-- program NN pobj
 |           +-- a DT det
 |           +-- worker NN nn
 |           +-- from IN prep
 |               +-- program NN pobj
 |                   +-- the DT det
 |                   +-- client NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- API NN dobj
 |   +-- the DT det
 |   +-- OmniRpcCallAsync NNP nn
 |   +-- , , punct
 |   +-- intended VBN rcmod
 |       +-- which WDT nsubjpass
 |       +-- is VBZ auxpass
 |       +-- for IN prep
 |           +-- RPC NN pobj
 |               +-- asynchronous JJ amod
 +-- . . punct
Input: In addition , OmniRpcCallWaitAll API which waits until all asynchronous RPCs are used in order to perform synchronization with all of the asynchronous RPCs completed so as to optimize the trial structure .
Parse:
used VBN ROOT
 +-- In IN prep
 |   +-- addition NN pobj
 +-- , , punct
 +-- API NN nsubjpass
 |   +-- OmniRpcCallWaitAll NNP nn
 |   +-- waits VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- until IN prep
 |           +-- RPCs NNS pobj
 |               +-- all DT det
 |               +-- asynchronous JJ amod
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- perform VB infmod
 |           +-- to TO aux
 |           +-- synchronization NN dobj
 |           +-- with IN prep
 |               +-- all DT pobj
 |                   +-- of IN prep
 |                       +-- RPCs NNS pobj
 |                           +-- the DT det
 |                           +-- asynchronous JJ amod
 |                           +-- completed VBN partmod
 |                               +-- optimize VB advcl
 |                                   +-- so IN mark
 |                                   +-- as IN mark
 |                                   +-- to TO aux
 |                                   +-- structure NN dobj
 |                                       +-- the DT det
 |                                       +-- trial NN nn
 +-- . . punct
Input: The client program which assigns trial structure optimization to the calculation node of a PC cluster using RPC is outlined as follows .
Parse:
outlined VBN ROOT
 +-- program NN nsubjpass
 |   +-- The DT det
 |   +-- client NN nn
 |   +-- assigns VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- optimization NN dobj
 |       |   +-- structure NN nn
 |       |       +-- trial NN nn
 |       +-- to IN prep
 |           +-- node NN pobj
 |               +-- the DT det
 |               +-- calculation NN nn
 |               +-- of IN prep
 |                   +-- cluster NN pobj
 |                       +-- a DT det
 |                       +-- PC NN nn
 |                       +-- using VBG partmod
 |                           +-- RPC NNP dobj
 +-- is VBZ auxpass
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct
Input: OmniRpcInit -LRB- -RRB- OmniRpcModuleInit -LRB- `` conflex_search '' , ... -RRB- ; .. .
Parse:
OmniRpcInit NNP ROOT
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- OmniRpcModuleInit NNP dep
 +-- conflex_search NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- `` `` punct
 |   +-- '' '' punct
 |   +-- , , punct
 |   +-- ... : punct
 |   +-- -RRB- -RRB- punct
 +-- ; : punct
 +-- .. NFP punct
 +-- . . punct
Input: while -LRB- < new conformers > -RRB- -LRB- foreach -LRB- < trial structures > -RRB- OmniRpcCallAsync -LRB- `` conflex_search_worker '' , ... -RRB- ; OmniRpcWaitAll -LRB- -RRB- ; .. .
Parse:
while IN ROOT
 +-- conformers NNS dep
 |   +-- -LRB- -LRB- punct
 |   +-- < -LRB- punct
 |   +-- new JJ amod
 |   +-- > -RRB- punct
 |   +-- -RRB- -RRB- punct
 |   +-- foreach NN dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- < -LRB- punct
 |   |   +-- structures NNS dep
 |   |   |   +-- trial NN nn
 |   |   +-- > -RRB- punct
 |   +-- OmniRpcCallAsync NNP dep
 |       +-- conflex_search_worker NN dep
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- `` `` punct
 |       |   +-- '' '' punct
 |       |   +-- , , punct
 |       |   +-- ... : punct
 |       |   +-- -RRB- -RRB- punct
 |       +-- ; : punct
 |       +-- OmniRpcWaitAll NNP dep
 |           +-- -LRB- -LRB- punct
 +-- ; : punct
 +-- .. NFP punct
 +-- . . punct
Input: Note that OmniRpcModuleInit API returns only the arguments needed for initialization and will not actually execute the Initialization function .
Parse:
Note VB ROOT
 +-- returns VBZ ccomp
 |   +-- that IN mark
 |   +-- API NN nsubj
 |   |   +-- OmniRpcModuleInit NNP nn
 |   +-- arguments NNS dobj
 |   |   +-- only RB advmod
 |   |   +-- the DT det
 |   |   +-- needed VBN partmod
 |   |       +-- for IN prep
 |   |           +-- initialization NN pobj
 |   +-- and CC cc
 |   +-- execute VB conj
 |       +-- will MD aux
 |       +-- not RB neg
 |       +-- actually RB advmod
 |       +-- function NN dobj
 |           +-- the DT det
 |           +-- Initialization NNP nn
 +-- . . punct
Input: As described above , the actual Initialization is performed at the first remote call .
Parse:
performed VBN ROOT
 +-- described VBN advcl
 |   +-- As IN mark
 |   +-- above IN advmod
 +-- , , punct
 +-- Initialization NNP nsubjpass
 |   +-- the DT det
 |   +-- actual JJ amod
 +-- is VBZ auxpass
 +-- at IN prep
 |   +-- call NN pobj
 |       +-- the DT det
 |       +-- first JJ amod
 |       +-- remote JJ amod
 +-- . . punct
Input: Since the OmniRPC system has an easy round robin scheduler , we do not have to explicitly write the code for load balance .
Parse:
have VB ROOT
 +-- has VBZ advcl
 |   +-- Since IN mark
 |   +-- system NN nsubj
 |   |   +-- the DT det
 |   |   +-- OmniRPC NNP nn
 |   +-- scheduler NN dobj
 |       +-- an DT det
 |       +-- easy JJ amod
 |       +-- round NN amod
 |       +-- robin NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- do VBP aux
 +-- not RB neg
 +-- write VB xcomp
 |   +-- to TO aux
 |   +-- explicitly RB advmod
 |   +-- code NN dobj
 |       +-- the DT det
 |       +-- for IN prep
 |           +-- balance NN pobj
 |               +-- load NN nn
 +-- . . punct
Input: Therefore , RPCs are allocated automatically to idle workers .
Parse:
allocated VBN ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- RPCs NNS nsubjpass
 +-- are VBP auxpass
 +-- automatically RB advmod
 +-- to TO prep
 |   +-- workers NNS pobj
 |       +-- idle JJ amod
 +-- . . punct
Input: 158 Table 2
Parse:
Table JJ ROOT
 +-- 158 CD num
 +-- 2 CD num
Input: Round Trip Throughput Cluster Time -LRB- ms -RRB- -LRB- Mbps -RRB- Dennis 0.23 879.31 Alice 0.18 94.12 Toyo 11.27 1.53 Ume 1.07 373.33 .
Parse:
Trip NNP ROOT
 +-- Round NNP nn
 +-- Time NNP dep
 |   +-- Throughput NN nn
 |   +-- Cluster NN nn
 |   +-- ms NNP appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- Mbps NNS dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- Dennis NNP dep
 |   +-- 0.23 CD dep
 +-- 879.31 CD dep
 +-- Alice NNP dep
 +-- 0.18 CD dep
 +-- 94.12 CD dep
 +-- Toyo NNP dep
 +-- Ume NNP dep
 |   +-- 1.53 CD num
 |       +-- 11.27 CD number
 +-- 373.33 CD dep
 |   +-- 1.07 CD num
 +-- . . punct
