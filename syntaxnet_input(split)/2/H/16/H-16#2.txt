Input: Millions of queries are submitted daily to Web search engines , and users have high expectations of the quality and speed of the answers .
Parse:
submitted VBN ROOT
 +-- Millions NNS nsubjpass
 |   +-- of IN prep
 |       +-- queries NNS pobj
 +-- are VBP auxpass
 +-- daily RB advmod
 +-- to IN prep
 |   +-- engines NNS pobj
 |       +-- search NN nn
 |           +-- Web NN nn
 +-- , , punct
 +-- and CC cc
 +-- have VBP conj
 |   +-- users NNS nsubj
 |   +-- expectations NNS dobj
 |       +-- high JJ amod
 |       +-- of IN prep
 |           +-- quality NN pobj
 |               +-- the DT det
 |               +-- and CC cc
 |               +-- speed NN conj
 |               +-- of IN prep
 |                   +-- answers NNS pobj
 |                       +-- the DT det
 +-- . . punct
Input: As the searchable Web becomes larger and larger , with more than 20 billion pages to index , evaluating a single query requires processing large amounts of data .
Parse:
requires VBZ ROOT
 +-- larger JJR advcl
 |   +-- As IN mark
 |   +-- Web NN nsubj
 |   |   +-- the DT det
 |   |   +-- searchable JJ amod
 |   +-- becomes VBZ cop
 |   +-- and CC cc
 |   +-- larger JJR conj
 |   +-- , , punct
 |   +-- with IN prep
 |       +-- pages NNS pobj
 |           +-- billion CD num
 |           |   +-- than IN quantmod
 |           |   |   +-- more JJR mwe
 |           |   +-- 20 CD number
 |           +-- to IN prep
 |               +-- index NN pobj
 +-- , , punct
 +-- evaluating VBG csubj
 |   +-- query NN dobj
 |       +-- a DT det
 |       +-- single JJ amod
 +-- processing VBG xcomp
 |   +-- amounts NNS dobj
 |       +-- large JJ amod
 |       +-- of IN prep
 |           +-- data NNS pobj
 +-- . . punct
Input: In such a setting , to achieve a fast response time and to increase the query throughput , using a cache is crucial .
Parse:
crucial JJ ROOT
 +-- In IN prep
 |   +-- setting NN pobj
 |       +-- such PDT predet
 |       +-- a DT det
 +-- , , punct
 +-- achieve VB csubj
 |   +-- to TO aux
 |   +-- time NN dobj
 |   |   +-- a DT det
 |   |   +-- response NN nn
 |   |       +-- fast JJ amod
 |   +-- and CC cc
 |   +-- increase VB conj
 |       +-- to TO aux
 |       +-- throughput NN dobj
 |       |   +-- the DT det
 |       |   +-- query NN nn
 |       +-- , , punct
 |       +-- using VBG partmod
 |           +-- cache NN dobj
 |               +-- a DT det
 +-- is VBZ cop
 +-- . . punct
Input: The primary use of a cache memory is to speedup computation by exploiting frequently or recently used data , although reducing the workload to back end servers is also a major goal .
Parse:
is VBZ ROOT
 +-- use NN nsubj
 |   +-- The DT det
 |   +-- primary JJ amod
 |   +-- of IN prep
 |       +-- memory NN pobj
 |           +-- a DT det
 |           +-- cache NN nn
 +-- speedup VB xcomp
 |   +-- to TO aux
 |   +-- computation NN dobj
 |   +-- by IN prep
 |   |   +-- exploiting VBG pcomp
 |   |       +-- data NNS dobj
 |   |           +-- used VBN amod
 |   |               +-- frequently RB advmod
 |   |                   +-- or CC cc
 |   |                   +-- recently RB conj
 |   +-- , , punct
 |   +-- reducing VBG advcl
 |       +-- although IN mark
 |       +-- goal NN ccomp
 |           +-- workload NN nsubj
 |           |   +-- the DT det
 |           |   +-- back VB infmod
 |           |       +-- to TO aux
 |           |       +-- servers NNS dobj
 |           |           +-- end NN nn
 |           +-- is VBZ cop
 |           +-- also RB advmod
 |           +-- a DT det
 |           +-- major JJ amod
 +-- . . punct
Input: Caching can be applied at different levels with increasing response latencies or processing requirements .
Parse:
applied VBN ROOT
 +-- Caching NN nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- at IN prep
 |   +-- levels NNS pobj
 |       +-- different JJ amod
 +-- with IN prep
 |   +-- requirements NNS pobj
 |       +-- increasing VBG amod
 |       +-- response NN nn
 |       +-- latencies NNS nn
 |           +-- or CC cc
 |           +-- processing NN conj
 +-- . . punct
Input: For example , the different levels may correspond to the main memory , the disk , or resources in a local or a wide area network .
Parse:
correspond VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- levels NNS nsubj
 |   +-- the DT det
 |   +-- different JJ amod
 +-- may MD aux
 +-- to IN prep
 |   +-- memory NN pobj
 |       +-- the DT det
 |       +-- main JJ amod
 |       +-- , , punct
 |       +-- disk NN conj
 |       |   +-- the DT det
 |       +-- or CC cc
 |       +-- resources NNS conj
 |       +-- in IN prep
 |       |   +-- local JJ pobj
 |       |       +-- a DT det
 |       +-- network NN conj
 |           +-- a DT det
 |           +-- wide JJ amod
 |           +-- area NN nn
 +-- . . punct
Input: The decision of what to cache is either off line -LRB- static -RRB- or online -LRB- dynamic -RRB- .
Parse:
is VBZ ROOT
 +-- decision NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- cache NN pcomp
 |           +-- what WP nsubj
 |           +-- to IN aux
 +-- either CC dep
 +-- off IN prep
 |   +-- line NN pobj
 |       +-- -LRB- -LRB- punct
 |       +-- static NN dep
 |       +-- -RRB- -RRB- punct
 |       +-- or CC cc
 |       +-- dynamic JJ conj
 |           +-- online RB dep
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: A static cache is based on historical information and is periodically updated .
Parse:
based VBN ROOT
 +-- cache NN nsubjpass
 |   +-- A DT det
 |   +-- static JJ amod
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- information NN pobj
 |       +-- historical JJ amod
 +-- and CC cc
 +-- updated VBN conj
 |   +-- is VBZ auxpass
 |   +-- periodically RB advmod
 +-- . . punct
Input: A dynamic cache replaces entries according to the sequence of requests .
Parse:
replaces NNS ROOT
 +-- cache NN nsubj
 |   +-- A DT det
 |   +-- dynamic JJ amod
 +-- entries NNS dobj
 +-- according VBG prep
 |   +-- to IN pcomp
 |       +-- sequence NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- requests NNS pobj
 +-- . . punct
Input: When a new request arrives , the cache system decides whether to evict some entry from the cache in the case of a cache miss .
Parse:
decides VBZ ROOT
 +-- arrives VBZ advcl
 |   +-- When WRB advmod
 |   +-- request NN nsubj
 |       +-- a DT det
 |       +-- new JJ amod
 +-- , , punct
 +-- system NN nsubj
 |   +-- the DT det
 |   +-- cache NN nn
 +-- evict VB ccomp
 |   +-- whether IN mark
 |   +-- to TO aux
 |   +-- entry NN dobj
 |       +-- some DT det
 |       +-- from IN prep
 |       |   +-- cache NN pobj
 |       |       +-- the DT det
 |       +-- in IN prep
 |           +-- case NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- miss NN pobj
 |                       +-- a DT det
 |                       +-- cache NN nn
 +-- . . punct
Input: Such online decisions are based on a cache policy , and several different policies have been studied in the past .
Parse:
based VBN ROOT
 +-- decisions NNS nsubjpass
 |   +-- Such JJ amod
 |   +-- online JJ amod
 +-- are VBP auxpass
 +-- on IN prep
 |   +-- policy NN pobj
 |       +-- a DT det
 |       +-- cache NN nn
 +-- , , punct
 +-- and CC cc
 +-- studied VBN conj
 |   +-- policies NNS nsubjpass
 |   |   +-- several JJ amod
 |   |   +-- different JJ amod
 |   +-- have VBP aux
 |   +-- been VBN auxpass
 |   +-- in IN prep
 |       +-- past NN pobj
 |           +-- the DT det
 +-- . . punct
Input: For a search engine , there are two possible ways to use a cache memory
Parse:
are VBP ROOT
 +-- For IN prep
 |   +-- engine NN pobj
 |       +-- a DT det
 |       +-- search NN nn
 +-- , , punct
 +-- there EX expl
 +-- ways NNS nsubj
     +-- two CD num
     +-- possible JJ amod
     +-- use VB infmod
         +-- to TO aux
         +-- memory NN dobj
             +-- a DT det
             +-- cache NN nn
Input: Caching terms
Parse:
terms NNS ROOT
 +-- Caching VBG nn
Input: Often the whole set of posting lists does not fit in memory , and consequently , the engine has to select a small set to keep in memory and speed up query processing .
Parse:
fit VB ROOT
 +-- Often RB advmod
 +-- set NN nsubj
 |   +-- the DT det
 |   +-- whole JJ amod
 |   +-- of IN prep
 |       +-- lists NNS pobj
 |           +-- posting NN nn
 +-- does VBZ aux
 +-- not RB neg
 +-- in IN prep
 |   +-- memory NN pobj
 +-- , , punct
 +-- and CC cc
 +-- has VBZ conj
 |   +-- consequently RB advmod
 |   +-- , , punct
 |   +-- engine NN nsubj
 |   |   +-- the DT det
 |   +-- select VB xcomp
 |       +-- to TO aux
 |       +-- set VBN dobj
 |       |   +-- a DT det
 |       |   +-- small JJ amod
 |       +-- keep VB xcomp
 |           +-- to TO aux
 |           +-- in RP prt
 |           +-- memory NN dobj
 |           +-- and CC cc
 |           +-- speed VB conj
 |               +-- up RP prt
 |               +-- processing NN dobj
 |                   +-- query NN nn
 +-- . . punct
Input: Returning an answer to a query that already exists in the cache is more efficient than computing the answer using cached posting lists .
Parse:
efficient JJ ROOT
 +-- Returning VBG csubj
 |   +-- answer NN dobj
 |       +-- an DT det
 |       +-- to IN prep
 |           +-- query NN pobj
 |               +-- a DT det
 |               +-- exists VBZ rcmod
 |                   +-- that WDT nsubj
 |                   +-- already RB advmod
 |                   +-- in IN prep
 |                       +-- cache NN pobj
 |                           +-- the DT det
 +-- is VBZ cop
 +-- more RBR advmod
 +-- than IN prep
 |   +-- computing VBG pcomp
 |       +-- answer NN dobj
 |           +-- the DT det
 |           +-- using VBG partmod
 |               +-- lists NNS dobj
 |                   +-- cached VBN amod
 |                   +-- posting NN nn
 +-- . . punct
Input: On the other hand , previously unseen queries occur more often than previously unseen terms , implying a higher miss rate for cached answers .
Parse:
occur VBP ROOT
 +-- On IN prep
 |   +-- hand NN pobj
 |       +-- the DT det
 |       +-- other JJ amod
 +-- , , punct
 +-- queries NNS nsubj
 |   +-- unseen JJ amod
 |       +-- previously RB advmod
 +-- often RB advmod
 |   +-- more RBR advmod
 |   +-- than IN prep
 |       +-- terms NNS pobj
 |           +-- unseen JJ amod
 |               +-- previously RB advmod
 +-- implying VBG xcomp
 |   +-- rate NN dobj
 |       +-- a DT det
 |       +-- higher JJR amod
 |       +-- miss NN nn
 |       +-- for IN prep
 |           +-- answers NNS pobj
 |               +-- cached VBN amod
 +-- . . punct
Input: Caching of posting lists has additional challenges .
Parse:
has VBZ ROOT
 +-- Caching VBG nsubj
 |   +-- of IN prep
 |       +-- lists NNS pobj
 |           +-- posting NN nn
 +-- challenges NNS dobj
 |   +-- additional JJ amod
 +-- . . punct
Input: As posting lists have variable size , caching them dynamically is not very efficient , due to the complexity in terms of efficiency and space , and the skewed distribution of the query stream , as shown later .
Parse:
efficient JJ ROOT
 +-- have VBP advcl
 |   +-- As IN mark
 |   +-- lists NNS nsubj
 |   |   +-- posting VBG nn
 |   +-- size NN dobj
 |       +-- variable JJ amod
 +-- , , punct
 +-- caching VBG csubj
 |   +-- them PRP dobj
 |   +-- dynamically RB advmod
 +-- is VBZ cop
 +-- not RB neg
 +-- very RB advmod
 +-- to IN prep
 |   +-- due IN mwe
 |   +-- complexity NN pobj
 |       +-- the DT det
 |       +-- in IN prep
 |       |   +-- terms NNS pobj
 |       |       +-- of IN prep
 |       |           +-- efficiency NN pobj
 |       |               +-- and CC cc
 |       |               +-- space NN conj
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- distribution NN conj
 |           +-- the DT det
 |           +-- skewed JJ amod
 |           +-- of IN prep
 |               +-- stream NN pobj
 |                   +-- the DT det
 |                   +-- query NN nn
 +-- shown VBN advcl
 |   +-- as IN mark
 |   +-- later RB advmod
 +-- . . punct
Input: Static caching of posting lists poses even more challenges
Parse:
poses NNS ROOT
 +-- caching NN nsubj
 |   +-- Static JJ amod
 |   +-- of IN prep
 |       +-- lists NNS pobj
 |           +-- posting NN nn
 +-- challenges NNS dobj
     +-- more JJR amod
         +-- even RB advmod
Input: Finally , before deciding to adopt a static caching policy the query stream should be analyzed to verify that its characteristics do not change rapidly over time .
Parse:
analyzed VBN ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- before IN prep
 |   +-- deciding VBG pcomp
 |       +-- adopt VB xcomp
 |           +-- to TO aux
 |           +-- policy NN iobj
 |           |   +-- a DT det
 |           |   +-- static JJ amod
 |           |   +-- caching VBG nn
 |           +-- stream NN dobj
 |               +-- the DT det
 |               +-- query NN nn
 +-- should MD aux
 +-- be VB auxpass
 +-- verify VB xcomp
 |   +-- to TO aux
 |   +-- change VB ccomp
 |       +-- that IN mark
 |       +-- characteristics NNS nsubj
 |       |   +-- its PRP$ poss
 |       +-- do VBP aux
 |       +-- not RB neg
 |       +-- rapidly RB advmod
 |       +-- over IN prep
 |           +-- time NN pobj
 +-- . . punct
Input: Broker Static caching posting lists Dynamic Static cached answers Local query processor Disk Next caching level Local network access Remote network access Figure 1
Parse:
cached VBD ROOT
 +-- lists NNS nsubj
 |   +-- Static NNP nn
 |   |   +-- Broker NNP nn
 |   +-- caching NN nn
 |   +-- posting NN nn
 |   +-- Static NNP dep
 |       +-- Dynamic NNP amod
 +-- answers NNS dobj
     +-- Figure NN dobj
         +-- access NN nn
         |   +-- processor NN nn
         |   |   +-- Local JJ amod
         |   |   +-- query NN nn
         |   +-- access NN nn
         |   |   +-- Next NNP nn
         |   |   |   +-- Disk NNP nn
         |   |   +-- level NN nn
         |   |   |   +-- caching VBG nn
         |   |   +-- Local JJ amod
         |   |   +-- network NN nn
         |   +-- Remote NNP nn
         |   +-- network NN nn
         +-- 1 CD num
Input: In this paper we explore the trade offs in the design of each cache level , showing that the problem is the same and only a few parameters change .
Parse:
explore VBP ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- offs NNS dobj
 |   +-- the DT det
 |   +-- trade NN nn
 |   +-- in IN prep
 |       +-- design NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- level NN pobj
 |                   +-- each DT det
 |                   +-- cache NN nn
 +-- , , punct
 +-- showing VBG partmod
 |   +-- same JJ ccomp
 |       +-- that IN mark
 |       +-- problem NN nsubj
 |       |   +-- the DT det
 |       +-- is VBZ cop
 |       +-- the DT det
 |       +-- and CC cc
 |       +-- change NN conj
 |           +-- only RB advmod
 |           +-- a DT det
 |           +-- few JJ amod
 |           +-- parameters NNS nn
 +-- . . punct
Input: In general , we assume that each level of caching in a distributed search architecture is similar to that shown in Figure 1 .
Parse:
assume VBP ROOT
 +-- In IN prep
 |   +-- general JJ pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- similar JJ ccomp
 |   +-- that IN mark
 |   +-- level NN nsubj
 |   |   +-- each DT det
 |   |   +-- of IN prep
 |   |   |   +-- caching VBG pobj
 |   |   +-- in IN prep
 |   |       +-- architecture NN pobj
 |   |           +-- a DT det
 |   |           +-- distributed VBN amod
 |   |           +-- search NN nn
 |   +-- is VBZ cop
 |   +-- to IN prep
 |       +-- that DT pobj
 |           +-- shown VBN partmod
 |               +-- in IN prep
 |                   +-- Figure NN pobj
 |                       +-- 1 CD num
 +-- . . punct
Input: We use a query log spanning a whole year to explore the limitations of dynamically caching query answers or posting lists for query terms .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- log NN dobj
 |   +-- a DT det
 |   +-- query NN nn
 |   +-- spanning VBG partmod
 |       +-- year NN tmod
 |           +-- a DT det
 |           +-- whole JJ amod
 +-- explore VB xcomp
 |   +-- to TO aux
 |   +-- limitations NNS dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- answers NNS pobj
 |   |           +-- caching VBG amod
 |   |           |   +-- dynamically RB advmod
 |   |           +-- query NN nn
 |   |           +-- or CC cc
 |   |           +-- lists NNS conj
 |   |               +-- posting NN nn
 |   +-- for IN prep
 |       +-- terms NNS pobj
 |           +-- query NN nn
 +-- . . punct
Input: More concretely , our main conclusions are that
Parse:
that DT ROOT
 +-- concretely RB advmod
 |   +-- More RBR advmod
 +-- , , punct
 +-- conclusions NNS nsubj
 |   +-- our PRP$ poss
 |   +-- main JJ amod
 +-- are VBP cop
Input: We provide a framework for the analysis of the trade off between static caching of query answers and posting lists ; ? Static caching of terms can be more effective than dynamic caching with , for example , LRU .
Parse:
provide VBP ROOT
 +-- We PRP nsubj
 +-- framework NN dobj
 |   +-- a DT det
 |   +-- for IN prep
 |       +-- analysis NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- trade NN pobj
 |                   +-- the DT det
 |                   +-- off RP dep
 |                   +-- between IN prep
 |                   |   +-- caching NN pobj
 |                   |       +-- static JJ amod
 |                   +-- of IN prep
 |                       +-- answers NNS pobj
 |                           +-- query NN nn
 |                           +-- and CC cc
 |                           +-- lists NNS conj
 |                               +-- posting NN nn
 +-- ; : punct
 +-- ? , punct
 +-- effective JJ ccomp
 |   +-- caching NN nsubj
 |   |   +-- Static NNP nn
 |   |   +-- of IN prep
 |   |       +-- terms NNS pobj
 |   +-- can MD aux
 |   +-- be VB cop
 |   +-- more RBR advmod
 |   +-- than IN prep
 |       +-- caching NN pobj
 |           +-- dynamic JJ amod
 |           +-- with IN prep
 |           +-- , , punct
 |           +-- for IN prep
 |           |   +-- example NN pobj
 |           +-- LRU PRP appos
 +-- . . punct
Input: We provide algorithms based on the Knapsack problem for selecting the posting lists to put in a static cache , and we show improvements over previous work , achieving a hit ratio over 90 % ; ? Changes of the query distribution over time have little impact on static caching .
Parse:
provide VBP ROOT
 +-- We PRP nsubj
 +-- algorithms NNS dobj
 |   +-- based VBN partmod
 |       +-- on IN prep
 |           +-- problem NN pobj
 |               +-- the DT det
 |               +-- Knapsack NNP nn
 |               +-- for IN prep
 |                   +-- selecting VBG pcomp
 |                       +-- lists NNS dobj
 |                       |   +-- the DT det
 |                       |   +-- posting NN nn
 |                       +-- put VB xcomp
 |                           +-- to TO aux
 |                           +-- in RP prt
 |                           +-- cache NN dobj
 |                               +-- a DT det
 |                               +-- static NN amod
 +-- , , punct
 +-- and CC cc
 +-- show VBP conj
 |   +-- we PRP nsubj
 |   +-- improvements NNS dobj
 |   |   +-- over IN prep
 |   |       +-- work NN pobj
 |   |           +-- previous JJ amod
 |   +-- , , punct
 |   +-- achieving VBG partmod
 |       +-- ratio NN dobj
 |       |   +-- a DT det
 |       |   +-- hit NN nn
 |       +-- % NN dobj
 |           +-- 90 CD num
 |               +-- over IN quantmod
 +-- ; : punct
 +-- have VBP parataxis
 |   +-- ? . punct
 |   +-- Changes NNS nsubj
 |   |   +-- of IN prep
 |   |   |   +-- distribution NN pobj
 |   |   |       +-- the DT det
 |   |   |       +-- query NN nn
 |   |   +-- over IN prep
 |   |       +-- time NN pobj
 |   +-- impact NN dobj
 |       +-- little JJ amod
 |       +-- on IN prep
 |           +-- caching NN pobj
 |               +-- static JJ amod
 +-- . . punct
Input: The remainder of this paper is organized as follows .
Parse:
organized VBN ROOT
 +-- remainder NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- paper NN pobj
 |           +-- this DT det
 +-- is VBZ auxpass
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct
Input: Sections 2 and 3 summarize related work and characterize the data sets we use .
Parse:
summarize VB ROOT
 +-- Sections NNS nsubj
 |   +-- 2 CD dep
 |       +-- and CC cc
 |       +-- 3 CD conj
 +-- work NN dobj
 |   +-- related JJ amod
 +-- and CC cc
 +-- characterize VB conj
 |   +-- sets NNS dobj
 |       +-- the DT det
 |       +-- data NNS nn
 |       +-- use VBP rcmod
 |           +-- we PRP nsubj
 +-- . . punct
Input: Section 4 discusses the limitations of dynamic caching .
Parse:
discusses VBZ ROOT
 +-- Section NN nsubj
 |   +-- 4 CD num
 +-- limitations NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- caching NN pobj
 |           +-- dynamic JJ amod
 +-- . . punct
Input: Sections 5 and 6 introduce algorithms for caching posting lists , and a theoretical framework for the analysis of static caching , respectively .
Parse:
introduce NN ROOT
 +-- Sections NNS nsubj
 |   +-- 5 CD num
 |   +-- and CC cc
 |   +-- 6 CD conj
 +-- algorithms NNS dobj
 |   +-- for IN prep
 |   |   +-- lists NNS pobj
 |   |       +-- caching VBG nn
 |   |       +-- posting NN nn
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- framework NN conj
 |       +-- a DT det
 |       +-- theoretical JJ amod
 |       +-- for IN prep
 |           +-- analysis NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- caching NN pobj
 |                       +-- static NN amod
 +-- , , punct
 +-- respectively RB advmod
 +-- . . punct
Input: Section 7 discusses the impact of changes in the query distribution on static caching , and Section 8 provides concluding remarks. .
Parse:
discusses VBZ ROOT
 +-- Section NN nsubj
 |   +-- 7 CD num
 +-- impact NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- changes NNS pobj
 |           +-- in IN prep
 |               +-- distribution NN pobj
 |                   +-- the DT det
 |                   +-- query NN nn
 |                   +-- on IN prep
 |                       +-- caching NN pobj
 |                           +-- static NN amod
 +-- , , punct
 +-- and CC cc
 +-- provides VBZ conj
 |   +-- Section NNP nsubj
 |   |   +-- 8 CD num
 |   +-- remarks. NNS dobj
 |       +-- concluding NN nn
 +-- . . punct
