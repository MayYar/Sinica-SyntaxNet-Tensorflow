Input: In this paper we have described the algorithms and compression scheme that would make a good Snippet Engine sub system for generating text snippets of the type shown on the results pages of well known Web search engines
Parse:
described VBN ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- have VBP aux
 +-- algorithms NNS dobj
     +-- the DT det
     +-- and CC cc
     +-- scheme NN conj
     |   +-- compression NN nn
     +-- make VB rcmod
         +-- that WDT nsubj
         +-- would MD aux
         +-- system NN dobj
         |   +-- a DT det
         |   +-- good JJ amod
         |   +-- Engine NNP nn
         |   |   +-- Snippet NN nn
         |   +-- sub NN nn
         +-- for IN prep
             +-- generating VBG pcomp
                 +-- snippets NNS dobj
                     +-- text NN nn
                     +-- of IN prep
                     |   +-- type NN pobj
                     |       +-- the DT det
                     +-- shown VBN partmod
                         +-- on IN prep
                             +-- pages NNS pobj
                                 +-- the DT det
                                 +-- results NNS nn
                                 +-- of IN prep
                                     +-- engines NNS pobj
                                         +-- known VBN amod
                                         |   +-- well RB advmod
                                         +-- search NN nn
                                             +-- Web NN nn
Input: Our experiments not only show that our scheme is over 50 % faster than the obvious baseline , but also reveal some very important aspects of the snippet generation problem
Parse:
show NN ROOT
 +-- experiments NNS nsubj
 |   +-- Our PRP$ poss
 +-- only RB preconj
 |   +-- not RB neg
 +-- is VBZ ccomp
 |   +-- that IN mark
 |   +-- scheme NN nsubj
 |   |   +-- our PRP$ poss
 |   +-- faster RBR advmod
 |       +-- % NN npadvmod
 |       |   +-- 50 CD num
 |       |       +-- over IN quantmod
 |       +-- than IN prep
 |           +-- baseline NN pobj
 |               +-- the DT det
 |               +-- obvious JJ amod
 +-- , , punct
 +-- also RB cc
 |   +-- but CC cc
 +-- reveal VBP conj
     +-- aspects NNS dobj
         +-- some DT det
         +-- important JJ amod
         |   +-- very RB advmod
         +-- of IN prep
             +-- problem NN pobj
                 +-- the DT det
                 +-- generation NN nn
                     +-- snippet NN nn
Input: Primarily , caching documents avoids seek costs to secondary memory for each document that is to be summarized , and is vital for fast snippet generation
Parse:
seek VBP ROOT
 +-- avoids NNS nsubj
 |   +-- Primarily RB advmod
 |   +-- , , punct
 |   +-- documents NNS nsubj
 |       +-- caching VBG amod
 +-- costs NNS dobj
 |   +-- to IN prep
 |   |   +-- memory NN pobj
 |   |       +-- secondary JJ amod
 |   +-- for IN prep
 |       +-- document NN pobj
 |           +-- each DT det
 |           +-- is VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- summarized VBN xcomp
 |                   +-- to TO aux
 |                   +-- be VB auxpass
 +-- , , punct
 +-- and CC cc
 +-- vital JJ conj
     +-- is VBZ cop
     +-- for IN prep
         +-- generation NN pobj
             +-- fast JJ amod
             +-- snippet NN nn
Input: Our caching simulations show that if as little as 1 % of the documents can be cached in RAM as part of the Snippet Engine , possibly distributed over many machines , then around 75 % of seeks can be avoided
Parse:
show VBP ROOT
 +-- simulations NNS nsubj
 |   +-- Our PRP$ poss
 |   +-- caching VBG nn
 +-- distributed VBN ccomp
     +-- that IN mark
     +-- cached VBN advcl
     |   +-- if IN mark
     |   +-- % NN nsubjpass
     |   |   +-- 1 CD num
     |   |   |   +-- as RB quantmod
     |   |   |   +-- little JJ quantmod
     |   |   |   +-- as IN quantmod
     |   |   +-- of IN prep
     |   |       +-- documents NNS pobj
     |   |           +-- the DT det
     |   +-- can MD aux
     |   +-- be VB auxpass
     |   +-- in IN prep
     |   |   +-- RAM NN pobj
     |   +-- as IN prep
     |       +-- part NN pobj
     |           +-- of IN prep
     |               +-- Engine NNP pobj
     |                   +-- the DT det
     |                   +-- Snippet NNP nn
     +-- , , punct
     +-- possibly RB advmod
     +-- over IN prep
     |   +-- machines NNS pobj
     |       +-- many JJ amod
     +-- avoided VBN parataxis
         +-- then RB advmod
         +-- % NN nsubjpass
         |   +-- 75 CD num
         |   |   +-- around RB quantmod
         |   +-- of IN prep
         |       +-- seeks NNS pobj
         +-- can MD aux
         +-- be VB auxpass
Input: Our second major result is that keeping only half of each document in RAM , effectively doubling the cache size , has little affect on the quality of the final snippets generated from those half documents , provided that the sentences that are kept in memory are chosen using the Significant Term algorithm of Luhn -LRB- 12 -RRB-
Parse:
is VBZ ROOT
 +-- result NN nsubj
 |   +-- Our PRP$ poss
 |   +-- second JJ amod
 |   +-- major JJ amod
 +-- affect VB ccomp
     +-- that IN mark
     +-- keeping VBG csubj
     |   +-- half NN dobj
     |   |   +-- only RB quantmod
     |   |   +-- of IN prep
     |   |       +-- document NN pobj
     |   |           +-- each DT det
     |   +-- in IN prep
     |   |   +-- RAM NN pobj
     |   +-- , , punct
     |   +-- doubling VBG partmod
     |       +-- effectively RB advmod
     |       +-- size NN dobj
     |           +-- the DT det
     |           +-- cache NN nn
     +-- has VBZ aux
     +-- little RB advmod
     +-- on IN prep
     |   +-- quality NN pobj
     |       +-- the DT det
     |       +-- of IN prep
     |           +-- snippets NNS pobj
     |               +-- the DT det
     |               +-- final JJ amod
     |               +-- generated VBN partmod
     |                   +-- from IN prep
     |                       +-- documents NNS pobj
     |                           +-- those DT det
     |                           +-- half JJ amod
     +-- , , punct
     +-- provided VBN prep
         +-- chosen VBN pcomp
             +-- that IN mark
             +-- sentences NNS nsubjpass
             |   +-- the DT det
             |   +-- kept VBN rcmod
             |       +-- that WDT nsubjpass
             |       +-- are VBP auxpass
             |       +-- in IN prep
             |           +-- memory NN pobj
             +-- are VBP auxpass
             +-- using VBG xcomp
                 +-- algorithm NNP dobj
                     +-- the DT det
                     +-- Significant NNP amod
                     +-- Term NNP nn
                     +-- of IN prep
                     |   +-- Luhn NNP pobj
                     +-- -LRB- -LRB- punct
                     +-- 12 CD dep
                     +-- -RRB- -RRB- punct
Input: Both our document compression and compaction schemes dramatically reduce the time taken to generate snippets
Parse:
reduce VBP ROOT
 +-- schemes NNS nsubj
 |   +-- Both DT predet
 |   +-- our PRP$ poss
 |   +-- document NN nn
 |   +-- compression NN nn
 |       +-- and CC cc
 |       +-- compaction NN conj
 +-- dramatically RB advmod
 +-- time NN dobj
     +-- the DT det
     +-- taken VBN partmod
         +-- generate VB xcomp
             +-- to TO aux
             +-- snippets NNS dobj
Input: Note that these results are generated using a 100Gb subset of the Web , and the Excite query log gathered from the same period as that subset was created
Parse:
Note VB ROOT
 +-- generated VBN ccomp
     +-- that IN mark
     +-- results NNS nsubjpass
     |   +-- these DT det
     +-- are VBP auxpass
     +-- using VBG xcomp
     |   +-- subset NN dobj
     |       +-- a DT det
     |       +-- 100Gb CD num
     |       +-- of IN prep
     |           +-- Web NN pobj
     |               +-- the DT det
     +-- , , punct
     +-- and CC cc
     +-- gathered VBD conj
         +-- log NN nsubj
         |   +-- the DT det
         |   +-- Excite NNP nn
         |   +-- query NN nn
         +-- from IN prep
         |   +-- period NN pobj
         |       +-- the DT det
         |       +-- same JJ amod
         +-- created VBN advcl
             +-- as IN mark
             +-- subset NN nsubjpass
             |   +-- that DT det
             +-- was VBD auxpass
Input: We are assuming , as there is no evidence to the contrary , that this collection and log is representative of search engine input in other domains
Parse:
assuming VBG ROOT
 +-- We PRP nsubj
 +-- are VBP aux
 +-- , , punct
 +-- is VBZ advcl
     +-- as IN mark
     +-- there EX expl
     +-- evidence NN nsubj
     |   +-- no DT det
     |   +-- to IN prep
     |       +-- contrary NN pobj
     |           +-- the DT det
     +-- , , punct
     +-- representative JJ ccomp
         +-- that IN mark
         +-- collection NN nsubj
         |   +-- this DT det
         |   +-- and CC cc
         |   +-- log NN conj
         +-- is VBZ cop
         +-- of IN prep
             +-- input NN pobj
                 +-- engine NN nn
                 |   +-- search NN nn
                 +-- in IN prep
                     +-- domains NNS pobj
                         +-- other JJ amod
Input: In particular , we can scale our results to examine what resources would be required , using our scheme , to provide a Snippet Engine for the entire World Wide Web
Parse:
scale VB ROOT
 +-- In IN prep
 |   +-- particular JJ pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- results NNS dobj
 |   +-- our PRP$ poss
 +-- examine VB xcomp
 |   +-- to TO aux
 |   +-- required VBN ccomp
 |       +-- resources NNS nsubjpass
 |       |   +-- what WDT det
 |       +-- would MD aux
 |       +-- be VB auxpass
 +-- using VBG xcomp
     +-- scheme NN dobj
     |   +-- our PRP$ poss
     +-- , , punct
     +-- provide VB xcomp
         +-- to TO aux
         +-- Engine NN dobj
         |   +-- a DT det
         |   +-- Snippet NNP nn
         +-- for IN prep
             +-- Web NN pobj
                 +-- the DT det
                 +-- entire JJ amod
                 +-- Wide NNP nn
                     +-- World NNP nn
Input: We will assume that the Snippet Engine is distributed across M machines , and that there are N web pages in the collection to be indexed and served by the search engine
Parse:
assume VB ROOT
 +-- We PRP nsubj
 +-- will MD aux
 +-- distributed VBN ccomp
     +-- that IN mark
     +-- Engine NNP nsubjpass
     |   +-- the DT det
     |   +-- Snippet NNP nn
     +-- is VBZ auxpass
     +-- across IN prep
     |   +-- machines NNS pobj
     |       +-- M NNP nn
     +-- , , punct
     +-- and CC cc
     +-- are VBP conj
         +-- that IN mark
         +-- there EX expl
         +-- N . punct
         +-- pages NNS nsubj
         |   +-- web NN nn
         +-- in IN prep
         |   +-- collection NN pobj
         |       +-- the DT det
         +-- indexed VBN xcomp
             +-- to TO aux
             +-- be VB auxpass
             +-- and CC cc
             +-- served VBN conj
             +-- by IN prep
                 +-- engine NN pobj
                     +-- the DT det
                     +-- search NN nn
Input: We also assume a balanced load for each machine , so each machine serves about N M documents , which is easily achieved in practice
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- load NN dobj
 |   +-- a DT det
 |   +-- balanced JJ amod
 |   +-- for IN prep
 |       +-- machine NN pobj
 |           +-- each DT det
 +-- , , punct
 +-- serves VBZ advcl
     +-- so IN mark
     +-- machine NN nsubj
     |   +-- each DT det
     +-- about IN prep
         +-- documents NNS pobj
             +-- N NNP nn
             +-- M NNP nn
             +-- , , punct
             +-- achieved VBN rcmod
                 +-- which WDT nsubjpass
                 +-- is VBZ auxpass
                 +-- easily RB advmod
                 +-- in IN prep
                     +-- practice NN pobj
Input: Each machine , therefore , requires RAM to hold the following
Parse:
requires VBZ ROOT
 +-- machine NN nsubj
 |   +-- Each DT det
 +-- , , punct
 +-- therefore RB advmod
 +-- RAM NN dobj
 +-- hold VB xcomp
     +-- to TO aux
     +-- following NN dobj
         +-- the DT det
Input: ? The CTS model , which should be 1 1000 of the size of the uncompressed collection -LRB- using results in Figure 5 and Williams et al
Parse:
model NN ROOT
 +-- ? NFP number
 +-- The DT det
 +-- CTS NNP nn
 +-- , , punct
 +-- 1000 CD rcmod
     +-- which WDT nsubj
     +-- should MD aux
     +-- be VB cop
     +-- 1 CD number
     +-- of IN prep
     |   +-- size NN pobj
     |       +-- the DT det
     |       +-- of IN prep
     |           +-- collection NN pobj
     |               +-- the DT det
     |               +-- uncompressed JJ amod
     +-- using VBG partmod
         +-- -LRB- -LRB- punct
         +-- results NNS dobj
             +-- in IN prep
                 +-- Figure NNP pobj
                     +-- 5 CD num
                     +-- and CC cc
                     +-- al NNP conj
                         +-- Williams NNP nn
                         +-- et NN nn
Input: -LRB- 23 -RRB- -RRB-
Parse:
23 CD ROOT
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
