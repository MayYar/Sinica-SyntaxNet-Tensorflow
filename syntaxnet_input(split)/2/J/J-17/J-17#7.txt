Input: P j Xijpij < P j xijpij + max -LRB- j
Parse:
P LS ROOT
 +-- j NFP dep
     +-- j NFP punct
     +-- Xijpij NNP dep
     +-- < -LRB- punct
     +-- P NN dep
     |   +-- j SYM dep
     |   +-- xijpij NN dep
     |   +-- + SYM prep
     |       +-- max NN dep
     +-- -LRB- -LRB- punct
Input: Property 1 will be used to obtain truthfulness in expectation , and property 2 will allow us to prove an approximation guarantee .
Parse:
used VBN ROOT
 +-- Property NN nsubjpass
 |   +-- 1 CD num
 +-- will MD aux
 +-- be VB auxpass
 +-- obtain VB xcomp
 |   +-- to TO aux
 |   +-- truthfulness NN dobj
 |   +-- in IN prep
 |       +-- expectation NN pobj
 +-- , , punct
 +-- and CC cc
 +-- allow VB conj
 |   +-- property NN nsubj
 |   |   +-- 2 CD num
 |   +-- will MD aux
 |   +-- prove VB xcomp
 |       +-- us PRP nsubj
 |       +-- to TO aux
 |       +-- guarantee NN dobj
 |           +-- an DT det
 |           +-- approximation NN nn
 +-- . . punct
Input: We first show that any algorithm that returns a fractional assignment having certain properties satisfies cycle monotonicity .
Parse:
show VBP ROOT
 +-- We PRP nsubj
 +-- first RB advmod
 +-- satisfies VBZ ccomp
 |   +-- that IN mark
 |   +-- algorithm NN nsubj
 |   |   +-- any DT det
 |   |   +-- returns VBZ rcmod
 |   |       +-- that WDT nsubj
 |   |       +-- assignment NN dobj
 |   |           +-- a DT det
 |   |           +-- fractional JJ amod
 |   |           +-- having VBG partmod
 |   |               +-- properties NNS dobj
 |   |                   +-- certain JJ amod
 |   +-- monotonicity NN dobj
 |       +-- cycle NN nn
 +-- . . punct
Input: Lemma 4.3 Let A be an algorithm that for any input p , outputs a -LRB- fractional -RRB- assignment x such that , if pij = Hj then xij ? 1 m , and if pij = Lj then xij ? 1 m .
Parse:
Let VB ROOT
 +-- Lemma NNP nsubj
 |   +-- 4.3 CD num
 +-- algorithm NN ccomp
 |   +-- A DT nsubj
 |   +-- be VB cop
 |   +-- an DT det
 |   +-- outputs VBZ ccomp
 |       +-- that IN mark
 |       +-- for IN prep
 |       |   +-- input NN pobj
 |       |       +-- any DT det
 |       +-- p , punct
 |       +-- , , punct
 |       +-- assignment JJ dobj
 |           +-- a DT det
 |           +-- -LRB- -LRB- punct
 |           +-- fractional JJ amod
 |           +-- -RRB- -RRB- punct
 |           +-- xij VB dep
 |               +-- x SYM mark
 |               +-- such JJ dep
 |               +-- that IN mark
 |               +-- , , punct
 |               +-- = , advcl
 |               |   +-- if IN mark
 |               |   +-- pij NNP nsubj
 |               +-- Hj , punct
 |               +-- then RB advmod
 |               +-- ? . punct
 |               +-- m NN dobj
 |               |   +-- 1 CD num
 |               +-- and CC cc
 |               +-- xij VB conj
 |                   +-- if IN mark
 |                   +-- Lj FW nsubj
 |                   |   +-- pij NN nn
 |                   |   +-- = SYM dep
 |                   +-- then RB advmod
 |                   +-- ? . punct
 |                   +-- m NN dobj
 |                       +-- 1 CD num
 +-- . . punct
Input: Then A satisfies cycle monotonicity .
Parse:
satisfies NNS ROOT
 +-- Then RB advmod
 +-- A DT nsubj
 +-- monotonicity NN dobj
 |   +-- cycle NN nn
 +-- . . punct
Input: Proof .
Parse:
Proof NNP ROOT
 +-- . . punct
Input: Fix a player i , and the vector of processing times of the other players p ? i .
Parse:
Fix VB ROOT
 +-- player NN dobj
 |   +-- a DT det
 +-- i PRP dep
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- vector NN conj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- processing VBG pcomp
 |               +-- times NNS dobj
 |                   +-- of IN prep
 |                       +-- players NNS pobj
 |                           +-- the DT det
 |                           +-- other JJ amod
 |                           +-- p NNP appos
 +-- ? . punct
 +-- i PRP dobj
 +-- . . punct
Input: We need to prove -LRB- 3 -RRB- , that is , PK k=1 P j xk+1 ij ` pk ij ? pk+1 ij ? ? 0 for every p1 i , .
Parse:
need VBP ROOT
 +-- We PRP nsubj
 +-- prove VB xcomp
 |   +-- to TO aux
 |   +-- -LRB- -LRB- punct
 |   +-- 3 LS dobj
 |   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- P NN ccomp
     +-- that DT nsubj
     +-- is VBZ cop
     +-- , , punct
     +-- PK , punct
     +-- k=1 CD num
     +-- j , dep
         +-- ij NNP dep
             +-- xk+1 CD num
             +-- ij FW dep
             +-- ` `` punct
             +-- pk FW nn
             +-- ? . punct
             +-- ij VB dep
                 +-- pk+1 CD nsubj
                 +-- ? . punct
                 +-- 0 NFP punct
                 +-- i PRP parataxis
                 |   +-- for IN prep
                 |       +-- p1 CD pobj
                 |           +-- every DT det
                 +-- , , punct
                 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , pK i , where index k = K + 1 is taken to be k = 1 .
Parse:
taken VBN ROOT
 +-- , , punct
 +-- i PRP nsubjpass
 |   +-- pK UH nn
 |   +-- , , punct
 |   +-- K NNP rcmod
 |       +-- where WRB advmod
 |       +-- index NN nsubj
 |       |   +-- = FW dep
 |       |       +-- k CD num
 |       +-- + SYM dep
 |           +-- 1 CD num
 +-- is VBZ auxpass
 +-- k NN xcomp
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- 1 CD num
 |       +-- = SYM dep
 +-- . . punct
Input: We will show that for every job j , PK k=1 xk+1 ij ` pk ij ? pk+1 ij ? ? 0 .
Parse:
show VB ROOT
 +-- We PRP nsubj
 +-- will MD aux
 +-- that IN dobj
 |   +-- for IN prep
 |       +-- job NN pobj
 |       |   +-- every DT det
 |       +-- j , pobj
 |           +-- , , punct
 |           +-- ij NN appos
 |               +-- PK NFP punct
 |               +-- xk+1 CD num
 |               |   +-- k=1 CD number
 |               +-- ` '' punct
 |               +-- ij NNP dep
 |               |   +-- pk FW nn
 |               |   +-- ? . punct
 |               |   +-- ij VB dep
 |               |       +-- pk+1 CD num
 |               +-- ? . punct
 +-- ? . punct
 +-- 0 NFP punct
 +-- . . punct
Input: If pk ij is the same for all k -LRB- either always Lj or always Hj -RRB- , then the above inequality clearly holds .
Parse:
holds VBZ ROOT
 +-- same JJ advcl
 |   +-- If IN mark
 |   +-- ij NNP nsubj
 |   |   +-- pk NNP nn
 |   +-- is VBZ cop
 |   +-- the DT det
 |   +-- for IN prep
 |   |   +-- k NN pobj
 |   |       +-- all DT det
 |   +-- Hj VBN parataxis
 |       +-- -LRB- -LRB- punct
 |       +-- always RB advmod
 |       |   +-- either CC preconj
 |       |   +-- Lj , punct
 |       |   +-- or CC cc
 |       |   +-- always RB conj
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- then RB advmod
 +-- inequality NN nsubj
 |   +-- the DT det
 |   +-- above JJ amod
 +-- clearly RB advmod
 +-- . . punct
Input: Otherwise we can 256 divide the indices 1 , .
Parse:
divide VB ROOT
 +-- Otherwise RB advmod
 +-- we PRP nsubj
 +-- can MD aux
 +-- 256 CD dep
 +-- indices NNS dobj
 |   +-- the DT det
 |   +-- 1 CD num
 +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , K , into maximal segments , where a maximal segment is a maximal set of consecutive indices k , k + 1 , .
Parse:
K NNP ROOT
 +-- , , punct
 +-- into IN prep
 |   +-- segments NNS pobj
 |       +-- maximal JJ amod
 |       +-- , , punct
 |       +-- set NN rcmod
 |           +-- where WRB advmod
 |           +-- segment NN nsubj
 |           |   +-- a DT det
 |           |   +-- maximal JJ amod
 |           +-- is VBZ cop
 |           +-- a DT det
 |           +-- maximal JJ amod
 |           +-- of IN prep
 |               +-- indices NNS pobj
 |                   +-- consecutive JJ amod
 |                   +-- k CD dep
 +-- k CD num
 +-- + SYM dep
 |   +-- 1 CD num
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
