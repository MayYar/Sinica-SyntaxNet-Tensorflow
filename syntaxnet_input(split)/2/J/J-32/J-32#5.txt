Input: MAXIMUM DEGREE 2 In this section we show how the algorithm for paths can be applied to solve a game on any graph whose vertices have degree at most 2 .
Parse:
show VBP ROOT
 +-- DEGREE NN nsubj
 |   +-- MAXIMUM NFP amod
 |   +-- 2 CD num
 |   +-- In IN prep
 |       +-- section NN pobj
 |           +-- this DT det
 +-- we PRP nsubj
 +-- applied VBN ccomp
 |   +-- how WRB advmod
 |   +-- algorithm NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- for IN prep
 |   |       +-- paths NNS pobj
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- solve VB xcomp
 |       +-- to TO aux
 |       +-- game NN dobj
 |       |   +-- a DT det
 |       +-- on IN prep
 |           +-- graph NN pobj
 |               +-- any DT det
 |               +-- have VBP rcmod
 |                   +-- vertices NNS nsubj
 |                   |   +-- whose WP$ poss
 |                   +-- degree NN dobj
 |                   +-- at IN prep
 |                       +-- 2 CD pobj
 |                           +-- most RBS amod
 +-- . . punct
Input: A graph having maximum degree 2 is , of course , a union of paths and cycles .
Parse:
union NN ROOT
 +-- graph NN nsubj
 |   +-- A DT det
 |   +-- having VBG partmod
 |       +-- degree NN dobj
 |           +-- maximum JJ amod
 |           +-- 2 CD num
 +-- is VBZ cop
 +-- , , punct
 +-- of IN prep
 |   +-- paths NNS pobj
 |       +-- and CC cc
 |       +-- cycles NNS conj
 +-- a DT det
 +-- . . punct
Input: Since each connected component can be handled independently , to obtain a proof of Theorem 2 , we only need to show how to deal with cycles .
Parse:
need VBP ROOT
 +-- handled VBN advcl
 |   +-- Since IN mark
 |   +-- component NN nsubjpass
 |   |   +-- each DT det
 |   |   +-- connected VBN amod
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- independently RB advmod
 |   +-- , , punct
 |   +-- obtain VB xcomp
 |       +-- to TO aux
 |       +-- proof NN dobj
 |           +-- a DT det
 |           +-- of IN prep
 |               +-- Theorem NNP pobj
 |                   +-- 2 CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- only RB advmod
 +-- show VB xcomp
 |   +-- to TO aux
 |   +-- deal VB ccomp
 |       +-- how WRB advmod
 |       +-- to TO aux
 |       +-- with IN prep
 |           +-- cycles NNS pobj
 +-- . . punct
Input: Given a cycle with vertices V1 , .
Parse:
Given VBN ROOT
 +-- cycle NN dep
 |   +-- a DT det
 |   +-- with IN prep
 |       +-- vertices NNS pobj
 |           +-- V1 CD num
 +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , Vk -LRB- in cyclic order -RRB- , we make two separate searches for a Nash equilibrium
Parse:
make VBP ROOT
 +-- , , punct
 +-- Vk UH advmod
 |   +-- in IN prep
 |       +-- -LRB- -LRB- punct
 |       +-- order NN pobj
 |       |   +-- cyclic JJ amod
 |       +-- -RRB- -RRB- punct
 +-- we PRP nsubj
 +-- searches NNS dobj
     +-- two CD num
     +-- separate JJ amod
     +-- for IN prep
         +-- equilibrium NN pobj
             +-- a DT det
             +-- Nash NNP nn
Input: For i ? k let vi denote the probability that Vi plays 1 .
Parse:
let VB ROOT
 +-- For IN prep
 |   +-- i PRP pobj
 +-- ? . punct
 +-- k MD aux
 +-- denote VB ccomp
 |   +-- vi PRP nsubj
 |   +-- probability NN dobj
 |       +-- the DT det
 |       +-- plays VBZ ccomp
 |           +-- that WDT mark
 |           +-- Vi NNP nsubj
 |           +-- 1 CD dobj
 +-- . . punct
Input: The first search can be done as follows .
Parse:
done VBN ROOT
 +-- search NN nsubjpass
 |   +-- The DT det
 |   +-- first JJ amod
 +-- can MD aux
 +-- be VB auxpass
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct
Input: For each i ? -LRB- 1 , .
Parse:
For IN ROOT
 +-- i PRP pobj
 |   +-- each DT det
 +-- ? , punct
 +-- 1 CD dep
 |   +-- -LRB- -LRB- punct
 |   +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , k -RRB- and each b ? -LRB- 0 , 1 -RRB- , do the following .
Parse:
do VBP ROOT
 +-- , , punct
 +-- k LS nsubj
 |   +-- -RRB- -RRB- punct
 |   +-- and CC cc
 |   +-- b NN conj
 |       +-- each DT det
 |       +-- ? . punct
 |       +-- -LRB- -LRB- punct
 |       +-- 0 CD dep
 |       |   +-- , , punct
 |       |   +-- 1 CD num
 |       +-- -RRB- -RRB- punct
 +-- the DT dobj
 |   +-- following VBG amod
 +-- . . punct
Input: only on vi+1 and vi+2. -RRB- .
Parse:
on IN ROOT
 +-- only RB advmod
 +-- vi+1 CD pobj
 |   +-- and CC cc
 |   +-- vi+2. ADD conj
 +-- -RRB- -RRB- punct
 +-- . . punct
