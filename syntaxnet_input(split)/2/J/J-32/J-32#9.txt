Input: The most important problem left open by this paper is whether it is possible to find a Nash equilibrium of a graphical game on a bounded degree tree in polynomial time
Parse:
is VBZ ROOT
 +-- problem NN nsubj
 |   +-- The DT det
 |   +-- important JJ amod
 |   |   +-- most RBS advmod
 |   +-- left VBN partmod
 |       +-- open JJ acomp
 |       +-- by IN prep
 |           +-- paper NN pobj
 |               +-- this DT det
 +-- possible JJ ccomp
     +-- whether IN mark
     +-- it PRP nsubj
     +-- is VBZ cop
     +-- find VB xcomp
         +-- to TO aux
         +-- equilibrium NN dobj
         |   +-- a DT det
         |   +-- Nash NNP nn
         |   +-- of IN prep
         |       +-- game NN pobj
         |           +-- a DT det
         |           +-- graphical JJ amod
         |           +-- on IN prep
         |               +-- tree NN pobj
         |                   +-- a DT det
         |                   +-- degree NN nn
         |                       +-- bounded JJ amod
         +-- in IN prep
             +-- time NN pobj
                 +-- polynomial JJ amod
Input: Our construction shows that any two pass algorithm that explicitly stores breakpoint policies needs exponential time and space
Parse:
shows VBZ ROOT
 +-- construction NN nsubj
 |   +-- Our PRP$ poss
 +-- needs VBZ ccomp
     +-- that IN mark
     +-- algorithm NN nsubj
     |   +-- any DT det
     |   +-- two CD num
     |   +-- pass JJ amod
     |   +-- stores VBZ rcmod
     |       +-- that WDT nsubj
     |       +-- explicitly RB advmod
     |       +-- policies NNS dobj
     |           +-- breakpoint NN nn
     +-- time NN dobj
         +-- exponential JJ amod
         +-- and CC cc
         +-- space NN conj
Input: However , it does not preclude the existence of an algorithm that is based on a similar idea , but , instead of computing the entire breakpoint policy for each vertex , uses a small number of additional passes through the graph to decide which -LRB- polynomial sized -RRB- parts of each breakpoint policy should be computed
Parse:
preclude VB ROOT
 +-- However RB advmod
 +-- , , punct
 +-- it PRP nsubj
 +-- does VBZ aux
 +-- not RB neg
 +-- existence NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- an DT det
 |           +-- based VBN rcmod
 |               +-- that WDT nsubjpass
 |               +-- is VBZ auxpass
 |               +-- on IN prep
 |                   +-- idea NN pobj
 |                       +-- a DT det
 |                       +-- similar JJ amod
 +-- but CC cc
 +-- uses VBZ conj
     +-- of IN prep
     |   +-- instead RB advmod
     |   +-- computing VBG pcomp
     |       +-- policy NN dobj
     |           +-- the DT det
     |           +-- entire JJ amod
     |           +-- breakpoint NN nn
     |           +-- for IN prep
     |               +-- vertex NN pobj
     |                   +-- each DT det
     +-- , , punct
     +-- number NN dobj
     |   +-- a DT det
     |   +-- small JJ amod
     |   +-- of IN prep
     |       +-- passes VBZ pobj
     |           +-- additional JJ amod
     +-- through IN prep
     |   +-- graph NN pobj
     |       +-- the DT det
     +-- decide VB xcomp
         +-- to TO aux
         +-- computed VBN ccomp
             +-- parts NNS nsubjpass
             |   +-- which WDT det
             |   +-- sized JJ amod
             |   |   +-- -LRB- -LRB- punct
             |   |   +-- polynomial JJ amod
             |   |   +-- -RRB- -RRB- punct
             |   +-- of IN prep
             |       +-- policy NN pobj
             |           +-- each DT det
             |           +-- breakpoint NN nn
             +-- should MD aux
             +-- be VB auxpass
Input: In particular , such an algorithm may be based on the approximation algorithm of -LRB- 8 -RRB- , where the value of is chosen adaptively
Parse:
based VBN ROOT
 +-- In IN prep
 |   +-- particular JJ pobj
 +-- , , punct
 +-- algorithm NN nsubjpass
 |   +-- such PDT predet
 |   +-- an DT det
 +-- may MD aux
 +-- be VB auxpass
 +-- on IN prep
     +-- algorithm NN pobj
         +-- the DT det
         +-- approximation NN nn
         +-- of IN prep
         |   +-- 8 CD pobj
         |       +-- -LRB- -LRB- punct
         |       +-- -RRB- -RRB- punct
         +-- , , punct
         +-- chosen VBN rcmod
             +-- where WRB advmod
             +-- value NN nsubjpass
             |   +-- the DT det
             |   +-- of IN prep
             +-- is VBZ auxpass
             +-- adaptively RB advmod
Input: Another intriguing question is related to the fact that the graph for which we constructed an exponential sized breakpoint policy has pathwidth 2 , while our positive results are for a path , i.e. , a graph of pathwidth 1
Parse:
related VBN ROOT
 +-- question NN nsubjpass
 |   +-- Another DT det
 |   +-- intriguing JJ amod
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- fact NN pobj
 |       +-- the DT det
 |       +-- has VBZ ccomp
 |           +-- that IN mark
 |           +-- graph NN nsubj
 |           |   +-- the DT det
 |           |   +-- constructed VBD rcmod
 |           |       +-- for IN prep
 |           |       |   +-- which WDT pobj
 |           |       +-- we PRP nsubj
 |           |       +-- policy NN dobj
 |           |           +-- an DT det
 |           |           +-- sized JJ amod
 |           |           |   +-- exponential JJ amod
 |           |           +-- breakpoint NN nn
 |           +-- pathwidth NN dobj
 |               +-- 2 CD num
 +-- , , punct
 +-- are VBP advcl
     +-- while IN mark
     +-- results NNS nsubj
     |   +-- our PRP$ poss
     |   +-- positive JJ amod
     +-- for IN prep
     |   +-- path NN pobj
     |       +-- a DT det
     +-- , , punct
     +-- graph NN parataxis
         +-- i.e. FW advmod
         +-- , , punct
         +-- a DT det
         +-- of IN prep
             +-- pathwidth NN pobj
                 +-- 1 CD num
Input: It is not clear if for any bounded degree graph of pathwidth 1 the running time of -LRB- the breakpoint policybased version of -RRB- our algorithm will be polynomial
Parse:
clear JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- not RB neg
 +-- polynomial JJ ccomp
     +-- graph NN advcl
     |   +-- if IN mark
     |   +-- for IN prep
     |   |   +-- degree NN pobj
     |   |       +-- any DT det
     |   |       +-- bounded JJ amod
     |   +-- of IN prep
     |   |   +-- pathwidth NN pobj
     |   +-- 1 CD number
     +-- time NN nsubj
     |   +-- the DT det
     |   +-- running VBG amod
     |   +-- of IN prep
     |       +-- version NN pobj
     |           +-- -LRB- -LRB- punct
     |           +-- the DT det
     |           +-- breakpoint NN nn
     |           +-- policybased VBN amod
     |           +-- of IN prep
     |               +-- -RRB- -RRB- punct
     |               +-- algorithm NN pobj
     |                   +-- our PRP$ poss
     +-- will MD aux
     +-- be VB cop
Input: In particular , it is instructive to consider a caterpillar graph , i.e. , the graph that can be obtained from Tn by deleting the vertices S1 ,
Parse:
instructive JJ ROOT
 +-- In IN prep
 |   +-- particular JJ pobj
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- consider VB xcomp
     +-- to TO aux
     +-- graph NN dobj
         +-- a DT det
         +-- caterpillar JJ amod
         +-- , , punct
         +-- i.e. FW advmod
         +-- graph NN appos
             +-- the DT det
             +-- obtained VBN rcmod
                 +-- that WDT nsubjpass
                 +-- can MD aux
                 +-- be VB auxpass
                 +-- from IN prep
                 |   +-- Tn SYM pobj
                 +-- by IN prep
                     +-- deleting VBG pcomp
                         +-- vertices NNS iobj
                         |   +-- the DT det
                         +-- S1 CD dobj
Input: , Sn
Parse:
Sn NNP ROOT
 +-- , , punct
