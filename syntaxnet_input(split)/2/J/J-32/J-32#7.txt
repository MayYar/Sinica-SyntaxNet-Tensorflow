Input: TREE For arbitrary trees , the general structure of the algorithm remains the same , i.e. , one can construct a best response policy -LRB- or , alternatively , a breakpoint policy -RRB- for any vertex based on the best response policies of its children .
Parse:
same JJ ROOT
 +-- For IN prep
 |   +-- TREE NN advmod
 |   +-- trees NNS pobj
 |       +-- arbitrary JJ amod
 +-- , , punct
 +-- structure NN nsubj
 |   +-- the DT det
 |   +-- general JJ amod
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- the DT det
 +-- remains VBZ cop
 +-- the DT det
 +-- construct VB ccomp
 |   +-- i.e. FW advmod
 |   +-- , , punct
 |   +-- one PRP nsubj
 |   +-- can MD aux
 |   +-- policy NN dobj
 |       +-- a DT det
 |       +-- best JJS amod
 |       +-- response NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- or CC cc
 |       +-- , , punct
 |       +-- alternatively RB advmod
 |       +-- policy NN appos
 |       |   +-- a DT det
 |       |   +-- breakpoint NN nn
 |       +-- -RRB- -RRB- punct
 |       +-- for IN prep
 |       |   +-- vertex NN pobj
 |       |       +-- any DT det
 |       +-- based VBN partmod
 |           +-- on IN prep
 |               +-- policies NNS pobj
 |                   +-- the DT det
 |                   +-- best JJS amod
 |                   +-- response NN nn
 |                   +-- of IN prep
 |                       +-- children NNS pobj
 |                           +-- its PRP$ poss
 +-- . . punct
Input: We assume that the degree of each vertex is bounded by a constant K , i.e. , the payoff matrix for each vertex is of size O -LRB- 2K -RRB- .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- bounded VBN ccomp
 |   +-- that IN mark
 |   +-- degree NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- vertex NN pobj
 |   |           +-- each DT det
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- K NN pobj
 |           +-- a DT det
 |           +-- constant JJ amod
 |           +-- , , punct
 |           +-- is VBZ appos
 |               +-- i.e. FW advmod
 |               +-- , , punct
 |               +-- matrix NN nsubj
 |               |   +-- the DT det
 |               |   +-- payoff NN nn
 |               |   +-- for IN prep
 |               |       +-- vertex NN pobj
 |               |           +-- each DT det
 |               +-- of IN prep
 |               |   +-- size NN pobj
 |               +-- O NNP punct
 |               +-- -LRB- -LRB- punct
 |               +-- 2K CD dep
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: Consider a vertex V whose children are U1 , .
Parse:
Consider VB ROOT
 +-- V NN dobj
 |   +-- a DT det
 |   +-- vertex NN nn
 |   +-- U1 CD rcmod
 |       +-- children NNS nsubj
 |       |   +-- whose WP$ poss
 |       +-- are VBP cop
 +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , Uk and whose parent is W ; the best response policy of each Uj is B -LRB- V , Uj -RRB- .
Parse:
W NN ROOT
 +-- , , punct
 +-- Uk NNP nsubj
 |   +-- and CC cc
 |   +-- parent NN conj
 |       +-- whose WP$ poss
 +-- is VBZ cop
 +-- ; : punct
 +-- B NNP parataxis
 |   +-- policy NN nsubj
 |   |   +-- the DT det
 |   |   +-- response NN nn
 |   |   |   +-- best JJS amod
 |   |   +-- of IN prep
 |   |       +-- Uj NN pobj
 |   |           +-- each DT det
 |   +-- is VBZ cop
 |   +-- Uj NNP appos
 |       +-- -LRB- -LRB- punct
 |       +-- V NNP nn
 |       +-- , , punct
 |       +-- -RRB- -RRB- punct
 +-- . . punct
Input: Similarly to the previous section , we can compute V `` s expected payoffs P0 and P1 from playing 0 or 1 , respectively .
Parse:
compute VB ROOT
 +-- to IN prep
 |   +-- Similarly RB advmod
 |   +-- section NN pobj
 |       +-- the DT det
 |       +-- previous JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- payoffs NNS dobj
 |   +-- V NNP poss
 |   |   +-- `` `` punct
 |   |   +-- s POS possessive
 |   +-- expected VBN amod
 |   +-- P0 CD num
 |   +-- and CC cc
 |   +-- P1 CD conj
 +-- from IN prep
 |   +-- playing VBG pcomp
 |       +-- 0 CD dobj
 |           +-- or CC cc
 |           +-- 1 CD conj
 |           +-- , , punct
 |           +-- respectively RB advmod
 +-- . . punct
Input: Namely , when each of the Uj plays uj and W plays w , we have P0 = L0 -LRB- u1 , .
Parse:
have VBP ROOT
 +-- Namely RB advmod
 +-- , , punct
 +-- plays VBZ advcl
 |   +-- when WRB advmod
 |   +-- each DT nsubj
 |   |   +-- of IN prep
 |   |       +-- Uj NN pobj
 |   |           +-- the DT det
 |   +-- uj NNP dobj
 |   |   +-- and CC cc
 |   |   +-- plays NNS conj
 |   |       +-- W NNP nn
 |   +-- w RB advmod
 +-- we PRP nsubj
 +-- u1 CD dobj
 |   +-- P0 CD num
 |   +-- = SYM dep
 |   +-- L0 CD num
 |   +-- -LRB- -LRB- punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , uk , w -RRB- , P 1 = L1 -LRB- u1 , .
Parse:
P NN ROOT
 +-- , , punct
 +-- uk UH discourse
 +-- w RB dep
 |   +-- -RRB- -RRB- punct
 +-- 1 CD num
 +-- = SYM punct
 +-- L1 CD num
 +-- -LRB- -LRB- punct
 +-- u1 CD num
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
