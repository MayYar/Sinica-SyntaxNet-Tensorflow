Input: VERTEX COVER Recall that for a vertex cover auction on a graph G = -LRB- V , E -RRB- , an allocation rule is an algorithm that takes as input a bid bv for each vertex and returns a vertex cover ? S of G .
Parse:
Recall NNP ROOT
 +-- VERTEX NNP nn
 +-- COVER NNP nn
 +-- algorithm NN dep
 |   +-- that IN mark
 |   +-- for IN prep
 |   |   +-- auction NN pobj
 |   |       +-- a DT det
 |   |       +-- vertex NN nn
 |   |       +-- cover NN nn
 |   |       +-- on IN prep
 |   |           +-- G NNP pobj
 |   |               +-- a DT det
 |   |               +-- graph NN nn
 |   |               +-- = SYM punct
 |   |               +-- -LRB- -LRB- punct
 |   |               +-- V NNP dep
 |   |               |   +-- , , punct
 |   |               |   +-- E NNP appos
 |   |               +-- -RRB- -RRB- punct
 |   +-- , , punct
 |   +-- rule NN nsubj
 |   |   +-- an DT det
 |   |   +-- allocation NN nn
 |   +-- is VBZ cop
 |   +-- an DT det
 |   +-- takes VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- as IN prep
 |       |   +-- input NN pobj
 |       +-- bid NN dobj
 |       |   +-- a DT det
 |       |   +-- bv , appos
 |       |   +-- for IN prep
 |       |       +-- vertex NN pobj
 |       |           +-- each DT det
 |       +-- and CC cc
 |       +-- returns VBZ conj
 |           +-- cover NN dobj
 |               +-- a DT det
 |               +-- vertex NN nn
 +-- ? , punct
 +-- S NNP dep
 |   +-- of IN prep
 |       +-- G NNP pobj
 +-- . . punct
Input: As explained in Section 2 , we can combine a monotone allocation rule with threshold payments to obtain a truthful auction .
Parse:
combine VB ROOT
 +-- explained VBN advcl
 |   +-- As IN mark
 |   +-- in IN prep
 |       +-- Section NN pobj
 |           +-- 2 CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- rule NN dobj
 |   +-- a DT det
 |   +-- allocation NN nn
 |   |   +-- monotone NN nn
 |   +-- with IN prep
 |       +-- payments NNS pobj
 |           +-- threshold NN nn
 |           +-- obtain VB infmod
 |               +-- to TO aux
 |               +-- auction NN dobj
 |                   +-- a DT det
 |                   +-- truthful JJ amod
 +-- . . punct
Input: Two natural examples of monotone allocation rules are Aopt , i.e. , the algorithm that finds an optimal vertex cover , and the greedy algorithm AGR .
Parse:
Aopt NNP ROOT
 +-- examples NNS nsubj
 |   +-- Two CD num
 |   +-- natural JJ amod
 |   +-- of IN prep
 |       +-- rules NNS pobj
 |           +-- monotone NN nn
 |           +-- allocation NN nn
 +-- are VBP cop
 +-- , , punct
 +-- i.e. FW advmod
 +-- algorithm NN conj
 |   +-- the DT det
 |   +-- greedy JJ amod
 |   +-- AGR NNP appos
 +-- and CC cc
 +-- . . punct
Input: However , Aopt can not be guaranteed to run in polynomial time unless P = NP and AGR has approximation ratio of log n .
Parse:
guaranteed VBN ROOT
 +-- However RB advmod
 +-- , , punct
 +-- Aopt NNP nsubjpass
 +-- can MD aux
 +-- not RB neg
 +-- be VB auxpass
 +-- run VB xcomp
 |   +-- to TO aux
 |   +-- in IN prep
 |   |   +-- time NN pobj
 |   |       +-- polynomial JJ amod
 |   +-- has VBZ advcl
 |       +-- unless IN mark
 |       +-- NP NNP nsubj
 |       |   +-- P NNP nn
 |       |   +-- = `` nn
 |       |   +-- and CC cc
 |       |   +-- AGR NNP conj
 |       +-- ratio NN dobj
 |           +-- approximation NN nn
 |           +-- of IN prep
 |               +-- n NNP pobj
 |                   +-- log NN nn
 +-- . . punct
Input: Another approximation algorithm for vertex cover , which has approximation ratio 2 , is the local ratio algorithm ALR -LRB- 2 , 3 -RRB- .
Parse:
ALR NNP ROOT
 +-- algorithm NN nsubj
 |   +-- Another DT det
 |   +-- approximation NN nn
 |   +-- for IN prep
 |   |   +-- cover NN pobj
 |   |       +-- vertex NN nn
 |   +-- , , punct
 |   +-- has VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- ratio NN dobj
 |           +-- approximation NN nn
 |           +-- 2 CD num
 +-- is VBZ cop
 +-- the DT det
 +-- local JJ amod
 +-- ratio NN nn
 +-- algorithm NN nn
 +-- -LRB- -LRB- punct
 +-- 2 CD dep
 |   +-- , , punct
 |   +-- 3 CD num
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: This algorithm considers the edges of G one by one .
Parse:
considers VBZ ROOT
 +-- algorithm NN nsubj
 |   +-- This DT det
 +-- edges NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- G NNP pobj
 |   |       +-- one CD num
 |   +-- by IN prep
 |       +-- one CD pobj
 +-- . . punct
Input: Given an edge e = -LRB- u , v -RRB- , it computes = min -LRB- bu , bv -RRB- and sets bu = bu ? , bv = bv ? .
Parse:
Given VBN ROOT
 +-- e NN dep
 |   +-- an DT det
 |   +-- edge NN nn
 +-- = NFP dep
 |   +-- u UH dep
 |       +-- -LRB- -LRB- punct
 |       +-- , , punct
 |       +-- v NNP dep
 |       +-- computes VBZ dep
 |       |   +-- -RRB- -RRB- punct
 |       |   +-- , , punct
 |       |   +-- it PRP nsubj
 |       +-- min NN dep
 |       |   +-- = SYM nn
 |       +-- bu NN dep
 |       |   +-- -LRB- -LRB- punct
 |       +-- bv NFP dep
 |       +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- sets VBZ conj
 |   +-- bu NNP dobj
 |       +-- = NFP punct
 |       +-- bu NNP dep
 |       +-- ? . punct
 |       +-- , , punct
 |       +-- bv NFP punct
 |       +-- = SYM dep
 |       +-- bv NN dep
 +-- . . punct
Input: After all edges have been processed , ALR returns the set of vertices -LRB- v | bv = 0 -RRB- .
Parse:
returns VBZ ROOT
 +-- processed VBN advcl
 |   +-- After RB mark
 |   +-- edges NNS nsubjpass
 |   |   +-- all DT det
 |   +-- have VBP aux
 |   +-- been VBN auxpass
 +-- , , punct
 +-- ALR NNP nsubj
 +-- set NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- vertices NNS pobj
 |           +-- bv NN appos
 |               +-- -LRB- -LRB- punct
 |               +-- v NN amod
 |               +-- | NFP punct
 |               +-- = SYM dep
 |               +-- 0 CD punct
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: It is not hard to check that if the order in which the edges are considered is independent of the bids , then this algorithm is monotone as well .
Parse:
hard JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- not RB neg
 +-- check VB xcomp
 |   +-- to TO aux
 |   +-- monotone NN ccomp
 |       +-- that IN mark
 |       +-- independent JJ advcl
 |       |   +-- if IN mark
 |       |   +-- order NN nsubj
 |       |   |   +-- the DT det
 |       |   |   +-- considered VBN rcmod
 |       |   |       +-- in IN prep
 |       |   |       |   +-- which WDT pobj
 |       |   |       +-- edges NNS nsubjpass
 |       |   |       |   +-- the DT det
 |       |   |       +-- are VBP auxpass
 |       |   +-- is VBZ cop
 |       |   +-- of IN prep
 |       |       +-- bids NNS pobj
 |       |           +-- the DT det
 |       +-- , , punct
 |       +-- then RB advmod
 |       +-- algorithm NN nsubj
 |       |   +-- this DT det
 |       +-- is VBZ cop
 |       +-- well RB advmod
 |           +-- as RB advmod
 +-- . . punct
Input: Hence , we can use it to construct a truthful auction that is guaranteed to select a vertex cover whose cost is within a factor of 2 from the optimal .
Parse:
use VB ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- it PRP dobj
 +-- construct VB xcomp
 |   +-- to TO aux
 |   +-- auction NN dobj
 |       +-- a DT det
 |       +-- truthful JJ amod
 |       +-- guaranteed VBN rcmod
 |           +-- that WDT nsubjpass
 |           +-- is VBZ auxpass
 |           +-- select VB xcomp
 |               +-- to TO aux
 |               +-- cover NN dobj
 |                   +-- a DT det
 |                   +-- vertex NN nn
 |                   +-- is VBZ rcmod
 |                       +-- cost NN nsubj
 |                       |   +-- whose WP$ poss
 |                       +-- within IN prep
 |                           +-- factor NN pobj
 |                               +-- a DT det
 |                               +-- of IN prep
 |                               |   +-- 2 CD pobj
 |                               +-- from IN prep
 |                                   +-- optimal NN pobj
 |                                       +-- the DT det
 +-- . . punct
Input: However , while the quality of the solution produced by ALR is much better than that of AGR , we still need to show that its total payment is not too high .
Parse:
need VBP ROOT
 +-- However RB advmod
 +-- , , punct
 +-- better JJR advcl
 |   +-- while IN mark
 |   +-- quality NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- solution NN pobj
 |   |           +-- the DT det
 |   |           +-- produced VBN partmod
 |   |               +-- by IN prep
 |   |                   +-- ALR NNP pobj
 |   +-- is VBZ cop
 |   +-- much RB advmod
 |   +-- than IN prep
 |       +-- that DT pobj
 |           +-- of IN prep
 |               +-- AGR NNP pobj
 +-- we PRP nsubj
 +-- still RB advmod
 +-- show VB xcomp
 |   +-- to TO aux
 |   +-- high JJ ccomp
 |       +-- that IN mark
 |       +-- payment NN nsubj
 |       |   +-- its PRP$ poss
 |       |   +-- total JJ amod
 |       +-- is VBZ cop
 |       +-- not RB neg
 |       +-- too RB advmod
 +-- . . punct
