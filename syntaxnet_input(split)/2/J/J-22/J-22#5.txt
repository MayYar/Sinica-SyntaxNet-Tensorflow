Input: The matching problems of the auctioneer in any permutation market , including the subset betting market have n ! constraints .
Parse:
have VBP ROOT
 +-- problems NNS nsubj
 |   +-- The DT det
 |   +-- matching NN nn
 |   +-- of IN prep
 |   |   +-- auctioneer NN pobj
 |   |       +-- the DT det
 |   +-- in IN prep
 |   |   +-- market NN pobj
 |   |       +-- any DT det
 |   |       +-- permutation NN nn
 |   +-- , , punct
 |   +-- including VBG prep
 |       +-- market NN pobj
 |           +-- the DT det
 |           +-- subset NN amod
 |           +-- betting VBG nn
 +-- n RB advmod
 +-- ! . punct
 +-- constraints NNS dobj
 +-- . . punct
Input: Brute force methods would take exponential time to solve .
Parse:
take VB ROOT
 +-- methods NNS nsubj
 |   +-- Brute NNP nn
 |   +-- force NN nn
 +-- would MD aux
 +-- time NN dobj
 |   +-- exponential JJ amod
 |   +-- solve VB infmod
 |       +-- to TO aux
 +-- . . punct
Input: However , given the special form of the securities in the subset betting market , we can show that the matching problems for divisible orders can be solved in polynomial time .
Parse:
show VB ROOT
 +-- However RB advmod
 +-- , , punct
 +-- given VBN prep
 |   +-- form NN dep
 |       +-- the DT det
 |       +-- special JJ amod
 |       +-- of IN prep
 |       |   +-- securities NNS pobj
 |       |       +-- the DT det
 |       +-- in IN prep
 |           +-- market NN pobj
 |               +-- the DT det
 |               +-- betting VBG nn
 |                   +-- subset NN nn
 +-- we PRP nsubj
 +-- can MD aux
 +-- solved VBN ccomp
 |   +-- that IN mark
 |   +-- problems NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- matching NN nn
 |   |   +-- for IN prep
 |   |       +-- orders NNS pobj
 |   |           +-- divisible JJ amod
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- in IN prep
 |       +-- time NN pobj
 |           +-- polynomial JJ amod
 +-- . . punct
Input: Theorem 1 .
Parse:
Theorem PRP ROOT
 +-- 1 CD num
 +-- . . punct
Input: The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time .
Parse:
solved VBN ROOT
 +-- existence NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |   |   +-- match NN pobj
 |   |       +-- a DT det
 |   +-- and CC cc
 |   +-- problems NNS conj
 |       +-- the DT det
 |       +-- match NN nn
 |       |   +-- optimal JJ amod
 |       +-- with IN prep
 |           +-- orders NNS pobj
 |               +-- divisible JJ amod
 |               +-- in IN prep
 |                   +-- market NN pobj
 |                       +-- a DT det
 |                       +-- subset NN amod
 |                       +-- betting VBG nn
 +-- can MD aux
 +-- both DT dep
 +-- be VB auxpass
 +-- in IN prep
 |   +-- time NN pobj
 |       +-- polynomial JJ amod
 +-- . . punct
Input: 329 Proof .
Parse:
Proof NNP ROOT
 +-- 329 CD num
 +-- . . punct
Input: Consider the linear programming problem -LRB- 4 -RRB- for finding an optimal match .
Parse:
Consider VB ROOT
 +-- problem NN dobj
 |   +-- the DT det
 |   +-- linear JJ amod
 |   +-- programming NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- 4 CD dep
 |   +-- -RRB- -RRB- punct
 |   +-- for IN prep
 |       +-- finding VBG pcomp
 |           +-- match NN dobj
 |               +-- an DT det
 |               +-- optimal JJ amod
 +-- . . punct
Input: This linear program has |O| + 1 variables , one variable xi for each order i and the profit variable c .
Parse:
has VBZ ROOT
 +-- program NN nsubj
 |   +-- This DT det
 |   +-- linear JJ amod
 +-- variables NNS dobj
 |   +-- |O| VBN amod
 |   +-- + SYM nn
 |   |   +-- 1 CD num
 |   +-- , , punct
 |   +-- xi NN conj
 |   |   +-- one CD num
 |   |   +-- variable NN amod
 |   |   +-- for IN prep
 |   |   |   +-- order NN pobj
 |   |   |       +-- each DT det
 |   |   +-- i PRP dep
 |   +-- and CC cc
 |   +-- c NN conj
 |       +-- the DT det
 |       +-- variable NN nn
 |           +-- profit NN nn
 +-- . . punct
Input: It also has exponentially many constraints .
Parse:
has VBZ ROOT
 +-- It PRP nsubj
 +-- also RB advmod
 +-- constraints NNS dobj
 |   +-- many JJ amod
 |       +-- exponentially RB advmod
 +-- . . punct
Input: However , we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm , as long as we can efficiently solve its corresponding separation problem in polynomial time -LRB- 7 , 8 -RRB- .
Parse:
solve VB ROOT
 +-- However RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- program NN dobj
 |   +-- the DT det
 +-- in IN prep
 |   +-- number NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- orders NNS pobj
 |       +-- |O| VBN partmod
 |           +-- by IN prep
 |               +-- using VBG pcomp
 |                   +-- algorithm NN dobj
 |                   |   +-- the DT det
 |                   |   +-- ellipsoid NN nn
 |                   +-- , , punct
 |                   +-- long RB advmod
 |                       +-- as RB advmod
 |                       +-- solve VB ccomp
 |                           +-- as IN mark
 |                           +-- we PRP nsubj
 |                           +-- can MD aux
 |                           +-- efficiently RB advmod
 |                           +-- problem NN dobj
 |                           |   +-- its PRP$ poss
 |                           |   +-- corresponding JJ amod
 |                           |   +-- separation NN nn
 |                           +-- in IN prep
 |                               +-- time NN pobj
 |                                   +-- polynomial JJ amod
 |                                   +-- -LRB- -LRB- punct
 |                                   +-- 7 CD dep
 |                                   |   +-- , , punct
 |                                   |   +-- 8 CD num
 |                                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible , or otherwise it returns a violated constraint .
Parse:
takes VBZ ROOT
 +-- problem NN nsubj
 |   +-- The DT det
 |   +-- separation NN nn
 |   +-- for IN prep
 |       +-- program NN pobj
 |           +-- a DT det
 |           +-- linear JJ amod
 +-- as IN prep
 |   +-- input NN pobj
 +-- vector NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- values NNS pobj
 |           +-- variable JJ amod
 |           +-- and CC cc
 |           +-- returns NNS conj
 +-- feasible JJ advcl
 |   +-- if IN mark
 |   +-- vector NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 |   +-- , , punct
 |   +-- or CC cc
 |   +-- returns VBZ conj
 |       +-- otherwise RB advmod
 |       +-- it PRP nsubj
 |       +-- constraint NN dobj
 |           +-- a DT det
 |           +-- violated VBN amod
 +-- . . punct
Input: For given values of the variables , a violated constraint in Eq .
Parse:
For IN ROOT
 +-- given VBN prep
 |   +-- values NNS dep
 |       +-- of IN prep
 |           +-- variables NNS pobj
 |               +-- the DT det
 |               +-- , , punct
 |               +-- constraint NN appos
 |                   +-- a DT det
 |                   +-- violated VBN amod
 |                   +-- in IN prep
 |                       +-- Eq NNP pobj
 +-- . . punct
Input: -LRB- 4 -RRB- asks whether there is a state or permutation s in which the profit is less than c , and can be rewritten as i Ii -LRB- s -RRB- qixi < i biqixi ? c ? s ? S .
Parse:
asks VBZ ROOT
 +-- 4 LS dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- is VBZ ccomp
 |   +-- whether IN mark
 |   +-- there EX expl
 |   +-- state NN nsubj
 |       +-- a DT det
 |       +-- or CC cc
 |       +-- permutation NN conj
 |       |   +-- s POS possessive
 |       +-- less JJR rcmod
 |           +-- in IN prep
 |           |   +-- which WDT pobj
 |           +-- profit NN nsubj
 |           |   +-- the DT det
 |           +-- is VBZ cop
 |           +-- than IN prep
 |               +-- c NN pobj
 +-- , , punct
 +-- and CC cc
 +-- rewritten VBN conj
     +-- can MD aux
     +-- be VB auxpass
     +-- as IN prep
         +-- i PRP pobj
             +-- Ii UH dep
                 +-- qixi UH dep
                     +-- -LRB- -LRB- punct
                     +-- s NNP nn
                     +-- -RRB- -RRB- punct
                     +-- < -LRB- punct
                     +-- i PRP dep
                     +-- biqixi UH dep
                     +-- ? . punct
                     +-- c UH dep
                     |   +-- ? . punct
                     |   +-- s POS dep
                     +-- S NNP dep
                     +-- . . punct
Input: -LRB- 5 -RRB- Thus it suffices to show how to find efficiently a state s satisfying the above inequality -LRB- 5 -RRB- or verify that the opposite inequality holds for all states s .
Parse:
suffices VBZ ROOT
 +-- 5 LS dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- Thus RB advmod
 +-- it PRP nsubj
 +-- show VB xcomp
 |   +-- to TO aux
 |   +-- find VB dep
 |       +-- how WRB advmod
 |       +-- to TO aux
 |       +-- satisfying VBG xcomp
 |       |   +-- efficiently RB advmod
 |       |   +-- state NN poss
 |       |   |   +-- a DT det
 |       |   |   +-- s POS possessive
 |       |   +-- inequality NN dobj
 |       |       +-- the DT det
 |       |       +-- above JJ amod
 |       |       +-- -LRB- -LRB- punct
 |       |       +-- 5 CD dep
 |       |       +-- -RRB- -RRB- punct
 |       +-- or CC cc
 |       +-- verify VB conj
 |           +-- holds VBZ ccomp
 |               +-- that IN mark
 |               +-- inequality NN nsubj
 |               |   +-- the DT det
 |               |   +-- opposite JJ amod
 |               +-- for IN prep
 |                   +-- states NNS pobj
 |                       +-- all DT det
 |                       +-- s POS possessive
 +-- . . punct
Input: We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem -LRB- 3 -RRB- .
Parse:
show VB ROOT
 +-- We PRP nsubj
 +-- will MD aux
 +-- reduced VBN ccomp
 |   +-- that IN mark
 |   +-- problem NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- separation NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- to IN prep
 |       +-- problem NN pobj
 |           +-- the DT det
 |           +-- maximum JJ amod
 |           +-- weighted VBN amod
 |           +-- bipartite NN nn
 |           +-- matching1 CD nn
 |           +-- -LRB- -LRB- punct
 |           +-- 3 CD dep
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: The left hand side in Eq .
Parse:
side NN ROOT
 +-- hand NN nsubj
 |   +-- The DT det
 |   +-- left JJ amod
 +-- in IN prep
 |   +-- Eq NNP pobj
 +-- . . punct
Input: -LRB- 5 -RRB- is the total money that the auctioneer needs to pay back to the winning traders in state collected by the auctioneer and it is fixed for a given solution vector of xi '' s and c .
Parse:
money NN ROOT
 +-- 5 LS dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- is VBZ cop
 +-- the DT det
 +-- total JJ amod
 +-- needs VBZ rcmod
 |   +-- that WDT dobj
 |   +-- auctioneer NN nsubj
 |   |   +-- the DT det
 |   +-- pay VB xcomp
 |       +-- to TO aux
 |       +-- back RB advmod
 |           +-- to IN prep
 |               +-- traders NNS pobj
 |                   +-- the DT det
 |                   +-- winning VBG amod
 |                   +-- in IN prep
 |                   |   +-- state NN pobj
 |                   +-- collected VBN partmod
 |                       +-- by IN prep
 |                           +-- auctioneer NN pobj
 |                               +-- the DT det
 +-- and CC cc
 +-- fixed VBN conj
 |   +-- it PRP nsubjpass
 |   +-- is VBZ auxpass
 |   +-- for IN prep
 |       +-- solution NN pobj
 |           +-- a DT det
 |           +-- given VBN amod
 |           +-- vector NN dep
 |           |   +-- of IN prep
 |           |       +-- xi NN pobj
 |           +-- '' '' punct
 |           +-- s POS possessive
 |           +-- and CC cc
 |           +-- c NN conj
 +-- . . punct
Input: A weighted bipartite graph can be constructed between the set of candidates and the set of positions .
Parse:
constructed VBN ROOT
 +-- graph NN nsubjpass
 |   +-- A DT det
 |   +-- weighted JJ amod
 |   +-- bipartite NN nn
 +-- can MD aux
 +-- be VB auxpass
 +-- between IN prep
 |   +-- set NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- candidates NNS pobj
 |       +-- and CC cc
 |       +-- set NN conj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- positions NNS pobj
 +-- . . punct
