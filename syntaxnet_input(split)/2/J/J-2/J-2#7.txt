Input: OF THE WORST CASE OPTIMAL MECHANISM We recall that our linear program has the following form
Parse:
recall VBP ROOT
 +-- OF IN prep
 |   +-- OPTIMAL NNP pobj
 |       +-- THE DT det
 |       +-- WORST NNP nn
 |       +-- CASE NNP nn
 +-- MECHANISM : punct
 +-- We PRP nsubj
 +-- has VBZ ccomp
     +-- that IN mark
     +-- program NN nsubj
     |   +-- our PRP$ poss
     |   +-- linear JJ amod
     +-- form NN dobj
         +-- the DT det
         +-- following VBG amod
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , cn ? 1 , k Maximize k -LRB- the percentage redistributed in the worst case -RRB- Subject to
Parse:
Subject NN ROOT
 +-- , , punct
 +-- cn NNP nsubj
 |   +-- ? . punct
 |   +-- 1 CD num
 |   +-- , , punct
 |   +-- k CD conj
 |   |   +-- k CD num
 |   |   +-- Maximize NNP nn
 |   +-- redistributed VBN dep
 |       +-- -LRB- -LRB- punct
 |       +-- the DT det
 |       +-- percentage NN nn
 |       +-- in IN prep
 |       |   +-- case NN pobj
 |       |       +-- the DT det
 |       |       +-- worst JJS amod
 |       +-- -RRB- -RRB- punct
 +-- to IN punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 1 km ? -LRB- n ? m ? 1 -RRB- cm+1 ? m km ? n Pj=m+i ? 1 j=m+1 cj + -LRB- n ? m ? i -RRB- cm+i ? m for i = 2 , .
Parse:
km NN ROOT
 +-- n CC dep
 |   +-- , , punct
 |   +-- ? . punct
 +-- 1 CD num
 +-- ? . punct
 +-- m NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- n RB amod
 |   +-- ? . punct
 |   +-- 1 CD num
 |   +-- -RRB- -RRB- punct
 |   +-- cm+1 CD num
 +-- km NN dep
 |   +-- m NN nn
 +-- cm+i NN dep
 |   +-- n UH dep
 |   |   +-- Pj=m+i SYM dep
 |   |   +-- ? . punct
 |   |   +-- cj NN dep
 |   |   |   +-- j=m+1 CD num
 |   |   |       +-- 1 CD number
 |   |   +-- + SYM dep
 |   +-- n RB dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- ? . punct
 |   +-- m NN dep
 |   +-- ? . punct
 |   +-- i PRP dep
 |       +-- -RRB- -RRB- punct
 +-- m VB dep
 +-- for IN prep
 |   +-- i PRP pobj
 |       +-- = : dep
 |           +-- 2 CD num
 +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? m ? 1 km ? n Pj=n ? 1 j=m+1 cj ? m A linear program has no solution if and only if either the objective is unbounded , or the constraints are contradictory -LRB- there is no feasible solution -RRB- .
Parse:
has VBZ ROOT
 +-- program NN nsubj
 |   +-- m NN dep
 |   |   +-- , , punct
 |   |   +-- n RB amod
 |   |   +-- ? . punct
 |   |   +-- km NN dep
 |   |       +-- 1 CD num
 |   +-- n UH dep
 |   |   +-- Pj=n NN dep
 |   |   +-- ? . punct
 |   |   +-- cj NN dep
 |   |       +-- 1 CD num
 |   |       +-- j=m+1 CD num
 |   +-- m VB dep
 |   +-- A DT det
 |   +-- linear JJ amod
 +-- solution NN dobj
 |   +-- no DT det
 +-- if IN prep
 |   +-- and CC cc
 |   +-- only RB conj
 |   +-- unbounded JJ dep
 |       +-- if IN mark
 |       +-- either CC preconj
 |       +-- objective NN nsubj
 |       |   +-- the DT det
 |       +-- is VBZ cop
 |       +-- , , punct
 |       +-- or CC cc
 |       +-- contradictory JJ conj
 |           +-- constraints NNS nsubj
 |           |   +-- the DT det
 |           +-- are VBP cop
 |           +-- is VBZ parataxis
 |               +-- -LRB- -LRB- punct
 |               +-- there EX expl
 |               +-- solution NN nsubj
 |               |   +-- no DT det
 |               |   +-- feasible JJ amod
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: It is easy to see that k is bounded above by 1 -LRB- redistributing more than 100 % violates the non deficit constraint -RRB- .
Parse:
easy JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- see VB xcomp
 |   +-- to TO aux
 |   +-- bounded VBN ccomp
 |       +-- that IN mark
 |       +-- k LS nsubjpass
 |       +-- is VBZ auxpass
 |       +-- above IN advmod
 |       +-- by IN prep
 |       |   +-- 1 CD pobj
 |       +-- redistributing VBG xcomp
 |           +-- -LRB- -LRB- punct
 |           +-- violates VBZ ccomp
 |           |   +-- % NN nsubj
 |           |   |   +-- 100 CD num
 |           |   |       +-- than IN quantmod
 |           |   |           +-- more JJR mwe
 |           |   +-- constraint NN dobj
 |           |       +-- the DT det
 |           |       +-- deficit NN nn
 |           |           +-- non FW nn
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: Also , a feasible solution always exists , for example , k = 0 and ci = 0 for all i .
Parse:
exists VBZ ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- solution NN nsubj
 |   +-- a DT det
 |   +-- feasible JJ amod
 +-- always RB advmod
 +-- for IN prep
 |   +-- example NN pobj
 +-- k CD dep
 |   +-- = SYM dep
 |   +-- 0 NFP punct
 |   +-- for IN prep
 |   |   +-- all DT pobj
 |   +-- i PRP dep
 +-- . . punct
Input: So an optimal solution always exists .
Parse:
exists VBZ ROOT
 +-- So RB advmod
 +-- solution NN nsubj
 |   +-- an DT det
 |   +-- optimal JJ amod
 +-- always RB advmod
 +-- . . punct
Input: Observe that the linear program model depends only on the number of agents n and the number of units m .
Parse:
Observe VB ROOT
 +-- depends VBZ ccomp
 |   +-- that IN mark
 |   +-- model NN nsubj
 |   |   +-- the DT det
 |   |   +-- linear JJ amod
 |   |   +-- program NN nn
 |   +-- on IN prep
 |       +-- only RB advmod
 |       +-- number NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |           |   +-- agents NNS pobj
 |           +-- n CC advmod
 |           +-- and CC cc
 |           +-- number NN conj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- units NNS pobj
 |                       +-- m CD num
 +-- . . punct
Input: Hence the optimal solution is a function of n and m .
Parse:
function NN ROOT
 +-- Hence RB advmod
 +-- solution NN nsubj
 |   +-- the DT det
 |   +-- optimal JJ amod
 +-- is VBZ cop
 +-- a DT det
 +-- of IN prep
 |   +-- n RB pobj
 |       +-- and CC cc
 |       +-- m NN conj
 +-- . . punct
Input: It turns out that this optimal solution can be analytically characterized as follows .
Parse:
turns VBZ ROOT
 +-- It PRP nsubj
 +-- out RP prt
 +-- characterized VBN ccomp
 |   +-- that IN mark
 |   +-- solution NN nsubjpass
 |   |   +-- this DT det
 |   |   +-- optimal JJ amod
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- analytically RB advmod
 |   +-- follows VBZ advcl
 |       +-- as IN mark
 +-- . . punct
Input: Theorem 1 .
Parse:
Theorem PRP ROOT
 +-- 1 CD num
 +-- . . punct
Input: For any m and n with n ? m+2 , the worstcase optimal mechanism -LRB- among linear VCG redistribution mechanisms -RRB- is unique .
Parse:
unique JJ ROOT
 +-- For IN prep
 |   +-- m NN pobj
 |       +-- any DT det
 |       +-- and CC cc
 |       +-- n FW conj
 |       +-- with IN prep
 |           +-- n NNP pobj
 |               +-- ? . punct
 |               +-- m+2 CD num
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 |   +-- worstcase NN nn
 |   +-- optimal JJ amod
 |   +-- -LRB- -LRB- punct
 |   +-- among IN prep
 |   |   +-- mechanisms NNS pobj
 |   |       +-- linear JJ amod
 |   |       +-- VCG CD num
 |   |       +-- redistribution NN nn
 |   +-- -RRB- -RRB- punct
 +-- is VBZ cop
 +-- . . punct
Input: For this mechanism , the percentage redistributed in the worst case is k ? = 1 ? `n ? 1 m ? Pn ? 1 j=m `n ? 1 j ? The worst case optimal mechanism is characterized by the following values for the ci
Parse:
k NNP ROOT
 +-- For IN prep
 |   +-- mechanism NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- percentage NN nsubj
 |   +-- the DT det
 |   +-- redistributed VBN partmod
 |       +-- in IN prep
 |           +-- case NN pobj
 |               +-- the DT det
 |               +-- worst JJS amod
 +-- is VBZ cop
 +-- ? . punct
 +-- `n NN dep
 |   +-- 1 CD num
 |   +-- j=m NN nn
 |   +-- ? . punct
 |   +-- j FW dep
 |   |   +-- 1 CD num
 |   +-- characterized VBN dep
 |       +-- mechanism NN nsubjpass
 |       |   +-- The DT det
 |       |   +-- case NN nn
 |       |   |   +-- worst JJS amod
 |       |   +-- optimal JJ amod
 |       +-- is VBZ auxpass
 |       +-- by IN prep
 |           +-- values NNS pobj
 |               +-- the DT det
 |               +-- following VBG amod
 |               +-- for IN prep
 |                   +-- ci NN pobj
 |                       +-- the DT det
 +-- Pn NN dep
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 1 .
Parse:
1 CD ROOT
 +-- , , punct
 +-- n CC advmod
 +-- ? . punct
 +-- . . punct
Input: It should be noted that we have proved ci = 0 for i ? m in Claim 1 .
Parse:
noted VBN ROOT
 +-- It PRP nsubjpass
 +-- should MD aux
 +-- be VB auxpass
 +-- proved VBN ccomp
 |   +-- that IN mark
 |   +-- we PRP nsubj
 |   +-- have VBP aux
 |   +-- ci NN dobj
 +-- = , punct
 +-- 0 NFP punct
 +-- m VBP advcl
 |   +-- for IN mark
 |   +-- i PRP nsubj
 |   +-- ? . punct
 |   +-- in IN prep
 |       +-- Claim NNP pobj
 |           +-- 1 CD num
 +-- . . punct
Input: Proof .
Parse:
Proof NNP ROOT
 +-- . . punct
Input: We first rewrite the linear program as follows .
Parse:
rewrite VBP ROOT
 +-- We PRP nsubj
 +-- first RB advmod
 +-- program NN dobj
 |   +-- the DT det
 |   +-- linear JJ amod
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct
Input: We introduce new variables xm+1 , xm+2 , .
Parse:
introduce VBP ROOT
 +-- We PRP nsubj
 +-- variables NNS dobj
 |   +-- new JJ amod
 |   +-- xm+1 CD dep
 |       +-- , , punct
 |       +-- xm+2 CD appos
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn ? 1 , defined by xj = Pj i=m+1 ci for j = m + 1 , .
Parse:
, , ROOT
 +-- xn UH dep
     +-- ? . punct
     +-- 1 CD num
     +-- , , punct
     +-- m NN appos
     |   +-- defined VBN dep
     |   |   +-- by IN prep
     |   |       +-- Pj FW pobj
     |   |           +-- xj NN nn
     |   |           +-- = SYM dep
     |   |           +-- i=m+1 CD num
     |   |           +-- ci NN dep
     |   |               +-- for IN prep
     |   |                   +-- j FW pobj
     |   +-- = SYM nn
     |   +-- + SYM dep
     |       +-- 1 CD num
     +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 1 .
Parse:
1 CD ROOT
 +-- , , punct
 +-- n CC advmod
 +-- ? . punct
 +-- . . punct
Input: The linear program then becomes
Parse:
becomes VBZ ROOT
 +-- program NN nsubj
 |   +-- The DT det
 |   +-- linear JJ amod
 +-- then RB advmod
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn ? 1 , k Maximize k Subject to
Parse:
xn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD dep
     +-- , , punct
     +-- Subject NN appos
         +-- k CD num
         +-- Maximize VB nn
         +-- to IN prep
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? m ? 1 km ? nxn ? 1 ? m xi ? 0 for i = m + 1 , m + 2 , .
Parse:
m NN ROOT
 +-- , , punct
 +-- n RB amod
 +-- ? . punct
 +-- km NN dep
 |   +-- 1 CD num
 +-- nxn UH dep
 |   +-- ? . punct
 |   +-- 1 CD num
 +-- xi NN dep
 |   +-- m NN nn
 +-- 0 NFP punct
 +-- for IN prep
 |   +-- i PRP pobj
 +-- = : punct
 +-- + SYM dep
 |   +-- m NN nn
 |   +-- 1 CD dep
 |   +-- , , punct
 |   +-- m NN appos
 |       +-- + SYM dep
 |       +-- 2 CD num
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 1 We will prove that for any optimal solution to this linear program , k = k ? .
Parse:
prove VB ROOT
 +-- , , punct
 +-- n CC cc
 +-- ? . punct
 +-- 1 CD dep
 +-- We PRP nsubj
 +-- will MD aux
 +-- k CD ccomp
 |   +-- that IN mark
 |   +-- for IN prep
 |   |   +-- solution NN pobj
 |   |       +-- any DT det
 |   |       +-- optimal JJ amod
 |   |       +-- to IN prep
 |   |           +-- program NN pobj
 |   |               +-- this DT det
 |   |               +-- linear JJ amod
 |   +-- , , punct
 |   +-- = SYM dep
 |   |   +-- k CD num
 |   +-- ? . punct
 +-- . . punct
Input: Moreover , we will prove that when k = k ? , xj = Pj i=m+1 c ? i for j = m + 1 , .
Parse:
prove VB ROOT
 +-- Moreover RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- will MD aux
 +-- that IN prep
     +-- when WRB dep
         +-- k NN pobj
             +-- k NN nn
             +-- = SYM nn
             +-- ? . punct
             +-- , , punct
             +-- xj NFP conj
             +-- = SYM dep
             +-- Pj SYM dep
             +-- c NN dep
             |   +-- i=m+1 CD num
             +-- i PRP dep
                 +-- for IN prep
                 |   +-- m NN pobj
                 |       +-- j FW nn
                 |       +-- = SYM nn
                 +-- + SYM dep
                 |   +-- 1 CD num
                 +-- , , punct
                 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 1 .
Parse:
1 CD ROOT
 +-- , , punct
 +-- n CC advmod
 +-- ? . punct
 +-- . . punct
Input: This will prove the theorem .
Parse:
prove VB ROOT
 +-- This DT nsubj
 +-- will MD aux
 +-- theorem NN dobj
 |   +-- the DT det
 +-- . . punct
Input: We first make the following observations
Parse:
make VBP ROOT
 +-- We PRP nsubj
 +-- first RB advmod
 +-- observations NNS dobj
     +-- the DT det
     +-- following VBG amod
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 2 , ic ? i + -LRB- n ? i ? 1 -RRB- c ? i+1 = i -LRB- ? 1 -RRB- i+m ? 1 -LRB- n ? m -RRB- -LRB- n ? 1 m ? 1 -RRB- i Pn ? 1 j=m -LRB- n ? 1 j -RRB- 1 -LRB- n ? 1 i -RRB- Pn ? 1 j=i `n ? 1 j ? + -LRB- n ? i ? 1 -RRB- -LRB- ? 1 -RRB- i+m -LRB- n ? m -RRB- -LRB- n ? 1 m ? 1 -RRB- -LRB- i+1 -RRB- Pn ? 1 j=m -LRB- n ? 1 j -RRB- 1 -LRB- n ? 1 i+1 -RRB- Pn ? 1 j=i+1 `n ? 1 j ? = -LRB- ? 1 -RRB- i+m ? 1 -LRB- n ? m -RRB- -LRB- n ? 1 m ? 1 -RRB- Pn ? 1 j=m -LRB- n ? 1 j -RRB- 1 -LRB- n ? 1 i -RRB- Pn ? 1 j=i `n ? 1 j ? ? -LRB- n ? i ? 1 -RRB- -LRB- ? 1 -RRB- i+m ? 1 -LRB- n ? m -RRB- -LRB- n ? 1 m ? 1 -RRB- -LRB- i+1 -RRB- Pn ? 1 j=m -LRB- n ? 1 j -RRB- i+1 -LRB- n ? 1 i -RRB- -LRB- n ? i ? 1 -RRB- Pn ? 1 j=i+1 `n ? 1 j ? = -LRB- ? 1 -RRB- i+m ? 1 -LRB- n ? m -RRB- -LRB- n ? 1 m ? 1 -RRB- Pn ? 1 j=m -LRB- n ? 1 j -RRB- = -LRB- ? 1 -RRB- i+m ? 1 m -LRB- 1 ? k ? -RRB- Finally , -LRB- n ? 1 -RRB- c ? n ? 1 = -LRB- n ? 1 -RRB- -LRB- ? 1 -RRB- n+m -LRB- n ? m -RRB- -LRB- n ? 1 m ? 1 -RRB- -LRB- n ? 1 -RRB- Pn ? 1 j=m -LRB- n ? 1 j -RRB- 1 -LRB- n ? 1 n ? 1 -RRB- Pn ? 1 j=n ? 1 `n ? 1 j ? = -LRB- ? 1 -RRB- m+n m -LRB- 1 ? k ? -RRB- Summarizing the above , we have
Parse:
1 CD ROOT
 +-- Pn VBD dep
 |   +-- c NN dep
 |   |   +-- 2 CD dep
 |   |   |   +-- n CC dep
 |   |   |   |   +-- , , punct
 |   |   |   |   +-- ? . punct
 |   |   |   +-- , , punct
 |   |   |   +-- ic NNP appos
 |   |   |   +-- ? . punct
 |   |   +-- i PRP dep
 |   |   |   +-- ? . punct
 |   |   +-- 1 CD dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- ? . punct
 |   |   +-- i+1 CD dep
 |   |   |   +-- = NFP prep
 |   |   |   |   +-- i PRP pobj
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- ? . punct
 |   |   |   +-- i+m SYM dep
 |   |   |   |   +-- 1 LS dep
 |   |   |   |       +-- -RRB- -RRB- punct
 |   |   |   +-- m NN dep
 |   |   |       +-- 1 CD num
 |   |   |       +-- -LRB- -LRB- punct
 |   |   |       +-- n RB amod
 |   |   |       +-- ? . punct
 |   |   +-- -RRB- -RRB- punct
 |   +-- m NN parataxis
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- n RB amod
 |   |   +-- ? . punct
 |   |   +-- 1 CD num
 |   |   +-- -RRB- -RRB- punct
 |   +-- i PRP nsubj
 |   +-- ? . punct
 +-- Pn NNP dep
 |   +-- j=m UH dep
 |   |   +-- 1 CD num
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- j SYM dep
 |   |   |   +-- n RB dep
 |   |   |   |   +-- ? . punct
 |   |   |   +-- 1 CD num
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- 1 CD dep
 |   |   +-- Pn NN dep
 |   |   |   +-- n RB dep
 |   |   |       +-- -LRB- -LRB- punct
 |   |   |       +-- ? . punct
 |   |   |       +-- i PRP pobj
 |   |   |       |   +-- 1 CD num
 |   |   |       +-- -RRB- -RRB- punct
 |   |   +-- ? . punct
 |   |   +-- `n NN dep
 |   |   |   +-- 1 CD num
 |   |   |   +-- j=i FW nn
 |   |   |   +-- ? . punct
 |   |   |   +-- j SYM dep
 |   |   |   |   +-- 1 CD num
 |   |   |   +-- ? , punct
 |   |   |   +-- + SYM dep
 |   |   +-- n RB dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- ? . punct
 |   |   |   +-- i PRP dep
 |   |   |   |   +-- ? . punct
 |   |   |   |   +-- 1 CD dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- i+m NN dep
 |   |       +-- 1 CD dep
 |   |       |   +-- ? . punct
 |   |       |   +-- -RRB- -RRB- punct
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- n RB advmod
 |   |       +-- ? . punct
 |   |       +-- m NN dobj
 |   +-- n RB dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- ? . punct
 |   |   +-- m NN dep
 |   |   |   +-- 1 CD num
 |   |   |   +-- ? . punct
 |   |   +-- -RRB- -RRB- punct
 |   +-- -LRB- -LRB- punct
 |   +-- i+1 CD nn
 |   +-- -RRB- -RRB- punct
 |   +-- ? . punct
 |   +-- Pn NNP dep
 |   |   +-- Pn NN dep
 |   |   |   +-- j=m FW nn
 |   |   |   |   +-- 1 CD num
 |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   |   +-- n RB advmod
 |   |   |   |   +-- ? . punct
 |   |   |   |   +-- j SYM dep
 |   |   |   |   |   +-- 1 CD num
 |   |   |   |   +-- -RRB- -RRB- punct
 |   |   |   |   +-- 1 CD dep
 |   |   |   |   +-- i+1 CD dep
 |   |   |   |       +-- 1 CD number
 |   |   |   +-- ? . punct
 |   |   |   +-- `n NN dep
 |   |   |   |   +-- 1 CD num
 |   |   |   |   +-- j=i FW nn
 |   |   |   +-- j SYM dep
 |   |   |   |   +-- 1 CD num
 |   |   |   +-- = SYM dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- i+m SYM dep
 |   |   |   |   +-- 1 CD dep
 |   |   |   |       +-- -RRB- -RRB- punct
 |   |   |   +-- 1 CD dep
 |   |   |   +-- n RB advmod
 |   |   |   |   +-- ? . prep
 |   |   |   |       +-- m NN pobj
 |   |   |   +-- -RRB- -RRB- punct
 |   |   |   +-- Pn NN dep
 |   |   |   |   +-- i PRP dep
 |   |   |   |       +-- 1 CD num
 |   |   |   |       +-- -RRB- -RRB- punct
 |   |   |   +-- j=m FW dep
 |   |   |   |   +-- 1 CD num
 |   |   |   +-- j NN dep
 |   |   |   |   +-- 1 CD num
 |   |   |   +-- ? , punct
 |   |   |   +-- n RB dep
 |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   |   +-- ? . punct
 |   |   |   |   +-- i PRP dep
 |   |   |   |   |   +-- ? . punct
 |   |   |   |   |   +-- 1 CD dep
 |   |   |   |   +-- -RRB- -RRB- punct
 |   |   |   +-- m NN dep
 |   |   |       +-- n RB dep
 |   |   |       |   +-- ? . punct
 |   |   |       +-- 1 CD num
 |   |   |       +-- ? . punct
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- i+1 CD nn
 |   |   +-- -RRB- -RRB- punct
 |   +-- j=m FW dep
 |   |   +-- 1 CD num
 |   |   +-- n RB appos
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- ? . punct
 |   |       +-- j , pobj
 |   |       |   +-- 1 CD num
 |   |       +-- -RRB- -RRB- punct
 |   +-- = SYM punct
 |   +-- i+m SYM dep
 |   |   +-- 1 CD dep
 |   |       +-- -RRB- -RRB- punct
 |   +-- 1 CD num
 |   +-- n RB prep
 |   |   +-- ? . punct
 |   |   +-- m NN pobj
 |   +-- Pn NN dep
 |   |   +-- m NN dep
 |   |       +-- n RB dep
 |   |       |   +-- ? . punct
 |   |       +-- 1 CD num
 |   |       +-- ? . punct
 |   |       +-- -RRB- -RRB- punct
 |   +-- i+m NN dep
 |   |   +-- 1 LS dep
 |   |       +-- -RRB- -RRB- punct
 |   +-- k NN dep
 |   |   +-- m NN dep
 |   |   |   +-- 1 CD num
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- ? . punct
 |   |   +-- ? . punct
 |   +-- Finally RB advmod
 |       +-- , , punct
 |       +-- c NN appos
 |           +-- -LRB- -LRB- punct
 |           +-- n RB advmod
 |           +-- ? . punct
 |           +-- 1 CD dep
 |           |   +-- -RRB- -RRB- punct
 |           +-- n CC prep
 |           |   +-- ? . punct
 |           |   +-- 1 CD dep
 |           |       +-- 1 CD number
 |           |       +-- = SYM dep
 |           |       +-- -LRB- -LRB- punct
 |           |       +-- n RB dep
 |           |           +-- ? . punct
 |           +-- -RRB- -RRB- punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- n+m NN dep
 +-- -LRB- -LRB- punct
 +-- m NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- n RB advmod
 |   +-- ? . punct
 |   +-- 1 CD num
 |   +-- -RRB- -RRB- punct
 +-- Pn NN dep
 |   +-- n RB dep
 |   +-- ? . punct
 |   +-- 1 LS dep
 |       +-- -RRB- -RRB- punct
 +-- j=m FW dep
 |   +-- 1 CD num
 +-- n RB dep
 |   +-- -LRB- -LRB- punct
 |   +-- ? . punct
 |   +-- j SYM pobj
 |   |   +-- 1 CD num
 |   +-- -RRB- -RRB- punct
 +-- 1 CD dep
 +-- have VBP dep
     +-- n RB dep
     |   +-- ? . punct
     +-- 1 CD dep
     +-- n CC dep
     +-- ? . punct
     +-- Pn NN ccomp
     |   +-- 1 CD dep
     |   |   +-- -RRB- -RRB- punct
     |   +-- ? . punct
     |   +-- j=n NN dep
     |       +-- 1 CD num
     |       +-- ? . punct
     |       +-- `n NN dep
     |       |   +-- 1 CD num
     |       +-- j SYM dep
     |       |   +-- 1 CD num
     |       +-- = SYM dep
     |       +-- -LRB- -LRB- punct
     |       +-- 1 LS dep
     |       |   +-- -RRB- -RRB- punct
     |       +-- m NN dep
     |       |   +-- m+n SYM nn
     |       +-- Summarizing VBG dep
     |           +-- 1 CD dep
     |           |   +-- -LRB- -LRB- punct
     |           |   +-- ? . punct
     |           |   +-- k NN dep
     |           |   +-- -RRB- -RRB- punct
     |           +-- above JJ advmod
     |               +-- the DT det
     +-- , , punct
     +-- we PRP nsubj
Input: 35 -LRB- n ? 3 -RRB- c ? n ? 3 + 2c ? n ? 2 = -LRB- ? 1 -RRB- m+n ? 2 m -LRB- 1 ? k ? -RRB- -LRB- n ? 2 -RRB- c ? n ? 2 + c ? n ? 1 = -LRB- ? 1 -RRB- m+n ? 1 m -LRB- 1 ? k ? -RRB- -LRB- n ? 1 -RRB- c ? n ? 1 = -LRB- ? 1 -RRB- m+n m -LRB- 1 ? k ? -RRB- Let x ? j = Pj i=m+1 c ? i for j = m + 1 , m + 2 , .
Parse:
c NN ROOT
 +-- 2 CD dep
 |   +-- 35 CD dep
 |   |   +-- 3 CD dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- n RB dep
 |   |   |   +-- ? . punct
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- c NN dep
 |   |   +-- ? . punct
 |   |   +-- n CC cc
 |   |   +-- 2c CD conj
 |   |   |   +-- 3 CD num
 |   |   |   +-- + SYM dep
 |   |   +-- m+n NN dep
 |   |   |   +-- = SYM nn
 |   |   |   |   +-- 2 CD num
 |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   |   +-- ? . punct
 |   |   |   |   +-- 1 CD num
 |   |   |   |   +-- -RRB- -RRB- punct
 |   |   |   +-- ? . punct
 |   |   |   +-- m NN dep
 |   |   |       +-- 2 CD num
 |   |   |       +-- -LRB- -LRB- punct
 |   |   |       +-- 1 CD num
 |   |   |       +-- ? . punct
 |   |   |       +-- k NN num
 |   |   +-- -RRB- -RRB- punct
 |   +-- -LRB- -LRB- punct
 |   +-- n RB dep
 |   +-- ? . punct
 |   +-- -RRB- -RRB- punct
 +-- ? . punct
 +-- n CC cc
 +-- c NN conj
 |   +-- 2 CD num
 |   +-- + SYM nn
 +-- = SYM dep
 |   +-- 1 CD num
 +-- -LRB- -LRB- punct
 +-- m+n NN dep
 |   +-- 1 LS dep
 |       +-- -RRB- -RRB- punct
 +-- m NN dep
 |   +-- m+n SYM nn
 +-- k NN dep
 |   +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- n RB dep
 |   +-- -LRB- -LRB- punct
 |   +-- ? . punct
 |   +-- 1 CD dep
 |   +-- -RRB- -RRB- punct
 +-- c NN dep
 +-- = SYM conj
 |   +-- 1 CD num
 |   +-- -LRB- -LRB- punct
 |   +-- ? . punct
 |   +-- 1 LS dep
 |   +-- -RRB- -RRB- punct
 +-- Let VB dep
     +-- 1 CD dep
     |   +-- -LRB- -LRB- punct
     |   +-- ? . punct
     |   +-- k NN dep
     |   +-- -RRB- -RRB- punct
     +-- x NN dep
         +-- ? . punct
         +-- c NN dep
             +-- j SYM nn
             +-- = SYM nn
             +-- Pj SYM amod
             +-- i=m+1 CD num
             +-- ? . punct
             +-- i PRP dep
                 +-- for IN prep
                 |   +-- m NN pobj
                 |       +-- j FW nn
                 |       +-- = SYM dep
                 |       +-- + SYM prep
                 |           +-- 1 CD dep
                 +-- , , punct
                 +-- m NN appos
                 |   +-- + SYM dep
                 |   +-- 2 CD num
                 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 1 , the first equation in the above tells us that -LRB- n ? m ? 1 -RRB- x ? m+1 = k ? m .
Parse:
tells VBZ ROOT
 +-- , , punct
 +-- n CC prep
 |   +-- ? . punct
 |   +-- 1 CD pobj
 +-- equation NN nsubj
 |   +-- the DT det
 |   +-- first JJ amod
 |   +-- in IN prep
 |       +-- above JJ pobj
 |           +-- the DT det
 +-- us PRP dobj
 +-- k CD ccomp
 |   +-- that IN mark
 |   +-- m NN dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- n RB advmod
 |   |   +-- ? . punct
 |   |   +-- 1 CD num
 |   |   +-- -RRB- -RRB- punct
 |   +-- x SYM dep
 |   |   +-- ? . punct
 |   +-- m+1 CD num
 |   +-- = NFP dep
 |   +-- ? . punct
 |   +-- m NN punct
 +-- . . punct
Input: By adding the first two equations , we get -LRB- m + 2 -RRB- x ? m+1 + -LRB- n ? m ? 2 -RRB- x ? m+2 = m By adding the first three equations , we get -LRB- m + 3 -RRB- x ? m+2 + -LRB- n ? m ? 3 -RRB- x ? m+3 = k ? m By adding the first i equations , where i = 2 , .
Parse:
get VBP ROOT
 +-- By IN prep
 |   +-- adding VBG pcomp
 |       +-- equations NNS dobj
 |           +-- the DT det
 |           +-- first JJ amod
 |           +-- three CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- m NNP dobj
 |   +-- -LRB- -LRB- punct
 |   +-- + SYM dep
 |   +-- -RRB- -RRB- punct
 |   +-- x SYM punct
 |   +-- ? . punct
 |   +-- m+1 CD num
 |   +-- m NN appos
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- n RB amod
 |   |   +-- ? . punct
 |   |   +-- 2 CD num
 |   |   +-- -RRB- -RRB- punct
 |   +-- m+2 CD num
 |   +-- m NN dep
 |       +-- = : nn
 +-- get VBP ccomp
 |   +-- we PRP nsubj
 |   +-- k CD dep
 |   |   +-- m NNP dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- + SYM dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   |   +-- x SYM punct
 |   |   |   +-- ? . punct
 |   |   |   +-- m+2 CD num
 |   |   |   +-- n RB advmod
 |   |   |   +-- m NN num
 |   |   |   +-- 3 CD num
 |   |   +-- x SYM dep
 |   |   |   +-- ? . punct
 |   |   +-- m+3 CD number
 |   |   +-- = NFP dep
 |   +-- ? . punct
 |   +-- m NN dobj
 |   +-- By IN prep
 |       +-- adding VBG pcomp
 |           +-- equations NNS dobj
 |               +-- the DT det
 |               +-- first JJ amod
 |               +-- i PRP nn
 |               +-- , , punct
 |               +-- = VBP rcmod
 |                   +-- where WRB advmod
 |                   +-- i PRP nsubj
 |                   +-- 2 CD dobj
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? m ? 1 , we get -LRB- m + i -RRB- x ? m+i ? 1 + -LRB- n ? m ? i -RRB- x ? m+i = m if i is even -LRB- m + i -RRB- x ? m+i ? 1 + -LRB- n ? m ? i -RRB- x ? m+i = k ? m if i is odd Finally by adding all the equations , we get nx ? n ? 1 = m if n ? m is even ; nx ? n ? 1 = k ? m if n ? m is odd .
Parse:
m NN ROOT
 +-- , , punct
 +-- n RB amod
 +-- ? . punct
 +-- 1 CD num
 +-- get VBP dep
 |   +-- we PRP nsubj
 |   +-- m NNP parataxis
 |       +-- -LRB- -LRB- punct
 |       +-- + SYM pobj
 |       +-- i NNP dep
 |       +-- -RRB- -RRB- punct
 +-- x SYM dep
 +-- m+i SYM dep
 |   +-- ? . punct
 |   +-- 1 CD num
 +-- + SYM dep
 +-- m NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- n RB amod
 |   +-- ? . punct
 |   +-- i NNP dep
 |   +-- -RRB- -RRB- punct
 +-- x SYM punct
 +-- m+i NFP punct
 +-- = NFP punct
 +-- m VBN prep
 |   +-- is VBZ pcomp
 |       +-- if IN mark
 |       +-- i PRP nsubj
 |       +-- even RB advmod
 |       +-- m NNP parataxis
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- + SYM pobj
 |       |   +-- i NNP dep
 |       |   +-- -RRB- -RRB- punct
 |       |   +-- x SYM dep
 |       |   |   +-- ? . punct
 |       |   +-- m+i SYM dep
 |       |   |   +-- ? . punct
 |       |   +-- 1 CD num
 |       |   +-- + SYM dep
 |       |   +-- m NN dep
 |       |   |   +-- -LRB- -LRB- punct
 |       |   |   +-- n RB amod
 |       |   |   +-- ? . punct
 |       |   +-- ? . punct
 |       +-- n RB advmod
 |       |   +-- x SYM dep
 |       |   |   +-- ? . punct
 |       |   +-- k CD dep
 |       |   |   +-- m+i SYM nn
 |       |   |   +-- = NFP dep
 |       |   |   +-- ? . punct
 |       |   |   +-- get VBP dep
 |       |   |   |   +-- odd JJ advcl
 |       |   |   |   |   +-- m NN dep
 |       |   |   |   |   +-- if IN mark
 |       |   |   |   |   +-- i PRP nsubj
 |       |   |   |   |   +-- is VBZ cop
 |       |   |   |   |   +-- Finally RB advmod
 |       |   |   |   |   +-- by IN prep
 |       |   |   |   |       +-- adding VBG pcomp
 |       |   |   |   |           +-- equations NNS dobj
 |       |   |   |   |               +-- all PDT predet
 |       |   |   |   |               +-- the DT det
 |       |   |   |   +-- , , punct
 |       |   |   |   +-- we PRP nsubj
 |       |   |   |   +-- nx NNP dobj
 |       |   |   +-- n CC cc
 |       |   +-- m NN dep
 |       |   |   +-- 1 CD num
 |       |   |   +-- = SYM amod
 |       |   +-- if IN mark
 |       +-- ? . punct
 |       +-- is VBZ dep
 |           +-- m NN nsubj
 |           +-- even RB advmod
 |           +-- ; : punct
 |           +-- odd JJ parataxis
 |               +-- nx NNP nsubj
 |               |   +-- ? . punct
 |               |   +-- n CC cc
 |               |   +-- k CD conj
 |               |       +-- 1 CD num
 |               |       +-- = SYM dep
 |               +-- n FW dep
 |               |   +-- m NN dep
 |               |   +-- if IN mark
 |               |   +-- ? . punct
 |               +-- m NN nsubj
 |               +-- is VBZ cop
 +-- . . punct
Input: Thus , for all of the constraints other than the nonnegativity constraints , we have shown that they are satisfied by setting xj = x ? j = Pj i=m+1 c ? i and k = k ? .
Parse:
shown VBN ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- for IN prep
 |   +-- all DT pobj
 |       +-- of IN prep
 |           +-- constraints NNS pobj
 |               +-- the DT det
 |               +-- other JJ amod
 |                   +-- than IN prep
 |                       +-- constraints NNS pobj
 |                           +-- the DT det
 |                           +-- nonnegativity NN nn
 +-- we PRP nsubj
 +-- have VBP aux
 +-- satisfied JJ ccomp
 |   +-- that IN mark
 |   +-- they PRP nsubj
 |   +-- are VBP cop
 |   +-- by IN prep
 |       +-- setting VBG pcomp
 |           +-- xj . dobj
 |           +-- x SYM prep
 |               +-- = SYM dep
 |               +-- ? . punct
 |               +-- j UH dep
 |                   +-- = SYM dep
 |                   +-- Pj SYM dep
 |                   +-- i=m+1 CD dep
 |                   +-- c NN dep
 |                   +-- ? . punct
 |                   +-- i PRP dep
 |                       +-- and CC cc
 |                       +-- k CD conj
 |                       +-- = SYM dep
 |                       |   +-- k CD num
 |                       +-- ? . punct
 +-- . . punct
Input: We next show that the nonnegativity constraints are satisfied by these settings as well .
Parse:
show NN ROOT
 +-- We PRP nsubj
 +-- next JJ advmod
 +-- satisfied JJ ccomp
 |   +-- that IN mark
 |   +-- constraints NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- nonnegativity NN nn
 |   +-- are VBP auxpass
 |   +-- by IN prep
 |   |   +-- settings NNS pobj
 |   |       +-- these DT det
 |   +-- well RB advmod
 |       +-- as RB advmod
 +-- . . punct
Input: For m + 1 ? i , i + 1 ? n ? 1 , we have 1 i Pn ? 1 j=i -LRB- n ? 1 j -RRB- -LRB- n ? 1 i -RRB- = 1 i Pn ? 1 j=i i ! -LRB- n ? 1 ? i -RRB- ! j ! -LRB- n ? 1 ? j -RRB- ! ? 1 i+1 Pn ? 2 j=i i ! -LRB- n ? 1 ? i -RRB- ! j ! -LRB- n ? 1 ? j -RRB- ! ? 1 i+1 Pn ? 2 j=i -LRB- i+1 -RRB- ! -LRB- n ? 1 ? i ? 1 -RRB- ! -LRB- j+1 -RRB- ! -LRB- n ? 1 ? j ? 1 -RRB- ! = 1 i+1 Pn ? 1 j=i+1 -LRB- n ? 1 j -RRB- -LRB- n ? 1 i+1 -RRB- This implies that the absolute value of c ? i is decreasing as i increases -LRB- if the c ? contains more than one number -RRB- .
Parse:
+ VBD ROOT
 +-- For IN prep
 |   +-- m NN pobj
 |       +-- + SYM dep
 |       +-- 1 CD num
 +-- ? . punct
 +-- i UH discourse
 +-- , , punct
 +-- i PRP nsubj
 +-- 1 CD dobj
 +-- n CC cc
 +-- have VBP conj
 |   +-- 1 CD nsubj
 |   +-- , , punct
 |   +-- we PRP nsubj
 |   +-- Pn NN dobj
 |       +-- 1 CD num
 |       +-- i PRP nn
 |       +-- ? . punct
 |       +-- j=i UH dep
 |       |   +-- 1 CD num
 |       |   +-- n RB dep
 |       |   |   +-- -LRB- -LRB- punct
 |       |   |   +-- ? . punct
 |       |   |   +-- j UH dep
 |       |   |   |   +-- 1 CD dep
 |       |   |   |   +-- ? . punct
 |       |   |   +-- -RRB- -RRB- punct
 |       |   +-- Pn NNP dep
 |       |   |   +-- = VBP dep
 |       |   |   |   +-- 1 CD num
 |       |   |   +-- i PRP dep
 |       |   +-- ? . punct
 |       |   +-- j=i , dep
 |       |   |   +-- 2 CD num
 |       |   |   +-- i PRP dep
 |       |   +-- ! . punct
 |       |   +-- ! , punct
 |       |   +-- j UH dep
 |       |   +-- Pn NN dep
 |       |   |   +-- i+1 CD num
 |       |   |   |   +-- 1 CD number
 |       |   |   +-- ? . punct
 |       |   |   +-- i+1 CD dep
 |       |   |       +-- 2 CD num
 |       |   |       +-- j=i UH nn
 |       |   |       +-- -LRB- -LRB- punct
 |       |   +-- -RRB- -RRB- punct
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- i PRP dep
 |       |   |   +-- n RB dep
 |       |   |   |   +-- ? . punct
 |       |   |   +-- 1 CD dep
 |       |   |   +-- ? , punct
 |       |   +-- j+1 CD dep
 |       +-- ! . punct
 |       +-- Pn NN dep
 |       |   +-- = SYM nn
 |       |       +-- i+1 CD num
 |       |           +-- 1 CD number
 |       +-- j=i+1 CD dep
 |           +-- 1 CD num
 |           |   +-- n RB quantmod
 |           |       +-- ? . punct
 |           +-- -LRB- -LRB- punct
 |           +-- j SYM dep
 |           +-- -RRB- -RRB- punct
 |           +-- n RB advmod
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- ? . punct
 |           |   +-- i+1 CD pobj
 |           |   |   +-- 1 CD num
 |           |   +-- -RRB- -RRB- punct
 |           +-- implies VBZ rcmod
 |               +-- This DT nsubj
 |               +-- decreasing VBG ccomp
 |                   +-- that IN mark
 |                   +-- value NN nsubj
 |                   |   +-- the DT det
 |                   |   +-- absolute JJ amod
 |                   |   +-- of IN prep
 |                   |       +-- c NN pobj
 |                   +-- ? . punct
 |                   +-- i PRP nsubj
 |                   +-- is VBZ aux
 |                   +-- increases VBZ advcl
 |                       +-- as IN mark
 |                       +-- i PRP nsubj
 |                       +-- -LRB- -LRB- punct
 |                       +-- c NN advcl
 |                       |   +-- if IN mark
 |                       |   +-- the DT det
 |                       |   +-- ? . punct
 |                       |   +-- contains VBZ dep
 |                       |       +-- number NN dobj
 |                       |           +-- one CD num
 |                       |               +-- than IN quantmod
 |                       |                   +-- more JJR mwe
 |                       +-- -RRB- -RRB- punct
 +-- . . punct
Input: We further observe that the sign of c ? i alternates , with the first element c ? m+1 positive .
Parse:
observe VBP ROOT
 +-- We PRP nsubj
 +-- further RB advmod
 +-- alternates VBZ ccomp
 |   +-- that IN mark
 |   +-- sign NN dep
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- c NN pobj
 |   |   +-- ? . punct
 |   +-- i PRP nsubj
 |   +-- , , punct
 |   +-- with IN prep
 |       +-- c NN pobj
 |           +-- the DT det
 |           +-- first JJ amod
 |           +-- element NN nn
 |           +-- ? . punct
 |           +-- positive JJ amod
 |               +-- m+1 CD number
 +-- . . punct
Input: So x ? j = Pj i=m+1 c ? i ? 0 for all j .
Parse:
x LS ROOT
 +-- So RB dep
 +-- ? . punct
 +-- j UH dep
 |   +-- = SYM dep
 |   +-- Pj SYM dep
 |   +-- c NN dep
 |   |   +-- i=m+1 CD nn
 |   +-- ? . punct
 |   +-- i PRP dep
 |   +-- ? , punct
 |   +-- 0 NFP punct
 |   +-- for IN prep
 |       +-- j NN pobj
 |           +-- all DT det
 +-- . . punct
Input: Thus , we have shown that these xi = x ? i together with k = k ? form a feasible solution of the linear program .
Parse:
shown VBN ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- have VBP aux
 +-- x SYM ccomp
 |   +-- that IN mark
 |   +-- xi NN nsubj
 |   |   +-- these DT det
 |   +-- = : punct
 |   +-- ? . punct
 |   +-- form VB parataxis
 |       +-- i PRP nsubj
 |       |   +-- together RB advmod
 |       |   +-- with IN prep
 |       |   |   +-- k NN pobj
 |       |   |       +-- k CD num
 |       |   |       +-- = , nn
 |       |   +-- ? . punct
 |       +-- solution NN dobj
 |           +-- a DT det
 |           +-- feasible JJ amod
 |           +-- of IN prep
 |               +-- program NN pobj
 |                   +-- the DT det
 |                   +-- linear JJ amod
 +-- . . punct
Input: We proceed to show that it is in fact the unique optimal solution .
Parse:
proceed VBP ROOT
 +-- We PRP nsubj
 +-- show VB xcomp
 |   +-- to TO aux
 |   +-- solution NN ccomp
 |       +-- that IN mark
 |       +-- it PRP nsubj
 |       +-- is VBZ cop
 |       +-- in IN prep
 |       |   +-- fact NN pobj
 |       +-- the DT det
 |       +-- unique JJ amod
 |       +-- optimal JJ amod
 +-- . . punct
Input: First we prove the following claim
Parse:
prove VBP ROOT
 +-- First RB advmod
 +-- we PRP nsubj
 +-- claim NN dobj
     +-- the DT det
     +-- following VBG amod
Input: If ? k , ? xi , i = m + 1 , m + 2 , .
Parse:
If IN ROOT
 +-- ? . punct
 +-- m NN dep
 |   +-- = VBD amod
 |   |   +-- k CD dep
 |   |   |   +-- , , punct
 |   |   |   +-- ? . punct
 |   |   +-- xi UH discourse
 |   |   +-- , , punct
 |   |   +-- i PRP nsubj
 |   +-- + SYM dep
 |   |   +-- m NN nn
 |   |   +-- 2 CD num
 |   +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? 1 satisfy the following inequalities
Parse:
satisfy VB ROOT
 +-- , , punct
 +-- n CC advmod
 +-- ? . punct
 +-- 1 CD nsubj
 +-- inequalities NNS dobj
     +-- the DT det
     +-- following VBG amod
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , n ? m ? 1 ? km ? n ? xn ? 1 ? m ? k ? k ? Then we must have that ? xi = ? x ? i and ? k = k ? .
Parse:
k NN ROOT
 +-- m VB dep
 |   +-- n RB dep
 |   |   +-- , , punct
 |   |   +-- ? . punct
 |   |   +-- m NN dep
 |   |   |   +-- ? . punct
 |   |   |   +-- 1 CD num
 |   |   +-- km NN dep
 |   |   +-- ? , punct
 |   |   +-- n UH discourse
 |   |   +-- xn UH discourse
 |   +-- 1 CD dep
 |   |   +-- ? . punct
 |   +-- ? . punct
 +-- ? . punct
 +-- k NN dep
 +-- ? , punct
 +-- have VB dep
 |   +-- Then RB advmod
 |   +-- we PRP nsubj
 |   +-- must MD aux
 |   +-- that DT dobj
 +-- xi NN dep
 +-- = SYM dep
 +-- x NFP punct
 +-- i PRP dep
 |   +-- and CC cc
 |   +-- ? . punct
 |   +-- k CD conj
 |       +-- k NN nn
 |       +-- = SYM dep
 +-- . . punct
Input: Proof of claim .
Parse:
Proof NN ROOT
 +-- of IN prep
 |   +-- claim NN pobj
 +-- . . punct
Input: Consider the first inequality .
Parse:
Consider VB ROOT
 +-- inequality NN dobj
 |   +-- the DT det
 |   +-- first JJ amod
 +-- . . punct
Input: We know that -LRB- n ? m ? 1 -RRB- x ? m+1 = k ? m , so -LRB- n ? m ? 1 -RRB- ? xm+1 ? ? km ? k ? m = -LRB- n ? m ? 1 -RRB- x ? m+1 .
Parse:
know VBP ROOT
 +-- We PRP nsubj
 +-- k CD ccomp
 |   +-- that IN mark
 |   +-- m NN dep
 |   |   +-- m NN nn
 |   |   +-- = SYM dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- n RB dep
 |   |   +-- ? . punct
 |   +-- x SYM dep
 |   |   +-- ? . punct
 |   +-- m+1 CD num
 |   +-- = NFP dep
 |   +-- ? . punct
 |   +-- , , punct
 |   +-- n RB advmod
 |   |   +-- so RB advmod
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- ? . punct
 |   |   +-- m NN pobj
 |   |   |   +-- ? . punct
 |   |   |   +-- 1 CD num
 |   |   +-- -RRB- -RRB- punct
 |   +-- xm+1 CD num
 |   +-- ? , punct
 |   +-- km NN dep
 |   |   +-- ? . punct
 |   |   +-- k CD num
 |   +-- 1 CD num
 |   +-- -RRB- -RRB- punct
 |   +-- x SYM cc
 |   +-- m+1 CD conj
 +-- . . punct
Input: It follows that ? xm+1 ? x ? m+1 -LRB- n ? m ? 1 = 0 -RRB- .
Parse:
follows VBZ ROOT
 +-- It PRP nsubj
 +-- that DT dobj
 |   +-- ? . punct
 |   +-- xm+1 CD dep
 |   +-- x SYM advmod
 |   +-- ? , punct
 |   +-- m+1 CD dep
 |       +-- m NN appos
 |           +-- -LRB- -LRB- punct
 |           +-- n RB advmod
 |           +-- ? . punct
 |           +-- 1 CD num
 |           +-- = SYM dep
 |           +-- 0 CD num
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: Now , consider the next inequality for i = 2 .
Parse:
consider VB ROOT
 +-- Now RB advmod
 +-- , , punct
 +-- = VBD ccomp
 |   +-- inequality NN nsubj
 |   |   +-- the DT det
 |   |   +-- next JJ amod
 |   |   +-- for IN prep
 |   |       +-- i PRP pobj
 |   +-- 2 CD dobj
 +-- . . punct
Input: We know that -LRB- m + 2 -RRB- x ? m+1 + -LRB- n ? m ? 2 -RRB- x ? m+2 = m .
Parse:
know VBP ROOT
 +-- We PRP nsubj
 +-- m NN ccomp
 |   +-- that IN mark
 |   +-- m NNP dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- + SYM dep
 |   |   |   +-- 2 CD num
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- x SYM prep
 |   |   |   +-- ? . punct
 |   |   |   +-- m+1 CD pobj
 |   |   +-- m NN dep
 |   |   |   +-- + SYM dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- n RB dep
 |   |   |   +-- ? . punct
 |   |   |   +-- 2 CD dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- x SYM punct
 |   |   +-- ? . punct
 |   +-- m+2 CD num
 |   +-- = NFP punct
 +-- . . punct
Input: It follows that -LRB- n ? m ? 2 -RRB- ? xm+2 ? m ? -LRB- m+2 -RRB- ? xm+1 ? m ? -LRB- m+2 -RRB- x ? m+1 = -LRB- n ? m ? 2 -RRB- x ? m+2 , so ? xm+2 ? x ? m+2 -LRB- i = 2 ? n ? m ? 1 ? n ? m ? 2 = 0 -RRB- .
Parse:
follows VBZ ROOT
 +-- It PRP nsubj
 +-- m+2 CD dobj
 |   +-- 2 CD dep
 |   |   +-- m NN dep
 |   |   |   +-- that IN dep
 |   |   |   |   +-- n CC dep
 |   |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   |   |   +-- ? . punct
 |   |   |   |   |   +-- m NN dep
 |   |   |   |   |   |   +-- ? . punct
 |   |   |   |   |   |   +-- 2 CD num
 |   |   |   |   |   +-- -RRB- -RRB- punct
 |   |   |   |   +-- ? . punct
 |   |   |   |   +-- xm+2 CD dep
 |   |   |   |   |   +-- ? . punct
 |   |   |   |   |   +-- m NNP appos
 |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   |   +-- m+2 CD dep
 |   |   |   |   +-- -RRB- -RRB- punct
 |   |   |   |   +-- ? , punct
 |   |   |   |   +-- xm+1 CD dep
 |   |   |   +-- x SYM dep
 |   |   |   |   +-- m NNP nn
 |   |   |   |   +-- ? . punct
 |   |   |   |   +-- m+2 LS dep
 |   |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   |   |   +-- -RRB- -RRB- punct
 |   |   |   |   +-- m+1 CD dep
 |   |   |   +-- = SYM dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- n RB dep
 |   |   |   +-- ? . punct
 |   |   +-- -RRB- -RRB- punct
 |   +-- x SYM dep
 |       +-- ? . punct
 +-- , , punct
 +-- so RB advmod
 +-- ? . punct
 +-- xm+2 LS dep
 |   +-- ? . punct
 |   +-- x SYM discourse
 |   +-- ? , punct
 |   +-- m+2 CD dep
 |       +-- = VBD dep
 |           +-- -LRB- -LRB- punct
 |           +-- i PRP nsubj
 |           +-- 2 CD dobj
 |           +-- ? . punct
 |           +-- n UH discourse
 |           +-- m NN dobj
 |           |   +-- ? . punct
 |           |   +-- 2 CD num
 |           +-- = SYM punct
 |           +-- 0 CD punct
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: Now consider the next inequality for i = 3 .
Parse:
consider VB ROOT
 +-- Now RB advmod
 +-- = VBD ccomp
 |   +-- inequality NN nsubj
 |   |   +-- the DT det
 |   |   +-- next JJ amod
 |   |   +-- for IN prep
 |   |       +-- i PRP pobj
 |   +-- 3 CD dobj
 +-- . . punct
Input: We know that -LRB- m + 3 -RRB- x ? m+2 + -LRB- n ? m ? 3 -RRB- x ? m+3 = m .
Parse:
know VBP ROOT
 +-- We PRP nsubj
 +-- m NN ccomp
 |   +-- that IN mark
 |   +-- m NNP dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- + SYM dep
 |   |   |   +-- 3 CD num
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- x SYM prep
 |   |   |   +-- ? . punct
 |   |   |   +-- m+2 CD pobj
 |   |   +-- m NN dep
 |   |   |   +-- + SYM dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- n RB dep
 |   |   |   +-- ? . punct
 |   |   |   +-- 3 CD dep
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- x SYM punct
 |   |   +-- ? . punct
 |   +-- m+3 CD num
 |   +-- = NFP punct
 +-- . . punct
Input: It follows that -LRB- n ? m ? 3 -RRB- ? xm+3 ? ? km ? -LRB- m+3 -RRB- ? xm+2 ? k ? m ? -LRB- m+3 -RRB- x ? m+2 = -LRB- n ? m ? 3 -RRB- x ? m+3 , so ? xm+3 ? x ? m+3 -LRB- i = 3 ? n ? m ? 1 ? n ? m ? 3 = 0 -RRB- .
Parse:
follows VBZ ROOT
 +-- It PRP nsubj
 +-- that IN dobj
 |   +-- n CC dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- ? . punct
 |   |   +-- m NN dep
 |   |   |   +-- ? . punct
 |   |   |   +-- 3 CD num
 |   |   +-- -RRB- -RRB- punct
 |   +-- ? . punct
 |   +-- xm+3 CD dep
 |   +-- ? , punct
 |   +-- km NN dep
 |       +-- ? . punct
 |       +-- -LRB- -LRB- punct
 |       +-- m+3 CD dep
 |       +-- -RRB- -RRB- punct
 |       +-- ? , punct
 |       +-- xm+2 CD appos
 |           +-- ? . punct
 |           +-- k NN prep
 |               +-- ? . punct
 |               +-- m NN dep
 |               +-- x SYM dep
 |               +-- m+2 CD dep
 |               |   +-- = SYM prep
 |               |   +-- m NN appos
 |               |       +-- -LRB- -LRB- punct
 |               |       +-- n RB amod
 |               |       +-- ? . punct
 |               |       +-- 3 CD num
 |               |       +-- -RRB- -RRB- punct
 |               +-- m+3 CD dep
 |               +-- , , punct
 |               +-- so RB advmod
 |               +-- xm+3 LS dep
 |                   +-- ? . punct
 |                   +-- x SYM dep
 |                       +-- ? , prep
 |                           +-- m+3 CD pobj
 |                               +-- = VBD dep
 |                                   +-- -LRB- -LRB- punct
 |                                   +-- i PRP nsubj
 |                                   +-- 3 CD dobj
 |                                   +-- ? . punct
 |                                   +-- n UH discourse
 |                                   +-- m VB dobj
 |                                   |   +-- ? . punct
 |                                   |   +-- 1 CD num
 |                                   +-- m NN dobj
 |                                   +-- = SYM dobj
 |                                   |   +-- 3 CD number
 |                                   |   +-- 0 CD punct
 |                                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: Proceeding like this all the way up to i = n ? m ? 1 , we get that ? xm+i ? x ? m+i if i is odd and ? xm+i ? x ? m+i if i is even .
Parse:
get VBP ROOT
 +-- Proceeding VBG partmod
 |   +-- like IN prep
 |   |   +-- this DT pobj
 |   +-- up RB advmod
 |   |   +-- way NN npadvmod
 |   |   |   +-- all PDT predet
 |   |   |   +-- the DT det
 |   |   +-- = VB dep
 |   |       +-- to IN mark
 |   |       +-- i PRP nsubj
 |   |       +-- n UH advmod
 |   +-- ? . punct
 |   +-- m NN dobj
 |       +-- ? . punct
 |       +-- 1 CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- that DT dobj
 +-- ? . punct
 +-- xm+i NNP dep
 |   +-- ? . punct
 |   +-- x SYM punct
 |   +-- ? , punct
 |   +-- odd JJ dep
 |       +-- m+i UH dep
 |       +-- if IN mark
 |       +-- i PRP nsubj
 |       +-- is VBZ cop
 |       +-- and CC cc
 |       +-- ? . punct
 |       +-- xm+i NNP conj
 |       +-- x SYM punct
 |       +-- ? , punct
 |       +-- even RB dep
 |           +-- m+i UH dep
 |           +-- if IN mark
 |           +-- i PRP nsubj
 |           +-- is VBZ cop
 +-- . . punct
Input: Moreover , if one inequality is strict , then all subsequent inequalities are strict .
Parse:
strict JJ ROOT
 +-- Moreover RB advmod
 +-- , , punct
 +-- strict JJ advcl
 |   +-- if IN mark
 |   +-- inequality NN nsubj
 |   |   +-- one CD num
 |   +-- is VBZ cop
 +-- then RB advmod
 +-- inequalities NNS nsubj
 |   +-- all DT det
 |   +-- subsequent JJ amod
 +-- are VBP cop
 +-- . . punct
Input: Now , if we can prove ? xn ? 1 = x ? n ? 1 , it would follow that the x ? i are equal to the ? xi -LRB- which also implies that ? k = k ? THE FAMILY In this section , we prove that the worst case optimal redistribution mechanism among linear VCG redistribution mechanisms is in fact optimal -LRB- in the worst case -RRB- among all redistribution mechanisms that are deterministic , anonymous , strategy proof , efficient and satisfy the non deficit constraint .
Parse:
follow VB ROOT
 +-- Now RB advmod
 +-- , , punct
 +-- prove VB advcl
 |   +-- if IN mark
 |   +-- we PRP nsubj
 |   +-- can MD aux
 |   +-- ? . punct
 |   +-- xn UH discourse
 |   |   +-- ? . punct
 |   |   +-- = SYM dep
 |   |   |   +-- 1 CD num
 |   |   +-- x SYM dep
 |   +-- n CC dep
 |       +-- ? . punct
 |       +-- 1 CD num
 +-- it PRP nsubj
 +-- would MD aux
 +-- equal JJ ccomp
 |   +-- that IN mark
 |   +-- x SYM dep
 |   |   +-- the DT det
 |   +-- ? . punct
 |   +-- i PRP nsubj
 |   +-- are VBP cop
 |   +-- to IN prep
 |       +-- xi UH pobj
 |           +-- the DT det
 |           +-- ? . punct
 |           +-- -LRB- -LRB- punct
 |           +-- implies VBZ rcmod
 |               +-- which WDT nsubj
 |               +-- also RB advmod
 |               +-- prove VBP ccomp
 |                   +-- that IN mark
 |                   +-- ? . punct
 |                   +-- k NN nsubj
 |                   |   +-- = SYM dep
 |                   |       +-- k CD num
 |                   +-- FAMILY NN nsubj
 |                   |   +-- THE DT det
 |                   +-- In IN prep
 |                   |   +-- section NN pobj
 |                   |       +-- this DT det
 |                   +-- , , punct
 |                   +-- we PRP nsubj
 |                   +-- optimal NN ccomp
 |                       +-- that IN mark
 |                       +-- mechanism NN nsubj
 |                       |   +-- the DT det
 |                       |   +-- case NN nn
 |                       |   |   +-- worst JJS amod
 |                       |   +-- redistribution NN nn
 |                       |   |   +-- optimal JJ amod
 |                       |   +-- among IN prep
 |                       |       +-- mechanisms NNS pobj
 |                       |           +-- linear JJ amod
 |                       |           +-- redistribution NN nn
 |                       |               +-- VCG NNP nn
 |                       +-- is VBZ cop
 |                       +-- in IN prep
 |                       |   +-- case NN pobj
 |                       |       +-- the DT det
 |                       |       +-- worst JJS amod
 |                       +-- -LRB- -LRB- punct
 |                       +-- -RRB- -RRB- punct
 |                       +-- among IN prep
 |                           +-- mechanisms NNS pobj
 |                               +-- all DT det
 |                               +-- redistribution NN nn
 |                               +-- deterministic JJ rcmod
 |                                   +-- that WDT nsubj
 |                                   +-- are VBP cop
 |                                   +-- , , punct
 |                                   +-- anonymous JJ conj
 |                                   +-- proof NN conj
 |                                   |   +-- strategy NN nn
 |                                   +-- efficient JJ conj
 |                                   +-- and CC cc
 |                                   +-- satisfy VB conj
 |                                       +-- constraint NN dobj
 |                                           +-- the DT det
 |                                           +-- deficit NN nn
 |                                               +-- non JJ nn
 +-- . . punct
Input: Thus , restricting our attention to linear VCG redistribution mechanisms did not come at a loss .
Parse:
come VB ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- restricting VBG csubj
 |   +-- attention NN dobj
 |   |   +-- our PRP$ poss
 |   +-- to IN prep
 |       +-- mechanisms NNS pobj
 |           +-- redistribution NN nn
 |               +-- linear JJ amod
 |               +-- VCG PRP$ nn
 +-- did VBD aux
 +-- not RB neg
 +-- at IN prep
 |   +-- loss NN pobj
 |       +-- a DT det
 +-- . . punct
Input: To prove this theorem , we need the following lemma .
Parse:
need VBP ROOT
 +-- prove VB advcl
 |   +-- To TO aux
 |   +-- theorem NN dobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- lemma NN dobj
 |   +-- the DT det
 |   +-- following VBG amod
 +-- . . punct
Input: This lemma is not new
Parse:
new JJ ROOT
 +-- lemma NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- not RB neg
Input: For completeness , we present it here with a detailed proof .
Parse:
present VBP ROOT
 +-- For IN prep
 |   +-- completeness NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- it PRP dobj
 +-- here RB advmod
 +-- with IN prep
 |   +-- proof NN pobj
 |       +-- a DT det
 |       +-- detailed JJ amod
 +-- . . punct
Input: Lemma 2 .
Parse:
Lemma NNP ROOT
 +-- 2 CD num
 +-- . . punct
Input: A VCG redistribution mechanism is deterministic , anonymous and strategy proof if and only if there exists a function f
Parse:
deterministic JJ ROOT
 +-- mechanism NN nsubj
 |   +-- A DT det
 |   +-- VCG JJ amod
 |   +-- redistribution NN nn
 +-- is VBZ cop
 +-- , , punct
 +-- anonymous JJ conj
 +-- and CC cc
 +-- proof NN conj
 |   +-- strategy NN nsubj
 |   +-- exists VBZ advcl
 |       +-- if IN mark
 |       +-- and CC cc
 |       +-- only RB advmod
 |       +-- there EX expl
 |       +-- function NN dobj
 |           +-- a DT det
 +-- f . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- for all i and all bid vectors .
Parse:
vn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- i PRP pobj
 |       +-- all DT det
 |       +-- and CC cc
 |       +-- vectors NNS conj
 |           +-- all DT det
 |           +-- bid VBN nn
 +-- . . punct
Input: Proof .
Parse:
Proof NNP ROOT
 +-- . . punct
Input: First , let us prove the only if direction , that is , if a VCG redistribution mechanism is deterministic , anonymous and strategy proof then there exists a deterministic function f
Parse:
let VB ROOT
 +-- First RB advmod
 +-- , , punct
 +-- prove VB ccomp
 |   +-- us PRP nsubj
 |   +-- direction NN dobj
 |       +-- the DT det
 |       +-- only RB advmod
 |       +-- if IN mark
 |       +-- , , punct
 |       +-- proof NN rcmod
 |           +-- that DT nsubj
 |           +-- is VBZ cop
 |           +-- , , punct
 |           +-- deterministic JJ advcl
 |           |   +-- if IN mark
 |           |   +-- mechanism NN nsubj
 |           |   |   +-- a DT det
 |           |   |   +-- VCG NNP nn
 |           |   |   +-- redistribution NN nn
 |           |   +-- is VBZ cop
 |           +-- anonymous JJ amod
 |           |   +-- and CC cc
 |           |   +-- strategy NN conj
 |           +-- exists VBZ ccomp
 |               +-- then RB advmod
 |               +-- there EX expl
 |               +-- function NN dobj
 |                   +-- a DT det
 |                   +-- deterministic JJ amod
 +-- f . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- for all i and all bid vectors .
Parse:
vn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- i PRP pobj
 |       +-- all DT det
 |       +-- and CC cc
 |       +-- vectors NNS conj
 |           +-- all DT det
 |           +-- bid VBN nn
 +-- . . punct
Input: If a VCG redistribution mechanism is deterministic and anonymous , then for any bid vector ? v1 ? ? v2 ? .
Parse:
v1 CD ROOT
 +-- deterministic JJ advcl
 |   +-- If IN mark
 |   +-- mechanism NN nsubj
 |   |   +-- a DT det
 |   |   +-- VCG NNP nn
 |   |   +-- redistribution NN nn
 |   +-- is VBZ cop
 |   +-- and CC cc
 |   +-- anonymous JJ conj
 +-- , , punct
 +-- then RB dep
 |   +-- for IN prep
 |       +-- vector NN pobj
 |           +-- any DT det
 |           +-- bid NN nn
 +-- ? . punct
 +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: ? ? vn , the mechanism outputs a unique redistribution payment list
Parse:
outputs VBZ ROOT
 +-- ? . punct
 +-- vn UH discourse
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 +-- list NN dobj
     +-- a DT det
     +-- unique JJ amod
     +-- payment NN nn
         +-- redistribution NN nn
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , zn .
Parse:
zn UH ROOT
 +-- , , punct
 +-- . . punct
Input: Let G
Parse:
Let VB ROOT
 +-- G NNP dobj
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn to z1 , z2 , .
Parse:
z2 CD ROOT
 +-- , , punct
 +-- ? , punct
 +-- vn UH dep
 |   +-- to IN prep
 |       +-- z1 CD pobj
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , zn for all bid vectors .
Parse:
zn , ROOT
 +-- , , punct
 +-- for IN prep
 |   +-- vectors NNS pobj
 |       +-- all DT det
 |       +-- bid NN nn
 +-- . . punct
Input: Let H -LRB- i , x1 , x2 , .
Parse:
Let VB ROOT
 +-- H NNP dobj
 +-- x2 CD dep
 |   +-- -LRB- -LRB- punct
 |   +-- i UH discourse
 |   +-- , , punct
 |   +-- x1 CD num
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn -RRB- be the ith element of G -LRB- x1 , x2 , .
Parse:
element NN ROOT
 +-- xn NFP dep
 |   +-- , , punct
 |   +-- -RRB- -RRB- punct
 +-- be VB cop
 +-- the DT det
 +-- ith NNP nn
 +-- of IN prep
 |   +-- G NNP pobj
 |       +-- -LRB- -LRB- punct
 |       +-- x1 CD dep
 |       |   +-- , , punct
 |       |   +-- x2 CD appos
 |       +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn -RRB- , so that zi = H -LRB- i , ? v1 , ? v2 , .
Parse:
xn NNP ROOT
 +-- , , punct
 +-- -RRB- -RRB- punct
 +-- so IN advmod
 |   +-- H NN dep
 |       +-- that IN det
 |       +-- zi FW nn
 |       +-- = SYM nn
 |       +-- -LRB- -LRB- punct
 |       +-- i PRP dep
 |           +-- , , punct
 |           +-- ? , punct
 |           +-- v1 CD dep
 |           +-- ? . punct
 |           +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- for all bid vectors and all 1 ? i ? n .
Parse:
vn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- vectors NNS pobj
 |       +-- all DT det
 |       +-- bid NN nn
 |       +-- and CC cc
 |       +-- 1 CD conj
 |           +-- all RB det
 +-- i PRP dep
 |   +-- ? , punct
 |   +-- n UH discourse
 +-- . . punct
Input: Because the mechanism is anonymous , two agents should receive the same redistribution payment if their bids are the same .
Parse:
receive VB ROOT
 +-- anonymous JJ advcl
 |   +-- Because IN mark
 |   +-- mechanism NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 +-- , , punct
 +-- agents NNS nsubj
 |   +-- two CD num
 +-- should MD aux
 +-- payment NN dobj
 |   +-- the DT det
 |   +-- same JJ amod
 |   +-- redistribution NN nn
 +-- same JJ advcl
 |   +-- if IN mark
 |   +-- bids NNS nsubj
 |   |   +-- their PRP$ poss
 |   +-- are VBP cop
 |   +-- the DT det
 +-- . . punct
Input: So , if ? vi = ? vj , H -LRB- i , ? v1 , ? v2 , .
Parse:
if IN ROOT
 +-- So RB dep
 +-- , , punct
 +-- ? . punct
 +-- vi NNP dep
 +-- = SYM dep
 +-- vj NFP dep
 +-- H NNP dep
 |   +-- i PRP dep
 |       +-- -LRB- -LRB- punct
 |       +-- , , punct
 |       +-- ? , punct
 |       +-- v1 CD dep
 +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- = H -LRB- j , ? v1 , ? v2 , .
Parse:
j UH ROOT
 +-- vn NFP dep
 |   +-- , , punct
 |   +-- ? . punct
 |   +-- -RRB- -RRB- punct
 +-- = SYM dep
 +-- H NN dep
 +-- -LRB- -LRB- punct
 +-- , , punct
 +-- ? , punct
 +-- v1 CD dep
 +-- ? . punct
 +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- .
Parse:
vn NFP ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: Hence , if we let j = min -LRB- t| ? vt = ? vi -RRB- , then H -LRB- i , ? v1 , ? v2 , .
Parse:
i PRP ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- let VBP advcl
 |   +-- if IN mark
 |   +-- we PRP nsubj
 |   +-- min NNP dobj
 |       +-- j DT nn
 |       +-- = SYM nn
 |       +-- -LRB- -LRB- punct
 |       +-- t| UH dep
 |       +-- ? . punct
 |       +-- vt NNP dep
 |       +-- = SYM dep
 |       +-- vi NNP dep
 |       +-- -RRB- -RRB- punct
 +-- then RB advmod
 +-- H NNP dep
 |   +-- -LRB- -LRB- punct
 +-- ? , punct
 +-- v1 CD dep
 +-- ? . punct
 +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- = H -LRB- j , ? v1 , ? v2 , .
Parse:
j UH ROOT
 +-- vn NFP dep
 |   +-- , , punct
 |   +-- ? . punct
 |   +-- -RRB- -RRB- punct
 +-- = SYM dep
 +-- H NN dep
 +-- -LRB- -LRB- punct
 +-- , , punct
 +-- ? , punct
 +-- v1 CD dep
 +-- ? . punct
 +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- .
Parse:
vn NFP ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: Let us define K
Parse:
Let VB ROOT
 +-- define VB ccomp
     +-- us PRP nsubj
     +-- K NNP dobj
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn ? 1 -RRB- = -LRB- j , w1 , w2 , .
Parse:
xn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- j UH dep
 |   +-- 1 CD dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- = SYM dep
 |   +-- -LRB- -LRB- punct
 |   +-- , , punct
 |   +-- w1 CD dep
 |   +-- w2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , wn -RRB- , where w1 , w2 , .
Parse:
wn LS ROOT
 +-- , , punct
 +-- -RRB- -RRB- punct
 +-- where WRB prep
 |   +-- w1 CD pobj
 |       +-- , , punct
 |       +-- w2 CD amod
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , wn are y , x1 , x2 , .
Parse:
x2 CD ROOT
 +-- , , punct
 +-- wn EX nsubj
 +-- are VBP cop
 +-- y JJ amod
 +-- x1 CD num
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn ? 1 sorted in descending order , and j = min -LRB- t|wt = y -RRB- .
Parse:
, , ROOT
 +-- xn UH dep
 |   +-- ? . punct
 |   +-- 1 CD conj
 |   |   +-- sorted VBN partmod
 |   |       +-- in IN prep
 |   |           +-- order NN pobj
 |   |               +-- descending VBG amod
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- min NN conj
 |       +-- j , nn
 |       +-- = SYM nn
 |       +-- -LRB- -LRB- punct
 |       +-- y NNP dep
 |       |   +-- t|wt NNP nn
 |       |   +-- = SYM nn
 |       +-- -RRB- -RRB- punct
 +-- . . punct
Input: -LRB- -LRB- t|wt = y -RRB- = ? because y ? -LRB- w1 , w2 , .
Parse:
t|wt UH ROOT
 +-- -LRB- -LRB- punct
 +-- = SYM punct
 +-- y NNP dep
 +-- -RRB- -RRB- punct
 +-- = SYM discourse
 +-- ? . punct
 +-- because IN prep
 |   +-- y NNP dep
 |       +-- ? . punct
 |       +-- w2 CD dep
 |           +-- -LRB- -LRB- punct
 |           +-- w1 CD num
 |           +-- , , punct
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , wn -RRB- -RRB- .
Parse:
wn LS ROOT
 +-- , , punct
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: Also let us define F
Parse:
let VB ROOT
 +-- Also RB advmod
 +-- define VB ccomp
     +-- us PRP nsubj
     +-- F NN dobj
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- = H ? K -LRB- ? vi , ? v1 , ? v2 , .
Parse:
vn NFP ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- H NN dep
 |   +-- = SYM nn
 |   +-- ? . punct
 |   +-- K NNP dep
 |   +-- -LRB- -LRB- punct
 |   +-- ? , punct
 |   +-- vi NNP dep
 |   +-- , , punct
 |   +-- v1 CD dep
 |   +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- = H -LRB- min -LRB- t| ? vt = ? vi -RRB- , ? v1 , ? v2 , .
Parse:
H NN ROOT
 +-- vn NFP dep
 |   +-- , , punct
 |   +-- ? . punct
 |   +-- -RRB- -RRB- punct
 +-- = SYM nn
 +-- -LRB- -LRB- punct
 +-- min NNP dep
 +-- t| NN dep
 |   +-- -LRB- -LRB- punct
 +-- ? . punct
 +-- vt NNP dep
 +-- = SYM prep
 |   +-- ? . punct
 |   +-- vi NNP pobj
 +-- -RRB- -RRB- punct
 +-- , , punct
 +-- v1 CD dep
 +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- = H -LRB- i , ? v1 , ? v2 , .
Parse:
H NN ROOT
 +-- vn NFP dep
 |   +-- , , punct
 |   +-- ? . punct
 |   +-- -RRB- -RRB- punct
 +-- = SYM nn
 +-- -LRB- -LRB- punct
 +-- i UH dep
 |   +-- , , punct
 |   +-- ? , punct
 |   +-- v1 CD dep
 |   +-- ? . punct
 |   +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- = zi .
Parse:
vn NFP ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- = SYM punct
 +-- zi NNS dep
 +-- . . punct
Input: That is , F is the redistribution payment to an agent that bids ? vi when the other bids are ? v1 , ? v2 , .
Parse:
is VBZ ROOT
 +-- That DT nsubj
 +-- , , punct
 +-- payment NN ccomp
 |   +-- F NNP nsubj
 |   +-- is VBZ cop
 |   +-- the DT det
 |   +-- redistribution NN nn
 |   +-- to IN prep
 |   |   +-- agent NN pobj
 |   |       +-- an DT det
 |   |       +-- vi NN rcmod
 |   |           +-- that WDT dobj
 |   |           +-- bids NNS nsubj
 |   |           |   +-- ? . punct
 |   |           +-- are VBP advcl
 |   |               +-- when WRB advmod
 |   |               +-- bids NNS nsubj
 |   |               |   +-- the DT det
 |   |               |   +-- other JJ amod
 |   |               +-- ? . prep
 |   |                   +-- v1 CD pobj
 |   +-- , , punct
 |   +-- ? . punct
 |   +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn .
Parse:
vn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- . . punct
Input: Since our mechanism is required to be strategy proof , and the space of valuations is unrestricted , zi should be independent of ? vi by Lemma 1 in Cavallo -LRB- 3 -RRB- .
Parse:
independent JJ ROOT
 +-- required VBN advcl
 |   +-- Since IN mark
 |   +-- mechanism NN nsubjpass
 |   |   +-- our PRP$ poss
 |   +-- is VBZ auxpass
 |   +-- proof NN xcomp
 |   |   +-- to TO aux
 |   |   +-- be VB cop
 |   |   +-- strategy NN npadvmod
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- unrestricted JJ conj
 |       +-- space NN nsubj
 |       |   +-- the DT det
 |       |   +-- of IN prep
 |       |       +-- valuations NNS pobj
 |       +-- is VBZ cop
 +-- , , punct
 +-- zi NN nsubj
 +-- should MD aux
 +-- be VB cop
 +-- of IN prep
 |   +-- ? . punct
 |   +-- vi NN pobj
 |       +-- by IN prep
 |           +-- Lemma NNP pobj
 |               +-- 1 CD num
 |               +-- in IN prep
 |               |   +-- Cavallo NNP pobj
 |               +-- -LRB- -LRB- punct
 |               +-- 3 CD dep
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: Hence , we can simply ignore the first variable input to F ; let f -LRB- x1 , x2 , .
Parse:
ignore VB ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- simply RB advmod
 +-- input NN dobj
 |   +-- the DT det
 |   +-- first JJ amod
 |   +-- variable JJ amod
 |   +-- to IN prep
 |       +-- F NNP pobj
 +-- ; : punct
 +-- let VB parataxis
 |   +-- f GW prep
 |       +-- x1 CD pobj
 |           +-- -LRB- -LRB- punct
 |           +-- , , punct
 |           +-- x2 CD appos
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn ? 1 -RRB- = F -LRB- 0 , x1 , x2 , .
Parse:
xn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- F NN dep
 |   +-- 1 LS dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- = SYM nn
 |   +-- x2 CD dep
 |       +-- -LRB- -LRB- punct
 |       +-- 0 CD num
 |       +-- , , punct
 |       +-- x1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , xn ? 1 -RRB- .
Parse:
xn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: So , we have for all bid vectors and i , zi = f -LRB- ? v1 , ? v2 , .
Parse:
have VBP ROOT
 +-- So RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- for IN prep
 |   +-- vectors NNS pobj
 |       +-- all DT det
 |       +-- bid NN nn
 +-- and CC cc
 +-- i PRP conj
 |   +-- , , punct
 |   +-- f NNP appos
 |   |   +-- zi NNP nn
 |   |   +-- = SYM nn
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- ? . punct
 |   |   +-- v1 CD dep
 |   +-- ? . punct
 |   +-- v2 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- .
Parse:
vn NFP ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: This completes the proof for the only if direction .
Parse:
completes VBZ ROOT
 +-- This DT nsubj
 +-- proof NN dobj
 |   +-- the DT det
 |   +-- for IN prep
 |       +-- direction NN pobj
 |           +-- the DT det
 |           +-- only RB amod
 |           +-- if IN nn
 +-- . . punct
Input: For the if direction , if the redistribution payment received by ai satisfies zi = f -LRB- ? v1 , ? v2 , .
Parse:
For IN ROOT
 +-- direction NN pobj
 |   +-- the DT det
 |   +-- if IN nn
 +-- . . punct
     +-- , , punct
     +-- if IN prep
         +-- payment NN pobj
             +-- the DT det
             +-- redistribution NN nn
             +-- received VBN partmod
                 +-- by IN prep
                     +-- zi NN pobj
                         +-- ai VBG nn
                         +-- satisfies NNS amod
                         +-- = : prep
                         |   +-- f FW dep
                         +-- -LRB- -LRB- punct
                         +-- ? . punct
                         +-- v1 CD amod
                         +-- , , punct
                         +-- v2 CD dep
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- for all bid vectors and i , then this is clearly a deterministic and anonymous mechanism .
Parse:
mechanism NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- vn UH nsubj
 +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- vectors NNS pobj
 |       +-- all DT det
 |       +-- bid NN nn
 |       +-- and CC cc
 |       +-- i PRP conj
 +-- then RB advmod
 +-- this DT nsubj
 +-- is VBZ cop
 +-- clearly RB advmod
 +-- a DT det
 +-- deterministic JJ amod
 |   +-- and CC cc
 |   +-- anonymous JJ conj
 +-- . . punct
Input: To prove strategy proofness , we observe that because an agent '' s redistribution payment is not affected by her own bid , her incentives are the same as in the VCG mechanism , which is strategy proof .
Parse:
observe VBP ROOT
 +-- prove VB advcl
 |   +-- To TO aux
 |   +-- proofness NN dobj
 |       +-- strategy NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- that DT dobj
 +-- affected VBN advcl
 |   +-- because IN mark
 |   +-- payment NN nsubjpass
 |   |   +-- agent NN poss
 |   |   |   +-- an DT det
 |   |   |   +-- '' '' punct
 |   |   |   +-- s POS possessive
 |   |   +-- redistribution NN nn
 |   +-- is VBZ auxpass
 |   +-- not RB neg
 |   +-- by IN prep
 |       +-- bid NN pobj
 |           +-- her PRP$ poss
 |           +-- own JJ amod
 +-- same JJ ccomp
 |   +-- incentives NNS nsubj
 |   |   +-- her PRP$ poss
 |   +-- are VBP cop
 |   +-- the DT det
 |   +-- as IN prep
 |   |   +-- in IN pcomp
 |   |       +-- mechanism NN pobj
 |   |           +-- the DT det
 |   |           +-- VCG NNP nn
 |   +-- , , punct
 |   +-- proof NN ccomp
 |       +-- which WDT nsubj
 |       +-- is VBZ cop
 |       +-- strategy NN npadvmod
 +-- . . punct
Input: Now we are ready to introduce the next theorem
Parse:
ready JJ ROOT
 +-- Now RB advmod
 +-- we PRP nsubj
 +-- are VBP cop
 +-- introduce VB xcomp
     +-- to TO aux
     +-- theorem NN dobj
         +-- the DT det
         +-- next JJ amod
Input: For any m and n with n ? m+2 , the worstcase optimal mechanism among the family of linear VCG redistribution mechanisms is worst case optimal among all mechanisms that are deterministic , anonymous , strategy proof , efficient and satisfy the non deficit constraint .
Parse:
optimal NN ROOT
 +-- For IN prep
 |   +-- m NN pobj
 |       +-- any DT det
 |       +-- and CC cc
 |       +-- n FW conj
 |       +-- with IN prep
 |           +-- n NNP pobj
 |               +-- ? . punct
 |               +-- m+2 CD num
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 |   +-- worstcase NN nn
 |   +-- optimal JJ amod
 |   +-- among IN prep
 |       +-- family NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- mechanisms NNS pobj
 |                   +-- linear JJ amod
 |                   +-- redistribution NN nn
 |                       +-- VCG CD num
 +-- is VBZ cop
 +-- case NN nn
 |   +-- worst JJS amod
 +-- among IN prep
 |   +-- mechanisms NNS pobj
 |       +-- all DT det
 |       +-- deterministic JJ rcmod
 |           +-- that WDT nsubj
 |           +-- are VBP cop
 |           +-- , , punct
 |           +-- anonymous JJ conj
 |           +-- proof NN conj
 |           |   +-- strategy NN nn
 |           +-- efficient JJ conj
 |           +-- and CC cc
 |           +-- satisfy VB conj
 |               +-- constraint NN dobj
 |                   +-- the DT det
 |                   +-- deficit NN nn
 |                       +-- non JJ nn
 +-- . . punct
Input: While we needed individual rationality earlier in the paper , this theorem does not mention it , that is , we can not find a mechanism with better worst case performance even if we sacrifice individual rationality .
Parse:
mention VB ROOT
 +-- needed VBD advcl
 |   +-- While IN mark
 |   +-- we PRP nsubj
 |   +-- rationality NN dobj
 |   |   +-- individual JJ amod
 |   +-- earlier RBR advmod
 |       +-- in IN prep
 |           +-- paper NN pobj
 |               +-- the DT det
 +-- , , punct
 +-- theorem NN nsubj
 |   +-- this DT det
 +-- does VBZ aux
 +-- not RB neg
 +-- it PRP dobj
 +-- find VB dep
 |   +-- is VBZ advmod
 |   |   +-- that DT advmod
 |   +-- , , punct
 |   +-- we PRP nsubj
 |   +-- can MD aux
 |   +-- not RB neg
 |   +-- mechanism NN dobj
 |   |   +-- a DT det
 |   |   +-- with IN prep
 |   |       +-- performance NN pobj
 |   |           +-- worst JJS amod
 |   |           |   +-- better RBR advmod
 |   |           +-- case NN nn
 |   +-- sacrifice VBP advcl
 |       +-- even RB advmod
 |       +-- if IN mark
 |       +-- we PRP nsubj
 |       +-- rationality NN dobj
 |           +-- individual JJ amod
 +-- . . punct
Input: -LRB- The worst case optimal linear VCG redistribution mechanism is of course individually rational. -RRB- Proof .
Parse:
optimal VBP ROOT
 +-- -LRB- -LRB- punct
 +-- case NN nsubj
 |   +-- The DT det
 |   +-- worst JJS amod
 +-- Proof NNP ccomp
 |   +-- mechanism NN nsubj
 |   |   +-- linear JJ amod
 |   |   +-- redistribution NN nn
 |   |       +-- VCG NN nn
 |   +-- is VBZ cop
 |   +-- of IN prep
 |   |   +-- course NN pobj
 |   +-- individually RB advmod
 |   +-- rational. NN nn
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: Suppose there is a redistribution mechanism -LRB- when the number of units is m and the number of agents is n -RRB- that satisfies all of the above properties and has a better worstcase performance than the worst case optimal linear VCG redistribution mechanism , that is , its worst case redistribution percentage ? k is strictly greater than k ? .
Parse:
greater JJR ROOT
 +-- Suppose VB partmod
 |   +-- is VBZ ccomp
 |       +-- there EX expl
 |       +-- mechanism NN nsubj
 |           +-- a DT det
 |           +-- redistribution NN nn
 |           +-- -LRB- -LRB- punct
 |           +-- m VBN rcmod
 |           |   +-- when WRB advmod
 |           |   +-- number NN nsubj
 |           |   |   +-- the DT det
 |           |   |   +-- of IN prep
 |           |   |       +-- units NNS pobj
 |           |   +-- is VBZ cop
 |           |   +-- and CC cc
 |           |   +-- n JJ conj
 |           |       +-- number NN nsubj
 |           |       |   +-- the DT det
 |           |       |   +-- of IN prep
 |           |       |       +-- agents NNS pobj
 |           |       +-- is VBZ cop
 |           +-- -RRB- -RRB- punct
 |           +-- satisfies VBZ rcmod
 |           |   +-- that IN nsubj
 |           |   +-- all DT dobj
 |           |   |   +-- of IN prep
 |           |   |       +-- properties NNS pobj
 |           |   |           +-- the DT det
 |           |   |           +-- above JJ amod
 |           |   +-- and CC cc
 |           |   +-- has VBZ conj
 |           |       +-- performance NN dobj
 |           |           +-- a DT det
 |           |           +-- better JJR amod
 |           |           +-- worstcase NN nn
 |           |           +-- optimal VBP dep
 |           |               +-- than IN mark
 |           |               +-- case NN nsubj
 |           |               |   +-- the DT det
 |           |               |   +-- worst JJS amod
 |           |               +-- mechanism NN dobj
 |           |                   +-- linear JJ amod
 |           |                   +-- redistribution NN nn
 |           |                       +-- VCG NN nn
 |           +-- , , punct
 |           +-- case NN dep
 |               +-- is VBZ dep
 |               |   +-- that DT advmod
 |               +-- , , punct
 |               +-- its PRP$ poss
 |               +-- worst JJS amod
 |               +-- redistribution NN dep
 |                   +-- percentage NN dobj
 +-- ? . punct
 +-- k NN nsubj
 +-- is VBZ cop
 +-- strictly RB advmod
 +-- than IN prep
 |   +-- k NNP pobj
 +-- . . punct
Input: By Lemma 2 , for this mechanism , there is a function f
Parse:
is VBZ ROOT
 +-- By IN prep
 |   +-- Lemma NNP pobj
 |       +-- 2 CD num
 +-- , , punct
 +-- for IN prep
 |   +-- mechanism NN pobj
 |       +-- this DT det
 +-- there EX expl
 +-- function NN nsubj
 |   +-- a DT det
 +-- f . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vi ? 1 , ? vi+1 , .
Parse:
vi NN ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- vi+1 CD dep
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , ? vn -RRB- for all i and all bid vectors .
Parse:
vn UH ROOT
 +-- , , punct
 +-- ? . punct
 +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- i PRP pobj
 |       +-- all DT det
 |       +-- and CC cc
 |       +-- vectors NNS conj
 |           +-- all DT det
 |           +-- bid VBN nn
 +-- . . punct
Input: We first prove that f has the following properties .
Parse:
prove VBP ROOT
 +-- We PRP nsubj
 +-- first RB advmod
 +-- has VBZ ccomp
 |   +-- that IN mark
 |   +-- f EX nsubj
 |   +-- properties NNS dobj
 |       +-- the DT det
 |       +-- following VBG amod
 +-- . . punct
Input: Claim 5 .
Parse:
Claim NNP ROOT
 +-- 5 CD num
 +-- . . punct
Input: f -LRB- 1 , 1 , .
Parse:
1 CD ROOT
 +-- f LS dep
 +-- -LRB- -LRB- punct
 +-- , , punct
 +-- 1 CD amod
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , 1 , 0 , 0 , .
Parse:
0 CD ROOT
 +-- , , punct
 +-- 1 CD num
 +-- 0 CD number
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , 0 -RRB- = 0 if the number of 1s is less than or equal to m .
Parse:
= SYM ROOT
 +-- 0 LS dep
 |   +-- , , punct
 |   +-- -RRB- -RRB- punct
 +-- 0 CD punct
 +-- less JJR dep
 |   +-- if IN mark
 |   +-- number NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- 1s CD pobj
 |   +-- is VBZ cop
 |   +-- than IN dep
 |       +-- or CC cc
 |       +-- equal JJ conj
 |           +-- to IN prep
 |               +-- m NN pobj
 +-- . . punct
Input: Proof of claim .
Parse:
Proof NN ROOT
 +-- of IN prep
 |   +-- claim NN pobj
 +-- . . punct
Input: We assumed that for this mechanism , the worst case redistribution percentage satisfies ? k > k ? ? payment should be in -LRB- ? kx , x -RRB- -LRB- non deficit criterion -RRB- .
Parse:
assumed VBD ROOT
 +-- We PRP nsubj
 +-- redistribution NN ccomp
 |   +-- that IN mark
 |   +-- for IN prep
 |   |   +-- mechanism NN pobj
 |   |       +-- this DT det
 |   +-- , , punct
 |   +-- case NN nsubj
 |   |   +-- the DT det
 |   |   +-- worst JJS amod
 |   +-- satisfies NNS dobj
 |       +-- percentage NN nn
 +-- ? . punct
 +-- k NN dobj
 |   +-- > -RRB- punct
 |   +-- k CD num
 |   +-- ? . punct
 |   +-- be VB dep
 |       +-- payment NN nsubj
 |       +-- should MD aux
 |       +-- in IN prep
 |           +-- kx UH pobj
 |               +-- -LRB- -LRB- punct
 |               +-- ? , punct
 |               +-- , , punct
 |               +-- x NFP punct
 |               +-- -RRB- -RRB- punct
 |               +-- criterion NN appos
 |                   +-- -LRB- -LRB- punct
 |                   +-- deficit NN nn
 |                   |   +-- non IN nn
 |                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: Consider the case where all agents bid 0 , so that the total VCG payment is also 0 .
Parse:
Consider VB ROOT
 +-- case NN dobj
 |   +-- the DT det
 |   +-- bid VBD rcmod
 |       +-- where WRB advmod
 |       +-- agents NNS nsubj
 |       |   +-- all DT det
 |       +-- 0 CD dobj
 +-- , , punct
 +-- is VBZ advcl
 |   +-- so IN mark
 |   +-- that IN mark
 |   +-- payment NN nsubj
 |   |   +-- the DT det
 |   |   +-- total JJ amod
 |   |   +-- VCG JJ amod
 |   +-- also RB advmod
 +-- 0 NFP punct
 +-- . . punct
