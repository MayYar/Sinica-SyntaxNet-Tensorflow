Input: For selected values of n and m , we solved the linear program using Glpk -LRB- GNU Linear Programming Kit -RRB- .
Parse:
solved VBD ROOT
 +-- For IN prep
 |   +-- values NNS pobj
 |       +-- selected JJ amod
 |       +-- of IN prep
 |           +-- n RB pobj
 |               +-- and CC cc
 |               +-- m NN conj
 +-- , , punct
 +-- we PRP nsubj
 +-- program NN dobj
 |   +-- the DT det
 |   +-- linear JJ amod
 |   +-- using VBG partmod
 |       +-- Glpk NNP dobj
 |           +-- -LRB- -LRB- punct
 |           +-- Kit NN dep
 |           |   +-- GNU NNP nn
 |           |   +-- Linear NNP nn
 |           |   +-- Programming NNP nn
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: In the table below , we present the results for a single unit -LRB- m = 1 -RRB- .
Parse:
present VBP ROOT
 +-- In IN prep
 |   +-- table NN pobj
 |       +-- the DT det
 |       +-- below RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- results NNS dobj
 |   +-- the DT det
 |   +-- for IN prep
 |       +-- unit NN pobj
 |           +-- a DT det
 |           +-- single JJ amod
 |           +-- -LRB- -LRB- punct
 |           +-- = SYM dep
 |           |   +-- m NN nn
 |           |   +-- 1 CD num
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: We present 1 ? k -LRB- the percentage of the total VCG payment that is not redistributed by the worst case optimal mechanism in the worst case -RRB- instead of k in the second column because writing k would require too many significant digits .
Parse:
present VBP ROOT
 +-- We PRP nsubj
 +-- 1 CD dobj
 +-- ? . punct
 +-- k NN dobj
 |   +-- -LRB- -LRB- punct
 |   +-- percentage NN dep
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- payment NN pobj
 |   |           +-- the DT det
 |   |           +-- total JJ amod
 |   |           +-- VCG JJ amod
 |   |           +-- redistributed VBN rcmod
 |   |               +-- that WDT nsubjpass
 |   |               +-- is VBZ auxpass
 |   |               +-- not RB neg
 |   |               +-- by IN prep
 |   |               |   +-- case NN pobj
 |   |               |       +-- the DT det
 |   |               |       +-- worst JJS amod
 |   |               +-- mechanism NN dobj
 |   |                   +-- optimal JJ amod
 |   |                   +-- in IN prep
 |   |                       +-- case NN pobj
 |   |                           +-- the DT det
 |   |                           +-- worst JJS amod
 |   +-- -RRB- -RRB- punct
 |   +-- instead RB cc
 |   |   +-- of IN mwe
 |   +-- k CD conj
 |   +-- in IN prep
 |       +-- column NN pobj
 |           +-- the DT det
 |           +-- second JJ amod
 +-- require VB advcl
 |   +-- because IN mark
 |   +-- writing VBG csubj
 |   |   +-- k PRP dobj
 |   +-- would MD aux
 |   +-- digits NNS dobj
 |       +-- many JJ amod
 |       |   +-- too RB advmod
 |       +-- significant JJ amod
 +-- . . punct
Input: Correspondingly , the third column displays the percentage 5 10 15 20 25 30 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Number of AgentsWorst ? caseRedistributionPercentage 1 Unit WO 1 Unit BC 2 Units WO 2 Units BC 3 Units WO 3 Units BC 4 Units WO 4 Units BC Figure 1
Parse:
displays VBZ ROOT
 +-- Correspondingly RB advmod
 +-- , , punct
 +-- column NN nsubj
 |   +-- the DT det
 |   +-- third JJ amod
 +-- percentage NN dobj
     +-- the DT det
     +-- 0.1 CD dep
         +-- 5 CD number
         +-- 10 CD number
         +-- 15 CD number
         +-- 20 CD number
         +-- 25 CD number
         +-- 30 CD number
         +-- 0.2 CD prep
             +-- 0.3 CD prep
                 +-- 0.5 CD dep
                     +-- 0.4 CD number
                     +-- 0.6 CD prep
                         +-- 0.8 CD dep
                             +-- 0.7 CD num
                             +-- 0.9 CD prep
                                 +-- Number NN dep
                                     +-- 1 CD num
                                     +-- of IN prep
                                     |   +-- AgentsWorst NNP pobj
                                     +-- ? . punct
                                     +-- Figure NN appos
                                         +-- BC NNP nn
                                         |   +-- Units NNS nn
                                         |   |   +-- BC NNP nn
                                         |   |   |   +-- 4 CD num
                                         |   |   +-- WO NNP nn
                                         |   |   |   +-- Units NNPS nn
                                         |   |   +-- Units NNPS nn
                                         |   |       +-- 3 CD num
                                         |   |       +-- WO VB dep
                                         |   |       +-- Units NNS dep
                                         |   |           +-- 3 CD num
                                         |   +-- WO NNP nn
                                         |   +-- Units NNPS nn
                                         |       +-- 4 CD num
                                         +-- 1 CD num
Input: of the total VCG payment that is not redistributed by the Bailey Cavallo mechanism in the worst case -LRB- which is equal to 2 n -RRB- .
Parse:
of IN ROOT
 +-- payment NN pobj
 |   +-- the DT det
 |   +-- total JJ amod
 |   +-- VCG JJ amod
 |   +-- redistributed VBN rcmod
 |       +-- that WDT nsubjpass
 |       +-- is VBZ auxpass
 |       +-- not RB neg
 |       +-- by IN prep
 |       |   +-- mechanism NN pobj
 |       |       +-- the DT det
 |       |       +-- Cavallo NNP nn
 |       |           +-- Bailey NNP nn
 |       +-- in IN prep
 |           +-- case NN pobj
 |               +-- the DT det
 |               +-- worst JJS amod
 |               +-- -LRB- -LRB- punct
 |               +-- equal JJ rcmod
 |               |   +-- which WDT nsubj
 |               |   +-- is VBZ cop
 |               |   +-- to IN prep
 |               |       +-- n FW pobj
 |               |           +-- 2 CD num
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: n 1 ? k Bailey ? Cavallo Mechanism 3 66.7 % 66.7 % 4 42.9 % 50.0 % 5 26.7 % 40.0 % 6 16.1 % 33.3 % 7 9.52 % 28.6 % 8 5.51 % 25.0 % 9 3.14 % 22.2 % 10 1.76 % 20.0 % 20 3.62e ? 5 10.0 % 30 5.40e ? 8 6.67e ? 2 40 7.09e ? 11 5.00e ? 2 The worst case optimal mechanism significantly outperforms the Bailey Cavallo mechanism in the worst case .
Parse:
outperforms VBZ ROOT
 +-- Bailey NNP nsubj
 |   +-- 1 CD dep
 |   |   +-- n RB advmod
 |   |   +-- ? . punct
 |   +-- k NNP nn
 |   +-- ? . punct
 |   +-- Mechanism NNP dep
 |   |   +-- Cavallo NNP nn
 |   +-- % NN dep
 |   |   +-- 10.0 CD num
 |   |   |   +-- 5 CD number
 |   |   +-- 5.40e CD dep
 |   |       +-- 30 CD num
 |   +-- 6.67e CD dep
 |   |   +-- 8 CD number
 |   +-- 40 CD dep
 |   |   +-- 2 CD number
 |   +-- 7.09e CD dep
 |   +-- 5.00e CD dep
 |   |   +-- 11 CD number
 |   |   +-- ? . punct
 |   +-- 2 CD dep
 |   +-- mechanism NN dep
 |       +-- The DT det
 |       +-- case NN nn
 |       |   +-- worst JJS amod
 |       +-- optimal JJ amod
 +-- significantly RB advmod
 +-- mechanism NN dobj
 |   +-- the DT det
 |   +-- Cavallo NNP nn
 |       +-- Bailey NNP nn
 +-- in IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- worst JJS amod
 +-- . . punct
Input: Perhaps more surprisingly , the worst case optimal mechanism sometimes does better in the worst case than the BaileyCavallo mechanism does on average , as the following example shows .
Parse:
does VBZ ROOT
 +-- surprisingly RB advmod
 |   +-- Perhaps RB advmod
 |   +-- more RBR advmod
 +-- , , punct
 +-- case NN nsubj
 |   +-- the DT det
 |   +-- worst JJS amod
 |   +-- mechanism NN dep
 |       +-- optimal JJ amod
 +-- sometimes RB advmod
 +-- better RBR advmod
 +-- in IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- worst JJS amod
 +-- does VBZ advcl
 |   +-- than IN mark
 |   +-- mechanism NN nsubj
 |   |   +-- the DT det
 |   |   +-- BaileyCavallo NNP nn
 |   +-- on IN prep
 |   |   +-- average JJ pobj
 |   +-- , , punct
 |   +-- shows VBZ dep
 |       +-- as IN prep
 |           +-- example NN pobj
 |               +-- the DT det
 |               +-- following VBG amod
 +-- . . punct
Input: Recall that the total redistribution payment of the BaileyCavallo mechanism is -LRB- m + 1 -RRB- m n ? vm+2 + -LRB- n ? m ? 1 -RRB- m n ? vm+1 .
Parse:
Recall VB ROOT
 +-- m NNP ccomp
 |   +-- that IN mark
 |   +-- payment NN nsubj
 |   |   +-- the DT det
 |   |   +-- total JJ amod
 |   |   +-- redistribution NN nn
 |   |   +-- of IN prep
 |   |       +-- mechanism NN pobj
 |   |           +-- the DT det
 |   |           +-- BaileyCavallo NNP nn
 |   +-- is VBZ cop
 |   +-- -LRB- -LRB- punct
 |   +-- + SYM prep
 |   |   +-- 1 CD pobj
 |   +-- -RRB- -RRB- punct
 +-- n NN dobj
 |   +-- m NNP nn
 |   +-- ? . punct
 |   +-- vm+2 NNP dep
 |   +-- + SYM dep
 |   +-- -LRB- -LRB- punct
 |   +-- n RB advmod
 |   +-- m NNP dep
 |       +-- m NN dep
 |       +-- ? . punct
 |       +-- 1 CD num
 |       +-- -RRB- -RRB- punct
 |       +-- n NN advmod
 |       +-- vm+1 CD num
 +-- . . punct
Input: For the single unit case , this simplifies to 2 n ? v3 + n ? 2 n ? v2 .
Parse:
simplifies NNS ROOT
 +-- For IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- single JJ amod
 |       +-- unit NN nn
 +-- , , punct
 +-- this DT det
 +-- to IN prep
 |   +-- 2 CD pobj
 +-- n RB advmod
 +-- ? . punct
 +-- 2 CD dep
 |   +-- v3 CD num
 |   +-- + SYM dep
 |   |   +-- n RB advmod
 |   |   +-- ? . punct
 |   +-- n RB advmod
 +-- v2 CD dobj
 +-- . . punct
Input: Hence the percentage of the total VCG payment that is not redistributed is ? v2 ? 2 n ? v3 ? n ? 2 n ? v2 ? v2 = 2 n ? 2 n ? v3 ? v2 , which has an expected value of E -LRB- 2 n ? 2 n ? v3 ? v2 -RRB- = 2 n ? 2 n E ? v3 ? v2 .
Parse:
v2 CD ROOT
 +-- Hence RB advmod
 +-- percentage NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- payment NN pobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- VCG JJ amod
 |           +-- redistributed VBN rcmod
 |               +-- that WDT nsubj
 |               +-- is VBZ cop
 |               +-- not RB neg
 +-- is VBZ cop
 +-- ? . punct
 +-- 2 CD dep
 |   +-- n RB prep
 |       +-- ? . punct
 |       +-- v3 CD pobj
 +-- n CC cc
 +-- v2 CD conj
 |   +-- 2 CD num
 |   +-- n RB dep
 |   |   +-- ? . punct
 |   +-- ? . punct
 |   +-- v2 CD dep
 |   |   +-- = SYM prep
 |   |   |   +-- 2 CD num
 |   |   +-- n RB prep
 |   |   |   +-- ? . punct
 |   |   |   +-- 2 CD pobj
 |   |   +-- n RB advmod
 |   +-- v3 CD num
 |   +-- ? , punct
 |   +-- v2 CD amod
 |   +-- , , punct
 |   +-- has VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- value NN dobj
 |           +-- an DT det
 |           +-- expected VBN amod
 |           +-- of IN prep
 |               +-- E NNP pobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- 2 CD num
 |                   +-- n CC dep
 |                   |   +-- ? . punct
 |                   +-- n RB advmod
 |                   +-- ? . punct
 |                   +-- v3 CD num
 +-- v2 LS dep
 +-- -RRB- -RRB- punct
 +-- = SYM cc
 +-- 2 CD conj
 |   +-- 2 CD num
 |   +-- n RB dep
 |   |   +-- ? . punct
 |   +-- n CC cc
 |   +-- E NN conj
 |       +-- ? . punct
 |       +-- v3 CD num
 |       +-- v2 CD num
 +-- . . punct
Input: Suppose the bid values are drawn from a uniform distribution over -LRB- 0 , 1 -RRB- .
Parse:
Suppose VB ROOT
 +-- drawn VBN ccomp
 |   +-- values NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- bid NN nn
 |   +-- are VBP auxpass
 |   +-- from IN prep
 |       +-- distribution NN pobj
 |           +-- a DT det
 |           +-- uniform JJ amod
 |           +-- over IN prep
 |               +-- -LRB- -LRB- punct
 |               +-- 0 CD pobj
 |               |   +-- , , punct
 |               |   +-- 1 CD num
 |               +-- -RRB- -RRB- punct
 +-- . . punct
Input: The theory of order statistics tells us that the 34 joint probability density function of ? v2 and ? v3 is f -LRB- ? v3 , ? v2 -RRB- = n -LRB- n ? 1 -RRB- -LRB- n ? 2 -RRB- ? vn ? 3 3 -LRB- 1 ? ? v2 -RRB- for ? v2 ? ? v3 .
Parse:
tells VBZ ROOT
 +-- theory NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- statistics NNS pobj
 |           +-- order NN nn
 +-- us PRP dobj
 +-- that IN prep
 |   +-- function NN pobj
 |       +-- the DT det
 |       +-- 34 CD num
 |       +-- probability NN nn
 |       |   +-- joint JJ amod
 |       +-- density NN nn
 |       +-- of IN prep
 |           +-- ? . punct
 |           +-- v2 CD pobj
 +-- and CC cc
 +-- ? . punct
 +-- f NNP conj
 |   +-- v3 CD nsubj
 |   +-- is VBZ cop
 |   +-- -LRB- -LRB- punct
 |   +-- ? . punct
 |   +-- v3 CD dep
 |   +-- , , punct
 |   +-- v2 LS dep
 +-- -RRB- -RRB- punct
 +-- = SYM dep
 |   +-- n RB dep
 |   |   +-- ? . punct
 |   |   +-- 2 CD pobj
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 |   +-- ? . punct
 |   +-- vn SYM dep
 |   +-- 3 CD dep
 |       +-- 3 CD num
 |       +-- -LRB- -LRB- punct
 |       +-- 1 CD num
 |       +-- ? . punct
 |       +-- ? , punct
 |       +-- v2 CD dep
 |       +-- -RRB- -RRB- punct
 |       +-- for IN prep
 |           +-- ? . punct
 |           +-- v2 CD pobj
 +-- v3 CD dobj
 +-- . . punct
Input: Now , E ? v3 ? v2 = R 1 0 R ? v2 0 ? v3 ? v2 f -LRB- ? v3 , ? v2 -RRB- d ? v3d ? v2 = n ? 2 n ? 1 .
Parse:
E NNP ROOT
 +-- Now RB dep
 +-- , , punct
 +-- ? . punct
 +-- v3 CD dep
 |   +-- ? , punct
 |   +-- v2 CD appos
 |       +-- f NN prep
 |           +-- -LRB- -LRB- punct
 |           +-- ? , punct
 |           +-- v3 CD pobj
 +-- v2 CD dep
 +-- R NN dep
 |   +-- = SYM nn
 |       +-- R NN dep
 |           +-- 0 CD num
 |               +-- 1 CD number
 +-- 0 NFP punct
 +-- v2 LS dep
 +-- -RRB- -RRB- punct
 +-- v3d CD dep
 |   +-- d VB dep
 |       +-- ? . punct
 +-- = : punct
 +-- n RB dep
 |   +-- ? . punct
 |   +-- 2 CD pobj
 +-- n CC dep
 |   +-- ? . punct
 |   +-- 1 CD num
 +-- . . punct
Input: So , the expected value of the remaining percentage is 2 n ? 2 n n ? 2 n ? 1 = 2 n -LRB- n ? 1 -RRB- .
Parse:
2 CD ROOT
 +-- So RB advmod
 +-- , , punct
 +-- value NN nsubj
 |   +-- the DT det
 |   +-- expected VBN amod
 |   +-- of IN prep
 |       +-- percentage NN pobj
 |           +-- the DT det
 |           +-- remaining VBG amod
 +-- is VBZ cop
 +-- n RB advmod
 +-- ? . punct
 +-- 2 CD num
 +-- n CC cc
 +-- 2 CD conj
 |   +-- 1 CD num
 |   +-- = SYM dep
 |   +-- n NNP punct
 +-- -LRB- -LRB- punct
 +-- 1 CD conj
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: For n = 20 , this is 5.26e ? 3 , whereas the remaining percentage for the worst case optimal mechanism is 3.62e ? 5 in the worst case .
Parse:
5.26e CD ROOT
 +-- For IN prep
 |   +-- = SYM pobj
 |       +-- n CC amod
 |       +-- 20 CD num
 +-- , , punct
 +-- this DT nsubj
 +-- is VBZ cop
 +-- ? . punct
 +-- 3 CD num
 +-- 3.62e CD advcl
 |   +-- whereas IN mark
 |   +-- percentage NN nsubj
 |   |   +-- the DT det
 |   |   +-- remaining VBG amod
 |   |   +-- for IN prep
 |   |       +-- mechanism NN pobj
 |   |           +-- the DT det
 |   |           +-- case NN nn
 |   |           |   +-- worst JJS amod
 |   |           +-- optimal JJ amod
 |   +-- is VBZ cop
 |   +-- ? . punct
 |   +-- 5 CD dep
 |       +-- in IN prep
 |           +-- case NN pobj
 |               +-- the DT det
 |               +-- worst JJS amod
 +-- . . punct
Input: Let us present the optimal solution for the case n = 5 in detail .
Parse:
Let VB ROOT
 +-- present VB ccomp
 |   +-- us PRP nsubj
 |   +-- solution NN dobj
 |       +-- the DT det
 |       +-- optimal JJ amod
 |       +-- for IN prep
 |       |   +-- case NN pobj
 |       |       +-- the DT det
 |       +-- n CC cc
 |       +-- = SYM conj
 |           +-- 5 CD num
 |           +-- in IN prep
 |               +-- detail NN pobj
 +-- . . punct
Input: By solving the above linear program , we find that the optimal values for the ci are c2 = 11 45 , c3 = ? 1 9 , and c4 = 1 15 .
Parse:
find VBP ROOT
 +-- By IN prep
 |   +-- solving VBG pcomp
 |       +-- program NN dobj
 |           +-- the DT det
 |           +-- above IN amod
 |           +-- linear JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- c2 CD ccomp
 |   +-- that IN mark
 |   +-- values NNS nsubj
 |   |   +-- the DT det
 |   |   +-- optimal JJ amod
 |   |   +-- for IN prep
 |   |       +-- ci NN pobj
 |   |           +-- the DT det
 |   +-- are VBP cop
 |   +-- = SYM dep
 |   |   +-- 45 CD num
 |   |       +-- 11 CD number
 |   +-- , , punct
 |   +-- 1 CD conj
 |   |   +-- c3 CD num
 |   |   +-- = SYM dep
 |   |   |   +-- ? . punct
 |   |   +-- 9 CD num
 |   +-- and CC cc
 |   +-- 15 CD conj
 |       +-- c4 CD num
 |       +-- = SYM dep
 |       +-- 1 CD number
 +-- . . punct
Input: That is , the redistribution payment received by each agent is
Parse:
is VBZ ROOT
 +-- is VBZ advmod
 |   +-- That DT advmod
 +-- , , punct
 +-- payment NN nsubj
     +-- the DT det
     +-- redistribution NN nn
     +-- received VBN partmod
         +-- by IN prep
             +-- agent NN pobj
                 +-- each DT det
Input: The total amount redistributed is 11 15 ? v2 + 4 15 ? v3 ? 4 15 ? v4 + 4 15 ? v5 ; in the worst case , 11 15 ? v2 is redistributed .
Parse:
11 CD ROOT
 +-- amount NN nsubj
 |   +-- The DT det
 |   +-- total JJ amod
 |   +-- redistributed VBN partmod
 +-- is VBZ cop
 +-- 15 CD num
 |   +-- v4 CD dep
 |   +-- + SYM dep
 |   +-- 4 CD dep
 +-- ? . punct
 +-- v3 CD num
 +-- v5 CD num
 +-- ; : punct
 +-- redistributed VBN parataxis
 |   +-- in IN prep
 |   |   +-- case NN pobj
 |   |       +-- the DT det
 |   |       +-- worst JJS amod
 |   +-- , , punct
 |   +-- 11 CD nsubj
 |   |   +-- 15 CD num
 |   |   +-- ? . punct
 |   |   +-- v2 CD num
 |   +-- is VBZ cop
 +-- . . punct
Input: Hence , the percentage of the total VCG payment that is not redistributed is never more than 4 15 = 26.7 % .
Parse:
% NN ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- percentage NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- payment NN pobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- VCG JJ amod
 |           +-- redistributed VBN rcmod
 |               +-- that WDT nsubjpass
 |               +-- is VBZ auxpass
 |               +-- not RB neg
 +-- is VBZ cop
 +-- never RB neg
 +-- more JJR quantmod
 +-- than IN quantmod
 +-- 4 CD number
 +-- 15 CD number
 +-- = SYM dep
 +-- 26.7 CD num
 +-- . . punct
Input: Finally , we compare the worst case optimal mechanism to the Bailey Cavallo mechanism for m = 1 , 2 , 3 , 4 , n = m + 2 , .
Parse:
compare VBP ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- mechanism NN dobj
 |   +-- the DT det
 |   +-- case NN nn
 |   |   +-- worst JJS amod
 |   +-- optimal JJ amod
 +-- to IN prep
 |   +-- mechanism NN pobj
 |       +-- the DT det
 |       +-- Cavallo NNP nn
 |           +-- Bailey NNP nn
 +-- for IN prep
 |   +-- = SYM pobj
 |       +-- m NN nn
 |       +-- 1 CD num
 |       +-- , , punct
 |       +-- 2 CD num
 |       +-- 3 CD num
 |       +-- 4 CD num
 |       +-- n CC cc
 |       +-- m NN conj
 |           +-- = : nn
 |           +-- + SYM dep
 |           +-- 2 CD num
 +-- . . punct
Input: .
Parse:
. . ROOT
Input: .
Parse:
. . ROOT
Input: , 30 .
Parse:
30 CD ROOT
 +-- , , punct
 +-- . . punct
Input: These results are in Figure 1 .
Parse:
are VBP ROOT
 +-- results NNS nsubj
 |   +-- These DT det
 +-- in IN prep
 |   +-- Figure NNP pobj
 |       +-- 1 CD num
 +-- . . punct
Input: We see that for any m , when n = m + 2 , the worst case optimal mechanism has the same worst case performance as the Bailey Cavallo mechanism -LRB- actually , in this case , the worst case optimal mechanism is identical to the BaileyCavallo mechanism -RRB- .
Parse:
see VBP ROOT
 +-- We PRP nsubj
 +-- that IN dobj
 +-- for IN prep
 |   +-- m NN pobj
 |       +-- any DT det
 +-- , , punct
 +-- has VBZ advcl
 |   +-- when WRB advmod
 |   +-- m NN nsubj
 |   |   +-- n RB amod
 |   |   +-- = : nn
 |   |   +-- + SYM dep
 |   |   +-- 2 CD dep
 |   |   +-- , , punct
 |   +-- mechanism NN nsubj
 |   |   +-- the DT det
 |   |   +-- case NN nn
 |   |   |   +-- worst JJS amod
 |   |   +-- optimal JJ amod
 |   +-- performance NN dobj
 |       +-- the DT det
 |       +-- same JJ amod
 |       +-- case NN nn
 |       |   +-- worst JJS amod
 |       +-- as IN prep
 |           +-- mechanism NN pobj
 |               +-- the DT det
 |               +-- Cavallo NNP nn
 |               |   +-- Bailey NNP nn
 |               +-- identical JJ appos
 |                   +-- -LRB- -LRB- punct
 |                   +-- actually RB advmod
 |                   +-- , , punct
 |                   +-- in IN prep
 |                   |   +-- case NN pobj
 |                   |       +-- this DT det
 |                   +-- mechanism NN nsubj
 |                   |   +-- the DT det
 |                   |   +-- case NN nn
 |                   |   |   +-- worst JJS amod
 |                   |   +-- optimal JJ amod
 |                   +-- is VBZ cop
 |                   +-- to IN prep
 |                   |   +-- mechanism NN pobj
 |                   |       +-- the DT det
 |                   |       +-- BaileyCavallo NNP nn
 |                   +-- -RRB- -RRB- punct
 +-- . . punct
Input: When n > m + 2 , the worst case optimal mechanism outperforms the Bailey Cavallo mechanism -LRB- in the worst case -RRB- . .
Parse:
outperforms VBZ ROOT
 +-- m NN advcl
 |   +-- When WRB advmod
 |   +-- n DT amod
 |   +-- > -RRB- punct
 |   +-- + SYM dep
 |       +-- 2 CD num
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 |   +-- case NN nn
 |   |   +-- worst JJS amod
 |   +-- optimal JJ amod
 +-- mechanism NN dobj
 |   +-- the DT det
 |   +-- Cavallo NNP nn
 |   |   +-- Bailey NNP nn
 |   +-- in IN prep
 |       +-- -LRB- -LRB- punct
 |       +-- case NN pobj
 |       |   +-- the DT det
 |       |   +-- worst JJS amod
 |       +-- -RRB- -RRB- punct
 +-- . . punct
