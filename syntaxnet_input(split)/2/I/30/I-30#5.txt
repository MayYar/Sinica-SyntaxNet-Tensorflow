Input: To deal with the problem of allocating tasks in a social network , we present a distributed algorithm .
Parse:
present VBP ROOT
 +-- deal VB advcl
 |   +-- To TO aux
 |   +-- with IN prep
 |       +-- problem NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- allocating VBG pcomp
 |                   +-- tasks NNS dobj
 |                   +-- in IN prep
 |                       +-- network NN pobj
 |                           +-- a DT det
 |                           +-- social JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- algorithm NN dobj
 |   +-- a DT det
 |   +-- distributed VBN amod
 +-- . . punct
Input: We introduce this algorithm by describing the protocol for the agents .
Parse:
introduce VBP ROOT
 +-- We PRP nsubj
 +-- algorithm NN dobj
 |   +-- this DT det
 +-- by IN prep
 |   +-- describing VBG pcomp
 |       +-- protocol NN dobj
 |           +-- the DT det
 |           +-- for IN prep
 |               +-- agents NNS pobj
 |                   +-- the DT det
 +-- . . punct
Input: After that we give the optimal , centralized algorithm and an upper bound algorithm , which we use in Section 5 to benchmark the quality of our distributed algorithm .
Parse:
give VBP ROOT
 +-- After IN prep
 |   +-- that IN pobj
 +-- we PRP nsubj
 +-- algorithm NN dobj
 |   +-- the DT det
 |   +-- optimal NN amod
 |   +-- , , punct
 |   +-- centralized VBN amod
 |   +-- and CC cc
 |   +-- algorithm NN conj
 |       +-- an DT det
 |       +-- upper JJ amod
 |       +-- bound VBN amod
 |       +-- , , punct
 |       +-- use VBP rcmod
 |           +-- which WDT dobj
 |           +-- we PRP nsubj
 |           +-- in IN prep
 |           |   +-- Section NN pobj
 |           |       +-- 5 CD num
 |           +-- benchmark VB xcomp
 |               +-- to TO aux
 |               +-- quality NN dobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- algorithm NN pobj
 |                           +-- our PRP$ poss
 |                           +-- distributed VBN amod
 +-- . . punct
Input: 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows .
Parse:
Protocol NNP ROOT
 +-- 4.1 CD num
 +-- summarize VB rcmod
 |   +-- for IN prep
 |   |   +-- allocation NN pobj
 |   |       +-- distributed VBN amod
 |   |       +-- task NN nn
 |   +-- We PRP nsubj
 |   +-- can MD aux
 |   +-- description NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- problem NN pobj
 |               +-- the DT det
 |               +-- allocation NN nn
 |               |   +-- task NN nn
 |               +-- in IN prep
 |               |   +-- networks NNS pobj
 |               |       +-- social JJ amod
 |               +-- from IN prep
 |               |   +-- Section NN pobj
 |               |       +-- 2 CD num
 |               +-- follows VBZ dep
 |                   +-- as IN mark
 +-- . . punct
Input: We Algorithm 1 Greedy distributed allocation protocol .
Parse:
distributed VBN ROOT
 +-- We PRP nsubj
 |   +-- Greedy NNP dep
 |       +-- Algorithm NNP nn
 |       +-- 1 CD num
 +-- protocol NN dobj
 |   +-- allocation NN nn
 +-- . . punct
Input: Each manager a calculates the efficiency e -LRB- t -RRB- for each of their tasks t ? Ta , and then while Ta = ?
Parse:
calculates VBZ ROOT
 +-- manager NN nsubj
 |   +-- Each DT det
 +-- a DT det
 +-- e NN dobj
 |   +-- the DT det
 |   +-- efficiency NN nn
 |   +-- t NN appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- tasks NNS pobj
 |               +-- their PRP$ poss
 |               +-- Ta NNP dep
 |                   +-- t NNP nn
 |                   +-- ? . punct
 +-- , , punct
 +-- and CC cc
 +-- then RB advmod
 +-- while IN conj
 |   +-- = NNP dep
 |       +-- Ta NNP nn
 +-- ? . punct
Input: neighbors -LRB- of a -RRB- by informing these neighbors of the efficiency e -LRB- t -RRB- and the required resources for t .
Parse:
neighbors NNS ROOT
 +-- -LRB- -LRB- punct
 +-- of IN prep
 |   +-- a DT pobj
 +-- -RRB- -RRB- punct
 +-- by IN prep
 |   +-- informing VBG pcomp
 |       +-- neighbors NNS dobj
 |           +-- these DT det
 |           +-- of IN prep
 |           |   +-- e NNP pobj
 |           |       +-- the DT det
 |           |       +-- efficiency NN nn
 |           |       +-- -LRB- -LRB- punct
 |           |       +-- t NN dep
 |           |       +-- -RRB- -RRB- punct
 |           +-- and CC cc
 |           +-- resources NNS conj
 |               +-- the DT det
 |               +-- required VBN amod
 |               +-- for IN prep
 |                   +-- t NN pobj
 +-- . . punct
Input: offer all relevant resources to the manager for the task with the highest efficiency .
Parse:
offer VBP ROOT
 +-- resources NNS dobj
 |   +-- all DT det
 |   +-- relevant JJ amod
 +-- to IN prep
 |   +-- manager NN pobj
 |       +-- the DT det
 +-- for IN prep
 |   +-- task NN pobj
 |       +-- the DT det
 |       +-- with IN prep
 |           +-- efficiency NN pobj
 |               +-- the DT det
 |               +-- highest JJS amod
 +-- . . punct
Input: allocate their tasks , and inform each contractor which part of the offer is accepted .
Parse:
allocate VB ROOT
 +-- tasks NNS dobj
 |   +-- their PRP$ poss
 +-- , , punct
 +-- and CC cc
 +-- inform VB conj
 |   +-- contractor NN dobj
 |       +-- each DT det
 |       +-- accepted VBN rcmod
 |           +-- which WDT dobj
 |           +-- part NN nsubjpass
 |           |   +-- of IN prep
 |           |       +-- offer NN pobj
 |           |           +-- the DT det
 |           +-- is VBZ auxpass
 +-- . . punct
Input: When a task is allocated , or when a manager has received offers from all neighbors , but still can not satisfy its task , the task is removed from the task list Ta .
Parse:
removed VBN ROOT
 +-- allocated VBN advcl
 |   +-- When WRB advmod
 |   +-- task NN nsubjpass
 |   |   +-- a DT det
 |   +-- is VBZ auxpass
 |   +-- , , punct
 |   +-- or CC cc
 |   +-- received VBN conj
 |   |   +-- when WRB advmod
 |   |   +-- manager NN nsubj
 |   |   |   +-- a DT det
 |   |   +-- has VBZ aux
 |   |   +-- offers NNS dobj
 |   |   +-- from IN prep
 |   |       +-- neighbors NNS pobj
 |   |           +-- all DT det
 |   +-- but CC cc
 |   +-- satisfy VB conj
 |       +-- still RB advmod
 |       +-- can MD aux
 |       +-- not RB neg
 |       +-- task NN dobj
 |           +-- its PRP$ poss
 +-- , , punct
 +-- task NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- from IN prep
 |   +-- list NN pobj
 |       +-- the DT det
 |       +-- task NN nn
 |       +-- Ta NNP appos
 +-- . . punct
Input: have a -LRB- social -RRB- network of agents .
Parse:
have VBP ROOT
 +-- network NN dobj
 |   +-- a DT det
 |   +-- -LRB- -LRB- punct
 |   +-- social JJ amod
 |   +-- -RRB- -RRB- punct
 |   +-- of IN prep
 |       +-- agents NNS pobj
 +-- . . punct
Input: Each agent has a set of resources of different types at its disposal .
Parse:
has VBZ ROOT
 +-- agent NN nsubj
 |   +-- Each DT det
 +-- set NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- resources NNS pobj
 |   |       +-- of IN prep
 |   |           +-- types NNS pobj
 |   |               +-- different JJ amod
 |   +-- at IN prep
 |       +-- disposal NN pobj
 |           +-- its PRP$ poss
 +-- . . punct
Input: We also have a set of tasks .
Parse:
have VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- set NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- tasks NNS pobj
 +-- . . punct
Input: Each task requires some resources , has a fixed benefit , and is located at a certain agent .
Parse:
requires VBZ ROOT
 +-- task NN nsubj
 |   +-- Each DT det
 +-- resources NNS dobj
 |   +-- some DT det
 +-- , , punct
 +-- has VBZ conj
 |   +-- benefit NN dobj
 |       +-- a DT det
 |       +-- fixed VBN amod
 +-- and CC cc
 +-- located VBN conj
 |   +-- is VBZ auxpass
 |   +-- at IN prep
 |       +-- agent NN pobj
 |           +-- a DT det
 |           +-- certain JJ amod
 +-- . . punct
Input: This agent is called a manager .
Parse:
called VBN ROOT
 +-- agent NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- manager NN xcomp
 |   +-- a DT det
 +-- . . punct
Input: We only allow neighboring agents to help with a task .
Parse:
allow VBP ROOT
 +-- We PRP nsubj
 +-- only RB advmod
 +-- help VB xcomp
 |   +-- agents NNS nsubj
 |   |   +-- neighboring VBG amod
 |   +-- to TO aux
 |   +-- with IN prep
 |       +-- task NN pobj
 |           +-- a DT det
 +-- . . punct
Input: These agents are called contractors .
Parse:
called VBN ROOT
 +-- agents NNS nsubjpass
 |   +-- These DT det
 +-- are VBP auxpass
 +-- contractors NNS xcomp
 +-- . . punct
Input: Agents can fulfill the role of manager as well as contractor .
Parse:
fulfill VB ROOT
 +-- Agents NNS nsubj
 +-- can MD aux
 +-- role NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- manager NN pobj
 |           +-- well RB cc
 |           |   +-- as RB advmod
 |           |   +-- as IN mwe
 |           +-- contractor NN conj
 +-- . . punct
Input: The problem is to find out which tasks to execute , and which resources of which contractors to use for these tasks .
Parse:
is VBZ ROOT
 +-- problem NN nsubj
 |   +-- The DT det
 +-- find VB xcomp
 |   +-- to TO aux
 |   +-- out RP prt
 |   +-- execute VB xcomp
 |       +-- tasks NNS nsubj
 |       |   +-- which WDT det
 |       +-- to TO aux
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- contractors VBZ conj
 |           +-- which WDT dobj
 |           +-- resources NNS nsubj
 |           |   +-- of IN prep
 |           |       +-- which WDT pobj
 |           +-- use VB xcomp
 |               +-- to TO aux
 |               +-- for IN prep
 |                   +-- tasks NNS pobj
 |                       +-- these DT det
 +-- . . punct
Input: The idea of the protocol is as follows .
Parse:
is VBZ ROOT
 +-- idea NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- protocol NN pobj
 |           +-- the DT det
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct
Input: All manager agents a ? A try to find neighboring contractors to help them with their task -LRB- s -RRB- Ta = -LRB- ti ? T | loc -LRB- ti -RRB- = a -RRB- .
Parse:
a DT ROOT
 +-- agents NNS nsubj
 |   +-- All DT det
 |   +-- manager NN nn
 +-- ? . punct
 +-- try NN dep
 |   +-- A DT det
 |   +-- find VB infmod
 |       +-- to TO aux
 |       +-- contractors NNS dobj
 |           +-- neighboring VBG amod
 |           +-- help VB infmod
 |               +-- to TO aux
 |               +-- them PRP dobj
 |               +-- with IN prep
 |                   +-- task NN pobj
 |                       +-- their PRP$ poss
 +-- Ta NNP dep
 |   +-- -LRB- -LRB- punct
 |   +-- s VBZ cop
 |   +-- -RRB- -RRB- punct
 |   +-- = SYM dep
 |   +-- ti NNP dep
 |       +-- -LRB- -LRB- punct
 +-- T NNP dep
 |   +-- | , punct
 |   +-- loc NNP dep
 |   +-- ti NNP dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- -RRB- -RRB- punct
 |   +-- = NFP punct
 |   +-- a DT dep
 +-- -RRB- -RRB- punct
 +-- . . punct
Input: They start with offering the task that is most efficient in terms of the ratio between benefit and required resources .
Parse:
start VBP ROOT
 +-- They PRP nsubj
 +-- with IN prep
 |   +-- offering VBG pcomp
 |       +-- task NN dobj
 |           +-- the DT det
 |           +-- efficient JJ rcmod
 |               +-- that WDT nsubj
 |               +-- is VBZ cop
 |               +-- most RBS advmod
 |               +-- in IN prep
 |                   +-- terms NNS pobj
 |                       +-- of IN prep
 |                           +-- ratio NN pobj
 |                               +-- the DT det
 |                               +-- between IN prep
 |                                   +-- benefit NN pobj
 |                                       +-- and CC cc
 |                                       +-- resources NNS conj
 |                                           +-- required VBN amod
 +-- . . punct
Input: Out of all tasks offered , contractors select the task with the highest efficiency , and send a bid to the related manager .
Parse:
select VBP ROOT
 +-- Out IN prep
 |   +-- of IN pcomp
 |       +-- tasks NNS pobj
 |           +-- all DT det
 |           +-- offered VBD partmod
 +-- , , punct
 +-- contractors NNS nsubj
 +-- task NN dobj
 |   +-- the DT det
 +-- with IN prep
 |   +-- efficiency NN pobj
 |       +-- the DT det
 |       +-- highest JJS amod
 +-- and CC cc
 +-- send VB conj
 |   +-- bid NN dobj
 |   |   +-- a DT det
 |   +-- to IN prep
 |       +-- manager NN pobj
 |           +-- the DT det
 |           +-- related JJ amod
 +-- . . punct
Input: A bid consists of all the resources the agent is able to supply for this task .
Parse:
consists VBZ ROOT
 +-- bid NN nsubj
 |   +-- A DT det
 +-- of IN prep
 |   +-- resources NNS pobj
 |       +-- all PDT predet
 |       +-- the DT det
 |       +-- able JJ rcmod
 |           +-- agent NN nsubj
 |           |   +-- the DT det
 |           +-- is VBZ cop
 |           +-- supply VB xcomp
 |               +-- to TO aux
 |               +-- for IN prep
 |                   +-- task NN pobj
 |                       +-- this DT det
 +-- . . punct
Input: If sufficient resources have been offered , the manager selects the required resources and informs all contractors of its choice .
Parse:
selects VBZ ROOT
 +-- offered VBN advcl
 |   +-- If IN mark
 |   +-- resources NNS nsubjpass
 |   |   +-- sufficient JJ amod
 |   +-- have VBP aux
 |   +-- been VBN auxpass
 +-- , , punct
 +-- manager NN nsubj
 |   +-- the DT det
 +-- resources NNS dobj
 |   +-- the DT det
 |   +-- required VBN amod
 +-- and CC cc
 +-- informs VBZ conj
 |   +-- contractors NNS dobj
 |       +-- all DT det
 |       +-- of IN prep
 |           +-- choice NN pobj
 |               +-- its PRP$ poss
 +-- . . punct
Input: The efficiency of a task is defined as follows
Parse:
defined VBN ROOT
 +-- efficiency NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- task NN pobj
 |           +-- a DT det
 +-- is VBZ auxpass
 +-- follows VBZ advcl
     +-- as IN mark
Input: The efficiency e of a task t ? T is defined by the utility of this task divided by the sum of all required resources
Parse:
e NN ROOT
 +-- The DT det
 +-- efficiency NN nn
 +-- of IN prep
 |   +-- t NN pobj
 |       +-- a DT det
 |       +-- task NN nn
 +-- ? . punct
 +-- defined VBN dep
     +-- T NN nsubjpass
     +-- is VBZ auxpass
     +-- by IN prep
         +-- utility NN pobj
             +-- the DT det
             +-- of IN prep
                 +-- task NN pobj
                     +-- this DT det
                     +-- divided VBN partmod
                         +-- by IN prep
                             +-- sum NN pobj
                                 +-- the DT det
                                 +-- of IN prep
                                     +-- resources NNS pobj
                                         +-- all DT det
                                         +-- required VBN amod
Input: A more detailed description of this protocol can be found in Algorithm 1 .
Parse:
found VBN ROOT
 +-- description NN nsubjpass
 |   +-- A DT det
 |   +-- detailed JJ amod
 |   |   +-- more RBR advmod
 |   +-- of IN prep
 |       +-- protocol NN pobj
 |           +-- this DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- in IN prep
 |   +-- Algorithm NNP pobj
 |       +-- 1 CD num
 +-- . . punct
Input: Here it is also defined how to determine when a task should not be offered anymore , because it is impossible to fulfill locally .
Parse:
defined VBN ROOT
 +-- Here RB advmod
 +-- it PRP nsubjpass
 +-- is VBZ auxpass
 +-- also RB advmod
 +-- determine VB xcomp
 |   +-- how WRB advmod
 |   +-- to TO aux
 |   +-- offered VBN advcl
 |       +-- when WRB advmod
 |       +-- task NN nsubjpass
 |       |   +-- a DT det
 |       +-- should MD aux
 |       +-- not RB neg
 |       +-- be VB auxpass
 |       +-- anymore RB advmod
 +-- , , punct
 +-- impossible JJ advcl
 |   +-- because IN mark
 |   +-- it PRP nsubj
 |   +-- is VBZ cop
 |   +-- fulfill VB xcomp
 |       +-- to TO aux
 |       +-- locally RB advmod
 +-- . . punct
Input: Obviously , a task is also not offered anymore when it has been allocated .
Parse:
offered VBN ROOT
 +-- Obviously RB advmod
 +-- , , punct
 +-- task NN nsubjpass
 |   +-- a DT det
 +-- is VBZ auxpass
 +-- also RB advmod
 +-- not RB neg
 +-- anymore RB advmod
 +-- allocated VBN advcl
 |   +-- when WRB advmod
 |   +-- it PRP nsubjpass
 |   +-- has VBZ aux
 |   +-- been VBN auxpass
 +-- . . punct
Input: This protocol is such that , when no two tasks have exactly the same efficiency , in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows .
Parse:
follows VBZ ROOT
 +-- such JJ dep
 |   +-- protocol NN nsubj
 |   |   +-- This DT det
 |   +-- is VBZ cop
 +-- removed VBN dep
 |   +-- that IN mark
 |   +-- , , punct
 |   +-- have VBP advcl
 |   |   +-- when WRB advmod
 |   |   +-- tasks NNS nsubj
 |   |   |   +-- no DT det
 |   |   |   +-- two CD num
 |   |   +-- efficiency NN dobj
 |   |       +-- exactly RB advmod
 |   |       +-- the DT det
 |   |       +-- same JJ amod
 |   +-- in IN prep
 |   |   +-- iteration NN pobj
 |   |       +-- every DT det
 |   +-- task NN nsubjpass
 |   |   +-- one CD num
 |   |       +-- least RBS dep
 |   |           +-- at RB advmod
 |   +-- is VBZ auxpass
 |   +-- from IN prep
 |   |   +-- task NN pobj
 |   |       +-- a DT det
 |   |       +-- list.1 CD num
 |   +-- From IN prep
 |       +-- this DT pobj
 +-- property NN nsubj
 |   +-- the DT det
 |   +-- computation NN nn
 |   |   +-- and CC cc
 |   |   +-- communication NN conj
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- the DT det
 +-- . . punct
Input: Proposition 1 .
Parse:
Proposition NN ROOT
 +-- 1 CD num
 +-- . . punct
Input: For a STAP with n tasks and m agents , the run time of the distributed algorithm is O -LRB- nm -RRB- , and the number of communication messages is O -LRB- n2 m -RRB- .
Parse:
is VBZ ROOT
 +-- For IN prep
 |   +-- STAP NN pobj
 |       +-- a DT det
 |       +-- with IN prep
 |           +-- tasks NNS pobj
 |               +-- n DT det
 |               +-- and CC cc
 |               +-- agents NNS conj
 |                   +-- m CD num
 +-- , , punct
 +-- time NN nsubj
 |   +-- the DT det
 |   +-- run VBN amod
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- the DT det
 |           +-- distributed VBN amod
 +-- O NNP nsubj
 |   +-- nm NNP appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- O FW conj
 |   +-- number NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- messages NNS pobj
 |   |           +-- communication NN nn
 |   +-- is VBZ cop
 |   +-- -LRB- -LRB- punct
 |   +-- m NN dep
 |   |   +-- n2 CD num
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: 1 Even when some tasks have the same efficiency , it is straightforward to make this result work .
Parse:
straightforward JJ ROOT
 +-- have VBP advcl
 |   +-- Even RB advmod
 |   |   +-- 1 LS npadvmod
 |   +-- when WRB advmod
 |   +-- tasks NNS nsubj
 |   |   +-- some DT det
 |   +-- efficiency NN dobj
 |       +-- the DT det
 |       +-- same JJ amod
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- make VB xcomp
 |   +-- to TO aux
 |   +-- work NN xcomp
 |       +-- result NN nsubj
 |           +-- this DT det
 +-- . . punct
Input: For example , the implementation can ensure that the contractors choose the task with the lowest task id .
Parse:
ensure VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- implementation NN nsubj
 |   +-- the DT det
 +-- can MD aux
 +-- choose VBP ccomp
 |   +-- that IN mark
 |   +-- contractors NNS nsubj
 |   |   +-- the DT det
 |   +-- task NN dobj
 |   |   +-- the DT det
 |   +-- with IN prep
 |       +-- id NN pobj
 |           +-- the DT det
 |           +-- lowest JJS amod
 |           +-- task NN nn
 +-- . . punct
Input: 502 The Sixth Intl .
Parse:
502 CD ROOT
 +-- Intl NNP dep
 |   +-- The DT det
 |   +-- Sixth NNP nn
 +-- . . punct
Input: Joint Conf .
Parse:
Conf NNP ROOT
 +-- Joint NNP nn
 +-- . . punct
Input: on Autonomous Agents and Multi Agent Systems -LRB- AAMAS 07 -RRB- Algorithm 2 Optimal social task allocation .
Parse:
on IN ROOT
 +-- Agents NNS pobj
 |   +-- Autonomous JJ amod
 |   +-- and CC cc
 |   +-- allocation NN conj
 |       +-- Systems NNPS nn
 |       |   +-- Multi NNP nn
 |       |   +-- Agent NNP nn
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- AAMAS NNP dep
 |       |   |   +-- 07 CD num
 |       |   +-- -RRB- -RRB- punct
 |       +-- Algorithm NNP nn
 |       |   +-- 2 CD num
 |       +-- Optimal JJ amod
 |       +-- task NN nn
 |           +-- social JJ amod
 +-- . . punct
Input: Repeat the following for each combination of tasks
Parse:
Repeat VB ROOT
 +-- the DT dobj
 |   +-- following VBG amod
 +-- for IN prep
     +-- combination NN pobj
         +-- each DT det
         +-- of IN prep
             +-- tasks NNS pobj
Input: -LRB- b -RRB- For each agent a ? A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has .
Parse:
a DT ROOT
 +-- b LS dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- For IN prep
 |   +-- agent NN pobj
 |       +-- each DT det
 +-- ? . punct
 +-- create VB dep
 |   +-- A NN nsubj
 |   +-- node NN dobj
 |       +-- an DT det
 |       +-- agent NN nn
 |       +-- and CC cc
 |       +-- edge NN conj
 |       |   +-- an DT det
 |       |   +-- from IN prep
 |       |   |   +-- s POS pobj
 |       |   +-- to IN prep
 |       |   |   +-- node NN pobj
 |       |   |       +-- this DT det
 |       |   +-- with IN prep
 |       |       +-- capacity NN pobj
 |       |           +-- equal JJ amod
 |       |               +-- to IN prep
 |       |                   +-- amount NN pobj
 |       |                       +-- the DT det
 |       |                       +-- of IN prep
 |       |                           +-- resources NNS pobj
 |       |                               +-- of IN prep
 |       |                                   +-- type NN pobj
 |       +-- agent NN dep
 |       |   +-- r NN nn
 |       +-- has VBZ rcmod
 |           +-- a DT nsubj
 +-- . . punct
Input: -LRB- c -RRB- For each task t ? T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires .
Parse:
create VB ROOT
 +-- c LS dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- For IN prep
 |   +-- t NN pobj
 |       +-- each DT det
 |       +-- task NN nn
 +-- ? . punct
 +-- T NNP nsubj
 +-- node NN dobj
 |   +-- a DT det
 |   +-- task NN nn
 |   +-- and CC cc
 |   +-- edge NN conj
 |   |   +-- an DT det
 |   |   +-- from IN prep
 |   |   |   +-- node NN pobj
 |   |   |       +-- this DT det
 |   |   +-- to IN prep
 |   |   |   +-- s CD pobj
 |   |   +-- with IN prep
 |   |       +-- capacity NN pobj
 |   +-- equal JJ amod
 |       +-- to IN prep
 |           +-- amount NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- resources NNS pobj
 |                       +-- of IN prep
 |                           +-- type NN pobj
 |                               +-- requires VBZ rcmod
 |                                   +-- T NN nsubj
 |                                       +-- r CD num
 |                                       +-- task NN nn
 +-- . . punct
Input: -LRB- d -RRB- For each agent a connect the agent node to all task nodes of neighboring tasks , i.e. , t ? -LRB- t ? T | -LRB- a , loc -LRB- t -RRB- -RRB- ? AE -RRB- .
Parse:
connect NN ROOT
 +-- d LS dep
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- For IN prep
 |   +-- agent NN pobj
 |       +-- each DT det
 +-- a DT det
 +-- node NN dobj
 |   +-- the DT det
 |   +-- agent NN nn
 +-- to IN prep
 |   +-- nodes NNS pobj
 |       +-- all DT det
 |       +-- task NN nn
 |       +-- of IN prep
 |       |   +-- tasks NNS pobj
 |       |       +-- neighboring VBG amod
 |       +-- , , punct
 |       +-- i.e. FW advmod
 |       +-- t NNP appos
 |           +-- ? . punct
 |           +-- t VB dep
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- ? . punct
 |           |   +-- T NNP dep
 |           |   |   +-- | , punct
 |           |   |   +-- loc NN appos
 |           |   |       +-- -LRB- -LRB- punct
 |           |   |       +-- a DT det
 |           |   |       +-- , , punct
 |           |   |       +-- t NN dep
 |           |   |       +-- -RRB- -RRB- punct
 |           |   +-- -RRB- -RRB- punct
 |           +-- AE NNP dep
 |           +-- -RRB- -RRB- punct
 +-- . . punct
Input: Give this connection unlimited capacity .
Parse:
Give VB ROOT
 +-- connection NN iobj
 |   +-- this DT det
 +-- capacity NN dobj
 |   +-- unlimited JJ amod
 +-- . . punct
Input: networks .
Parse:
networks NNS ROOT
 +-- . . punct
Input: If the maximum flow in each network is equal to the total required resources of that type , the current combination of tasks is feasible .
Parse:
feasible JJ ROOT
 +-- equal JJ advcl
 |   +-- If IN mark
 |   +-- flow NN nsubj
 |   |   +-- the DT det
 |   |   +-- maximum JJ amod
 |   |   +-- in IN prep
 |   |       +-- network NN pobj
 |   |           +-- each DT det
 |   +-- is VBZ cop
 |   +-- to IN prep
 |       +-- resources NNS pobj
 |           +-- the DT det
 |           +-- total NN amod
 |           +-- required VBN amod
 |           +-- of IN prep
 |               +-- type NN pobj
 |                   +-- that DT det
 +-- , , punct
 +-- combination NN nsubj
 |   +-- the DT det
 |   +-- current JJ amod
 |   +-- of IN prep
 |       +-- tasks NNS pobj
 +-- is VBZ cop
 +-- . . punct
Input: In that case , this is the current best combination of tasks .
Parse:
combination NN ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- that DT det
 +-- , , punct
 +-- this DT nsubj
 +-- is VBZ cop
 +-- the DT det
 +-- current JJ amod
 +-- best JJS amod
 +-- of IN prep
 |   +-- tasks NNS pobj
 +-- . . punct
Input: Proof .
Parse:
Proof NNP ROOT
 +-- . . punct
Input: In the worst case , in each iteration exactly one task is removed from a task list , so there are n iterations .
Parse:
removed VBN ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- worst JJS amod
 +-- , , punct
 +-- in IN prep
 |   +-- iteration NN pobj
 |       +-- each DT det
 +-- task NN nsubjpass
 |   +-- one CD num
 |       +-- exactly RB quantmod
 +-- is VBZ auxpass
 +-- from IN prep
 |   +-- list NN pobj
 |       +-- a DT det
 |       +-- task NN nn
 +-- are VBP advcl
 |   +-- so IN mark
 |   +-- there EX expl
 |   +-- iterations NNS nsubj
 |       +-- n RB advmod
 +-- . . punct
Input: In each iteration in the worst case -LRB- i.e. , a fully connected network -RRB- , for each of the O -LRB- n -RRB- managers , O -LRB- m -RRB- messages are sent .
Parse:
sent VBN ROOT
 +-- In IN prep
 |   +-- iteration NN pobj
 |       +-- each DT det
 +-- in IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- worst JJS amod
 |       +-- network NN dep
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- i.e. FW dep
 |       |   +-- , , punct
 |       |   +-- a DT det
 |       |   +-- connected VBN amod
 |       |   |   +-- fully RB advmod
 |       |   +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- for IN prep
 |           +-- each DT pobj
 |               +-- of IN prep
 |                   +-- managers NNS pobj
 |                       +-- the DT det
 |                       +-- O NN nn
 |                       +-- -LRB- -LRB- punct
 |                       +-- n CC nn
 |                       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- messages NNS nsubjpass
 |   +-- m LS nn
 |       +-- O NNP amod
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- are VBP auxpass
 +-- . . punct
Input: Next the task with the highest efficiency can be selected by each contractor in O -LRB- n -RRB- .
Parse:
selected VBN ROOT
 +-- task NN nsubjpass
 |   +-- Next IN amod
 |   +-- the DT det
 |   +-- with IN prep
 |       +-- efficiency NN pobj
 |           +-- the DT det
 |           +-- highest JJS amod
 +-- can MD aux
 +-- be VB auxpass
 +-- by IN prep
 |   +-- contractor NN pobj
 |       +-- each DT det
 +-- in IN prep
 |   +-- O NNP pobj
 |       +-- -LRB- -LRB- punct
 |       +-- n LS dep
 |       +-- -RRB- -RRB- punct
 +-- . . punct
Input: Assigning an allocation can be done in O -LRB- m -RRB- .
Parse:
done VBN ROOT
 +-- Assigning VBG nsubjpass
 |   +-- allocation NN dobj
 |       +-- an DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- in IN prep
 |   +-- O NNP pobj
 |       +-- -LRB- -LRB- punct
 |       +-- m NN dep
 |       +-- -RRB- -RRB- punct
 +-- . . punct
Input: This leads to a total of O -LRB- n + m -RRB- operations for each iteration , and thus O -LRB- n2 + nm -RRB- operations in total .
Parse:
leads VBZ ROOT
 +-- This DT nsubj
 +-- to IN prep
 |   +-- total NN pobj
 |   |   +-- a DT det
 |   |   +-- of IN prep
 |   |   |   +-- operations NNS pobj
 |   |   |       +-- O NNP nn
 |   |   |           +-- -LRB- -LRB- punct
 |   |   |           +-- m NN dep
 |   |   |           |   +-- n CC nn
 |   |   |           |   +-- + SYM dep
 |   |   |           +-- -RRB- -RRB- punct
 |   |   +-- for IN prep
 |   |       +-- iteration NN pobj
 |   |           +-- each DT det
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- thus RB conj
 |   +-- operations NNS pobj
 |       +-- O FW dep
 |       +-- -LRB- -LRB- punct
 |       +-- n2 CD nn
 |       |   +-- + SYM prep
 |       |       +-- nm NNP dep
 |       +-- -RRB- -RRB- punct
 |       +-- in IN prep
 |           +-- total NN pobj
 +-- . . punct
Input: The number of messages sent is O -LRB- n -LRB- nm + nm + nm -RRB- -RRB- = O -LRB- n2 m -RRB- .
Parse:
O DT ROOT
 +-- number NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- messages NNS pobj
 |           +-- sent VBN partmod
 +-- is VBZ cop
 +-- -LRB- -LRB- punct
 +-- n CC cc
 +-- nm NNP conj
 |   +-- nm NNP nn
 |   +-- + SYM dep
 |   +-- + SYM prep
 |       +-- nm , pobj
 +-- -RRB- -RRB- punct
 +-- = SYM dep
 +-- m NN ccomp
 |   +-- O FW dep
 |   +-- -LRB- -LRB- punct
 |   +-- n2 CD num
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: We establish the quality of this protocol experimentally -LRB- in Section 5 -RRB- .
Parse:
establish VBP ROOT
 +-- We PRP nsubj
 +-- quality NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- protocol NN pobj
 |           +-- this DT det
 +-- experimentally RB advmod
 +-- in IN prep
 |   +-- -LRB- -LRB- punct
 |   +-- Section NN pobj
 |   |   +-- 5 CD num
 |   +-- -RRB- -RRB- punct
 +-- . . punct
Input: Preferably , we compare the results to the optimal solution .
Parse:
compare VBP ROOT
 +-- Preferably RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- results NNS dobj
 |   +-- the DT det
 |   +-- to IN prep
 |       +-- solution NN pobj
 |           +-- the DT det
 |           +-- optimal JJ amod
 +-- . . punct
Input: 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network .
Parse:
deal VB ROOT
 +-- allocation NN nsubj
 |   +-- 4.2 CD num
 |   +-- Optimal JJ amod
 |   +-- task NN nn
 |       +-- social JJ amod
 +-- algorithm NN nsubj
 |   +-- The DT det
 |   +-- optimal JJ amod
 |   +-- allocation NN nn
 |       +-- task NN nn
 +-- should MD aux
 +-- with IN prep
 |   +-- restrictions NNS pobj
 |       +-- the DT det
 |       +-- posed VBN partmod
 |           +-- by IN prep
 |               +-- network NN pobj
 |                   +-- the DT det
 |                   +-- social JJ amod
 +-- . . punct
Input: For this NPcomplete problem we used an exponential brute force algorithm to consider relevant combinations of tasks to execute .
Parse:
used VBD ROOT
 +-- For IN prep
 |   +-- problem NN pobj
 |       +-- this DT det
 |       +-- NPcomplete JJ amod
 +-- we PRP nsubj
 +-- algorithm NN dobj
 |   +-- an DT det
 |   +-- exponential JJ amod
 |   +-- force NN nn
 |       +-- brute JJ amod
 +-- consider VB xcomp
 |   +-- to TO aux
 |   +-- execute VB xcomp
 |       +-- combinations NNS nsubj
 |       |   +-- relevant JJ amod
 |       |   +-- of IN prep
 |       |       +-- tasks NNS pobj
 |       +-- to TO aux
 +-- . . punct
Input: For each combination we use a maximum flow algorithm to check whether the resources are sufficient for the selected subset of tasks .
Parse:
use VBP ROOT
 +-- For IN prep
 |   +-- combination NN pobj
 |       +-- each DT det
 +-- we PRP nsubj
 +-- algorithm NN dobj
 |   +-- a DT det
 |   +-- maximum JJ amod
 |   +-- flow NN nn
 +-- check VB xcomp
 |   +-- to TO aux
 |   +-- sufficient JJ ccomp
 |       +-- whether IN mark
 |       +-- resources NNS nsubj
 |       |   +-- the DT det
 |       +-- are VBP cop
 |       +-- for IN prep
 |           +-- subset NN pobj
 |               +-- the DT det
 |               +-- selected VBN amod
 |               +-- of IN prep
 |                   +-- tasks NNS pobj
 +-- . . punct
Input: The flow network describes which resources can be used for which tasks , depending on the social network .
Parse:
describes VBZ ROOT
 +-- network NN nsubj
 |   +-- The DT det
 |   +-- flow NN nn
 +-- used VBN ccomp
 |   +-- resources NNS nsubjpass
 |   |   +-- which WDT det
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- for IN prep
 |   |   +-- tasks NNS pobj
 |   |       +-- which WDT det
 |   +-- , , punct
 |   +-- depending VBG prep
 |       +-- on IN pcomp
 |           +-- network NN pobj
 |               +-- the DT det
 |               +-- social JJ amod
 +-- . . punct
Input: If the maximum flow is equal to the sum of all resources required by the subset of tasks , we know that a feasible solution exists -LRB- see Algorithm 2 -RRB- .
Parse:
know VBP ROOT
 +-- equal JJ advcl
 |   +-- If IN mark
 |   +-- flow NN nsubj
 |   |   +-- the DT det
 |   |   +-- maximum JJ amod
 |   +-- is VBZ cop
 |   +-- to IN prep
 |       +-- sum NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- resources NNS pobj
 |                   +-- all DT det
 |                   +-- required VBN partmod
 |                       +-- by IN prep
 |                           +-- subset NN pobj
 |                               +-- the DT det
 |                               +-- of IN prep
 |                                   +-- tasks NNS pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- exists VBZ ccomp
 |   +-- that IN mark
 |   +-- solution NN nsubj
 |   |   +-- a DT det
 |   |   +-- feasible JJ amod
 |   +-- see VB parataxis
 |       +-- -LRB- -LRB- punct
 |       +-- Algorithm NNP dobj
 |       |   +-- 2 CD num
 |       +-- -RRB- -RRB- punct
 +-- . . punct
Input: Clearly , we can not expect this optimal algorithm to be able to find solutions for larger problem sizes .
Parse:
expect VB ROOT
 +-- Clearly RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- not RB neg
 +-- able JJ xcomp
 |   +-- algorithm NN nsubj
 |   |   +-- this DT det
 |   |   +-- optimal NN amod
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- find VB xcomp
 |       +-- to TO aux
 |       +-- solutions NNS dobj
 |           +-- for IN prep
 |               +-- sizes NNS pobj
 |                   +-- larger JJR amod
 |                   +-- problem NN nn
 +-- . . punct
Input: To establish the quality of our protocol for large instances , we use the following method to determine an upper bound .
Parse:
use VBP ROOT
 +-- establish VB advcl
 |   +-- To TO aux
 |   +-- quality NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- protocol NN pobj
 |   |           +-- our PRP$ poss
 |   +-- for IN prep
 |       +-- instances NNS pobj
 |           +-- large JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- method NN dobj
 |   +-- the DT det
 |   +-- following VBG amod
 +-- determine VB xcomp
 |   +-- to TO aux
 |   +-- bound VBN dobj
 |       +-- an DT det
 |       +-- upper JJ amod
 +-- . . punct
Input: 4.3 Upper bound for social task allocation Given a social task allocation problem , if the number of resource types for every task t ? T is bounded by 1 , the Algorithm 3 An upper bound for social task allocation .
Parse:
Given VBN ROOT
 +-- Upper NNP nsubj
 |   +-- 4.3 CD num
 |   +-- bound VBD partmod
 |       +-- for IN prep
 |           +-- allocation NN pobj
 |               +-- task NN nn
 |                   +-- social JJ amod
 +-- problem NN dobj
 |   +-- a DT det
 |   +-- task NN nn
 |   |   +-- social JJ amod
 |   +-- allocation NN nn
 +-- , , punct
 +-- bounded VBN advcl
 |   +-- if IN mark
 |   +-- number NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- types NNS pobj
 |   |   |       +-- resource NN nn
 |   |   +-- for IN prep
 |   |   |   +-- t NN pobj
 |   |   |       +-- every DT det
 |   |   |       +-- task NN nn
 |   |   +-- ? . punct
 |   |   +-- T NN dep
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- 1 CD pobj
 +-- An DT dep
 |   +-- , , punct
 |   +-- the DT det
 |   +-- Algorithm NNP nn
 |   +-- 3 CD num
 |   +-- bound VBN dep
 |       +-- upper JJ amod
 |       +-- for IN prep
 |           +-- allocation NN pobj
 |               +-- task NN nn
 |                   +-- social JJ amod
 +-- . . punct
Input: Create a network flow problem with costs as follows
Parse:
Create VB ROOT
 +-- problem NN dobj
 |   +-- a DT det
 |   +-- network NN nn
 |   +-- flow NN nn
 +-- with IN prep
 |   +-- costs NNS pobj
 +-- follows VBZ advcl
     +-- as IN mark
