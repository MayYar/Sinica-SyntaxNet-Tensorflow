
1
Input: In both encryption approaches the encrypted event content has a globally unique identifier -LRB- i.e .
Parse:
approaches VBZ ROOT
 +-- In IN prep
 |   +-- encryption NN pobj
 |       +-- both DT det
 +-- has VBZ ccomp
 |   +-- content NN nsubj
 |   |   +-- the DT det
 |   |   +-- encrypted VBN amod
 |   |   +-- event NN nn
 |   +-- identifier NN dobj
 |       +-- a DT det
 |       +-- unique JJ amod
 |       |   +-- globally RB advmod
 |       +-- -LRB- -LRB- punct
 |       +-- i.e NN dep
 +-- . . punct

2
Input: the event type or the attribute identifier -RRB- .
Parse:
type NN ROOT
 +-- the DT det
 +-- event NN nn
 +-- or CC cc
 +-- identifier NN conj
 |   +-- the DT det
 |   +-- attribute NN amod
 +-- -RRB- -RRB- punct
 +-- . . punct

3
Input: That identifier is used to determine the encryption key to use when encrypting or decrypting the content .
Parse:
used VBN ROOT
 +-- identifier NN nsubjpass
 |   +-- That DT det
 +-- is VBZ auxpass
 +-- determine VB xcomp
 |   +-- to TO aux
 |   +-- key NN dobj
 |       +-- the DT det
 |       +-- encryption NN nn
 |       +-- use VB infmod
 |           +-- to TO aux
 |           +-- encrypting VBG advcl
 |               +-- when WRB advmod
 |               +-- or CC cc
 |               +-- decrypting VBG conj
 |               +-- content NN dobj
 |                   +-- the DT det
 +-- . . punct

4
Input: Each event type , in event encryption , and attribute , in attribute encryption , has its own individual encryption key .
Parse:
has VBZ ROOT
 +-- type NN nsubj
 |   +-- Each DT det
 |   +-- event NN nn
 |   +-- , , punct
 |   +-- in IN prep
 |   |   +-- encryption NN pobj
 |   |       +-- event NN nn
 |   +-- and CC cc
 |   +-- attribute VB conj
 |       +-- , , punct
 |       +-- in IN prep
 |           +-- attribute NN pcomp
 |               +-- encryption NN dobj
 +-- , , punct
 +-- key NN dobj
 |   +-- its PRP$ poss
 |   +-- own JJ amod
 |   +-- individual JJ amod
 |   +-- encryption NN nn
 +-- . . punct

5
Input: By controlling access to the encryption key we effectively control access to the encrypted event content .
Parse:
control VBP ROOT
 +-- By IN prep
 |   +-- controlling VBG pcomp
 |       +-- access NN dobj
 |           +-- to IN prep
 |               +-- key NN pobj
 |                   +-- the DT det
 |                   +-- encryption NN nn
 +-- we PRP nsubj
 +-- effectively RB advmod
 +-- access NN dobj
 |   +-- to IN prep
 |       +-- content NN pobj
 |           +-- the DT det
 |           +-- encrypted VBN amod
 |           +-- event NN nn
 +-- . . punct

6
Input: In order to control access to the encryption keys we form a key group of brokers for each individual encryption key .
Parse:
form VBP ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- control VB infmod
 |           +-- to TO aux
 |           +-- access NN dobj
 |               +-- to IN prep
 |                   +-- keys NNS pobj
 |                       +-- the DT det
 |                       +-- encryption NN nn
 +-- we PRP nsubj
 +-- group NN dobj
 |   +-- a DT det
 |   +-- key JJ amod
 |   +-- of IN prep
 |       +-- brokers NNS pobj
 |           +-- for IN prep
 |               +-- key NN pobj
 |                   +-- each DT det
 |                   +-- individual JJ amod
 |                   +-- encryption NN nn
 +-- . . punct

7
Input: The key group is used to refresh the key when necessary and to deliver the new key to all current members of the key group .
Parse:
used VBN ROOT
 +-- group NN nsubjpass
 |   +-- The DT det
 |   +-- key JJ amod
 +-- is VBZ auxpass
 +-- refresh VB xcomp
 |   +-- to TO aux
 |   +-- key NN dobj
 |   |   +-- the DT det
 |   +-- necessary JJ advcl
 |   |   +-- when WRB advmod
 |   +-- and CC cc
 |   +-- deliver VB conj
 |       +-- to TO aux
 |       +-- key NN dobj
 |       |   +-- the DT det
 |       |   +-- new JJ amod
 |       +-- to IN prep
 |           +-- members NNS pobj
 |               +-- all DT det
 |               +-- current JJ amod
 |               +-- of IN prep
 |                   +-- group NN pobj
 |                       +-- the DT det
 |                       +-- key JJ amod
 +-- . . punct

8
Input: The key group manager is responsible for verifying that a new member requesting to join the key group is authorised to do so .
Parse:
responsible JJ ROOT
 +-- manager NN nsubj
 |   +-- The DT det
 |   +-- key JJ amod
 |   +-- group NN nn
 +-- is VBZ cop
 +-- for IN prep
 |   +-- verifying VBG pcomp
 |       +-- authorised VBN ccomp
 |           +-- that IN mark
 |           +-- member NN nsubj
 |           |   +-- a DT det
 |           |   +-- new JJ amod
 |           |   +-- requesting VBG partmod
 |           |       +-- join VB xcomp
 |           |           +-- to TO aux
 |           |           +-- group NN dobj
 |           |               +-- the DT det
 |           |               +-- key JJ amod
 |           +-- is VBZ cop
 |           +-- do VB xcomp
 |               +-- to TO aux
 |               +-- so RB advmod
 +-- . . punct

9
Input: Therefore the key group manager must be trusted by the type owner to enforce the access control policy .
Parse:
trusted VBN ROOT
 +-- Therefore RB advmod
 +-- manager NN nsubjpass
 |   +-- the DT det
 |   +-- key JJ amod
 |   +-- group NN nn
 +-- must MD aux
 +-- be VB auxpass
 +-- by IN prep
 |   +-- owner NN pobj
 |       +-- the DT det
 |       +-- type NN nn
 +-- enforce VB xcomp
 |   +-- to TO aux
 |   +-- policy NN dobj
 |       +-- the DT det
 |       +-- control NN nn
 |           +-- access NN nn
 +-- . . punct

10
Input: We assume that the key group manager is either a trusted third party or alternatively a member of the type owner '' s domain .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- party NN ccomp
 |   +-- that IN mark
 |   +-- manager NN nsubj
 |   |   +-- the DT det
 |   |   +-- key JJ amod
 |   |   +-- group NN nn
 |   +-- is VBZ cop
 |   +-- either CC preconj
 |   +-- a DT det
 |   +-- trusted VBN amod
 |   +-- third JJ amod
 |   +-- or CC cc
 |   +-- alternatively RB advmod
 |   +-- member NN conj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- domain NN pobj
 |               +-- owner NN poss
 |                   +-- the DT det
 |                   +-- type NN nn
 |                   +-- '' '' punct
 |                   +-- s POS possessive
 +-- . . punct

11
Input: In -LRB- 12 -RRB- Pesonen et al .
Parse:
In IN ROOT
 +-- 12 CD pobj
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 |   +-- al NNP dep
 |       +-- Pesonen NNP nn
 |       +-- et CC nn
 +-- . . punct

12
Input: proposed a capability based access control architecture for multi domain publish subscribe systems .
Parse:
proposed VBD ROOT
 +-- architecture NN dobj
 |   +-- a DT det
 |   +-- based VBN amod
 |   |   +-- capability NN dep
 |   +-- control NN nn
 |   |   +-- access NN nn
 |   +-- publish VB infmod
 |       +-- for IN mark
 |       +-- domain NN nsubj
 |       |   +-- multi JJ amod
 |       +-- systems NNS dobj
 |           +-- subscribe NN nn
 +-- . . punct

13
Input: The approach uses capabilities to decentralise the access control policy amongst the publish subscribe nodes -LRB- i.e .
Parse:
uses VBZ ROOT
 +-- approach NN nsubj
 |   +-- The DT det
 +-- capabilities NNS dobj
 +-- decentralise VB xcomp
 |   +-- to TO aux
 |   +-- subscribe NN ccomp
 |       +-- policy NN nsubj
 |       |   +-- the DT det
 |       |   +-- control NN nn
 |       |   |   +-- access NN nn
 |       |   +-- amongst IN prep
 |       |       +-- publish NN pobj
 |       |           +-- the DT det
 |       +-- i.e NN dep
 |           +-- nodes NNS dep
 |           +-- -LRB- -LRB- punct
 +-- . . punct

14
Input: clients and brokers -RRB-
Parse:
clients NNS ROOT
 +-- and CC cc
 +-- brokers NNS conj
 +-- -RRB- -RRB- punct

15
Input: Authority to access a given event type is granted by the owner of that type issuing a capability to a node .
Parse:
granted VBN ROOT
 +-- Authority NN nsubjpass
 |   +-- access VB infmod
 |       +-- to TO aux
 |       +-- type NN dobj
 |           +-- a DT det
 |           +-- given VBN amod
 |           +-- event NN nn
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- owner NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- type NN pobj
 |               +-- that DT det
 |               +-- issuing VBG partmod
 |                   +-- capability NN dobj
 |                   |   +-- a DT det
 |                   +-- to IN prep
 |                       +-- node NN pobj
 |                           +-- a DT det
 +-- . . punct

16
Input: The capability defines the event type , the action , and the attributes that Type Owner ACS Broker Key Manager 1.Grant authorisation for Number Platekey 2.Broker requests to join Number Plate key group 5.If the broker satisfies all checks , they will begin receiving appropriate keys .
Parse:
defines VBZ ROOT
 +-- capability NN nsubj
 |   +-- The DT det
 +-- type NN dobj
 |   +-- the DT det
 |   +-- event NN nn
 |   +-- , , punct
 |   +-- action NN conj
 |   |   +-- the DT det
 |   +-- and CC cc
 |   +-- attributes NNS conj
 |       +-- the DT det
 |       +-- authorisation NN rcmod
 |       |   +-- that WDT dobj
 |       |   +-- Manager NNP nsubj
 |       |       +-- Owner NN nn
 |       |       |   +-- Type NNP nn
 |       |       +-- ACS NNP nn
 |       |       +-- Broker NNP nn
 |       |       +-- Key NNP nn
 |       |       +-- 1.Grant CD num
 |       +-- join VB infmod
 |           +-- for IN mark
 |           +-- requests NNS nsubj
 |           |   +-- Platekey NNP nn
 |           |   |   +-- Number NNP nn
 |           |   +-- 2.Broker CD num
 |           +-- to TO aux
 |           +-- 5.If CD dobj
 |               +-- group NN nn
 |               |   +-- Plate NN nn
 |               |   |   +-- Number NNP nn
 |               |   +-- key JJ amod
 |               +-- satisfies VBZ rcmod
 |                   +-- broker NN nsubj
 |                   |   +-- the DT det
 |                   +-- checks NNS dobj
 |                       +-- all DT det
 +-- , , punct
 +-- begin VB ccomp
 |   +-- they PRP nsubj
 |   +-- will MD aux
 |   +-- receiving VBG xcomp
 |       +-- keys NNS dobj
 |           +-- appropriate JJ amod
 +-- . . punct

17
Input: 3.Key manager may check broker '' s credentials at the Access Control Service 4.Key manager may check that the Type Owner permits access Figure 4
Parse:
check VB ROOT
 +-- manager NN nsubj
 |   +-- 3.Key CD num
 +-- may MD aux
 +-- check VB ccomp
     +-- credentials NNS nsubj
     |   +-- broker NN poss
     |   |   +-- '' '' punct
     |   |   +-- s POS possessive
     |   +-- at IN prep
     |       +-- manager NN pobj
     |           +-- the DT det
     |           +-- Service NNP nn
     |           |   +-- Access NNP nn
     |           |   +-- Control NNP nn
     |           +-- 4.Key CD nn
     +-- may MD aux
     +-- permits VBZ ccomp
         +-- that IN mark
         +-- Owner NN nsubj
         |   +-- the DT det
         |   +-- Type NN nn
         +-- Figure NN dobj
             +-- access NN nn
             +-- 4 CD num

18
Input: For example , a tuple < NP , subscribe , * > would authorise the owner to subscribe to Numberplate events with access to all attributes in the published events .
Parse:
authorise VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- tuple NN nsubj
 |   +-- a DT det
 |   +-- NP NNP appos
 |       +-- < -LRB- punct
 |       +-- , , punct
 |       +-- subscribe UH dep
 |       +-- * NFP punct
 |       +-- > -RRB- punct
 +-- would MD aux
 +-- owner NN dobj
 |   +-- the DT det
 +-- subscribe VB xcomp
 |   +-- to TO aux
 |   +-- to IN prep
 |   |   +-- events NNS pobj
 |   |       +-- Numberplate VB nn
 |   +-- with IN prep
 |       +-- access NN pobj
 |           +-- to IN prep
 |               +-- attributes NNS pobj
 |                   +-- all DT det
 |                   +-- in IN prep
 |                       +-- events NNS pobj
 |                           +-- the DT det
 |                           +-- published VBN amod
 +-- . . punct

19
Input: The sequence of events required for a broker to successfully join a key group is shown in Fig .
Parse:
shown VBN ROOT
 +-- sequence NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- events NNS pobj
 |           +-- required VBN partmod
 |               +-- join VB advcl
 |                   +-- for IN mark
 |                   +-- broker NN nsubj
 |                   |   +-- a DT det
 |                   +-- to TO aux
 |                   +-- successfully RB advmod
 |                   +-- group NN dobj
 |                       +-- a DT det
 |                       +-- key JJ amod
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- Fig NNP pobj
 +-- . . punct

20
Input: 4 .
Parse:
4 LS ROOT
 +-- . . punct

21
Input: Both the client hosting broker and the client must be authorised to make the client '' s request .
Parse:
authorised VBN ROOT
 +-- broker NN nsubj
 |   +-- Both CC preconj
 |   +-- the DT det
 |   +-- hosting VBG nn
 |   |   +-- client NN nn
 |   +-- and CC cc
 |   +-- client NN conj
 |       +-- the DT det
 +-- must MD aux
 +-- be VB cop
 +-- make VB xcomp
 |   +-- to TO aux
 |   +-- request NN dobj
 |       +-- client NN poss
 |           +-- the DT det
 |           +-- '' '' punct
 |           +-- s POS possessive
 +-- . . punct

22
Input: That is , if the client makes a subscription request for Numberplate events , both the client and the local broker must be authorised to subscribe to Numberplate events .
Parse:
is VBZ ROOT
 +-- That DT nsubj
 +-- , , punct
 +-- authorised VBN ccomp
 |   +-- makes VBZ advcl
 |   |   +-- if IN mark
 |   |   +-- client NN nsubj
 |   |   |   +-- the DT det
 |   |   +-- request NN dobj
 |   |       +-- a DT det
 |   |       +-- subscription NN nn
 |   |       +-- for IN prep
 |   |           +-- events NNS pobj
 |   |               +-- Numberplate JJ amod
 |   +-- , , punct
 |   +-- client NN nsubj
 |   |   +-- both CC preconj
 |   |   +-- the DT det
 |   |   +-- and CC cc
 |   |   +-- broker NN conj
 |   |       +-- the DT det
 |   |       +-- local JJ amod
 |   +-- must MD aux
 |   +-- be VB cop
 |   +-- subscribe VB xcomp
 |       +-- to TO aux
 |       +-- to IN prep
 |           +-- events NNS pobj
 |               +-- Numberplate NNP nn
 +-- . . punct

23
Input: This is because from the perspective of the broker network , the local broker acts as a proxy for the client .
Parse:
is VBZ ROOT
 +-- This DT nsubj
 +-- acts VBZ advcl
 |   +-- because IN mark
 |   +-- from IN prep
 |   |   +-- perspective NN pobj
 |   |       +-- the DT det
 |   |       +-- of IN prep
 |   |           +-- network NN pobj
 |   |               +-- the DT det
 |   |               +-- broker NN nn
 |   +-- , , punct
 |   +-- broker NN nsubj
 |   |   +-- the DT det
 |   |   +-- local JJ amod
 |   +-- as IN prep
 |       +-- proxy NN pobj
 |           +-- a DT det
 |           +-- for IN prep
 |               +-- client NN pobj
 |                   +-- the DT det
 +-- . . punct

24
Input: We use the same capabilities to authorise membership in a key group that are used to authorise publish subscribe requests .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- capabilities NNS dobj
 |   +-- the DT det
 |   +-- same JJ amod
 +-- authorise VB xcomp
 |   +-- to TO aux
 |   +-- membership NN dobj
 |       +-- in IN prep
 |           +-- group NN pobj
 |               +-- a DT det
 |               +-- key JJ amod
 |               +-- used VBN rcmod
 |                   +-- that WDT nsubjpass
 |                   +-- are VBP auxpass
 |                   +-- authorise VB xcomp
 |                       +-- to TO aux
 |                       +-- publish VB ccomp
 |                           +-- requests NNS dobj
 |                               +-- subscribe NN nn
 +-- . . punct

25
Input: Not doing so could lead to the inconsistent situation where a SHB is authorised to make a subscription on behalf of its clients , but is not able to decrypt incoming event content for them .
Parse:
lead VB ROOT
 +-- doing VBG csubj
 |   +-- Not RB neg
 |   +-- so RB advmod
 +-- could MD aux
 +-- to IN prep
 |   +-- situation NN pobj
 |       +-- the DT det
 |       +-- inconsistent JJ amod
 |       +-- authorised VBN rcmod
 |           +-- where WRB advmod
 |           +-- SHB NN nsubj
 |           |   +-- a DT det
 |           +-- is VBZ cop
 |           +-- make VB xcomp
 |               +-- to TO aux
 |               +-- subscription NN dobj
 |               |   +-- a DT det
 |               +-- on IN prep
 |                   +-- behalf NN pobj
 |                       +-- of IN prep
 |                           +-- clients NNS pobj
 |                               +-- its PRP$ poss
 +-- , , punct
 +-- but CC cc
 +-- able JJ conj
 |   +-- is VBZ cop
 |   +-- not RB neg
 |   +-- decrypt VB xcomp
 |       +-- to TO aux
 |       +-- content NN dobj
 |       |   +-- incoming JJ amod
 |       |   +-- event NN nn
 |       +-- for IN prep
 |           +-- them PRP pobj
 +-- . . punct

26
Input: In the Numberplate example above , the local broker holding the above capability is authorised to join the Numberplate key group as well as the key groups for all the attributes in the Numberplate event type .
Parse:
authorised VBN ROOT
 +-- In IN prep
 |   +-- example NN pobj
 |       +-- the DT det
 |       +-- Numberplate NNP nn
 |       +-- above RB advmod
 +-- , , punct
 +-- broker NN nsubj
 |   +-- the DT det
 |   +-- local JJ amod
 |   +-- holding VBG partmod
 |       +-- capability NN dobj
 |           +-- the DT det
 |           +-- above JJ amod
 +-- is VBZ cop
 +-- join VB xcomp
 |   +-- to TO aux
 |   +-- group NN dobj
 |       +-- the DT det
 |       +-- Numberplate JJ amod
 |       +-- key JJ amod
 |       +-- well RB cc
 |       |   +-- as RB advmod
 |       |   +-- as IN mwe
 |       +-- groups NNS conj
 |           +-- the DT det
 |           +-- key JJ amod
 |           +-- for IN prep
 |               +-- attributes NNS pobj
 |                   +-- all PDT predet
 |                   +-- the DT det
 |                   +-- in IN prep
 |                       +-- type NN pobj
 |                           +-- the DT det
 |                           +-- Numberplate NNP nn
 |                           +-- event NN nn
 +-- . . punct

27
Input: 4.1 Secure Group Communication Event content encryption in a decentralised multi domain publish subscribe system can be seen as a sub category of secure group communication .
Parse:
seen VBN ROOT
 +-- encryption NN nsubjpass
 |   +-- 4.1 CD num
 |   +-- Event NNP nn
 |   |   +-- Group NNP nn
 |   |   |   +-- Secure NNP nn
 |   |   +-- Communication NNP nn
 |   +-- content NN nn
 |   +-- in IN prep
 |       +-- system NN pobj
 |           +-- a DT det
 |           +-- domain NN nn
 |           |   +-- decentralised VBN amod
 |           |   +-- multi JJ amod
 |           +-- subscribe NN nn
 |               +-- publish NN nn
 +-- can MD aux
 +-- be VB auxpass
 +-- as IN prep
 |   +-- category NN pobj
 |       +-- a DT det
 |       +-- sub NN nn
 |       +-- of IN prep
 |           +-- communication NN pobj
 |               +-- secure JJ amod
 |               +-- group NN nn
 +-- . . punct

28
Input: In both cases the key management system must scale well with the number of clients , clients might be spread over large geographic areas , there might be high rates of churn in group membership , and all members must be synchronised with each other in time in order to use the same encryption key at the same time .
Parse:
scale VB ROOT
 +-- In IN prep
 |   +-- cases NNS pobj
 |       +-- both DT det
 +-- system NN nsubj
 |   +-- the DT det
 |   +-- key JJ amod
 |   +-- management NN nn
 +-- must MD aux
 +-- well RB advmod
 +-- with IN prep
 |   +-- number NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- clients NNS pobj
 +-- , , punct
 +-- spread VBN ccomp
 |   +-- clients NNS nsubjpass
 |   +-- might MD aux
 |   +-- be VB auxpass
 |   +-- over IN prep
 |       +-- areas NNS pobj
 |           +-- large JJ amod
 |           +-- geographic JJ amod
 +-- rates NNS ccomp
 |   +-- there EX expl
 |   +-- might MD aux
 |   +-- be VB cop
 |   +-- high JJ amod
 |   +-- of IN prep
 |   |   +-- churn NN pobj
 |   +-- in IN prep
 |       +-- membership NN pobj
 |           +-- group NN nn
 +-- and CC cc
 +-- synchronised VBN conj
 |   +-- members NNS nsubj
 |   |   +-- all DT det
 |   +-- must MD aux
 |   +-- be VB cop
 |   +-- with IN prep
 |   |   +-- other JJ pobj
 |   |       +-- each DT det
 |   +-- in IN prep
 |       +-- order NN pobj
 |           +-- use VB infmod
 |               +-- to TO aux
 |               +-- key NN dobj
 |               |   +-- the DT det
 |               |   +-- same JJ amod
 |               |   +-- encryption NN nn
 |               +-- at IN prep
 |                   +-- time NN pobj
 |                       +-- the DT det
 |                       +-- same JJ amod
 +-- . . punct

29
Input: There are a number of scalable key management protocols for secure group communication -LRB- 15 -RRB- .
Parse:
are VBP ROOT
 +-- There EX expl
 +-- number NN nsubj
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- protocols NNS pobj
 |   |       +-- scalable JJ amod
 |   |       +-- key JJ amod
 |   |       +-- management NN nn
 |   +-- for IN prep
 |   |   +-- communication NN pobj
 |   |       +-- secure JJ amod
 |   |       +-- group NN nn
 |   +-- 15 CD appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- . . punct

30
Input: We have implemented the One Way Function Tree -LRB- 8 -RRB- protocol as a proof of concept .
Parse:
implemented VBN ROOT
 +-- We PRP nsubj
 +-- have VBP aux
 +-- protocol NN dobj
 |   +-- the DT det
 |   +-- One CD num
 |   +-- 8 CD nn
 |       +-- Tree NNP dep
 |       |   +-- Way NNP nn
 |       |   +-- Function NNP nn
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- as IN prep
 |   +-- proof NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- concept NN pobj
 +-- . . punct

31
Input: We chose to implement OFT , because of its relatively simplicity and good performance .
Parse:
chose VBD ROOT
 +-- We PRP nsubj
 +-- implement VB xcomp
 |   +-- to TO aux
 |   +-- OFT NN dobj
 |   +-- , , punct
 |   +-- of IN prep
 |       +-- because IN mwe
 |       +-- performance NN pobj
 |           +-- its PRP$ poss
 |           +-- simplicity NN amod
 |               +-- relatively RB advmod
 |               +-- and CC cc
 |               +-- good JJ conj
 +-- . . punct

32
Input: Our implementation uses the same structured overlay network used by the broker network as a transport .
Parse:
uses VBZ ROOT
 +-- implementation NN nsubj
 |   +-- Our PRP$ poss
 +-- network NN dobj
 |   +-- the DT det
 |   +-- same JJ amod
 |   +-- structured JJ amod
 |   +-- overlay NN nn
 |   +-- used VBN partmod
 |       +-- by IN prep
 |       |   +-- network NN pobj
 |       |       +-- the DT det
 |       |       +-- broker NN nn
 |       +-- as IN prep
 |           +-- transport NN pobj
 |               +-- a DT det
 +-- . . punct

33
Input: The OFT protocol is based on a binary tree where the participants are at the leaves of the tree .
Parse:
based VBN ROOT
 +-- protocol NN nsubjpass
 |   +-- The DT det
 |   +-- OFT JJ amod
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- tree NN pobj
 |       +-- a DT det
 |       +-- binary JJ amod
 |       +-- are VBP rcmod
 |           +-- where WRB advmod
 |           +-- participants NNS nsubj
 |           |   +-- the DT det
 |           +-- at IN prep
 |               +-- leaves NNS pobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- tree NN pobj
 |                           +-- the DT det
 +-- . . punct

34
Input: It scales in log2n in processing and communication costs , as well as in the size of the state stored at each participant , which we have verified in our simulations .
Parse:
scales VBZ ROOT
 +-- It PRP nsubj
 +-- in IN prep
 |   +-- costs NNS pobj
 |   |   +-- processing NN nn
 |   |       +-- and CC cc
 |   |       +-- communication NN conj
 |   +-- , , punct
 |   +-- well RB cc
 |   |   +-- as RB advmod
 |   |   +-- as IN mwe
 |   +-- in IN conj
 |       +-- size NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- state NN pobj
 |                   +-- the DT det
 |                   +-- stored VBN partmod
 |                   |   +-- at IN prep
 |                   |       +-- participant NN pobj
 |                   |           +-- each DT det
 |                   +-- , , punct
 |                   +-- verified VBN rcmod
 |                       +-- which WDT dobj
 |                       +-- we PRP nsubj
 |                       +-- have VBP aux
 |                       +-- in IN prep
 |                           +-- simulations NNS pobj
 |                               +-- our PRP$ poss
 +-- . . punct

35
Input: 4.2 Key Refreshing Traditionally in group key management schemes the encryption key is refreshed when a new member joins the group , an 110 existing member leaves the group , or a timer expires .
Parse:
refreshed VBN ROOT
 +-- Refreshing NNP nsubj
 |   +-- 4.2 LS amod
 |   +-- Key NNP amod
 |   +-- in IN prep
 |       +-- Traditionally RB advmod
 |       +-- schemes NNS pobj
 |           +-- group NN nn
 |           +-- key NN amod
 |           +-- management NN nn
 +-- key NN nsubj
 |   +-- the DT det
 |   +-- encryption NN nn
 +-- is VBZ cop
 +-- joins VBZ advcl
 |   +-- when WRB advmod
 |   +-- member NN nsubj
 |   |   +-- a DT det
 |   |   +-- new JJ amod
 |   +-- group NN dobj
 |       +-- the DT det
 +-- , , punct
 +-- leaves VBZ ccomp
 |   +-- member NN nsubj
 |   |   +-- an DT det
 |   |   +-- 110 CD num
 |   |   +-- existing VBG amod
 |   +-- group NN dobj
 |       +-- the DT det
 +-- or CC cc
 +-- expires VBZ conj
 |   +-- timer NN nsubj
 |       +-- a DT det
 +-- . . punct

36
Input: Refreshing the key when a new member joins provides backward secrecy , i.e .
Parse:
provides VBZ ROOT
 +-- Refreshing VBG csubj
 |   +-- key NN dobj
 |       +-- the DT det
 +-- joins VBZ csubj
 |   +-- when WRB advmod
 |   +-- member NN nsubj
 |       +-- a DT det
 |       +-- new JJ amod
 +-- secrecy NN dobj
 |   +-- backward JJ amod
 |   +-- , , punct
 |   +-- i.e NN appos
 +-- . . punct

37
Input: the new member is prevented from accessing old messages .
Parse:
prevented VBN ROOT
 +-- member NN nsubjpass
 |   +-- the DT det
 |   +-- new JJ amod
 +-- is VBZ auxpass
 +-- from IN prep
 |   +-- accessing VBG pcomp
 |       +-- messages NNS dobj
 |           +-- old JJ amod
 +-- . . punct

38
Input: Similarly refreshing the key when an existing member leaves provides forward secrecy , i.e .
Parse:
refreshing VBG ROOT
 +-- Similarly RB advmod
 +-- key NN dobj
 |   +-- the DT det
 +-- provides VBZ advcl
 |   +-- when WRB advmod
 |   +-- leaves NNS nsubj
 |   |   +-- an DT det
 |   |   +-- existing VBG amod
 |   |   +-- member NN nn
 |   +-- forward RB prep
 |       +-- secrecy NN pobj
 |           +-- , , punct
 |           +-- i.e NN appos
 +-- . . punct

39
Input: the old member is prevented from accessing future messages .
Parse:
prevented VBN ROOT
 +-- member NN nsubjpass
 |   +-- the DT det
 |   +-- old JJ amod
 +-- is VBZ auxpass
 +-- from IN prep
 |   +-- accessing VBG pcomp
 |       +-- messages NNS dobj
 |           +-- future JJ amod
 +-- . . punct

40
Input: Timer triggered refreshes are issued periodically in order to limit the damage caused by the current key being compromised .
Parse:
issued VBN ROOT
 +-- refreshes NNS nsubjpass
 |   +-- triggered VBD amod
 |       +-- Timer NN dep
 +-- are VBP auxpass
 +-- periodically RB advmod
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- limit VB infmod
 |           +-- to TO aux
 |           +-- damage NN dobj
 |               +-- the DT det
 |               +-- caused VBN partmod
 |                   +-- by IN prep
 |                       +-- key NN pobj
 |                           +-- the DT det
 |                           +-- current JJ amod
 |                           +-- compromised VBN partmod
 |                               +-- being VBG auxpass
 +-- . . punct

41
Input: Even though the state of the art key management protocols are efficient , refreshing the key unnecessarily introduces extra traffic and processing amongst the key group members .
Parse:
introduces VBZ ROOT
 +-- efficient JJ advcl
 |   +-- Even RB advmod
 |   +-- though IN mark
 |   +-- state NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- protocols NNS pobj
 |   |           +-- the DT det
 |   |           +-- art NN nn
 |   |           +-- key JJ amod
 |   |           +-- management NN nn
 |   +-- are VBP cop
 +-- , , punct
 +-- refreshing VBG csubj
 |   +-- key JJ dobj
 |       +-- the DT det
 +-- unnecessarily RB advmod
 +-- traffic NN dobj
 |   +-- extra JJ amod
 |   +-- and CC cc
 |   +-- processing NN conj
 +-- amongst IN prep
 |   +-- members NNS pobj
 |       +-- the DT det
 |       +-- key JJ amod
 |       +-- group NN nn
 +-- . . punct

42
Input: In our case key group membership is based on the broker holding a capability that authorises it to join the key group .
Parse:
based VBN ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- our PRP$ poss
 +-- membership NN nsubjpass
 |   +-- key JJ amod
 |   +-- group NN nn
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- holding VBG pcomp
 |       +-- broker NN nsubj
 |       |   +-- the DT det
 |       +-- capability NN dobj
 |           +-- a DT det
 |           +-- authorises VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- it PRP dobj
 |               +-- join VB xcomp
 |                   +-- to TO aux
 |                   +-- group NN dobj
 |                       +-- the DT det
 |                       +-- key JJ amod
 +-- . . punct

43
Input: The capability has a set of validity conditions that in their simplest form define a time period when the certificate is valid , and in more complex cases involve on line checks back towards the issuer .
Parse:
has VBZ ROOT
 +-- capability NN nsubj
 |   +-- The DT det
 +-- set NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- conditions NNS pobj
 |           +-- validity NN nn
 |           +-- define VB rcmod
 |               +-- that WDT nsubj
 |               +-- in IN prep
 |               |   +-- form NN pobj
 |               |       +-- their PRP$ poss
 |               |       +-- simplest JJS amod
 |               +-- period NN dobj
 |                   +-- a DT det
 |                   +-- time NN nn
 |                   +-- valid JJ rcmod
 |                       +-- when WRB advmod
 |                       +-- certificate NN nsubj
 |                       |   +-- the DT det
 |                       +-- is VBZ cop
 |                       +-- , , punct
 |                       +-- and CC cc
 |                       +-- involve VBP conj
 |                           +-- in IN prep
 |                           |   +-- cases NNS pobj
 |                           |       +-- complex JJ amod
 |                           |           +-- more JJR advmod
 |                           +-- on IN prep
 |                           |   +-- checks NNS pobj
 |                           |       +-- line NN nn
 |                           +-- back RB advmod
 |                               +-- towards IN prep
 |                                   +-- issuer NN pobj
 |                                       +-- the DT det
 +-- . . punct

44
Input: In order to avoid unnecessary key refreshes the key manager looks at the certificate validity conditions of the joining or leaving member .
Parse:
looks VBZ ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- avoid VB infmod
 |           +-- to TO aux
 |           +-- refreshes NNS dobj
 |               +-- unnecessary JJ amod
 |               +-- key NN amod
 +-- manager NN nsubj
 |   +-- the DT det
 |   +-- key JJ amod
 +-- at IN prep
 |   +-- conditions NNS pobj
 |       +-- the DT det
 |       +-- validity NN nn
 |       |   +-- certificate NN nn
 |       +-- of IN prep
 |           +-- member NN pobj
 |               +-- the DT det
 |               +-- joining VBG nn
 |                   +-- or CC cc
 |                   +-- leaving VBG conj
 +-- . . punct

45
Input: In case of a joining member , if the manager can ascertain that the certificate was valid at the time of the previous key refresh , a new key refresh can be avoided .
Parse:
avoided VBN ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- of IN prep
 |           +-- member NN pobj
 |               +-- a DT det
 |               +-- joining VBG amod
 +-- , , punct
 +-- ascertain VB advcl
 |   +-- if IN mark
 |   +-- manager NN nsubj
 |   |   +-- the DT det
 |   +-- can MD aux
 |   +-- valid JJ ccomp
 |       +-- that IN mark
 |       +-- certificate NN nsubj
 |       |   +-- the DT det
 |       +-- was VBD cop
 |       +-- at IN prep
 |           +-- time NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- refresh NN pobj
 |                       +-- the DT det
 |                       +-- previous JJ amod
 |                       +-- key NN amod
 +-- refresh NN nsubjpass
 |   +-- a DT det
 |   +-- new JJ amod
 |   +-- key JJ amod
 +-- can MD aux
 +-- be VB auxpass
 +-- . . punct

46
Input: Similarly , instead of refreshing the key immediately when a member leaves the key group , the key manager can cache their credentials and refresh the key only when the credentials expire .
Parse:
cache VB ROOT
 +-- Similarly RB advmod
 +-- , , punct
 +-- of IN prep
 |   +-- instead RB advmod
 |   +-- refreshing VBG pcomp
 |       +-- key NN dobj
 |       |   +-- the DT det
 |       +-- immediately RB advmod
 |       +-- leaves VBZ advcl
 |           +-- when WRB advmod
 |           +-- member NN nsubj
 |           |   +-- a DT det
 |           +-- group NN dobj
 |               +-- the DT det
 |               +-- key JJ amod
 +-- manager NN nsubj
 |   +-- the DT det
 |   +-- key JJ amod
 +-- can MD aux
 +-- credentials NNS dobj
 |   +-- their PRP$ poss
 +-- and CC cc
 +-- refresh VB conj
 |   +-- key NN dobj
 |   |   +-- the DT det
 |   +-- expire VBP advcl
 |       +-- when WRB advmod
 |       |   +-- only RB advmod
 |       +-- credentials NNS nsubj
 |           +-- the DT det
 +-- . . punct

47
Input: These situations are both illustrated in Fig.5 .
Parse:
illustrated VBN ROOT
 +-- situations NNS nsubjpass
 |   +-- These DT det
 +-- are VBP auxpass
 +-- both DT dep
 +-- in IN prep
 |   +-- Fig.5 CD pobj
 +-- . . punct

48
Input: It can be assumed that the credentials granted to brokers are relatively static , i.e .
Parse:
assumed VBN ROOT
 +-- It PRP nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- static JJ ccomp
 |   +-- that IN mark
 |   +-- credentials NNS nsubj
 |   |   +-- the DT det
 |   |   +-- granted VBN partmod
 |   |       +-- to IN prep
 |   |           +-- brokers NNS pobj
 |   +-- are VBP cop
 |   +-- relatively RB advmod
 |   +-- , , punct
 |   +-- i.e FW advmod
 +-- . . punct

49
Input: once a domain is authorised to access an event type , the authority will be delegated to all brokers of that domain , and they will have the authority for the foreseeable future .
Parse:
delegated VBN ROOT
 +-- authorised VBN advcl
 |   +-- once RB mark
 |   +-- domain NN nsubj
 |   |   +-- a DT det
 |   +-- is VBZ cop
 |   +-- access VB xcomp
 |       +-- to TO aux
 |       +-- type NN dobj
 |           +-- an DT det
 |           +-- event NN nn
 +-- , , punct
 +-- authority NN nsubj
 |   +-- the DT det
 +-- will MD aux
 +-- be VB cop
 +-- to IN prep
 |   +-- brokers NNS pobj
 |       +-- all DT det
 |       +-- of IN prep
 |           +-- domain NN pobj
 |               +-- that DT det
 +-- and CC cc
 +-- have VB conj
 |   +-- they PRP nsubj
 |   +-- will MD aux
 |   +-- authority NN dobj
 |       +-- the DT det
 |       +-- for IN prep
 |           +-- future NN pobj
 |               +-- the DT det
 |               +-- foreseeable JJ amod
 +-- . . punct

50
Input: More fine grained and dynamic access control would be implemented at the edge of the broker network between the clients and the client hosting brokers .
Parse:
implemented VBN ROOT
 +-- control NN nsubjpass
 |   +-- fine JJ amod
 |   |   +-- More RBR advmod
 |   +-- grained VBN amod
 |   |   +-- and CC cc
 |   |   +-- dynamic JJ conj
 |   +-- access NN nn
 +-- would MD aux
 +-- be VB auxpass
 +-- at IN prep
 |   +-- edge NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- network NN pobj
 |               +-- the DT det
 |               +-- broker NN nn
 +-- between IN prep
 |   +-- clients NNS pobj
 |       +-- the DT det
 |       +-- and CC cc
 |       +-- client NN conj
 |           +-- the DT det
 |           +-- hosting VBG partmod
 |               +-- brokers NNS dobj
 +-- . . punct

51
Input: When an encryption key is refreshed the new key is tagged with a timestamp .
Parse:
tagged VBN ROOT
 +-- refreshed VBN advcl
 |   +-- When WRB advmod
 |   +-- key NN nsubjpass
 |   |   +-- an DT det
 |   |   +-- encryption NN nn
 |   +-- is VBZ auxpass
 +-- key NN nsubjpass
 |   +-- the DT det
 |   +-- new JJ amod
 +-- is VBZ auxpass
 +-- with IN prep
 |   +-- timestamp NN pobj
 |       +-- a DT det
 +-- . . punct

52
Input: The encryption key to use for a given event is selected based on the event '' s publication timestamp .
Parse:
selected VBN ROOT
 +-- key NN nsubjpass
 |   +-- The DT det
 |   +-- encryption NN nn
 |   +-- use VB infmod
 |       +-- to TO aux
 |       +-- for IN prep
 |           +-- event NN pobj
 |               +-- a DT det
 |               +-- given VBN amod
 +-- is VBZ auxpass
 +-- based VBN prep
 |   +-- on IN pcomp
 |       +-- timestamp NN pobj
 |           +-- event NN poss
 |           |   +-- the DT det
 |           |   +-- '' '' punct
 |           |   +-- s POS possessive
 |           +-- publication NN nn
 +-- . . punct

53
Input: The old keys will be kept for a reasonable amount of time in order to allow for some clock drift .
Parse:
kept VBN ROOT
 +-- keys NNS nsubjpass
 |   +-- The DT det
 |   +-- old JJ amod
 +-- will MD aux
 +-- be VB auxpass
 +-- for IN prep
 |   +-- amount NN pobj
 |       +-- a DT det
 |       +-- reasonable JJ amod
 |       +-- of IN prep
 |           +-- time NN pobj
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- allow VB infmod
 |           +-- to TO aux
 |           +-- for IN prep
 |               +-- drift NN pobj
 |                   +-- some DT det
 |                   +-- clock NN nn
 +-- . . punct

54
Input: Setting this value is part of the key management protocol , although exactly how long this time should be will depend on the nature of the application and possibly the size of the network .
Parse:
part NN ROOT
 +-- Setting VBG csubj
 |   +-- value NN dobj
 |       +-- this DT det
 +-- is VBZ cop
 +-- of IN prep
 |   +-- protocol NN pobj
 |       +-- the DT det
 |       +-- key JJ amod
 |       +-- management NN nn
 +-- , , punct
 +-- depend VB advcl
 |   +-- although IN mark
 |   +-- long RB advmod
 |   |   +-- exactly RB advmod
 |   |   +-- how WRB advmod
 |   +-- time NN nsubj
 |   |   +-- this DT det
 |   +-- should MD aux
 |   +-- be VB punct
 |   +-- will MD aux
 |   +-- on IN prep
 |       +-- nature NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- application NN pobj
 |                   +-- the DT det
 |                   +-- and CC cc
 |                   +-- possibly RB advmod
 |                   +-- size NN conj
 |                       +-- the DT det
 |                       +-- of IN prep
 |                           +-- network NN pobj
 |                               +-- the DT det
 +-- . . punct

55
Input: It can be configured independently per key group if necessary. .
Parse:
configured VBN ROOT
 +-- It PRP nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- per IN prep
 |   +-- independently RB advmod
 |   +-- group NN pobj
 |       +-- key JJ amod
 +-- necessary. FW advcl
 |   +-- if IN mark
 +-- . . punct
