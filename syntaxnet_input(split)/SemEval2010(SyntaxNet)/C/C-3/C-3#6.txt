
1
Input: In this section , we will evaluate our approach .
Parse:
evaluate VB ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- will MD aux
 +-- approach NN dobj
 |   +-- our PRP$ poss
 +-- . . punct

2
Input: We will demonstrate the performance of our mechanism in a few scenarios .
Parse:
demonstrate VB ROOT
 +-- We PRP nsubj
 +-- will MD aux
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- mechanism NN pobj
 |   |       +-- our PRP$ poss
 |   +-- in IN prep
 |       +-- scenarios NNS pobj
 |           +-- a DT det
 |           +-- few JJ amod
 +-- . . punct

3
Input: The first scenario is an ideal situation the application runs on a reasonable set of nodes -LRB- i.e. , such that the efficiency is around % -RRB- and no problems such as overloaded networks and processors , crashing processors etc .
Parse:
situation NN ROOT
 +-- scenario NN nsubj
 |   +-- The DT det
 |   +-- first JJ amod
 +-- is VBZ cop
 +-- an DT det
 +-- ideal JJ amod
 +-- runs VBZ rcmod
 |   +-- application NN nsubj
 |   |   +-- the DT det
 |   +-- on IN prep
 |       +-- set NN pobj
 |           +-- a DT det
 |           +-- reasonable JJ amod
 |           +-- of IN prep
 |           |   +-- nodes NNS pobj
 |           +-- -LRB- -LRB- punct
 |           +-- i.e. FW dep
 |           +-- , , punct
 |           +-- % NN dep
 |               +-- such JJ dep
 |               +-- that IN mark
 |               +-- efficiency NN nsubj
 |               |   +-- the DT det
 |               +-- is VBZ cop
 |               +-- around IN advmod
 |               +-- -RRB- -RRB- punct
 |               +-- and CC cc
 |               +-- problems NNS conj
 |                   +-- no DT det
 |                   +-- as IN prep
 |                       +-- such JJ mwe
 |                       +-- networks NNS pobj
 |                           +-- overloaded VBN amod
 |                           +-- and CC cc
 |                           +-- processors NNS conj
 |                           +-- , , punct
 |                           +-- processors NNS appos
 |                           |   +-- crashing VBG nn
 |                           +-- etc FW advmod
 +-- . . punct

4
Input: occur .
Parse:
occur VBP ROOT
 +-- . . punct

5
Input: This scenario allows us to measure the overhead of the adaptation support .
Parse:
allows VBZ ROOT
 +-- scenario NN nsubj
 |   +-- This DT det
 +-- measure VB xcomp
 |   +-- us PRP nsubj
 |   +-- to TO aux
 |   +-- overhead NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- support NN pobj
 |               +-- the DT det
 |               +-- adaptation NN nn
 +-- . . punct

6
Input: The remaining scenarios are typical for grid environments and demonstrate that with our adaptation support the application can avoid serious performance bottlenecks such as overloaded processors or network links .
Parse:
typical JJ ROOT
 +-- scenarios NNS nsubj
 |   +-- The DT det
 |   +-- remaining VBG amod
 +-- are VBP cop
 +-- for IN prep
 |   +-- environments NNS pobj
 |       +-- grid NN nn
 +-- and CC cc
 +-- demonstrate VB conj
 |   +-- avoid VB ccomp
 |       +-- that IN mark
 |       +-- with IN prep
 |       |   +-- support NN pobj
 |       |       +-- our PRP$ poss
 |       |       +-- adaptation NN nn
 |       +-- application NN nsubj
 |       |   +-- the DT det
 |       +-- can MD aux
 |       +-- bottlenecks NNS dobj
 |           +-- serious JJ amod
 |           +-- performance NN nn
 |           +-- as IN prep
 |               +-- such JJ mwe
 |               +-- processors NNS pobj
 |                   +-- overloaded JJ amod
 |                   +-- or CC cc
 |                   +-- links NNS conj
 |                       +-- network NN nn
 +-- . . punct

7
Input: For each scenario , we compare the performance of an application with adaptation support to a non adaptive version .
Parse:
compare VBP ROOT
 +-- For IN prep
 |   +-- scenario NN pobj
 |       +-- each DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- application NN pobj
 |           +-- an DT det
 |           +-- with IN prep
 |               +-- support NN pobj
 |                   +-- adaptation NN nn
 |                   +-- to IN prep
 |                       +-- version NN pobj
 |                           +-- a DT det
 |                           +-- adaptive JJ amod
 |                               +-- non FW advmod
 +-- . . punct

8
Input: In the non adaptive version , the coordinator does not collect statistics and no benchmarking -LRB- for measuring processor speeds -RRB- is performed .
Parse:
collect VB ROOT
 +-- In IN prep
 |   +-- version NN pobj
 |       +-- the DT det
 |       +-- non FW nn
 |       +-- adaptive JJ amod
 +-- , , punct
 +-- coordinator NN nsubj
 |   +-- the DT det
 +-- does VBZ aux
 +-- not RB neg
 +-- statistics NNS dobj
 +-- and CC cc
 +-- performed VBN conj
 |   +-- benchmarking NN nsubjpass
 |   |   +-- no DT det
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- for IN prep
 |   |   |   +-- measuring VBG pcomp
 |   |   |       +-- speeds NNS dobj
 |   |   |           +-- processor NN nn
 |   |   +-- -RRB- -RRB- punct
 |   +-- is VBZ auxpass
 +-- . . punct

9
Input: In the ideal scenario , iteration number iterationduration -LRB- secs. -RRB- starting on nodes starting on nodes starting on nodes starting on nodes starting on nodes starting on nodes -RRB- no adaptation -RRB- with adaptation Figure .
Parse:
starting VBG ROOT
 +-- In IN prep
 |   +-- scenario NN pobj
 |       +-- the DT det
 |       +-- ideal JJ amod
 +-- , , punct
 +-- iterationduration NN nsubj
 |   +-- number NN nn
 |   |   +-- iteration NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- secs. NN dep
 |   +-- -RRB- -RRB- punct
 +-- on IN prep
 |   +-- nodes NNS pobj
 |       +-- starting VBG partmod
 |           +-- on IN prep
 |               +-- nodes NNS pobj
 |                   +-- starting VBG partmod
 |                       +-- on IN prep
 |                           +-- nodes NNS pobj
 |                               +-- starting VBG partmod
 |                                   +-- on IN prep
 |                                       +-- nodes NNS pobj
 |                                           +-- starting VBG partmod
 |                                               +-- on IN prep
 |                                                   +-- nodes NNS pobj
 |                                                       +-- starting VBG partmod
 |                                                           +-- on IN prep
 |                                                               +-- nodes NNS pobj
 +-- -RRB- -RRB- punct
 +-- adaptation NN dobj
 |   +-- no DT det
 |   +-- -RRB- -RRB- punct
 +-- with IN prep
 |   +-- Figure NN pobj
 |       +-- adaptation NN nn
 +-- . . punct

10
Input: Barnes Hut iteration durations with without adaptation , too few processors iteration number iterationduration -LRB- secs. -RRB- no adaptation with adaptation CPU load introduced overloaded nodes removed started adding nodes nodes reached Figure .
Parse:
iteration NN ROOT
 +-- Hut NNP nsubj
 |   +-- Barnes NNS nn
 +-- durations NNS dobj
 +-- with IN prep
 |   +-- without IN pcomp
 |       +-- adaptation NN pobj
 +-- , , punct
 +-- started VBD ccomp
 |   +-- iterationduration NN dep
 |   |   +-- few JJ amod
 |   |   |   +-- too RB advmod
 |   |   +-- number NN nn
 |   |   |   +-- processors NNS nn
 |   |   |   +-- iteration NN nn
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- secs. NNS dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- adaptation NN nsubj
 |   |   +-- no DT det
 |   |   +-- with IN prep
 |   |   |   +-- nodes NNS pobj
 |   |   |       +-- load NN nn
 |   |   |       |   +-- adaptation NN nn
 |   |   |       |   +-- CPU NN nn
 |   |   |       +-- introduced VBN amod
 |   |   |       +-- overloaded VBN amod
 |   |   +-- removed VBN partmod
 |   +-- adding VBG xcomp
 |       +-- reached VBN ccomp
 |           +-- nodes NNS nsubj
 |           |   +-- nodes NNS nn
 |           +-- Figure NN dobj
 +-- . . punct

11
Input: Barnes Hut iteration durations with without adaptation , overloaded CPUs we additionally measure the performance of an application with collecting statistics and benchmarking turned on but without doing adaptation , that is , without allowing it to change the number of nodes .
Parse:
CPUs NNS ROOT
 +-- durations NNS nsubj
 |   +-- Barnes NNS dep
 |   +-- iteration NN nn
 |   |   +-- Hut NNP nn
 |   +-- with IN prep
 |       +-- without IN pcomp
 |           +-- adaptation NN pobj
 +-- , , punct
 +-- overloaded VBN amod
 +-- measure VBP rcmod
 |   +-- we PRP nsubj
 |   +-- additionally RB advmod
 |   +-- performance NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- application NN pobj
 |               +-- an DT det
 |               +-- with IN prep
 |               |   +-- collecting VBG pcomp
 |               |       +-- statistics NNS dobj
 |               |       +-- and CC cc
 |               |       +-- benchmarking VBG conj
 |               |           +-- turned VBD dep
 |               |               +-- on RP prt
 |               |               +-- but CC cc
 |               |               +-- without IN conj
 |               |                   +-- doing VBG pcomp
 |               |                       +-- adaptation NN dobj
 |               +-- , , punct
 |               +-- is VBZ rcmod
 |                   +-- that DT nsubj
 |                   +-- , , punct
 |                   +-- without IN prep
 |                       +-- allowing VBG pcomp
 |                           +-- change VB xcomp
 |                               +-- it PRP nsubj
 |                               +-- to TO aux
 |                               +-- number NN dobj
 |                                   +-- the DT det
 |                                   +-- of IN prep
 |                                       +-- nodes NNS pobj
 +-- . . punct

12
Input: This allows us to measure the overhead of benchmarking and collecting statistics .
Parse:
allows VBZ ROOT
 +-- This DT nsubj
 +-- measure VB xcomp
 |   +-- us PRP nsubj
 |   +-- to TO aux
 |   +-- overhead NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- statistics NNS pobj
 |               +-- benchmarking VBG nn
 |                   +-- and CC cc
 |                   +-- collecting VBG conj
 +-- . . punct

13
Input: In all experiments we used a monitoring period of minutes for the adaptive versions of the applications .
Parse:
used VBD ROOT
 +-- In IN prep
 |   +-- experiments NNS pobj
 |       +-- all DT det
 +-- we PRP nsubj
 +-- period NN dobj
 |   +-- a DT det
 |   +-- monitoring NN nn
 |   +-- of IN prep
 |       +-- minutes NNS pobj
 +-- for IN prep
 |   +-- versions NNS pobj
 |       +-- the DT det
 |       +-- adaptive JJ amod
 |       +-- of IN prep
 |           +-- applications NNS pobj
 |               +-- the DT det
 +-- . . punct

14
Input: All the experiments were carried out on the DAS wide area system -LRB- -RRB- , which consists of five clusters located at five Dutch uni versities .
Parse:
carried VBN ROOT
 +-- experiments NNS nsubjpass
 |   +-- All PDT predet
 |   +-- the DT det
 +-- were VBD auxpass
 +-- out RP prt
 +-- on IN prep
 |   +-- system NN pobj
 |       +-- the DT det
 |       +-- DAS NNP nn
 |       +-- area NN nn
 |       |   +-- wide JJ amod
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- consists VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- of IN prep
 |               +-- clusters NNS pobj
 |                   +-- five CD num
 |                   +-- located VBN partmod
 |                       +-- at IN prep
 |                           +-- versities NNS pobj
 |                               +-- five CD num
 |                               +-- Dutch JJ amod
 |                               +-- uni JJ amod
 +-- . . punct

15
Input: One of the clusters consists of nodes , the others of nodes .
Parse:
consists VBZ ROOT
 +-- One CD nsubj
 |   +-- of IN prep
 |       +-- clusters NNS pobj
 |           +-- the DT det
 +-- of IN prep
 |   +-- nodes NNS pobj
 |       +-- , , punct
 |       +-- others NNS appos
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- nodes NNS pobj
 +-- . . punct

16
Input: Each node contains two GHz Pentium processors .
Parse:
contains VBZ ROOT
 +-- node NN nsubj
 |   +-- Each DT det
 +-- processors NNS dobj
 |   +-- two CD num
 |   +-- Pentium NNP nn
 |       +-- GHz NNP nn
 +-- . . punct

17
Input: Within a cluster , the nodes are connected by Fast Ethernet .
Parse:
connected VBN ROOT
 +-- Within IN prep
 |   +-- cluster NN pobj
 |       +-- a DT det
 +-- , , punct
 +-- nodes NNS nsubjpass
 |   +-- the DT det
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- Ethernet NNP pobj
 |       +-- Fast NNP nn
 +-- . . punct

18
Input: The clusters are connected by the Dutch university Internet backbone .
Parse:
connected VBN ROOT
 +-- clusters NNS nsubjpass
 |   +-- The DT det
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- backbone NN pobj
 |       +-- the DT det
 |       +-- Dutch JJ amod
 |       +-- university NN nn
 |       +-- Internet NN nn
 +-- . . punct

19
Input: In our experiments , we used the Barnes Hut N body simulation .
Parse:
used VBD ROOT
 +-- In IN prep
 |   +-- experiments NNS pobj
 |       +-- our PRP$ poss
 +-- , , punct
 +-- we PRP nsubj
 +-- simulation NN dobj
 |   +-- the DT det
 |   +-- N NNP nn
 |   |   +-- Hut NNP nn
 |   |       +-- Barnes NNPS nn
 |   +-- body NN nn
 +-- . . punct

20
Input: BarnesHut simulates the evolution of a large set of bodies under influence of -LRB- gravitational or electrostatic -RRB- forces .
Parse:
simulates VBZ ROOT
 +-- BarnesHut NNP nsubj
 +-- evolution NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- set NN pobj
 |           +-- a DT det
 |           +-- large JJ amod
 |           +-- of IN prep
 |           |   +-- bodies NNS pobj
 |           +-- under IN prep
 |               +-- influence NN pobj
 |                   +-- of IN prep
 |                       +-- forces NNS pobj
 |                           +-- -LRB- -LRB- punct
 |                           +-- gravitational JJ amod
 |                           |   +-- or CC cc
 |                           |   +-- electrostatic JJ conj
 |                           +-- -RRB- -RRB- punct
 +-- . . punct

21
Input: The evolution of N bodies is simulated in iterations of discrete time steps .
Parse:
simulated VBN ROOT
 +-- evolution NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- bodies NNS pobj
 |           +-- N NN nn
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- iterations NNS pobj
 |       +-- of IN prep
 |           +-- steps NNS pobj
 |               +-- time NN nn
 |                   +-- discrete JJ amod
 +-- . . punct

22
Input: . Scenario adaptivity overhead In this scenario , the application is started on nodes .
Parse:
started VBN ROOT
 +-- . . prep
 |   +-- adaptivity NN pobj
 |       +-- Scenario NN nn
 +-- overhead RB advmod
 +-- In IN prep
 |   +-- scenario NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- application NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- nodes NNS pobj
 +-- . . punct

23
Input: The nodes are equally divided over clusters -LRB- nodes in each cluster -RRB- .
Parse:
divided VBN ROOT
 +-- nodes NNS nsubjpass
 |   +-- The DT det
 +-- are VBP auxpass
 +-- equally RB advmod
 +-- over IN prep
 |   +-- clusters NNS pobj
 |       +-- -LRB- -LRB- punct
 |       +-- nodes NNS dep
 |       |   +-- in IN prep
 |       |       +-- cluster NN pobj
 |       |           +-- each DT det
 |       +-- -RRB- -RRB- punct
 +-- . . punct

24
Input: On this number of nodes , the application runs with % efficiency , so we consider it a reasonable number of nodes .
Parse:
runs VBZ ROOT
 +-- On IN prep
 |   +-- number NN pobj
 |       +-- this DT det
 |       +-- of IN prep
 |           +-- nodes NNS pobj
 +-- , , punct
 +-- application NN nsubj
 |   +-- the DT det
 +-- with IN prep
 |   +-- efficiency NN pobj
 |       +-- % NN nn
 +-- so CC cc
 +-- consider VBP conj
 |   +-- we PRP nsubj
 |   +-- number NN xcomp
 |       +-- it PRP nsubj
 |       +-- a DT det
 |       +-- reasonable JJ amod
 |       +-- of IN prep
 |           +-- nodes NNS pobj
 +-- . . punct

25
Input: As mentioned above , in this scenario we measured three runtimes the runtime of the application without adaptation support -LRB- runtime -RRB- , the runtime with adaptation support -LRB- runtime -RRB- and the runtime with monitoring -LRB- i.e. , collection of statistics and benchmarking -RRB- turned on but without allowing it to change the number of nodes -LRB- runtime -RRB- .
Parse:
measured VBD ROOT
 +-- mentioned VBN advcl
 |   +-- As IN mark
 |   +-- above RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- scenario NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- runtimes NNS iobj
 |   +-- three CD num
 +-- turned VBD ccomp
 |   +-- runtime NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- application NN pobj
 |   |   |       +-- the DT det
 |   |   +-- without IN prep
 |   |   |   +-- support NN pobj
 |   |   |       +-- adaptation NN nn
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- runtime NN dep
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- , , punct
 |   |   +-- runtime NN conj
 |   |   |   +-- the DT det
 |   |   |   +-- with IN prep
 |   |   |       +-- monitoring NN pobj
 |   |   |           +-- collection NN dep
 |   |   |               +-- -LRB- -LRB- punct
 |   |   |               +-- i.e. FW advmod
 |   |   |               +-- , , punct
 |   |   |               +-- of IN prep
 |   |   |               |   +-- statistics NNS pobj
 |   |   |               |       +-- and CC cc
 |   |   |               |       +-- benchmarking VBG conj
 |   |   |               +-- -RRB- -RRB- punct
 |   |   +-- and CC cc
 |   +-- on RP prt
 |   +-- but CC cc
 |   +-- without IN conj
 |       +-- allowing VBG pcomp
 |           +-- change VB xcomp
 |               +-- it PRP nsubj
 |               +-- to TO aux
 |               +-- number NN dobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- nodes NNS pobj
 |                           +-- -LRB- -LRB- punct
 |                           +-- runtime NN dep
 |                           +-- -RRB- -RRB- punct
 +-- . . punct

26
Input: Those runtimes are shown in Figure , first group of bars .
Parse:
shown VBN ROOT
 +-- runtimes NNS nsubjpass
 |   +-- Those DT det
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- Figure NNP pobj
 |       +-- , , punct
 |       +-- group NN appos
 |           +-- first JJ amod
 |           +-- of IN prep
 |               +-- bars NNS pobj
 +-- . . punct

27
Input: The comparison between runtime and shows the overhead of adaptation support .
Parse:
shows VBZ ROOT
 +-- comparison NN nsubj
 |   +-- The DT det
 |   +-- between IN prep
 |       +-- runtime NN punct
 |           +-- and CC cc
 +-- overhead NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- support NN pobj
 |           +-- adaptation NN nn
 +-- . . punct

28
Input: In this experiment it is around % .
Parse:
is VBZ ROOT
 +-- In IN prep
 |   +-- experiment NN pobj
 |       +-- this DT det
 +-- it PRP nsubj
 +-- around IN prep
 |   +-- % NN pobj
 +-- . . punct

29
Input: Almost all overhead comes from benchmarking .
Parse:
comes VBZ ROOT
 +-- overhead NN nsubj
 |   +-- all DT num
 |       +-- Almost RB quantmod
 +-- from IN prep
 |   +-- benchmarking VBG pobj
 +-- . . punct

30
Input: The benchmark is run times per monitoring period .
Parse:
run VBN ROOT
 +-- benchmark NN nsubj
 |   +-- The DT det
 +-- is VBZ aux
 +-- times NNS dobj
 |   +-- per IN prep
 |       +-- period NN pobj
 |           +-- monitoring NN nn
 +-- . . punct

31
Input: This overhead can be made smaller by increasing the length of the monitoring period and decreasing the benchmarking frequency .
Parse:
made VBN ROOT
 +-- overhead NN nsubjpass
 |   +-- This DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- smaller JJR acomp
 +-- by IN prep
 |   +-- increasing VBG pcomp
 |       +-- length NN dobj
 |       |   +-- the DT det
 |       |   +-- of IN prep
 |       |       +-- period NN pobj
 |       |           +-- the DT det
 |       |           +-- monitoring NN nn
 |       +-- and CC cc
 |       +-- decreasing VBG conj
 |           +-- frequency NN dobj
 |               +-- the DT det
 |               +-- benchmarking VBG nn
 +-- . . punct

32
Input: The monitoring period we used -LRB- minutes -RRB- is relatively short , because the runtime of the application was also relatively short -LRB- minutes -RRB- .
Parse:
short JJ ROOT
 +-- period NN nsubj
 |   +-- The DT det
 |   +-- monitoring NN nn
 |   +-- used VBD rcmod
 |       +-- we PRP nsubj
 |       +-- -LRB- -LRB- punct
 |       +-- minutes NNS dobj
 |       +-- -RRB- -RRB- punct
 +-- is VBZ cop
 +-- relatively RB advmod
 +-- , , punct
 +-- short JJ advcl
 |   +-- because IN mark
 |   +-- runtime NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- application NN pobj
 |   |           +-- the DT det
 |   +-- was VBD cop
 |   +-- also RB advmod
 |   +-- relatively RB advmod
 |   +-- minutes NNS dobj
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- . . punct

33
Input: Using longer running applications would not allow us to finish the experimentation in a reasonable time .
Parse:
allow VB ROOT
 +-- Using VBG csubj
 |   +-- applications NNS dobj
 |       +-- longer RBR amod
 |       +-- running VBG nn
 +-- would MD aux
 +-- not RB neg
 +-- finish VB xcomp
 |   +-- us PRP nsubj
 |   +-- to TO aux
 |   +-- experimentation NN dobj
 |   |   +-- the DT det
 |   +-- in IN prep
 |       +-- time NN pobj
 |           +-- a DT det
 |           +-- reasonable JJ amod
 +-- . . punct

34
Input: However , real world grid applications typically need hours , days or even weeks to complete .
Parse:
need VBP ROOT
 +-- However RB advmod
 +-- , , punct
 +-- applications NNS nsubj
 |   +-- real JJ amod
 |   +-- world NN nn
 |   +-- grid NN nn
 +-- typically RB advmod
 +-- hours NNS dobj
 |   +-- , , punct
 |   +-- days NNS conj
 |   +-- or CC cc
 |   +-- even RB advmod
 |   +-- weeks NNS conj
 +-- complete VB xcomp
 |   +-- to TO aux
 +-- . . punct

35
Input: For such applications , a much longer monitoring period can be used and the adaptation overhead can be kept much lower .
Parse:
used VBN ROOT
 +-- For IN prep
 |   +-- applications NNS pobj
 |       +-- such JJ amod
 +-- , , punct
 +-- period NN nsubjpass
 |   +-- a DT det
 |   +-- longer JJR amod
 |   |   +-- much RB advmod
 |   +-- monitoring NN nn
 +-- can MD aux
 +-- be VB auxpass
 +-- and CC cc
 +-- kept VBN conj
 |   +-- overhead NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- adaptation NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- lower JJR acomp
 |       +-- much RB advmod
 +-- . . punct

36
Input: For example , with the Barnes Hut application , if the monitoring period is extended to minutes , the overhead drops to % .
Parse:
drops VBZ ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- with IN prep
 |   +-- application NN pobj
 |       +-- the DT det
 |       +-- Barnes NNPS nn
 |       +-- Hut NNP nn
 +-- extended VBN advcl
 |   +-- if IN mark
 |   +-- period NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- monitoring NN nn
 |   +-- is VBZ auxpass
 |   +-- to IN prep
 |       +-- minutes NNS pobj
 +-- overhead JJ nsubj
 |   +-- the DT det
 +-- to IN prep
 |   +-- % NN pobj
 +-- . . punct

37
Input: Note that combining benchmarking with monitoring processor load -LRB- as described in Section . -RRB- would reduce the benchmarking overhead to almost zero since the processor load is not changing , the benchmarks would only need to be run at the beginning of the computation .
Parse:
need VB ROOT
 +-- Note VB partmod
 |   +-- reduce VB ccomp
 |       +-- that IN mark
 |       +-- combining VBG csubj
 |       |   +-- benchmarking VBG dobj
 |       |   +-- with IN prep
 |       |       +-- monitoring VBG pcomp
 |       |           +-- load NN dobj
 |       |               +-- processor NN nn
 |       |               +-- described VBN dep
 |       |                   +-- -LRB- -LRB- punct
 |       |                   +-- as IN mark
 |       |                   +-- in IN prep
 |       |                   |   +-- Section NNP pobj
 |       |                   +-- . . punct
 |       |                   +-- -RRB- -RRB- punct
 |       +-- would MD aux
 |       +-- overhead NN dobj
 |       |   +-- the DT det
 |       |   +-- benchmarking VBG nn
 |       +-- to IN prep
 |       |   +-- zero CD pobj
 |       |       +-- almost RB quantmod
 |       +-- changing VBG advcl
 |           +-- since IN mark
 |           +-- load NN nsubj
 |           |   +-- the DT det
 |           |   +-- processor NN nn
 |           +-- is VBZ aux
 |           +-- not RB neg
 +-- , , punct
 +-- benchmarks NNS nsubj
 |   +-- the DT det
 +-- would MD aux
 +-- only RB advmod
 +-- run VBN xcomp
 |   +-- to TO aux
 |   +-- be VB auxpass
 |   +-- at IN prep
 |       +-- beginning NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- computation NN pobj
 |                   +-- the DT det
 +-- . . punct

38
Input: . Scenario expanding to more nodes In this scenario , the application is started on fewer nodes than the application can efficiently use .
Parse:
started VBN ROOT
 +-- . . prep
 |   +-- Scenario NN pobj
 |       +-- expanding VBG partmod
 |           +-- to IN prep
 |               +-- nodes NNS pobj
 |                   +-- more JJR amod
 |                   +-- In IN prep
 |                       +-- scenario NN pobj
 |                           +-- this DT det
 +-- , , punct
 +-- application NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- nodes NNS pobj
 |       +-- fewer JJR amod
 |       +-- use VB dep
 |           +-- than IN mark
 |           +-- application NN nsubj
 |           |   +-- the DT det
 |           +-- can MD aux
 |           +-- efficiently RB advmod
 +-- . . punct

39
Input: This may happen because the user does not know the right number of nodes or because insufficient nodes were available at the moment the application was started .
Parse:
happen VB ROOT
 +-- This DT nsubj
 +-- may MD aux
 +-- know VB advcl
 |   +-- because IN mark
 |   +-- user NN nsubj
 |   |   +-- the DT det
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- number NN dobj
 |   |   +-- the DT det
 |   |   +-- right JJ amod
 |   |   +-- of IN prep
 |   |       +-- nodes NNS pobj
 |   +-- or CC cc
 |   +-- available JJ conj
 |       +-- because IN mark
 |       +-- nodes NNS nsubj
 |       |   +-- insufficient JJ amod
 |       +-- were VBD cop
 |       +-- at IN prep
 |           +-- moment NN pobj
 |               +-- the DT det
 |               +-- started VBN rcmod
 |                   +-- application NN nsubjpass
 |                   |   +-- the DT det
 |                   +-- was VBD auxpass
 +-- . . punct

40
Input: We tried initial numbers of nodes -LRB- Scenario a -RRB- , -LRB- Scenario b -RRB- and -LRB- Scenario c -RRB- .
Parse:
tried VBD ROOT
 +-- We PRP nsubj
 +-- numbers NNS dobj
 |   +-- initial JJ amod
 |   +-- of IN prep
 |       +-- nodes NNS pobj
 |           +-- -LRB- -LRB- punct
 |           +-- a DT dep
 |           |   +-- Scenario NNP nn
 |           +-- -RRB- -RRB- punct
 |           +-- , , punct
 |           +-- Scenario NN dep
 |           |   +-- b LS num
 |           +-- and CC cc
 |           +-- c NN conj
 |               +-- -LRB- -LRB- punct
 |               +-- Scenario NN nn
 |               +-- -RRB- -RRB- punct
 +-- . . punct

41
Input: The nodes were located in or clusters .
Parse:
located VBN ROOT
 +-- nodes NNS nsubjpass
 |   +-- The DT det
 +-- were VBD auxpass
 +-- in IN prep
 |   +-- or CC cc
 |   +-- clusters NNS conj
 +-- . . punct

42
Input: In each of the three sub scenarios , the application gradually expanded to nodes located in clusters .
Parse:
expanded VBD ROOT
 +-- In IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- scenarios NNS pobj
 |               +-- the DT det
 |               +-- three CD num
 |               +-- sub NN nn
 +-- , , punct
 +-- application NN nsubj
 |   +-- the DT det
 +-- gradually RB advmod
 +-- to IN prep
 |   +-- nodes NNS pobj
 |       +-- located VBN partmod
 |           +-- in IN prep
 |               +-- clusters NNS pobj
 +-- . . punct

43
Input: This allowed to reduce the application runtimes by % -LRB- Scenario a -RRB- , % -LRB- Scenario b -RRB- and % -LRB- Scenario c -RRB- with respect to the non adaptive version .
Parse:
allowed VBD ROOT
 +-- This DT nsubj
 +-- reduce VB xcomp
 |   +-- to TO aux
 |   +-- runtimes NNS dobj
 |   |   +-- the DT det
 |   |   +-- application NN nn
 |   +-- by IN prep
 |   |   +-- % NN pobj
 |   |       +-- a DT appos
 |   |       |   +-- -LRB- -LRB- punct
 |   |       |   +-- Scenario NN nn
 |   |       |   +-- -RRB- -RRB- punct
 |   |       +-- , , punct
 |   |       +-- % NN conj
 |   |       |   +-- -LRB- -LRB- punct
 |   |       |   +-- c NN dep
 |   |       |   |   +-- Scenario NNP nn
 |   |       |   +-- -RRB- -RRB- punct
 |   |       +-- and CC cc
 |   +-- with IN prep
 |       +-- respect NN pobj
 |           +-- to IN prep
 |               +-- version NN pobj
 |                   +-- the DT det
 |                   +-- adaptive NN nn
 |                       +-- non FW nn
 +-- . . punct

44
Input: Those runtimes are shown in Figure .
Parse:
shown VBN ROOT
 +-- runtimes NNS nsubjpass
 |   +-- Those DT det
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- Figure NN pobj
 +-- . . punct

45
Input: Since Barnes Hut is an iterative application , we also measured the time of each iteration , as shown in Figure .
Parse:
measured VBD ROOT
 +-- application NN advcl
 |   +-- Since IN mark
 |   +-- Hut NNP nsubj
 |   |   +-- Barnes NNP nn
 |   +-- is VBZ cop
 |   +-- an DT det
 |   +-- iterative JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- also RB advmod
 +-- time NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- iteration NN pobj
 |           +-- each DT det
 +-- shown VBN advcl
 |   +-- as IN mark
 |   +-- in IN prep
 |       +-- Figure NNP pobj
 +-- . . punct

46
Input: Adaptation reduces the iteration time by a factor of -LRB- Scenario a -RRB- , . -LRB- Scenario b -RRB- and . -LRB- Scenario c -RRB- which allows us to conclude that the gains in the total runtime would be even bigger if the application were run longer than for iterations .
Parse:
reduces VBZ ROOT
 +-- Adaptation NN nsubj
 +-- time NN dobj
 |   +-- the DT det
 |   +-- iteration NN nn
 +-- by IN prep
 |   +-- factor NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |       |   +-- Scenario NN pobj
 |       |       +-- -LRB- -LRB- punct
 |       |       +-- a DT dep
 |       |       +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- . . punct
 |       +-- -LRB- -LRB- punct
 |       +-- b NN dep
 |       |   +-- Scenario NN nn
 |       +-- -RRB- -RRB- punct
 |       +-- and CC cc
 |       +-- c NN conj
 |       |   +-- . . punct
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- Scenario NNP nn
 |       |   +-- -RRB- -RRB- punct
 |       +-- allows VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- conclude VB xcomp
 |               +-- us PRP nsubj
 |               +-- to TO aux
 |               +-- bigger JJR ccomp
 |                   +-- that IN mark
 |                   +-- gains NNS nsubj
 |                   |   +-- the DT det
 |                   |   +-- in IN prep
 |                   |       +-- runtime NN pobj
 |                   |           +-- the DT det
 |                   |           +-- total JJ amod
 |                   +-- would MD aux
 |                   +-- be VB cop
 |                   +-- even RB advmod
 |                   +-- run VBN advcl
 |                       +-- if IN mark
 |                       +-- application NN nsubjpass
 |                       |   +-- the DT det
 |                       +-- were VBD auxpass
 |                       +-- longer RBR advmod
 |                           +-- than IN prep
 |                               +-- for IN pcomp
 |                                   +-- iterations NNS pobj
 +-- . . punct

47
Input: . Scenario overloaded processors In this scenario , we started the application on nodes in clusters .
Parse:
started VBD ROOT
 +-- . , punct
 +-- processors NNS nsubj
 |   +-- overloaded VBD amod
 |       +-- Scenario NN dep
 +-- In IN prep
 |   +-- scenario NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- application NN dobj
 |   +-- the DT det
 |   +-- on IN prep
 |       +-- nodes NNS pobj
 |           +-- in IN prep
 |               +-- clusters NNS pobj
 +-- . . punct

48
Input: After seconds , we introduced a heavy , artificial load on the processors in one of the clusters .
Parse:
introduced VBD ROOT
 +-- After IN prep
 |   +-- seconds NNS pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- load NN dobj
 |   +-- a DT det
 |   +-- heavy JJ amod
 |   +-- , , punct
 |   +-- artificial JJ amod
 |   +-- on IN prep
 |       +-- processors NNS pobj
 |           +-- the DT det
 +-- in IN prep
 |   +-- one CD pobj
 |       +-- of IN prep
 |           +-- clusters NNS pobj
 |               +-- the DT det
 +-- . . punct

49
Input: Such a situation may happen when an application with a higher priority is started on some of the resources .
Parse:
happen VB ROOT
 +-- situation NN nsubj
 |   +-- Such PDT predet
 |   +-- a DT det
 +-- may MD aux
 +-- started VBN advcl
 |   +-- when WRB advmod
 |   +-- application NN nsubjpass
 |   |   +-- an DT det
 |   |   +-- with IN prep
 |   |       +-- priority NN pobj
 |   |           +-- a DT det
 |   |           +-- higher JJR amod
 |   +-- is VBZ auxpass
 |   +-- on IN prep
 |       +-- some DT pobj
 |           +-- of IN prep
 |               +-- resources NNS pobj
 |                   +-- the DT det
 +-- . . punct

50
Input: Figure shows the iteration durations of both the adaptive and non adaptive versions .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 +-- durations NNS dobj
 |   +-- the DT det
 |   +-- iteration NN nn
 |   +-- of IN prep
 |       +-- versions NNS pobj
 |           +-- both CC predet
 |           +-- the DT det
 |           +-- adaptive JJ amod
 +-- . . punct

51
Input: After introducing the load , the iteration iteration number iterationduration -LRB- secs. -RRB- no adaptation with adaptation one cluster is badly connected badly connected cluster removed started adding nodes nodes reached Figure .
Parse:
connected VBN ROOT
 +-- After IN prep
 |   +-- introducing VBG pcomp
 |       +-- load NN dobj
 |           +-- the DT det
 +-- , , punct
 +-- iterationduration NN nsubjpass
 |   +-- the DT det
 |   +-- iteration NN nn
 |   +-- number NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- secs. NNS dep
 |   +-- -RRB- -RRB- punct
 |   +-- adaptation NN dep
 |   |   +-- no DT det
 |   |   +-- with IN prep
 |   |       +-- adaptation NN pobj
 |   +-- cluster NN dep
 |       +-- one CD num
 +-- is VBZ auxpass
 +-- badly RB advmod
 +-- cluster NN dobj
 |   +-- connected VBN amod
 |       +-- badly RB advmod
 +-- removed VBN dep
 +-- started VBD prep
 |   +-- adding VBG pcomp
 |       +-- reached VBN ccomp
 |           +-- nodes NNS nsubj
 |           |   +-- nodes NNS nn
 |           +-- Figure NN dobj
 +-- . . punct

52
Input: Barnes Hut iteration durations with without adaptation , overloaded network link iteration number iterationduration -LRB- secs. -RRB- no adaptation with adaptation one cluster is badly connected nodes lightly overloaded removed badly connected cluster removed lightly overloaded nodes Figure .
Parse:
iteration NN ROOT
 +-- Hut NNP nsubj
 |   +-- Barnes NNS nn
 +-- durations NNS dobj
 +-- with IN prep
 |   +-- without IN pcomp
 |       +-- adaptation NN pobj
 +-- , , punct
 +-- connected VBN ccomp
 |   +-- link NN nsubjpass
 |   |   +-- overloaded VBN amod
 |   |   +-- network NN nn
 |   |   +-- iterationduration NN dep
 |   |   |   +-- iteration NN nn
 |   |   |   +-- number NN nn
 |   |   |   +-- secs. NNS appos
 |   |   |       +-- -LRB- -LRB- punct
 |   |   |       +-- -RRB- -RRB- punct
 |   |   +-- adaptation NN dep
 |   |       +-- no DT det
 |   |       +-- with IN prep
 |   |           +-- cluster NN pobj
 |   |               +-- adaptation NN nn
 |   |                   +-- one CD num
 |   +-- is VBZ auxpass
 |   +-- badly RB advmod
 |   +-- overloaded VBN dep
 |       +-- nodes NNS nsubj
 |       +-- lightly RB advmod
 |       +-- Figure NN dobj
 |           +-- cluster NN nn
 |           |   +-- removed VBN amod
 |           |   +-- connected VBN amod
 |           |       +-- badly RB advmod
 |           +-- removed VBN amod
 |           +-- overloaded VBN amod
 |           |   +-- lightly RB advmod
 |           +-- nodes NNS nn
 +-- . . punct

53
Input: Barnes Hut iteration durations with without adaptation , overloaded CPUs and an overloaded network link duration increased by a factor of to .
Parse:
increased VBN ROOT
 +-- durations NNS nsubj
 |   +-- iteration NN nn
 |   |   +-- Barnes NNS nn
 |   |   +-- Hut NNP nn
 |   +-- with IN prep
 |   |   +-- without IN pcomp
 |   |       +-- adaptation NN pobj
 |   +-- , , punct
 |   +-- CPUs NNS conj
 |   |   +-- overloaded VBD amod
 |   +-- and CC cc
 |   +-- link NN conj
 |       +-- an DT det
 |       +-- overloaded JJ amod
 |       +-- network NN nn
 |       +-- duration NN dep
 +-- by IN prep
 |   +-- factor NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- to IN pcomp
 +-- . . punct

54
Input: Also , the iteration times became very variable .
Parse:
variable JJ ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- times NNS nsubj
 |   +-- the DT det
 |   +-- iteration NN nn
 +-- became VBD cop
 +-- very RB advmod
 +-- . . punct

55
Input: The adaptive version reacted by removing the overloaded nodes .
Parse:
version NN ROOT
 +-- The DT det
 +-- adaptive JJ amod
 +-- reacted VBN partmod
 |   +-- by IN prep
 |       +-- removing VBG pcomp
 |           +-- nodes NNS dobj
 |               +-- the DT det
 |               +-- overloaded VBN amod
 +-- . . punct

56
Input: After removing these nodes , the weighted average efficiency rose to around % which triggered adding new nodes and the application expanded back to nodes .
Parse:
rose VBD ROOT
 +-- After IN prep
 |   +-- removing VBG pcomp
 |       +-- nodes NNS dobj
 |           +-- these DT det
 +-- , , punct
 +-- efficiency NN nsubj
 |   +-- the DT det
 |   +-- weighted JJ amod
 |   +-- average JJ amod
 +-- to IN prep
 |   +-- % NN pobj
 |       +-- around IN amod
 |       +-- triggered VBD rcmod
 |           +-- which WDT nsubj
 |           +-- adding VBG xcomp
 |               +-- nodes NNS dobj
 |                   +-- new JJ amod
 +-- and CC cc
 +-- expanded VBD conj
 |   +-- application NN nsubj
 |   |   +-- the DT det
 |   +-- back RB advmod
 |       +-- to IN prep
 |           +-- nodes NNS pobj
 +-- . . punct

57
Input: So , the overloaded nodes were replaced by better nodes , which brought the iteration duration back to the initial values .
Parse:
replaced VBN ROOT
 +-- So RB advmod
 +-- , , punct
 +-- nodes NNS nsubjpass
 |   +-- the DT det
 |   +-- overloaded VBN amod
 +-- were VBD auxpass
 +-- by IN prep
 |   +-- nodes NNS pobj
 |       +-- better JJR amod
 |       +-- , , punct
 |       +-- brought VBD rcmod
 |           +-- which WDT nsubj
 |           +-- duration NN dobj
 |           |   +-- the DT det
 |           |   +-- iteration NN nn
 |           +-- back RB advmod
 |               +-- to IN prep
 |                   +-- values NNS pobj
 |                       +-- the DT det
 |                       +-- initial JJ amod
 +-- . . punct

58
Input: This reduced the total runtime by % .
Parse:
reduced VBD ROOT
 +-- This DT nsubj
 +-- runtime NN dobj
 |   +-- the DT det
 |   +-- total JJ amod
 +-- by IN prep
 |   +-- % NN pobj
 +-- . . punct

59
Input: The runtimes are shown in Figure .
Parse:
shown VBN ROOT
 +-- runtimes NNS nsubjpass
 |   +-- The DT det
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- Figure NN pobj
 +-- . . punct

60
Input: . Scenario overloaded network link In this scenario , we ran the application on nodes in clusters .
Parse:
overloaded VBD ROOT
 +-- . . punct
 +-- Scenario NN nsubj
 +-- link NN dobj
 |   +-- network NN nn
 +-- In IN prep
 |   +-- scenario NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- ran VBD ccomp
     +-- we PRP nsubj
     +-- application NN dobj
         +-- the DT det
         +-- on IN prep
             +-- nodes NNS pobj
                 +-- in IN prep
                     +-- clusters NNS pobj

61
Input: We simulated that the uplink to one of the clusters was overloaded and the bandwidth on this uplink was reduced to approximately KB s .
Parse:
simulated VBD ROOT
 +-- We PRP nsubj
 +-- overloaded VBN ccomp
 |   +-- that IN mark
 |   +-- uplink NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- to IN prep
 |   |       +-- one CD pobj
 |   |           +-- of IN prep
 |   |               +-- clusters NNS pobj
 |   |                   +-- the DT det
 |   +-- was VBD auxpass
 |   +-- and CC cc
 |   +-- reduced VBN conj
 |       +-- bandwidth NN nsubjpass
 |       |   +-- the DT det
 |       |   +-- on IN prep
 |       |       +-- uplink NN pobj
 |       |           +-- this DT det
 |       +-- was VBD auxpass
 |       +-- to IN prep
 |           +-- KB NNP pobj
 |               +-- approximately RB advmod
 |               +-- s POS possessive
 +-- . . punct

62
Input: To simulate low bandwidth we use the traffic shaping techniques described in -LRB- -RRB- .
Parse:
use VBP ROOT
 +-- simulate VB dep
 |   +-- To TO aux
 |   +-- bandwidth NN dobj
 |       +-- low JJ amod
 +-- we PRP nsubj
 +-- techniques NNS dobj
 |   +-- the DT det
 |   +-- shaping NN amod
 |   |   +-- traffic NN dep
 |   +-- described VBN partmod
 |       +-- in IN prep
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- . . punct

63
Input: The iteration durations in this experiment are shown in Figure .
Parse:
shown VBN ROOT
 +-- durations NNS nsubjpass
 |   +-- The DT det
 |   +-- iteration NN amod
 |   +-- in IN prep
 |       +-- experiment NN pobj
 |           +-- this DT det
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- Figure NN pobj
 +-- . . punct

64
Input: The iteration durations of the nonadaptive version exhibit enormous variation from to seconds .
Parse:
exhibit NN ROOT
 +-- durations NNS nsubj
 |   +-- The DT det
 |   +-- iteration NN nn
 |   +-- of IN prep
 |       +-- version NN pobj
 |           +-- the DT det
 |           +-- nonadaptive JJ amod
 +-- variation NN dobj
 |   +-- enormous JJ amod
 |   +-- from IN prep
 |       +-- to IN pcomp
 |           +-- seconds NNS pobj
 +-- . . punct

65
Input: The adaptive version removed the badly connected cluster after the first monitoring period .
Parse:
removed VBD ROOT
 +-- version NN nsubj
 |   +-- The DT det
 |   +-- adaptive JJ amod
 +-- cluster NN dobj
 |   +-- the DT det
 |   +-- connected VBN amod
 |       +-- badly RB advmod
 +-- after IN prep
 |   +-- period NN pobj
 |       +-- the DT det
 |       +-- first JJ amod
 |       +-- monitoring NN nn
 +-- . . punct

66
Input: As a result , the weighted average efficiency rose to around % and new nodes were gradually added until their number reached .
Parse:
rose VBD ROOT
 +-- As IN prep
 |   +-- result NN pobj
 |       +-- a DT det
 +-- , , punct
 +-- efficiency NN nsubj
 |   +-- the DT det
 |   +-- weighted JJ amod
 |   +-- average JJ amod
 +-- to IN prep
 |   +-- % NN pobj
 |       +-- around IN amod
 +-- and CC cc
 +-- added VBN conj
 |   +-- nodes NNS nsubjpass
 |   |   +-- new JJ amod
 |   +-- were VBD auxpass
 |   +-- gradually RB advmod
 |   +-- reached VBD advcl
 |       +-- until IN mark
 |       +-- number NN nsubj
 |           +-- their PRP$ poss
 +-- . . punct

67
Input: This brought the iteration times down to around seconds .
Parse:
brought VBD ROOT
 +-- This DT nsubj
 +-- times NNS dobj
 |   +-- the DT det
 |   +-- iteration NN nn
 +-- down RB advmod
 |   +-- to IN prep
 |       +-- seconds NNS pobj
 |           +-- around IN amod
 +-- . . punct

68
Input: The total runtime was reduced by % -LRB- Figure -RRB- .
Parse:
reduced VBN ROOT
 +-- runtime NN nsubjpass
 |   +-- The DT det
 |   +-- total JJ amod
 +-- was VBD auxpass
 +-- by IN prep
 |   +-- % NN pobj
 |       +-- -LRB- -LRB- punct
 |       +-- Figure NN dep
 |       +-- -RRB- -RRB- punct
 +-- . . punct

69
Input: . Scenario overloaded processors and an overloaded network link In this scenario , we ran the application on nodes in clusters .
Parse:
overloaded VBD ROOT
 +-- . , punct
 +-- Scenario NN nsubj
 +-- processors NNS dobj
 |   +-- and CC cc
 |   +-- link NN conj
 |       +-- an DT det
 |       +-- overloaded JJ amod
 |       +-- network NN nn
 +-- In IN prep
 |   +-- scenario NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- ran VBD ccomp
 |   +-- we PRP nsubj
 |   +-- application NN dobj
 |       +-- the DT det
 |       +-- on IN prep
 |           +-- nodes NNS pobj
 |               +-- in IN prep
 |                   +-- clusters NNS pobj
 +-- . . punct

70
Input: Again , we simulated an overloaded uplink to one of the clusters .
Parse:
simulated VBD ROOT
 +-- Again RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- uplink NN dobj
 |   +-- an DT det
 |   +-- overloaded JJ amod
 +-- to IN prep
 |   +-- one CD pobj
 |       +-- of IN prep
 |           +-- clusters NNS pobj
 |               +-- the DT det
 +-- . . punct

71
Input: Additionally , we simulated processors with heterogeneous speeds by inserting a relatively light artificial load on the processors in one of the remaining clusters .
Parse:
simulated VBD ROOT
 +-- Additionally RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- processors NNS dobj
 |   +-- with IN prep
 |       +-- speeds NNS pobj
 |           +-- heterogeneous JJ amod
 +-- by IN prep
 |   +-- inserting VBG pcomp
 |       +-- load NN dobj
 |       |   +-- a DT det
 |       |   +-- light JJ amod
 |       |   |   +-- relatively RB advmod
 |       |   +-- artificial JJ amod
 |       +-- on IN prep
 |       |   +-- processors NNS pobj
 |       |       +-- the DT det
 |       +-- in IN prep
 |           +-- one CD pobj
 |               +-- of IN prep
 |                   +-- clusters NNS pobj
 |                       +-- the DT det
 |                       +-- remaining VBG amod
 +-- . . punct

72
Input: The iteration durations are shown in Figure .
Parse:
shown VBN ROOT
 +-- durations NNS nsubjpass
 |   +-- The DT det
 |   +-- iteration NN nn
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- Figure NNP pobj
 +-- . . punct

73
Input: Again , the non adaptive version exhibits a great variation in iteration durations from to seconds .
Parse:
exhibits VBZ ROOT
 +-- Again RB advmod
 +-- , , punct
 +-- version NN nsubj
 |   +-- the DT det
 |   +-- adaptive JJ amod
 |       +-- non FW advmod
 +-- variation NN dobj
 |   +-- a DT det
 |   +-- great JJ amod
 |   +-- in IN prep
 |   |   +-- durations NNS pobj
 |   |       +-- iteration NN nn
 |   +-- from IN prep
 |       +-- to IN pcomp
 |           +-- seconds NNS pobj
 +-- . . punct

74
Input: The adaptive version removes the badly connected cluster after the first monitoring period which brings the iteration duration down to seconds on average .
Parse:
removes VBZ ROOT
 +-- version NN nsubj
 |   +-- The DT det
 |   +-- adaptive JJ amod
 +-- cluster NN dobj
 |   +-- the DT det
 |   +-- connected VBN amod
 |       +-- badly RB advmod
 +-- after IN prep
 |   +-- period NN pobj
 |       +-- the DT det
 |       +-- first JJ amod
 |       +-- monitoring NN nn
 |       +-- brings VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- duration NN dobj
 |           |   +-- the DT det
 |           |   +-- iteration NN nn
 |           +-- down RB advmod
 |               +-- to IN prep
 |                   +-- seconds NNS pobj
 |                       +-- on IN prep
 |                           +-- average JJ pobj
 +-- . . punct

75
Input: After removing one of the clusters , since some of the processors are slower -LRB- approximately times -RRB- , the weighted average efficiency raises only to around % .
Parse:
raises VBZ ROOT
 +-- After IN prep
 |   +-- removing VBG pcomp
 |       +-- one CD dobj
 |           +-- of IN prep
 |               +-- clusters NNS pobj
 |                   +-- the DT det
 +-- , , punct
 +-- slower JJR advcl
 |   +-- since IN mark
 |   +-- some DT nsubj
 |   |   +-- of IN prep
 |   |       +-- processors NNS pobj
 |   |           +-- the DT det
 |   +-- are VBP cop
 |   +-- -LRB- -LRB- punct
 |   +-- times NNS dobj
 |   |   +-- approximately RB quantmod
 |   +-- -RRB- -RRB- punct
 +-- efficiency NN nsubj
 |   +-- the DT det
 |   +-- weighted JJ amod
 |   +-- average JJ amod
 +-- to IN prep
 |   +-- only RB advmod
 |   +-- % NN pobj
 |       +-- around IN amod
 +-- . . punct

76
Input: Since this value lies between Emin and Emax , no nodes are added or removed .
Parse:
added VBN ROOT
 +-- lies VBZ advcl
 |   +-- Since IN mark
 |   +-- value NN nsubj
 |   |   +-- this DT det
 |   +-- between IN prep
 |       +-- Emin NNP pobj
 |           +-- and CC cc
 |           +-- Emax NNP conj
 +-- , , punct
 +-- nodes NNS nsubjpass
 |   +-- no DT det
 +-- are VBP auxpass
 +-- or CC cc
 +-- removed VBN conj
 +-- . . punct

77
Input: This example illustrates what the advantages of opportunistic migration would be .
Parse:
illustrates VBZ ROOT
 +-- example NN nsubj
 |   +-- This DT det
 +-- be VB ccomp
 |   +-- what WP dobj
 |   +-- advantages NNS nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- migration NN pobj
 |   |           +-- opportunistic JJ amod
 |   +-- would MD aux
 +-- . . punct

78
Input: There were faster nodes available in the system .
Parse:
were VBD ROOT
 +-- There EX expl
 +-- nodes NNS nsubj
 |   +-- faster JJR amod
 |   +-- available JJ amod
 |       +-- in IN prep
 |           +-- system NN pobj
 |               +-- the DT det
 +-- . . punct

79
Input: If these nodes were added to the application -LRB- which could trigger removing the slower nodes -RRB- the iteration duration could be reduced even further .
Parse:
reduced VBN ROOT
 +-- added VBN advcl
 |   +-- If IN mark
 |   +-- nodes NNS nsubjpass
 |   |   +-- these DT det
 |   +-- were VBD auxpass
 |   +-- to IN prep
 |       +-- application NN pobj
 |           +-- the DT det
 |           +-- -LRB- -LRB- punct
 |           +-- trigger VB rcmod
 |           |   +-- which WDT nsubj
 |           |   +-- could MD aux
 |           |   +-- removing VBG xcomp
 |           |       +-- nodes NNS dobj
 |           |           +-- the DT det
 |           |           +-- slower JJR amod
 |           +-- -RRB- -RRB- punct
 +-- duration NN nsubjpass
 |   +-- the DT det
 |   +-- iteration NN nn
 +-- could MD aux
 +-- be VB auxpass
 +-- further RBR advmod
 |   +-- even RB advmod
 +-- . . punct

80
Input: Still , the adaptation reduced the total runtime by % -LRB- Figure -RRB- .
Parse:
reduced VBD ROOT
 +-- Still RB advmod
 +-- , , punct
 +-- adaptation NN nsubj
 |   +-- the DT det
 +-- runtime NN dobj
 |   +-- the DT det
 |   +-- total JJ amod
 +-- by IN prep
 |   +-- % NN pobj
 |       +-- -LRB- -LRB- punct
 |       +-- Figure NN dep
 |       +-- -RRB- -RRB- punct
 +-- . . punct

81
Input: . Scenario crashing nodes In the last scenario , we also run the application on nodes in clusters .
Parse:
run VBP ROOT
 +-- . . prep
 |   +-- Scenario NN pobj
 |       +-- crashing VBG partmod
 |           +-- nodes NNS dobj
 |           +-- In IN prep
 |               +-- scenario NN pobj
 |                   +-- the DT det
 |                   +-- last JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- also RB advmod
 +-- application NN dobj
 |   +-- the DT det
 |   +-- on IN prep
 |       +-- nodes NNS pobj
 |           +-- in IN prep
 |               +-- clusters NNS pobj
 +-- . . punct

82
Input: After seconds , out of clusters crash .
Parse:
crash NN ROOT
 +-- After IN prep
 |   +-- seconds NNS pobj
 +-- , , punct
 +-- out IN prep
 |   +-- of IN pcomp
 |       +-- clusters NNS pobj
 +-- . . punct

83
Input: The iteration durations are shown in Figure .
Parse:
shown VBN ROOT
 +-- durations NNS nsubjpass
 |   +-- The DT det
 |   +-- iteration NN nn
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- Figure NNP pobj
 +-- . . punct

84
Input: After the crash , the iteration duration raised from to seconds .
Parse:
raised VBN ROOT
 +-- After IN prep
 |   +-- crash NN pobj
 |       +-- the DT det
 +-- , , punct
 +-- duration NN nsubj
 |   +-- the DT det
 |   +-- iteration NN nn
 +-- from IN prep
 |   +-- to IN pcomp
 |       +-- seconds NNS pobj
 +-- . . punct

85
Input: The weighted efficiency rose to around % which triggered adding new nodes in the adaptive version .
Parse:
rose VBD ROOT
 +-- efficiency NN nsubj
 |   +-- The DT det
 |   +-- weighted JJ amod
 +-- to IN prep
 |   +-- % NN pobj
 |       +-- around IN amod
 |       +-- triggered VBD rcmod
 |           +-- which WDT nsubj
 |           +-- adding VBG xcomp
 |               +-- nodes NNS dobj
 |               |   +-- new JJ amod
 |               +-- in IN prep
 |                   +-- version NN pobj
 |                       +-- the DT det
 |                       +-- adaptive JJ amod
 +-- . . punct

86
Input: The number of nodes gradually went back to which brought the iteration duration back to around seconds .
Parse:
went VBD ROOT
 +-- number NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- nodes NNS pobj
 +-- gradually RB advmod
 +-- back RB advmod
 |   +-- to IN prep
 |       +-- brought VBD pcomp
 |           +-- which WDT nsubj
 |           +-- duration NN dobj
 |           |   +-- the DT det
 |           |   +-- iteration NN nn
 |           +-- back RB advmod
 |               +-- to IN prep
 |                   +-- seconds NNS pobj
 |                       +-- around IN amod
 +-- . . punct

87
Input: The total runtime was reduced by % -LRB- Figure -RRB- . .
Parse:
reduced VBN ROOT
 +-- runtime NN nsubjpass
 |   +-- The DT det
 |   +-- total JJ amod
 +-- was VBD auxpass
 +-- by IN prep
 |   +-- % NN pobj
 |       +-- -LRB- -LRB- punct
 |       +-- Figure NN dep
 |       +-- -RRB- -RRB- punct
 +-- . . punct
