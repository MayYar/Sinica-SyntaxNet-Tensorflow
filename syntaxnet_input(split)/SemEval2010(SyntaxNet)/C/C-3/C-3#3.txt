
1
Input: In this section , we describe our assumptions about the applications and their resources .
Parse:
describe VBP ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- assumptions NNS dobj
 |   +-- our PRP$ poss
 |   +-- about IN prep
 |       +-- applications NNS pobj
 |           +-- the DT det
 |           +-- and CC cc
 |           +-- resources NNS conj
 |               +-- their PRP$ poss
 +-- . . punct

2
Input: We assume the following resource model .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- model NN dobj
 |   +-- the DT det
 |   +-- following VBG amod
 |   +-- resource NN nn
 +-- . . punct

3
Input: The applications are running on multiple sites at the same time , where sites are clusters or supercomputers .
Parse:
running VBG ROOT
 +-- applications NNS nsubj
 |   +-- The DT det
 +-- are VBP aux
 +-- on IN prep
 |   +-- sites NNS pobj
 |       +-- multiple JJ amod
 +-- at IN prep
 |   +-- time NN pobj
 |       +-- the DT det
 |       +-- same JJ amod
 |       +-- , , punct
 |       +-- clusters NNS rcmod
 |           +-- where WRB advmod
 |           +-- sites NNS nsubj
 |           +-- are VBP cop
 |           +-- or CC cc
 |           +-- supercomputers NNS conj
 +-- . . punct

4
Input: We also assume that the processors of the sites are accessible using a grid scheduling system , such as Koala -LRB- -RRB- , Zorilla -LRB- -RRB- or GRMS -LRB- -RRB- .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- accessible JJ ccomp
 |   +-- that IN mark
 |   +-- processors NNS nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- sites NNS pobj
 |   |           +-- the DT det
 |   +-- are VBP cop
 |   +-- using VBG xcomp
 |       +-- system NN dobj
 |           +-- a DT det
 |           +-- grid NN nn
 |           +-- scheduling NN nn
 |           +-- , , punct
 |           +-- as IN prep
 |               +-- such JJ mwe
 |               +-- Koala NNP pobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- -RRB- -RRB- punct
 |                   +-- , , punct
 |                   +-- Zorilla NNP conj
 |                   |   +-- -LRB- -LRB- punct
 |                   |   +-- -RRB- -RRB- punct
 |                   +-- or CC cc
 |                   +-- GRMS NNP conj
 |                       +-- -LRB- -LRB- punct
 |                       +-- -RRB- -RRB- punct
 +-- . . punct

5
Input: Processors belonging to one site are connected by a fast LAN with a low latency and high bandwidth .
Parse:
connected VBN ROOT
 +-- Processors NNS nsubjpass
 |   +-- belonging VBG partmod
 |       +-- to IN prep
 |           +-- site NN pobj
 |               +-- one CD num
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- LAN NN pobj
 |       +-- a DT det
 |       +-- fast JJ amod
 |       +-- with IN prep
 |           +-- latency NN pobj
 |               +-- a DT det
 |               +-- low JJ amod
 |               +-- and CC cc
 |               +-- bandwidth NN conj
 |                   +-- high JJ amod
 +-- . . punct

6
Input: The different sites are connected by a WAN .
Parse:
connected VBN ROOT
 +-- sites NNS nsubjpass
 |   +-- The DT det
 |   +-- different JJ amod
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- WAN NN pobj
 |       +-- a DT det
 +-- . . punct

7
Input: Communication between sites suffers from high latencies .
Parse:
suffers NNS ROOT
 +-- Communication NN nsubj
 |   +-- between IN prep
 |       +-- sites NNS pobj
 +-- from IN prep
 |   +-- latencies NNS pobj
 |       +-- high JJ amod
 +-- . . punct

8
Input: We assume that the links connecting the sites with the Internet backbone might become bottlenecks causing the inter site communication to suffer from low bandwidths .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- bottlenecks NNS ccomp
 |   +-- that IN mark
 |   +-- links NNS nsubj
 |   |   +-- the DT det
 |   |   +-- connecting VBG partmod
 |   |       +-- sites NNS dobj
 |   |       |   +-- the DT det
 |   |       +-- with IN prep
 |   |           +-- backbone NN pobj
 |   |               +-- the DT det
 |   |               +-- Internet NN nn
 |   +-- might MD aux
 |   +-- become VB cop
 |   +-- causing VBG partmod
 |       +-- suffer VB xcomp
 |           +-- communication NN nsubj
 |           |   +-- the DT det
 |           |   +-- site NN nn
 |           |       +-- inter NN nn
 |           +-- to TO aux
 |           +-- from IN prep
 |               +-- bandwidths NNS pobj
 |                   +-- low JJ amod
 +-- . . punct

9
Input: We studied the adaptation problem in the context of divide andconquer applications .
Parse:
studied VBD ROOT
 +-- We PRP nsubj
 +-- problem NN dobj
 |   +-- the DT det
 |   +-- adaptation NN nn
 +-- in IN prep
 |   +-- context NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- applications NNS pobj
 |               +-- divide NN nn
 |               +-- andconquer NN nn
 +-- . . punct

10
Input: However , we believe that our methodology can be used for other types of applications as well .
Parse:
believe VBP ROOT
 +-- However RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- used VBN ccomp
 |   +-- that IN mark
 |   +-- methodology NN nsubjpass
 |   |   +-- our PRP$ poss
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- for IN prep
 |   |   +-- types NNS pobj
 |   |       +-- other JJ amod
 |   |       +-- of IN prep
 |   |           +-- applications NNS pobj
 |   +-- well RB advmod
 |       +-- as RB advmod
 +-- . . punct

11
Input: In this section we summarize the assumptions about applications that are important to our approach .
Parse:
summarize VBP ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- assumptions NNS dobj
 |   +-- the DT det
 |   +-- about IN prep
 |       +-- applications NNS pobj
 |           +-- important JJ rcmod
 |               +-- that WDT nsubj
 |               +-- are VBP cop
 |               +-- to IN prep
 |                   +-- approach NN pobj
 |                       +-- our PRP$ poss
 +-- . . punct

12
Input: The first assumption we make is that the application is malleable , i.e. , it is able to handle processors joining and leaving the on going computation .
Parse:
is VBZ ROOT
 +-- assumption NN nsubj
 |   +-- The DT det
 |   +-- first JJ amod
 |   +-- make VBP rcmod
 |       +-- we PRP nsubj
 +-- malleable JJ ccomp
 |   +-- that IN mark
 |   +-- application NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 |   +-- , , punct
 |   +-- able JJ ccomp
 |       +-- i.e. FW advmod
 |       +-- , , punct
 |       +-- it PRP nsubj
 |       +-- is VBZ cop
 |       +-- handle VB xcomp
 |           +-- to TO aux
 |           +-- joining VBG dep
 |               +-- processors NNS nsubj
 |               +-- and CC cc
 |               +-- leaving VBG conj
 |                   +-- the DT dobj
 |                   +-- on IN prep
 |                       +-- going VBG pcomp
 |                           +-- computation NN dobj
 +-- . . punct

13
Input: In -LRB- -RRB- , we showed how divide andconquer applications can be made fault tolerant and malleable .
Parse:
showed VBD ROOT
 +-- In IN prep
 |   +-- -RRB- -RRB- pobj
 |       +-- -LRB- -LRB- punct
 +-- , , punct
 +-- we PRP nsubj
 +-- made VBN ccomp
 |   +-- how WRB advmod
 |   +-- applications NNS nsubjpass
 |   |   +-- divide NN amod
 |   |   +-- andconquer NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- tolerant JJ xcomp
 |       +-- fault NN nsubj
 |       +-- and CC cc
 |       +-- malleable JJ conj
 +-- . . punct

14
Input: Processors can be added or removed at any point in the computation with little overhead .
Parse:
added VBN ROOT
 +-- Processors NNS nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- or CC cc
 +-- removed VBN conj
 +-- at IN prep
 |   +-- point NN pobj
 |       +-- any DT det
 |       +-- in IN prep
 |       |   +-- computation NN pobj
 |       |       +-- the DT det
 |       +-- with IN prep
 |           +-- overhead NN pobj
 |               +-- little JJ amod
 +-- . . punct

15
Input: The second assumption is that the application can efficiently run on processors with different speeds .
Parse:
is VBZ ROOT
 +-- assumption NN nsubj
 |   +-- The DT det
 |   +-- second JJ amod
 +-- run VB ccomp
 |   +-- that IN mark
 |   +-- application NN nsubj
 |   |   +-- the DT det
 |   +-- can MD aux
 |   +-- efficiently RB advmod
 |   +-- on IN prep
 |       +-- processors NNS pobj
 |           +-- with IN prep
 |               +-- speeds NNS pobj
 |                   +-- different JJ amod
 +-- . . punct

16
Input: This can be achieved by using a dynamic load balancing strategy , such as work stealing used by divide and conquer applications -LRB- -RRB- .
Parse:
achieved VBN ROOT
 +-- This DT nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- by IN prep
 |   +-- using VBG pcomp
 |       +-- strategy NN dobj
 |           +-- a DT det
 |           +-- dynamic JJ amod
 |           +-- balancing VBG nn
 |           |   +-- load NN nn
 |           +-- , , punct
 |           +-- as IN prep
 |               +-- such JJ mwe
 |               +-- stealing VBG pobj
 |                   +-- work NN nn
 |                   +-- used VBN partmod
 |                   |   +-- by IN prep
 |                   |       +-- divide NN pobj
 |                   +-- and CC cc
 |                   +-- applications NNS conj
 |                       +-- conquer NN nn
 |                       +-- -LRB- -LRB- punct
 |                       +-- -RRB- -RRB- punct
 +-- . . punct

17
Input: Also , master worker applications typically use dynamic load balancing strategies -LRB- e.g. , MW a framework for writing gridenabled master worker applications -LRB- -RRB- -RRB- .
Parse:
use VBP ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- applications NNS nsubj
 |   +-- worker NN nn
 |       +-- master NN nn
 +-- typically RB advmod
 +-- strategies NNS dobj
 |   +-- dynamic JJ amod
 |   +-- balancing VBG nn
 |   |   +-- load NN nn
 |   +-- MW VBZ appos
 |       +-- -LRB- -LRB- punct
 |       +-- e.g. NNP discourse
 |       +-- , , punct
 |       +-- framework NN dobj
 |       |   +-- a DT det
 |       |   +-- for IN prep
 |       |       +-- writing VBG pcomp
 |       |           +-- applications NNS dobj
 |       |               +-- gridenabled VBN amod
 |       |               +-- worker NN nn
 |       |                   +-- master NN nn
 |       +-- -RRB- -RRB- punct
 +-- . . punct

18
Input: We find it a reasonable assumption for a grid application , since applications for which the slowest processor becomes a bottleneck will not be able to efficiently utilize grid resources .
Parse:
find VBP ROOT
 +-- We PRP nsubj
 +-- assumption NN xcomp
 |   +-- it PRP nsubj
 |   +-- a DT det
 |   +-- reasonable JJ amod
 |   +-- for IN prep
 |       +-- application NN pobj
 |           +-- a DT det
 |           +-- grid NN nn
 +-- , , punct
 +-- able JJ advcl
 |   +-- since IN mark
 |   +-- applications NNS nsubj
 |   |   +-- bottleneck NN rcmod
 |   |       +-- for IN prep
 |   |       |   +-- which WDT pobj
 |   |       +-- processor NN nsubj
 |   |       |   +-- the DT det
 |   |       |   +-- slowest JJS amod
 |   |       +-- becomes VBZ cop
 |   |       +-- a DT det
 |   +-- will MD aux
 |   +-- not RB neg
 |   +-- be VB cop
 |   +-- utilize VB xcomp
 |       +-- to TO aux
 |       +-- efficiently RB advmod
 |       +-- resources NNS dobj
 |           +-- grid NN nn
 +-- . . punct

19
Input: Finally , the application should be insensitive to wide area latencies , so it can run efficiently on a widearea grid -LRB- ; -RRB- . .
Parse:
insensitive JJ ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- application NN nsubj
 |   +-- the DT det
 +-- should MD aux
 +-- be VB cop
 +-- to IN prep
 |   +-- latencies NNS pobj
 |       +-- area NN nn
 |           +-- wide JJ amod
 +-- run VB advcl
 |   +-- so IN mark
 |   +-- it PRP nsubj
 |   +-- can MD aux
 |   +-- efficiently RB advmod
 |   +-- on IN prep
 |   |   +-- grid NN pobj
 |   |       +-- a DT det
 |   |       +-- widearea NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- ; : punct
 |   +-- -RRB- -RRB- punct
 +-- . . punct
