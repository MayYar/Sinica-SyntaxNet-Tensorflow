
1
Input: In this section we will explain how we use application malleability to find a suitable set of resources for a given application and to adapt to changing conditions in the grid environment .
Parse:
explain VB ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- will MD aux
 +-- use VBP ccomp
 |   +-- how WRB advmod
 |   +-- we PRP nsubj
 |   +-- malleability NN dobj
 |   |   +-- application NN nn
 |   +-- find VB xcomp
 |       +-- to TO aux
 |       +-- set NN dobj
 |       |   +-- a DT det
 |       |   +-- suitable JJ amod
 |       |   +-- of IN prep
 |       |       +-- resources NNS pobj
 |       +-- for IN prep
 |       |   +-- application NN pobj
 |       |       +-- a DT det
 |       |       +-- given VBN amod
 |       +-- and CC cc
 |       +-- adapt VB conj
 |           +-- to TO aux
 |           +-- to IN prep
 |               +-- conditions NNS pobj
 |                   +-- changing VBG amod
 |                   +-- in IN prep
 |                       +-- environment NN pobj
 |                           +-- the DT det
 |                           +-- grid NN nn
 +-- . . punct

2
Input: In order to monitor the application performance and guide the adaptation , we added an extra process to the computation which we call adaptation coordinator .
Parse:
added VBD ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- monitor VB infmod
 |           +-- to TO aux
 |           +-- performance NN dobj
 |           |   +-- the DT det
 |           |   +-- application NN nn
 |           +-- and CC cc
 |           +-- guide VB conj
 |               +-- adaptation NN dobj
 |                   +-- the DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- process NN dobj
 |   +-- an DT det
 |   +-- extra JJ amod
 +-- to IN prep
 |   +-- computation NN pobj
 |       +-- the DT det
 |       +-- call VBP rcmod
 |           +-- which WDT dobj
 |           +-- we PRP nsubj
 |           +-- coordinator NN xcomp
 |               +-- adaptation NN nn
 +-- . . punct

3
Input: The adaptation coordinator periodically collects performance statistics from the application processors .
Parse:
collects VBZ ROOT
 +-- coordinator NN nsubj
 |   +-- The DT det
 |   +-- adaptation NN nn
 +-- periodically RB advmod
 +-- statistics NNS dobj
 |   +-- performance NN nn
 +-- from IN prep
 |   +-- processors NNS pobj
 |       +-- the DT det
 |       +-- application NN nn
 +-- . . punct

4
Input: We introduce a new application performance metric weighted average efficiency which describes the application performance on a heterogeneous set of resources .
Parse:
introduce VBP ROOT
 +-- We PRP nsubj
 +-- efficiency NN dobj
 |   +-- a DT det
 |   +-- new JJ amod
 |   +-- performance NN nn
 |   |   +-- application NN nn
 |   +-- metric JJ amod
 |   +-- weighted VBN amod
 |   +-- average JJ amod
 |   +-- describes VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- performance NN dobj
 |           +-- the DT det
 |           +-- application NN nn
 |           +-- on IN prep
 |               +-- set NN pobj
 |                   +-- a DT det
 |                   +-- heterogeneous JJ amod
 |                   +-- of IN prep
 |                       +-- resources NNS pobj
 +-- . . punct

5
Input: The coordinator uses statistics from application processors to compute the weighted average efficiency .
Parse:
uses VBZ ROOT
 +-- coordinator NN nsubj
 |   +-- The DT det
 +-- statistics NNS dobj
 +-- from IN prep
 |   +-- processors NNS pobj
 |       +-- application NN nn
 +-- compute VB xcomp
 |   +-- to TO aux
 |   +-- efficiency NN dobj
 |       +-- the DT det
 |       +-- weighted JJ amod
 |       +-- average JJ amod
 +-- . . punct

6
Input: If the efficiency falls above or below certain thresholds , the coordinator decides on adding or removing processors .
Parse:
decides VBZ ROOT
 +-- falls VBZ advcl
 |   +-- If IN mark
 |   +-- efficiency NN nsubj
 |   |   +-- the DT det
 |   +-- above IN prep
 |       +-- or CC cc
 |       +-- below IN conj
 |       +-- thresholds NNS pobj
 |           +-- certain JJ amod
 +-- , , punct
 +-- coordinator NN nsubj
 |   +-- the DT det
 +-- on IN prep
 |   +-- adding VBG pcomp
 |       +-- or CC cc
 |       +-- removing VBG conj
 |           +-- processors NNS dobj
 +-- . . punct

7
Input: A heuristic formula is used to decide which processors have to be removed .
Parse:
used VBN ROOT
 +-- formula NN nsubjpass
 |   +-- A DT det
 |   +-- heuristic JJ amod
 +-- is VBZ auxpass
 +-- decide VB xcomp
 |   +-- to TO aux
 |   +-- have VBP ccomp
 |       +-- which WDT dobj
 |       +-- processors NNS nsubj
 |       +-- removed VBN xcomp
 |           +-- to TO aux
 |           +-- be VB auxpass
 +-- . . punct

8
Input: During this process the coordinator learns the application requirements by remembering the characteristics of the removed processors .
Parse:
learns VBZ ROOT
 +-- During IN prep
 |   +-- process NN pobj
 |       +-- this DT det
 +-- coordinator NN nsubj
 |   +-- the DT det
 +-- requirements NNS dobj
 |   +-- the DT det
 |   +-- application NN nn
 +-- by IN prep
 |   +-- remembering VBG pcomp
 |       +-- characteristics NNS dobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- processors NNS pobj
 |                   +-- the DT det
 |                   +-- removed VBN amod
 +-- . . punct

9
Input: These requirements are then used to guide the adding of new processors .
Parse:
used VBN ROOT
 +-- requirements NNS nsubjpass
 |   +-- These DT det
 +-- are VBP auxpass
 +-- then RB advmod
 +-- guide VB xcomp
 |   +-- to TO aux
 |   +-- adding NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- processors NNS pobj
 |               +-- new JJ amod
 +-- . . punct

10
Input: . Weighted average efficiency In traditional parallel computing , a standard metric describing the performance of a parallel application is efficiency .
Parse:
efficiency NN ROOT
 +-- . . punct
 +-- efficiency NN nsubj
 |   +-- Weighted VBN amod
 |   +-- average JJ amod
 |   +-- In IN prep
 |       +-- computing NN pobj
 |           +-- traditional JJ amod
 |           +-- parallel NN amod
 +-- , , punct
 +-- metric NN nsubj
 |   +-- a DT det
 |   +-- standard JJ amod
 |   +-- describing VBG partmod
 |       +-- performance NN dobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- application NN pobj
 |                   +-- a DT det
 |                   +-- parallel JJ amod
 +-- is VBZ cop

11
Input: Efficiency is defined as the average utilization of the processors , that is , the fraction of time the processors spend doing useful work rather than being idle or communicating with other processors -LRB- -RRB- .
Parse:
defined VBN ROOT
 +-- Efficiency NN nsubjpass
 +-- is VBZ auxpass
 +-- as IN prep
 |   +-- utilization NN pobj
 |       +-- the DT det
 |       +-- average JJ amod
 |       +-- of IN prep
 |           +-- processors NNS pobj
 |               +-- the DT det
 +-- , , punct
 +-- spend VBP parataxis
 |   +-- is VBZ advmod
 |   |   +-- that DT advmod
 |   +-- , , punct
 |   +-- fraction NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- time NN pobj
 |   +-- processors NNS nsubj
 |   |   +-- the DT det
 |   +-- doing VBG dep
 |   |   +-- work NN dobj
 |   |   |   +-- useful JJ amod
 |   |   +-- rather RB cc
 |   |   |   +-- than IN mwe
 |   |   +-- idle JJ conj
 |   |       +-- being VBG cop
 |   |       +-- or CC cc
 |   |       +-- communicating VBG conj
 |   |       +-- with IN prep
 |   |           +-- processors NNS pobj
 |   |               +-- other JJ amod
 |   +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- . . punct

12
Input: efficiency = n ? ? ? n i= -LRB- ? ? ? overheadi -RRB- where n is the number of processors and overheadi is the fraction of time the ith processor spends being idle or communicating .
Parse:
efficiency NN ROOT
 +-- = SYM prep
 |   +-- n RB dep
 +-- ? . punct
 +-- n CC prep
 |   +-- i= NN pobj
 +-- -LRB- -LRB- punct
 +-- overheadi NN dep
 +-- -RRB- -RRB- punct
 +-- fraction NN rcmod
 |   +-- where WRB advmod
 |   +-- number NN nsubj
 |   |   +-- n CC dep
 |   |   +-- is VBZ dep
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- processors NNS pobj
 |   |           +-- and CC cc
 |   |           +-- overheadi NN conj
 |   +-- is VBZ cop
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- time NN pobj
 |           +-- spends VBZ rcmod
 |               +-- processor NN nsubj
 |               |   +-- the DT det
 |               |   +-- ith JJ amod
 |               +-- idle JJ xcomp
 |                   +-- being VBG cop
 |                   +-- or CC cc
 |                   +-- communicating VBG conj
 +-- . . punct

13
Input: Efficiency indicates the benefit of using multiple processors .
Parse:
indicates VBZ ROOT
 +-- Efficiency NN nsubj
 +-- benefit NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- using VBG pcomp
 |           +-- processors NNS dobj
 |               +-- multiple JJ amod
 +-- . . punct

14
Input: Typically , the efficiency drops as new processors are added to the computation .
Parse:
drops VBZ ROOT
 +-- Typically RB advmod
 +-- , , punct
 +-- efficiency NN nsubj
 |   +-- the DT det
 +-- added VBN advcl
 |   +-- as IN mark
 |   +-- processors NNS nsubjpass
 |   |   +-- new JJ amod
 |   +-- are VBP auxpass
 |   +-- to IN prep
 |       +-- computation NN pobj
 |           +-- the DT det
 +-- . . punct

15
Input: Therefore , achieving a high speedup -LRB- and thus a low execution time -RRB- and achieving a high system utilization are conflicting goals -LRB- -RRB- .
Parse:
goals NNS ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- achieving VBG csubj
 |   +-- speedup NN dobj
 |   |   +-- a DT det
 |   |   +-- high JJ amod
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- and CC cc
 |   |   +-- time NN conj
 |   |       +-- thus RB advmod
 |   |       +-- a DT det
 |   |       +-- low JJ amod
 |   |       +-- execution NN nn
 |   +-- -RRB- -RRB- punct
 |   +-- and CC cc
 |   +-- achieving VBG conj
 |       +-- utilization NN dobj
 |           +-- a DT det
 |           +-- high JJ amod
 |           +-- system NN nn
 +-- are VBP cop
 +-- conflicting VBG amod
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- . . punct

16
Input: The optimal number of processors is the number for which the ratio of efficiency to execution time is maximized .
Parse:
number NN ROOT
 +-- number NN nsubj
 |   +-- The DT det
 |   +-- optimal JJ amod
 |   +-- of IN prep
 |       +-- processors NNS pobj
 +-- is VBZ cop
 +-- the DT det
 +-- maximized VBN rcmod
 |   +-- for IN prep
 |   |   +-- which WDT pobj
 |   +-- ratio NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- efficiency NN pobj
 |   |   +-- to IN prep
 |   |       +-- time NN pobj
 |   |           +-- execution NN nn
 |   +-- is VBZ cop
 +-- . . punct

17
Input: Adding processors beyond this number yields little benefit .
Parse:
yields NNS ROOT
 +-- Adding VBG csubj
 |   +-- processors NNS dobj
 |   +-- beyond IN prep
 |       +-- number NN pobj
 |           +-- this DT det
 +-- benefit NN dobj
 |   +-- little JJ amod
 +-- . . punct

18
Input: This number is typically hard to find , but in -LRB- -RRB- it was theoretically proven that if the optimal number of processors is used , the efficiency is at least % .
Parse:
hard JJ ROOT
 +-- number NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- typically RB advmod
 +-- find VB ccomp
 |   +-- to TO aux
 +-- , , punct
 +-- but CC cc
 +-- in IN conj
     +-- proven VBN dep
         +-- -LRB- -LRB- punct
         +-- -RRB- -RRB- punct
         +-- it PRP nsubjpass
         +-- was VBD auxpass
         +-- theoretically RB advmod
         +-- % NN ccomp
         |   +-- that IN mark
         |   +-- used VBN advcl
         |   |   +-- if IN mark
         |   |   +-- number NN nsubjpass
         |   |   |   +-- the DT det
         |   |   |   +-- optimal JJ amod
         |   |   |   +-- of IN prep
         |   |   |       +-- processors NNS pobj
         |   |   +-- is VBZ auxpass
         |   +-- , , punct
         |   +-- efficiency NN nsubj
         |   |   +-- the DT det
         |   +-- is VBZ cop
         |   +-- least JJS advmod
         |       +-- at RB advmod
         +-- . . punct

19
Input: Therefore , adding processors when efficiency is smaller or equal to % will only decrease the system utilization without significant performance gains .
Parse:
decrease VB ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- adding VBG csubj
 |   +-- processors NNS dobj
 |   +-- smaller JJR advcl
 |       +-- when WRB advmod
 |       +-- efficiency NN nsubj
 |       +-- is VBZ cop
 |       +-- or CC cc
 |       +-- equal JJ conj
 |           +-- to IN prep
 |               +-- % NN pobj
 +-- will MD aux
 +-- only RB advmod
 +-- utilization NN dobj
 |   +-- the DT det
 |   +-- system NN nn
 +-- without IN prep
 |   +-- gains NNS pobj
 |       +-- significant JJ amod
 |       +-- performance NN nn
 +-- . . punct

20
Input: For heterogeneous environments with different processor speeds , we extended the notion of efficiency and introduced weighted average efficiency .
Parse:
extended VBD ROOT
 +-- For IN prep
 |   +-- environments NNS pobj
 |       +-- heterogeneous JJ amod
 |       +-- with IN prep
 |           +-- speeds NNS pobj
 |               +-- different JJ amod
 |               +-- processor NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- notion NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- efficiency NN pobj
 +-- and CC cc
 +-- introduced VBN conj
 |   +-- efficiency NN dobj
 |       +-- weighted JJ amod
 |       +-- average JJ amod
 +-- . . punct

21
Input: wa efficiency = n ? ? ? n i= speedi ? ? ? -LRB- ? ? ? overheadi -RRB- The useful work done by a processor -LRB- ? ? ? overheadi -RRB- is weighted by multiplying it by the speed of this processor relative to the fastest processor .
Parse:
weighted VBN ROOT
 +-- wa IN prep
 |   +-- efficiency NN dep
 |   +-- = SYM dep
 |   +-- n RB dep
 |   +-- ? . punct
 |   +-- n CC prep
 |   |   +-- speedi NN pobj
 |   |       +-- i= NN nn
 |   +-- ? , punct
 |   +-- -LRB- -LRB- punct
 |   +-- overheadi CD dep
 |   +-- -RRB- -RRB- punct
 +-- work NN nsubjpass
 |   +-- The DT det
 |   +-- useful JJ amod
 |   +-- done VBN partmod
 |   |   +-- by IN prep
 |   |       +-- processor NN pobj
 |   |           +-- a DT det
 |   +-- -LRB- -LRB- punct
 |   +-- ? . punct
 |   +-- ? , punct
 |   +-- overheadi NN dep
 |   +-- -RRB- -RRB- punct
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- multiplying VBG pcomp
 |       +-- it PRP dobj
 |       +-- by IN prep
 |       |   +-- speed NN pobj
 |       |       +-- the DT det
 |       |       +-- of IN prep
 |       |           +-- processor NN pobj
 |       |               +-- this DT det
 |       +-- relative JJ advmod
 |           +-- to IN prep
 |               +-- processor NN pobj
 |                   +-- the DT det
 |                   +-- fastest JJS amod
 +-- . . punct
