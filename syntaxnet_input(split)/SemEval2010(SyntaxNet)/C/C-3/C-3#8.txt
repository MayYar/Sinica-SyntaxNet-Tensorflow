
1
Input: In this paper , we investigated the problem of resource selection and adaptation in grid environments
Parse:
investigated VBD ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- problem NN dobj
     +-- the DT det
     +-- of IN prep
         +-- selection NN pobj
             +-- resource NN nn
             +-- and CC cc
             +-- adaptation NN conj
             +-- in IN prep
                 +-- environments NNS pobj
                     +-- grid NN nn

2
Input: Existing approaches to these problems typically assume the existence of a performance model that allows predicting application runtimes on various sets of resources
Parse:
assume VBP ROOT
 +-- Existing VBG csubj
 |   +-- approaches NNS dobj
 |       +-- to IN prep
 |           +-- problems NNS pobj
 |               +-- these DT det
 +-- typically RB advmod
 +-- existence NN dobj
     +-- the DT det
     +-- of IN prep
         +-- model NN pobj
             +-- a DT det
             +-- performance NN nn
             +-- allows VBZ rcmod
                 +-- that WDT nsubj
                 +-- predicting VBG xcomp
                     +-- runtimes NNS dobj
                     |   +-- application NN nn
                     +-- on IN prep
                         +-- sets NNS pobj
                             +-- various JJ amod
                             +-- of IN prep
                                 +-- resources NNS pobj

3
Input: However , creating performance models is inherently difficult and requires knowledge about the application
Parse:
difficult JJ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- creating VBG csubj
 |   +-- models NNS dobj
 |       +-- performance NN nn
 +-- is VBZ cop
 +-- inherently RB advmod
 +-- and CC cc
 +-- requires VBZ conj
     +-- knowledge NN dobj
         +-- about IN prep
             +-- application NN pobj
                 +-- the DT det

4
Input: We propose an approach that does not require in depth knowledge about the application
Parse:
propose VBP ROOT
 +-- We PRP nsubj
 +-- approach NN dobj
     +-- an DT det
     +-- require VB rcmod
         +-- that WDT nsubj
         +-- does VBZ aux
         +-- not RB neg
         +-- in IN prep
             +-- knowledge NN pobj
                 +-- depth NN amod
                 +-- about IN prep
                     +-- application NN pobj
                         +-- the DT det

5
Input: We start the application on an arbitrary set of resources and monitor its performance
Parse:
start VBP ROOT
 +-- We PRP nsubj
 +-- application NN dobj
 |   +-- the DT det
 +-- on IN prep
 |   +-- set NN pobj
 |       +-- an DT det
 |       +-- arbitrary JJ amod
 |       +-- of IN prep
 |           +-- resources NNS pobj
 +-- and CC cc
 +-- monitor VB conj
     +-- performance NN dobj
         +-- its PRP$ poss

6
Input: The performance monitoring allows us to learn certain application requirements such as the number of processors needed by the application or the application '' s bandwidth requirements
Parse:
allows VBZ ROOT
 +-- monitoring NN nsubj
 |   +-- The DT det
 |   +-- performance NN nn
 +-- learn VB xcomp
     +-- us PRP nsubj
     +-- to TO aux
     +-- requirements NNS dobj
         +-- certain JJ amod
         +-- application NN nn
         +-- as IN prep
             +-- such JJ mwe
             +-- number NN pobj
                 +-- the DT det
                 +-- of IN prep
                 |   +-- processors NNS pobj
                 |       +-- needed VBN partmod
                 |           +-- by IN prep
                 |               +-- application NN pobj
                 |                   +-- the DT det
                 +-- or CC cc
                 +-- requirements NNS conj
                     +-- application NN poss
                     |   +-- the DT det
                     |   +-- '' '' punct
                     |   +-- s POS possessive
                     +-- bandwidth NN nn

7
Input: We use this knowledge to gradually refine the resource set by removing inadequate nodes or adding new nodes if necessary
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- knowledge NN dobj
 |   +-- this DT det
 +-- refine VB xcomp
     +-- to TO aux
     +-- gradually RB advmod
     +-- resource NN dobj
         +-- the DT det
         +-- set VBN partmod
             +-- by IN prep
                 +-- removing VBG pcomp
                     +-- nodes NNS dobj
                     |   +-- inadequate JJ amod
                     +-- or CC cc
                     +-- adding VBG conj
                         +-- nodes NNS dobj
                         |   +-- new JJ amod
                         +-- necessary JJ advcl
                             +-- if IN mark

8
Input: This approach does not result in the optimal resource set , but in a reasonable resource set , i.e
Parse:
result VB ROOT
 +-- approach NN nsubj
 |   +-- This DT det
 +-- does VBZ aux
 +-- not RB neg
 +-- in IN prep
 |   +-- resource NN pobj
 |   |   +-- the DT det
 |   |   +-- optimal JJ amod
 |   |   +-- set VBN partmod
 |   +-- , , punct
 |   +-- but CC cc
 |   +-- in IN conj
 |       +-- resource NN pobj
 |           +-- a DT det
 |           +-- reasonable JJ amod
 |           +-- set VBN partmod
 +-- , , punct
 +-- i.e ADD punct

9
Input: a set free from various performance bottlenecks such as slow network connections or overloaded processors
Parse:
set NN ROOT
 +-- a DT det
 +-- free JJ amod
     +-- from IN prep
         +-- bottlenecks NNS pobj
             +-- various JJ amod
             +-- performance NN nn
             +-- as IN prep
                 +-- such JJ mwe
                 +-- connections NNS pobj
                     +-- slow JJ amod
                     +-- network NN nn
                     +-- or CC cc
                     +-- processors NNS conj
                         +-- overloaded VBN amod

10
Input: Our approach also allows the application to adapt to the changing grid conditions
Parse:
allows VBZ ROOT
 +-- approach NN nsubj
 |   +-- Our PRP$ poss
 +-- also RB advmod
 +-- adapt VB xcomp
     +-- application NN nsubj
     |   +-- the DT det
     +-- to TO aux
     +-- to IN prep
         +-- conditions NNS pobj
             +-- the DT det
             +-- changing VBG amod
             +-- grid NN nn

11
Input: The adaptation decisions are based on the weighted average efficiency an extension of the concept of parallel efficiency defined for traditional , homogeneous parallel machines
Parse:
based VBN ROOT
 +-- decisions NNS nsubjpass
 |   +-- The DT det
 |   +-- adaptation NN nn
 +-- are VBP auxpass
 +-- on IN prep
     +-- efficiency NN pobj
         +-- the DT det
         +-- weighted JJ amod
         +-- average JJ amod
         +-- extension NN dep
             +-- an DT det
             +-- of IN prep
                 +-- concept NN pobj
                     +-- the DT det
                     +-- of IN prep
                         +-- efficiency NN pobj
                             +-- parallel JJ amod
                             +-- defined VBN partmod
                                 +-- for IN prep
                                     +-- machines NNS pobj
                                         +-- traditional JJ amod
                                         +-- , , punct
                                         +-- homogeneous JJ amod
                                         +-- parallel JJ amod

12
Input: If the weighted average efficiency drops below a certain level , the adaptation coordinator starts removing worst nodes
Parse:
starts VBZ ROOT
 +-- drops NNS advcl
 |   +-- If IN mark
 |   +-- efficiency NN nsubj
 |   |   +-- the DT det
 |   |   +-- weighted JJ amod
 |   |   +-- average JJ amod
 |   +-- below IN prep
 |       +-- level NN pobj
 |           +-- a DT det
 |           +-- certain JJ amod
 +-- , , punct
 +-- coordinator NN nsubj
 |   +-- the DT det
 |   +-- adaptation NN nn
 +-- removing VBG xcomp
     +-- nodes NNS dobj
         +-- worst JJS amod

13
Input: The badness of the nodes is defined by a heuristic formula
Parse:
defined VBN ROOT
 +-- badness NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- nodes NNS pobj
 |           +-- the DT det
 +-- is VBZ auxpass
 +-- by IN prep
     +-- formula NN pobj
         +-- a DT det
         +-- heuristic JJ amod

14
Input: If the weighted average efficiency raises above a certain level , new nodes are added
Parse:
added VBN ROOT
 +-- raises VBZ advcl
 |   +-- If IN mark
 |   +-- efficiency NN nsubj
 |   |   +-- the DT det
 |   |   +-- weighted JJ amod
 |   |   +-- average JJ amod
 |   +-- above IN prep
 |       +-- level NN pobj
 |           +-- a DT det
 |           +-- certain JJ amod
 +-- , , punct
 +-- nodes NNS nsubjpass
 |   +-- new JJ amod
 +-- are VBP auxpass

15
Input: Our simple adaptation strategy allows us to handle multiple scenarios typical for grid environments expand to more nodes or shrink to fewer nodes if the application was started on an inappropriate number of processors , remove inadequate nodes and replace them with better ones , replace crashed processors , etc
Parse:
allows VBZ ROOT
 +-- strategy NN nsubj
 |   +-- Our PRP$ poss
 |   +-- simple JJ amod
 |   +-- adaptation NN nn
 +-- handle VB xcomp
     +-- us PRP nsubj
     +-- to TO aux
     +-- expand VB dobj
     |   +-- scenarios NNS nsubj
     |   |   +-- multiple JJ amod
     |   |   +-- typical JJ amod
     |   |       +-- for IN prep
     |   |           +-- environments NNS pobj
     |   |               +-- grid NN nn
     |   +-- to IN prep
     |       +-- nodes NNS pobj
     |           +-- more JJR amod
     +-- or CC cc
     +-- shrink VB conj
     |   +-- to IN prep
     |   |   +-- nodes NNS pobj
     |   |       +-- fewer JJR amod
     |   +-- started VBN advcl
     |       +-- if IN mark
     |       +-- application NN nsubjpass
     |       |   +-- the DT det
     |       +-- was VBD auxpass
     |       +-- on IN prep
     |       |   +-- number NN pobj
     |       |       +-- an DT det
     |       |       +-- inappropriate JJ amod
     |       |       +-- of IN prep
     |       |           +-- processors NNS pobj
     |       +-- , , punct
     |       +-- remove VB conj
     |       |   +-- nodes NNS dobj
     |       |       +-- inadequate JJ amod
     |       +-- and CC cc
     |       +-- replace VB conj
     |           +-- them PRP dobj
     |           +-- with IN prep
     |               +-- ones NNS pobj
     |                   +-- better JJR amod
     +-- , , punct
     +-- replace VB conj
     |   +-- processors NNS dobj
     |       +-- crashed VBN amod
     +-- etc FW advmod

16
Input: The application adapts fully automatically to changing conditions
Parse:
adapts NNS ROOT
 +-- application NN nsubj
 |   +-- The DT det
 +-- automatically RB advmod
 |   +-- fully RB advmod
 +-- to IN prep
     +-- conditions NNS pobj
         +-- changing VBG amod

17
Input: We implemented our approach in the Satin divide and conquer framework and evaluated it on the DAS distributed supercomputer and demonstrate that our approach can yield significant performance improvements -LRB- up to % in our experiments -RRB-
Parse:
implemented VBD ROOT
 +-- We PRP nsubj
 +-- approach NN dobj
 |   +-- our PRP$ poss
 |   +-- in IN prep
 |       +-- framework NN pobj
 |           +-- the DT det
 |           +-- Satin NNP nn
 |           +-- divide NN amod
 |               +-- and CC cc
 |               +-- conquer VB conj
 +-- and CC cc
 +-- evaluated VBD conj
     +-- it PRP dobj
     +-- on IN prep
     |   +-- supercomputer NN pobj
     |       +-- the DT det
     |       +-- distributed VBN amod
     |           +-- DAS NNP dep
     +-- and CC cc
     +-- demonstrate VB conj
         +-- yield VB ccomp
             +-- that IN mark
             +-- approach NN nsubj
             |   +-- our PRP$ poss
             +-- can MD aux
             +-- improvements NNS dobj
             |   +-- significant JJ amod
             |   +-- performance NN nn
             +-- -LRB- -LRB- punct
             +-- up RB advmod
             |   +-- to IN prep
             |       +-- % NN pobj
             |           +-- in IN prep
             |               +-- experiments NNS pobj
             |                   +-- our PRP$ poss
             +-- -RRB- -RRB- punct

18
Input: Future work will involve extending our adaptation strategy to support opportunistic migration
Parse:
involve VB ROOT
 +-- work NN nsubj
 |   +-- Future JJ amod
 +-- will MD aux
 +-- extending VBG xcomp
     +-- strategy NN dobj
         +-- our PRP$ poss
         +-- adaptation NN nn
         +-- support VB infmod
             +-- to TO aux
             +-- migration NN dobj
                 +-- opportunistic JJ amod

19
Input: This , however , requires grid schedulers with more sophisticated functionality than currently exists
Parse:
requires VBZ ROOT
 +-- This DT nsubj
 +-- , , punct
 +-- however RB advmod
 +-- schedulers NNS dobj
 |   +-- grid NN nn
 +-- with IN prep
     +-- functionality NN pobj
         +-- sophisticated JJ amod
         |   +-- more RBR advmod
         +-- exists VBZ dep
             +-- than IN mark
             +-- currently RB advmod

20
Input: Further research is also needed to decrease the benchmarking overhead
Parse:
needed VBN ROOT
 +-- research NN nsubjpass
 |   +-- Further JJ amod
 +-- is VBZ auxpass
 +-- also RB advmod
 +-- decrease VB xcomp
     +-- to TO aux
     +-- overhead NN dobj
         +-- the DT det
         +-- benchmarking VBG nn

21
Input: For example , the information about CPU load could be used to decrease the benchmarking frequency
Parse:
used VBN ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- information NN nsubjpass
 |   +-- the DT det
 |   +-- about IN prep
 |       +-- load NN pobj
 |           +-- CPU NN nn
 +-- could MD aux
 +-- be VB auxpass
 +-- decrease VB xcomp
     +-- to TO aux
     +-- frequency NN dobj
         +-- the DT det
         +-- benchmarking VBG nn

22
Input: Another line of research that we wish to investigate is using feedback control to refine the adaptation strategy during the application run
Parse:
is VBZ ROOT
 +-- line NN nsubj
 |   +-- Another DT det
 |   +-- of IN prep
 |   |   +-- research NN pobj
 |   +-- wish VBP rcmod
 |       +-- that WDT dobj
 |       +-- we PRP nsubj
 |       +-- investigate VB xcomp
 |           +-- to TO aux
 +-- using VBG xcomp
     +-- control NN dobj
     |   +-- feedback NN nn
     +-- refine VB xcomp
         +-- to TO aux
         +-- strategy NN dobj
         |   +-- the DT det
         |   +-- adaptation NN nn
         +-- during IN prep
             +-- run NN pobj
                 +-- the DT det
                 +-- application NN nn

23
Input: For example , the node badness formula could be refined at runtime based on the effectiveness of the previous adaptation decisions
Parse:
refined VBN ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- formula NN nsubjpass
 |   +-- the DT det
 |   +-- node NN nn
 |   +-- badness JJ amod
 +-- could MD aux
 +-- be VB auxpass
 +-- at IN prep
 |   +-- runtime NN pobj
 +-- based VBN prep
     +-- on IN pcomp
         +-- effectiveness NN pobj
             +-- the DT det
             +-- of IN prep
                 +-- decisions NNS pobj
                     +-- the DT det
                     +-- previous JJ amod
                     +-- adaptation NN nn

24
Input: Finally , the centralized implementation of the adaptation coordinator might become a bottleneck for applications which are running on very large numbers of nodes -LRB- hundreds or thousands -RRB-
Parse:
bottleneck NN ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- implementation NN nsubj
 |   +-- the DT det
 |   +-- centralized JJ amod
 |   +-- of IN prep
 |       +-- coordinator NN pobj
 |           +-- the DT det
 |           +-- adaptation NN nn
 +-- might MD aux
 +-- become VB cop
 +-- a DT det
 +-- for IN prep
     +-- applications NNS pobj
         +-- running VBG rcmod
             +-- which WDT nsubj
             +-- are VBP aux
             +-- on IN prep
                 +-- numbers NNS pobj
                     +-- large JJ amod
                     |   +-- very RB advmod
                     +-- of IN prep
                     |   +-- nodes NNS pobj
                     +-- -LRB- -LRB- punct
                     +-- hundreds NNS dep
                     |   +-- or CC cc
                     |   +-- thousands NNS conj
                     +-- -RRB- -RRB- punct

25
Input: This problem can be solved by implementing a hierarchy of coordinators one subcoordinator per cluster which collects and processes statistics from its cluster and one main coordinator which collects the information from the sub coordinators
Parse:
solved VBN ROOT
 +-- problem NN nsubjpass
 |   +-- This DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- by IN prep
     +-- implementing VBG pcomp
         +-- hierarchy NN dobj
             +-- a DT det
             +-- of IN prep
                 +-- coordinators NNS pobj
                     +-- subcoordinator NN dep
                         +-- one CD num
                         +-- per IN prep
                         |   +-- cluster NN pobj
                         +-- collects VBZ rcmod
                             +-- which WDT nsubj
                             +-- and CC cc
                             +-- processes VBZ conj
                             +-- statistics NNS dobj
                             +-- from IN prep
                             |   +-- cluster NN pobj
                             |       +-- its PRP$ poss
                             +-- coordinator NN conj
                                 +-- one CD num
                                 +-- main JJ amod
                                 +-- collects VBZ rcmod
                                     +-- which WDT nsubj
                                     +-- information NN dobj
                                     |   +-- the DT det
                                     +-- from IN prep
                                         +-- coordinators NNS pobj
                                             +-- the DT det
                                             +-- sub NN nn

26
Input: Acknowledgments This work was carried out in the context of Virtual Laboratory for e Science project -LRB- ww.vl e.nl -RRB-
Parse:
Acknowledgments NNS ROOT
 +-- carried VBN rcmod
     +-- work NN nsubjpass
     |   +-- This DT det
     +-- was VBD auxpass
     +-- out RP prt
     +-- in IN prep
         +-- context NN pobj
             +-- the DT det
             +-- of IN prep
                 +-- Laboratory NNP pobj
                     +-- Virtual NNP nn
                     +-- for IN prep
                         +-- project NN pobj
                             +-- e NNP nn
                             +-- Science NNP nn
                             +-- -LRB- -LRB- punct
                             +-- e.nl NN dep
                             |   +-- ww.vl NNP nn
                             +-- -RRB- -RRB- punct

27
Input: This project is supported by a BSIK grant from the Dutch Ministry of Education , Culture and Science -LRB- OC & W -RRB- and is part of the ICT innovation program of the Ministry of Economic Affairs -LRB- EZ -RRB- .
Parse:
supported VBN ROOT
 +-- project NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- grant NN pobj
 |       +-- a DT det
 |       +-- BSIK NNP nn
 |       +-- from IN prep
 |           +-- Ministry NNP pobj
 |               +-- the DT det
 |               +-- Dutch NNP nn
 |               +-- of IN prep
 |               |   +-- Education NNP pobj
 |               |       +-- , , punct
 |               |       +-- Culture NNP conj
 |               |       +-- and CC cc
 |               |       +-- Science NNP conj
 |               +-- -LRB- -LRB- punct
 |               +-- OC NNP dep
 |               |   +-- & CC cc
 |               |   +-- W NNP conj
 |               +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- part NN conj
 |   +-- is VBZ cop
 |   +-- of IN prep
 |       +-- program NN pobj
 |           +-- the DT det
 |           +-- ICT NNP nn
 |           +-- innovation NN nn
 |           +-- of IN prep
 |               +-- Ministry NNP pobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                   |   +-- Affairs NNPS pobj
 |                   |       +-- Economic NNP nn
 |                   +-- -LRB- -LRB- punct
 |                   +-- EZ NNP dep
 |                   +-- -RRB- -RRB- punct
 +-- . . punct
