
1
Input: In recent years , grid computing has become a real alternative to traditional parallel computing .
Parse:
alternative NN ROOT
 +-- In IN prep
 |   +-- years NNS pobj
 |       +-- recent JJ amod
 +-- , , punct
 +-- computing NN nsubj
 |   +-- grid NN nn
 +-- has VBZ aux
 +-- become VBN cop
 +-- a DT det
 +-- real JJ amod
 +-- to IN prep
 |   +-- computing NN pobj
 |       +-- traditional JJ amod
 |       +-- parallel JJ amod
 +-- . . punct

2
Input: A grid provides much computational power , and thus offers the possibility to solve very large problems , especially if applications can run on multiple sites at the same time -LRB- ; ; -RRB- .
Parse:
provides VBZ ROOT
 +-- grid NN nsubj
 |   +-- A DT det
 +-- power NN dobj
 |   +-- much JJ amod
 |   +-- computational JJ amod
 +-- , , punct
 +-- and CC cc
 +-- offers VBZ conj
 |   +-- thus RB advmod
 |   +-- possibility NN dobj
 |       +-- the DT det
 |       +-- solve VB infmod
 |           +-- to TO aux
 |           +-- problems NNS dobj
 |           |   +-- large JJ amod
 |           |       +-- very RB advmod
 |           +-- , , punct
 |           +-- run VB advcl
 |               +-- especially RB advmod
 |               +-- if IN mark
 |               +-- applications NNS nsubj
 |               +-- can MD aux
 |               +-- on IN prep
 |               |   +-- sites NNS pobj
 |               |       +-- multiple JJ amod
 |               +-- at IN prep
 |                   +-- time NN pobj
 |                       +-- the DT det
 |                       +-- same JJ amod
 |                       +-- -LRB- -LRB- punct
 +-- ; : punct
 +-- -RRB- -RRB- punct
 +-- . . punct

3
Input: However , the complexity of Grid environments also is many times larger than that of traditional parallel machines like clusters and supercomputers .
Parse:
larger JJR ROOT
 +-- However RB advmod
 +-- , , punct
 +-- complexity NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- environments NNS pobj
 |           +-- Grid NNP nn
 +-- also RB advmod
 +-- is VBZ cop
 +-- times NNS npadvmod
 |   +-- many JJ amod
 +-- than IN prep
 |   +-- that DT pobj
 |       +-- of IN prep
 |           +-- machines NNS pobj
 |               +-- traditional JJ amod
 |               +-- parallel JJ amod
 |               +-- like IN prep
 |                   +-- clusters NNS pobj
 |                       +-- and CC cc
 |                       +-- supercomputers NNS conj
 +-- . . punct

4
Input: One important problem is resource selection selecting a set of compute nodes such that the application achieves good performance .
Parse:
selection NN ROOT
 +-- problem NN nsubj
 |   +-- One CD num
 |   +-- important JJ amod
 +-- is VBZ cop
 +-- resource NN nn
 +-- selecting VBG partmod
 |   +-- set NN dobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- nodes NNS pobj
 |               +-- compute NN amod
 |               +-- achieves VBZ dep
 |                   +-- such JJ dep
 |                   +-- that IN mark
 |                   +-- application NN nsubj
 |                   |   +-- the DT det
 |                   +-- performance NN dobj
 |                       +-- good JJ amod
 +-- . . punct

5
Input: Even in traditional , homogeneous parallel environments , finding the optimal number of nodes is a hard problem and is often solved in a trial and error fashion .
Parse:
problem NN ROOT
 +-- in IN prep
 |   +-- Even RB advmod
 |   +-- environments NNS pobj
 |       +-- traditional JJ amod
 |       +-- , , punct
 |       +-- homogeneous JJ amod
 |       +-- parallel JJ amod
 +-- , , punct
 +-- finding VBG csubj
 |   +-- number NN dobj
 |       +-- the DT det
 |       +-- optimal JJ amod
 |       +-- of IN prep
 |           +-- nodes NNS pobj
 +-- is VBZ cop
 +-- a DT det
 +-- hard JJ amod
 +-- and CC cc
 +-- solved VBN conj
 |   +-- is VBZ auxpass
 |   +-- often RB advmod
 |   +-- in IN prep
 |       +-- fashion NN pobj
 |           +-- a DT det
 |           +-- trial NN nn
 |               +-- and CC cc
 |               +-- error NN conj
 +-- . . punct

6
Input: In a grid environment this problem is even more difficult , because of the heterogeneity of resources the compute nodes have various speeds and the quality of network connections between them varies from low latency and high bandwidth local area networks -LRB- LANs -RRB- to high latency and possibly low bandwidth wide area networks -LRB- WANs -RRB- .
Parse:
difficult JJ ROOT
 +-- In IN prep
 |   +-- environment NN pobj
 |       +-- a DT det
 |       +-- grid NN nn
 +-- problem NN nsubj
 |   +-- this DT det
 +-- is VBZ cop
 +-- more RBR advmod
 |   +-- even RB advmod
 +-- , , punct
 +-- of IN prep
 |   +-- because IN mwe
 |   +-- heterogeneity NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- resources NNS pobj
 |       +-- have VBP rcmod
 |       |   +-- nodes NNS nsubj
 |       |   |   +-- the DT det
 |       |   |   +-- compute NN amod
 |       |   +-- speeds NNS dobj
 |       |       +-- various JJ amod
 |       +-- and CC cc
 |       +-- varies VBZ conj
 |           +-- quality NN nsubj
 |           |   +-- the DT det
 |           |   +-- of IN prep
 |           |       +-- connections NNS pobj
 |           |           +-- network NN nn
 |           |           +-- between IN prep
 |           |               +-- them PRP pobj
 |           +-- from IN prep
 |           |   +-- networks NNS pobj
 |           |       +-- latency NN nn
 |           |       |   +-- low JJ amod
 |           |       |   +-- and CC cc
 |           |       |   +-- bandwidth NN conj
 |           |       |       +-- high JJ amod
 |           |       +-- local JJ amod
 |           |       +-- area NN nn
 |           |       +-- -LRB- -LRB- punct
 |           |       +-- LANs NNS dep
 |           |       +-- -RRB- -RRB- punct
 |           +-- to IN prep
 |               +-- latency NN pobj
 |                   +-- high JJ amod
 |                   +-- and CC cc
 |                   +-- possibly RB advmod
 |                   +-- networks NNS conj
 |                       +-- low JJ amod
 |                       +-- wide JJ amod
 |                       |   +-- bandwidth NN npadvmod
 |                       +-- area NN nn
 |                       +-- -LRB- -LRB- punct
 |                       +-- WANs NNS dep
 |                       +-- -RRB- -RRB- punct
 +-- . . punct

7
Input: Another important problem is that the performance and availability of grid resources varies over time the network links or compute nodes may become overloaded , or the compute nodes may become unavailable because of crashes or because they have been claimed by a higher priority application .
Parse:
is VBZ ROOT
 +-- problem NN nsubj
 |   +-- Another DT det
 |   +-- important JJ amod
 +-- varies VBZ ccomp
 |   +-- that IN mark
 |   +-- performance NN nsubj
 |   |   +-- the DT det
 |   |   +-- and CC cc
 |   |   +-- availability NN conj
 |   |   +-- of IN prep
 |   |       +-- resources NNS pobj
 |   |           +-- grid NN nn
 |   +-- over IN prep
 |   |   +-- time NN pobj
 |   +-- links NNS dobj
 |   |   +-- the DT det
 |   |   +-- network NN nn
 |   +-- or CC cc
 |   +-- overloaded JJ conj
 |   |   +-- nodes NNS nsubj
 |   |   |   +-- compute NN amod
 |   |   +-- may MD aux
 |   |   +-- become VB cop
 |   +-- , , punct
 |   +-- unavailable JJ conj
 |       +-- nodes NNS nsubj
 |       |   +-- the DT det
 |       |   +-- compute NN amod
 |       +-- may MD aux
 |       +-- become VB cop
 |       +-- of IN prep
 |       |   +-- because IN mwe
 |       |   +-- crashes NNS pobj
 |       +-- or CC cc
 |       +-- claimed VBN conj
 |           +-- because IN mark
 |           +-- they PRP nsubjpass
 |           +-- have VBP aux
 |           +-- been VBN auxpass
 |           +-- by IN prep
 |               +-- application NN pobj
 |                   +-- a DT det
 |                   +-- higher JJR amod
 |                   +-- priority NN nn
 +-- . . punct

8
Input: Also , new , better resources may become available .
Parse:
available JJ ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- resources NNS nsubj
 |   +-- new JJ amod
 |   +-- , , punct
 |   +-- better JJR amod
 +-- may MD aux
 +-- become VB cop
 +-- . . punct

9
Input: To maintain a reasonable performance level , the application therefore needs to adapt to the changing conditions .
Parse:
needs VBZ ROOT
 +-- maintain VB advcl
 |   +-- To TO aux
 |   +-- level NN dobj
 |       +-- a DT det
 |       +-- reasonable JJ amod
 |       +-- performance NN nn
 +-- , , punct
 +-- application NN nsubj
 |   +-- the DT det
 +-- therefore RB advmod
 +-- adapt VB xcomp
 |   +-- to TO aux
 |   +-- to IN prep
 |       +-- conditions NNS pobj
 |           +-- the DT det
 |           +-- changing VBG amod
 +-- . . punct

10
Input: The adaptation problem can be reduced to the resource selection problem the resource selection phase can be repeated during application execution , either at regular intervals , or when a performance problem is detected , or when new resources become available .
Parse:
reduced VBN ROOT
 +-- problem NN nsubjpass
 |   +-- The DT det
 |   +-- adaptation NN nn
 +-- can MD aux
 +-- be VB auxpass
 +-- to IN prep
 |   +-- problem NN pobj
 |       +-- the DT det
 |       +-- selection NN nn
 |           +-- resource NN nn
 +-- repeated VBN ccomp
 |   +-- phase NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- resource NN nn
 |   |   +-- selection NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- during IN prep
 |       +-- execution NN pobj
 |           +-- application NN nn
 +-- , , punct
 +-- at IN prep
 |   +-- either CC preconj
 |   +-- intervals NNS pobj
 |   |   +-- regular JJ amod
 |   +-- , , punct
 |   +-- or CC cc
 |   +-- detected VBN conj
 |       +-- when WRB advmod
 |       +-- problem NN nsubjpass
 |       |   +-- a DT det
 |       |   +-- performance NN nn
 |       +-- is VBZ auxpass
 |       +-- , , punct
 |       +-- or CC cc
 |       +-- available JJ conj
 |           +-- when WRB advmod
 |           +-- resources NNS nsubj
 |           |   +-- new JJ amod
 |           +-- become VBP cop
 +-- . . punct

11
Input: This approach has been adopted by a number of systems -LRB- ; ; -RRB- .
Parse:
adopted VBN ROOT
 +-- approach NN nsubjpass
 |   +-- This DT det
 +-- has VBZ aux
 +-- been VBN auxpass
 +-- by IN prep
 |   +-- number NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- systems NNS pobj
 |               +-- -LRB- -LRB- punct
 +-- ; : punct
 +-- -RRB- -RRB- punct
 +-- . . punct

12
Input: For resource selection , the application runtime is estimated for some resource sets and the set that yields the shortest runtime is selected for execution .
Parse:
estimated VBN ROOT
 +-- For IN prep
 |   +-- selection NN pobj
 |       +-- resource NN nn
 +-- , , punct
 +-- runtime NN nsubjpass
 |   +-- the DT det
 |   +-- application NN nn
 +-- is VBZ auxpass
 +-- for IN prep
 |   +-- sets NNS pobj
 |       +-- some DT det
 |       +-- resource NN nn
 +-- and CC cc
 +-- selected VBN conj
 |   +-- set NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- yields VBZ rcmod
 |   |       +-- that DT nsubj
 |   |       +-- runtime NN dobj
 |   |           +-- the DT det
 |   |           +-- shortest JJS amod
 |   +-- is VBZ auxpass
 |   +-- for IN prep
 |       +-- execution NN pobj
 +-- . . punct

13
Input: Predicting the application runtime on a given set of resources , however , requires knowledge about the application .
Parse:
requires VBZ ROOT
 +-- Predicting VBG partmod
 |   +-- runtime NN dobj
 |   |   +-- the DT det
 |   |   +-- application NN nn
 |   +-- on IN prep
 |       +-- set NN pobj
 |           +-- a DT det
 |           +-- given VBN amod
 |           +-- of IN prep
 |               +-- resources NNS pobj
 +-- , , punct
 +-- however RB advmod
 +-- knowledge NN dobj
 |   +-- about IN prep
 |       +-- application NN pobj
 |           +-- the DT det
 +-- . . punct

14
Input: Typically , an analytical performance model is used , but constructing such a model is inherently difficult and requires an expertise which application programmers may not have .
Parse:
used VBN ROOT
 +-- Typically RB advmod
 +-- , , punct
 +-- model NN nsubjpass
 |   +-- an DT det
 |   +-- analytical JJ amod
 |   +-- performance NN nn
 +-- is VBZ auxpass
 +-- but CC cc
 +-- difficult JJ conj
 |   +-- constructing VBG csubj
 |   |   +-- model NN dobj
 |   |       +-- such PDT predet
 |   |       +-- a DT det
 |   +-- is VBZ cop
 |   +-- inherently RB advmod
 |   +-- and CC cc
 |   +-- requires VBZ conj
 |       +-- expertise NN dobj
 |           +-- an DT det
 |           +-- have VB rcmod
 |               +-- which WDT dobj
 |               +-- programmers NNS nsubj
 |               |   +-- application NN nn
 |               +-- may MD aux
 |               +-- not RB neg
 +-- . . punct

15
Input: In this paper , we introduce and evaluate an alternative approach to application adaptation and resource selection which does not need a performance model .
Parse:
introduce VBP ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- and CC cc
 +-- evaluate VB conj
 +-- approach NN dobj
 |   +-- an DT det
 |   +-- alternative JJ amod
 |   +-- to IN prep
 |   |   +-- adaptation NN pobj
 |   |       +-- application NN nn
 |   |       +-- and CC cc
 |   |       +-- selection NN conj
 |   |           +-- resource NN nn
 |   +-- need VB rcmod
 |       +-- which WDT nsubj
 |       +-- does VBZ aux
 |       +-- not RB neg
 |       +-- model NN dobj
 |           +-- a DT det
 |           +-- performance NN nn
 +-- . . punct

16
Input: We start an application on any set of resources .
Parse:
start VBP ROOT
 +-- We PRP nsubj
 +-- application NN dobj
 |   +-- an DT det
 +-- on IN prep
 |   +-- set NN pobj
 |       +-- any DT det
 |       +-- of IN prep
 |           +-- resources NNS pobj
 +-- . . punct

17
Input: During the application run , we periodically collect information about the communication times and idle times of the processors .
Parse:
collect VBP ROOT
 +-- During IN prep
 |   +-- run NN pobj
 |       +-- the DT det
 |       +-- application NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- periodically RB advmod
 +-- information NN dobj
 |   +-- about IN prep
 |       +-- times NNS pobj
 |           +-- the DT det
 |           +-- communication NN nn
 |           +-- and CC cc
 |           +-- times NNS conj
 |           |   +-- idle JJ amod
 |           +-- of IN prep
 |               +-- processors NNS pobj
 |                   +-- the DT det
 +-- . . punct

18
Input: We use these statistics to automatically estimate the resource requirements of the application .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- statistics NNS dobj
 |   +-- these DT det
 +-- estimate VB xcomp
 |   +-- to TO aux
 |   +-- automatically RB advmod
 |   +-- requirements NNS dobj
 |       +-- the DT det
 |       +-- resource NN nn
 |       +-- of IN prep
 |           +-- application NN pobj
 |               +-- the DT det
 +-- . . punct

19
Input: Next , we adjust the resource set the application is running on by adding or removing compute nodes or even entire clusters .
Parse:
adjust VBP ROOT
 +-- Next RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- running VBG ccomp
 |   +-- resource NN nsubj
 |   |   +-- the DT det
 |   |   +-- set VBD partmod
 |   |       +-- application NN dobj
 |   |           +-- the DT det
 |   +-- is VBZ aux
 |   +-- on RP prt
 |   +-- by IN prep
 |       +-- adding VBG pcomp
 |           +-- or CC cc
 |           +-- removing VBG conj
 |               +-- nodes NNS dobj
 |                   +-- compute NN amod
 |                   +-- or CC cc
 |                   +-- clusters NNS conj
 |                       +-- even RB advmod
 |                       +-- entire JJ amod
 +-- . . punct

20
Input: Our adaptation strategy uses the work by Eager et al .
Parse:
uses VBZ ROOT
 +-- strategy NN nsubj
 |   +-- Our PRP$ poss
 |   +-- adaptation NN nn
 +-- work NN dobj
 |   +-- the DT det
 |   +-- by IN prep
 |       +-- al NNP pobj
 |           +-- Eager NNP nn
 |           +-- et FW nn
 +-- . . punct

21
Input: -LRB- -RRB- to determine the efficiency and tries to keep the efficiency of the application between a lower and upper threshold derived from their theory .
Parse:
determine VB ROOT
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- to TO aux
 +-- efficiency NN dobj
 |   +-- the DT det
 +-- and CC cc
 +-- tries VBZ conj
 |   +-- keep VB xcomp
 |       +-- to TO aux
 |       +-- efficiency NN dobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- application NN pobj
 |                   +-- the DT det
 |                   +-- between IN prep
 |                       +-- threshold NN pobj
 |                           +-- a DT det
 |                           +-- lower JJR amod
 |                           |   +-- and CC cc
 |                           |   +-- upper JJ conj
 |                           +-- derived VBN partmod
 |                               +-- from IN prep
 |                                   +-- theory NN pobj
 |                                       +-- their PRP$ poss
 +-- . . punct

22
Input: Processors are added or deleted to stay between the thresholds , thus adapting automatically to the changing environment .
Parse:
added VBN ROOT
 +-- Processors NNS nsubjpass
 +-- are VBP auxpass
 +-- or CC cc
 +-- deleted VBN conj
 +-- stay VB xcomp
 |   +-- to TO aux
 |   +-- between IN prep
 |   |   +-- thresholds NNS pobj
 |   |       +-- the DT det
 |   +-- , , punct
 |   +-- adapting VBG xcomp
 |       +-- thus RB advmod
 |       +-- automatically RB advmod
 |       +-- to IN prep
 |           +-- environment NN pobj
 |               +-- the DT det
 |               +-- changing VBG amod
 +-- . . punct

23
Input: A major advantage of our approach is that it improves application performance in many different situations that are typical for grid computing .
Parse:
is VBZ ROOT
 +-- advantage NN nsubj
 |   +-- A DT det
 |   +-- major JJ amod
 |   +-- of IN prep
 |       +-- approach NN pobj
 |           +-- our PRP$ poss
 +-- improves VBZ ccomp
 |   +-- that IN mark
 |   +-- it PRP nsubj
 |   +-- performance NN dobj
 |       +-- application NN nn
 |       +-- in IN prep
 |           +-- situations NNS pobj
 |               +-- many JJ amod
 |               +-- different JJ amod
 |               +-- typical JJ rcmod
 |                   +-- that WDT nsubj
 |                   +-- are VBP cop
 |                   +-- for IN prep
 |                       +-- computing NN pobj
 |                           +-- grid NN nn
 +-- . . punct

24
Input: It handles all of the following cases ? ? automatically adapting the number of processors to the degree of parallelism in the application , even when this degree changes dynamically during the computation ? ? migrating -LRB- part of -RRB- a computation away from overloaded resources ? ? removing resources with poor communication links that slow down the computation ? ? adding new resources to replace resources that have crashed Our work assumes the application is malleable and can run -LRB- efficiently -RRB- on multiple sites of a grid -LRB- i.e. , using co allocation -LRB- -RRB- -RRB- .
Parse:
handles VBZ ROOT
 +-- It PRP nsubj
 +-- all DT dobj
 |   +-- of IN prep
 |       +-- cases NNS pobj
 |           +-- the DT det
 |           +-- following VBG amod
 +-- ? , punct
 +-- ? . punct
 +-- adapting VBG partmod
 |   +-- automatically RB advmod
 |   +-- number NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- processors NNS pobj
 |   +-- to IN prep
 |   |   +-- degree NN pobj
 |   |       +-- the DT det
 |   |       +-- of IN prep
 |   |       |   +-- parallelism NN pobj
 |   |       +-- in IN prep
 |   |           +-- application NN pobj
 |   |               +-- the DT det
 |   +-- , , punct
 |   +-- changes VBZ advcl
 |       +-- when WRB advmod
 |       |   +-- even RB advmod
 |       +-- degree NN nsubj
 |       |   +-- this DT det
 |       +-- dynamically RB advmod
 |       +-- during IN prep
 |       |   +-- computation NN pobj
 |       |       +-- the DT det
 |       +-- ? . punct
 |       +-- ? , punct
 |       +-- assumes VBZ parataxis
 |           +-- migrating VBG csubj
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- part NN dobj
 |           |   |   +-- of IN prep
 |           |   |       +-- -RRB- -RRB- punct
 |           |   |       +-- computation NN pobj
 |           |   |           +-- a DT det
 |           |   |           +-- away RB advmod
 |           |   |               +-- from IN prep
 |           |   |                   +-- resources NNS pobj
 |           |   |                       +-- overloaded VBN amod
 |           |   +-- ? . punct
 |           |   +-- removing VBG dep
 |           |   |   +-- resources NNS dobj
 |           |   |   +-- with IN prep
 |           |   |       +-- links NNS pobj
 |           |   |           +-- poor JJ amod
 |           |   |           +-- communication NN nn
 |           |   |           +-- slow VBP rcmod
 |           |   |               +-- that WDT nsubj
 |           |   |               +-- down RP prt
 |           |   |               +-- computation NN dobj
 |           |   |                   +-- the DT det
 |           |   +-- ? , punct
 |           |   +-- adding VBG partmod
 |           |       +-- resources NNS dobj
 |           |       |   +-- new JJ amod
 |           |       +-- replace VB xcomp
 |           |           +-- to TO aux
 |           |           +-- resources NNS dobj
 |           |               +-- crashed VBN rcmod
 |           |                   +-- that WDT nsubj
 |           |                   +-- have VBP aux
 |           |                   +-- work NN dobj
 |           |                       +-- Our PRP$ poss
 |           +-- malleable JJ ccomp
 |               +-- application NN nsubj
 |               |   +-- the DT det
 |               +-- is VBZ cop
 |               +-- and CC cc
 |               +-- run VB conj
 |                   +-- can MD aux
 |                   +-- -LRB- -LRB- punct
 |                   +-- efficiently RB advmod
 |                   +-- -RRB- -RRB- punct
 |                   +-- on IN prep
 |                   |   +-- sites NNS pobj
 |                   |       +-- multiple JJ amod
 |                   |       +-- of IN prep
 |                   |           +-- grid NN pobj
 |                   |               +-- a DT det
 |                   +-- using VBG xcomp
 |                       +-- i.e. FW advmod
 |                       +-- , , punct
 |                       +-- allocation NN dobj
 |                           +-- co NN nn
 +-- . . punct

25
Input: It should not use static load balancing or be very sensitive to wide area latencies .
Parse:
use VB ROOT
 +-- It PRP nsubj
 +-- should MD aux
 +-- not RB neg
 +-- balancing VBG dobj
 |   +-- load NN nn
 |       +-- static JJ amod
 +-- or CC cc
 +-- sensitive JJ conj
 |   +-- be VB cop
 |   +-- very RB advmod
 |   +-- to IN prep
 |       +-- latencies NNS pobj
 |           +-- area NN nn
 |               +-- wide JJ amod
 +-- . . punct

26
Input: We have applied our ideas to divide and conquer applications , which satisfy these requirements .
Parse:
applied VBN ROOT
 +-- We PRP nsubj
 +-- have VBP aux
 +-- ideas NNS dobj
 |   +-- our PRP$ poss
 +-- divide VB xcomp
 |   +-- to TO aux
 |   +-- and CC cc
 |   +-- conquer NN conj
 |   +-- applications NNS dobj
 |       +-- , , punct
 |       +-- satisfy VBP rcmod
 |           +-- which WDT nsubj
 |           +-- requirements NNS dobj
 |               +-- these DT det
 +-- . . punct

27
Input: Divide and conquer has been shown to be an attractive paradigm for programming grid applications -LRB- ; -RRB- .
Parse:
shown VBN ROOT
 +-- Divide RB nsubjpass
 |   +-- and CC cc
 |   +-- conquer NN conj
 +-- has VBZ aux
 +-- been VBN auxpass
 +-- paradigm NN xcomp
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- an DT det
 |   +-- attractive JJ amod
 |   +-- for IN prep
 |       +-- applications NNS pobj
 |           +-- grid NN nn
 |               +-- programming NN nn
 +-- -LRB- -LRB- punct
 +-- ; : punct
 +-- -RRB- -RRB- punct
 +-- . . punct

28
Input: We believe that our approach can be extended to other classes of applications with the given assumptions .
Parse:
believe VBP ROOT
 +-- We PRP nsubj
 +-- extended VBN ccomp
 |   +-- that IN mark
 |   +-- approach NN nsubjpass
 |   |   +-- our PRP$ poss
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- to IN prep
 |       +-- classes NNS pobj
 |           +-- other JJ amod
 |           +-- of IN prep
 |               +-- applications NNS pobj
 |                   +-- with IN prep
 |                       +-- assumptions NNS pobj
 |                           +-- the DT det
 |                           +-- given VBN amod
 +-- . . punct

29
Input: We implemented our strategy in Satin , which is a Java centric framework for writing grid enabled divide and conquer applications -LRB- -RRB- .
Parse:
implemented VBD ROOT
 +-- We PRP nsubj
 +-- strategy NN dobj
 |   +-- our PRP$ poss
 |   +-- in IN prep
 |   |   +-- Satin NNP pobj
 |   +-- , , punct
 |   +-- framework NN rcmod
 |       +-- which WDT nsubj
 |       +-- is VBZ cop
 |       +-- a DT det
 |       +-- Java NNP nn
 |       +-- centric JJ amod
 |       +-- for IN prep
 |       |   +-- writing VBG pcomp
 |       |       +-- applications NNS dobj
 |       |           +-- enabled VBD amod
 |       |           |   +-- grid NN dep
 |       |           +-- divide NN nn
 |       |               +-- and CC cc
 |       |               +-- conquer NN conj
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- . . punct

30
Input: We evaluate the performance of our approach on the DAS wide area system and we will show that our approach yields major performance improvements -LRB- roughly % -RRB- in the above scenarios .
Parse:
evaluate VBP ROOT
 +-- We PRP nsubj
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- approach NN pobj
 |           +-- our PRP$ poss
 |           +-- on IN prep
 |               +-- system NN pobj
 |                   +-- the DT det
 |                   +-- DAS NNP nn
 |                   +-- area NN nn
 |                       +-- wide JJ amod
 +-- and CC cc
 +-- show VB conj
 |   +-- we PRP nsubj
 |   +-- will MD aux
 |   +-- yields VBZ ccomp
 |       +-- that IN mark
 |       +-- approach NN nsubj
 |       |   +-- our PRP$ poss
 |       +-- improvements NNS dobj
 |           +-- major JJ amod
 |           +-- performance NN nn
 |           +-- -LRB- -LRB- punct
 |           +-- % NN dep
 |           |   +-- roughly RB quantmod
 |           +-- -RRB- -RRB- punct
 |           +-- in IN prep
 |               +-- scenarios NNS pobj
 |                   +-- the DT det
 |                   +-- above JJ amod
 +-- . . punct

31
Input: The rest of this paper is structured as follows .
Parse:
structured VBN ROOT
 +-- rest NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- paper NN pobj
 |           +-- this DT det
 +-- is VBZ auxpass
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct

32
Input: In Section , we explain what assumptions we are making about the applications and grid resources .
Parse:
explain VBP ROOT
 +-- In IN prep
 |   +-- Section NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- making VBG ccomp
 |   +-- assumptions NNS dobj
 |   |   +-- what WP det
 |   +-- we PRP nsubj
 |   +-- are VBP aux
 |   +-- about IN prep
 |       +-- applications NNS pobj
 |           +-- the DT det
 |           +-- and CC cc
 |           +-- resources NNS conj
 |               +-- grid NN nn
 +-- . . punct

33
Input: In Section , we present our resource selection and adaptation strategy .
Parse:
present VBP ROOT
 +-- In IN prep
 |   +-- Section NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- strategy NN dobj
 |   +-- our PRP$ poss
 |   +-- selection NN nn
 |       +-- resource NN nn
 |       +-- and CC cc
 |       +-- adaptation NN conj
 +-- . . punct

34
Input: In Section , we describe its implementation in the Satin framework .
Parse:
describe VBP ROOT
 +-- In IN prep
 |   +-- Section NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- implementation NN dobj
 |   +-- its PRP$ poss
 |   +-- in IN prep
 |       +-- framework NN pobj
 |           +-- the DT det
 |           +-- Satin NNP nn
 +-- . . punct

35
Input: In Section , we evaluate our approach in a number of grid scenarios .
Parse:
evaluate VBP ROOT
 +-- In IN prep
 |   +-- Section NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- approach NN dobj
 |   +-- our PRP$ poss
 |   +-- in IN prep
 |       +-- number NN pobj
 |           +-- a DT det
 |           +-- of IN prep
 |               +-- scenarios NNS pobj
 |                   +-- grid NN nn
 +-- . . punct

36
Input: In Section , we compare our approach with the related work .
Parse:
compare VBP ROOT
 +-- In IN prep
 |   +-- Section NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- approach NN dobj
 |   +-- our PRP$ poss
 |   +-- with IN prep
 |       +-- work NN pobj
 |           +-- the DT det
 |           +-- related JJ amod
 +-- . . punct

37
Input: Finally , in Section , we conclude and describe future work. .
Parse:
conclude VBP ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- Section NNP pobj
 +-- we PRP nsubj
 +-- and CC cc
 +-- describe VB conj
 |   +-- work. NN dobj
 |       +-- future JJ amod
 +-- . . punct
