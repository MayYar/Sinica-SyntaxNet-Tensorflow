
1
Input: Designing an appropriate auction mechanism is key to addressing the above strategies .
Parse:
key JJ ROOT
 +-- Designing VBG csubj
 |   +-- mechanism NN dobj
 |       +-- an DT det
 |       +-- appropriate JJ amod
 |       +-- auction NN nn
 +-- is VBZ cop
 +-- to IN prep
 |   +-- addressing VBG pcomp
 |       +-- strategies NNS dobj
 |           +-- the DT det
 |           +-- above JJ amod
 +-- . . punct

2
Input: Specifically , our goals for such a mechanism include
Parse:
include VBP ROOT
 +-- Specifically RB advmod
 +-- , , punct
 +-- goals NNS nsubj
     +-- our PRP$ poss
     +-- for IN prep
         +-- mechanism NN pobj
             +-- such PDT predet
             +-- a DT det

3
Input: The Generalized Vickrey Auction -LRB- 8 , 18 -RRB- is the only known combinatorial mechanism that provides both strategyproofness and optimal allocation .
Parse:
mechanism NN ROOT
 +-- Auction NNP nsubj
 |   +-- The DT det
 |   +-- Generalized NNP nn
 |   +-- Vickrey NNP nn
 |   +-- -LRB- -LRB- punct
 |   +-- 8 CD dep
 |   |   +-- , , punct
 |   |   +-- 18 CD num
 |   +-- -RRB- -RRB- punct
 +-- is VBZ cop
 +-- the DT det
 +-- only RB advmod
 +-- known VBN amod
 +-- combinatorial JJ amod
 +-- provides VBZ rcmod
 |   +-- that WDT nsubj
 |   +-- allocation NN dobj
 |       +-- strategyproofness NN nn
 |           +-- both DT preconj
 |           +-- and CC cc
 |           +-- optimal JJ conj
 +-- . . punct

4
Input: However , it also is computationally intractable as it is NP hard to calculate the allocations as well as individual payments .
Parse:
intractable JJ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- it PRP nsubj
 +-- also RB advmod
 +-- is VBZ cop
 +-- computationally RB advmod
 +-- hard JJ advcl
 |   +-- as IN mark
 |   +-- it PRP nsubj
 |   +-- is VBZ cop
 |   +-- NP NNP npadvmod
 |   +-- calculate VB xcomp
 |       +-- to TO aux
 |       +-- allocations NNS dobj
 |           +-- the DT det
 |           +-- well RB cc
 |           |   +-- as RB advmod
 |           |   +-- as IN mwe
 |           +-- payments NNS conj
 |               +-- individual JJ amod
 +-- . . punct

5
Input: Other VCG based mechanisms exist that replace the allocation algorithms in GVA with approximate ones to provide tractability .
Parse:
exist VBP ROOT
 +-- mechanisms NNS nsubj
 |   +-- Other JJ amod
 |   +-- based VBN amod
 |       +-- VCG NNP dep
 +-- replace VBP ccomp
 |   +-- that WDT nsubj
 |   +-- algorithms NNS dobj
 |   |   +-- the DT det
 |   |   +-- allocation NN nn
 |   |   +-- in IN prep
 |   |       +-- GVA NNP pobj
 |   +-- with IN prep
 |       +-- ones NNS pobj
 |           +-- approximate JJ amod
 |           +-- provide VB infmod
 |               +-- to TO aux
 |               +-- tractability NN dobj
 +-- . . punct

6
Input: In this case , however , strategyproofness is no longer available -LRB- 16 -RRB- .
Parse:
available JJ ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- however RB advmod
 +-- strategyproofness NN nsubj
 +-- is VBZ cop
 +-- longer RBR advmod
 |   +-- no RB advmod
 +-- -LRB- -LRB- punct
 +-- 16 CD dep
 +-- -RRB- -RRB- punct
 +-- . . punct

7
Input: These goals are in conflict for VCG and in general -LRB- 10 -RRB- .
Parse:
are VBP ROOT
 +-- goals NNS nsubj
 |   +-- These DT det
 +-- in IN prep
 |   +-- conflict NN pobj
 |   |   +-- for IN prep
 |   |       +-- VCG NNP pobj
 |   +-- and CC cc
 |   +-- in IN conj
 |       +-- general JJ pobj
 |           +-- -LRB- -LRB- punct
 |           +-- 10 CD dep
 |           +-- -RRB- -RRB- punct
 +-- . . punct

8
Input: We thus must make certain trade offs .
Parse:
make VB ROOT
 +-- We PRP nsubj
 +-- thus RB advmod
 +-- must MD aux
 +-- offs NNS dobj
 |   +-- certain JJ amod
 |   +-- trade NN nn
 +-- . . punct

9
Input: With this in mind , we now present a two phase roadmap for improving Mirage
Parse:
present VBP ROOT
 +-- With IN prep
 |   +-- this DT pobj
 |       +-- in IN prep
 |           +-- mind NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- now RB advmod
 +-- roadmap NN dobj
     +-- a DT det
     +-- phase NN nn
     |   +-- two CD num
     +-- for IN prep
         +-- improving VBG pcomp
             +-- Mirage NNP dobj

10
Input: 4.1 Ongoing improvements Our first improvement is a mixed integer programming 102 formulation as an alternative to the greedy algorithm .
Parse:
formulation NN ROOT
 +-- improvements NNS nsubj
 |   +-- 4.1 CD num
 |   +-- Ongoing VBG nn
 |   +-- improvement NN dep
 |       +-- Our PRP$ poss
 |       +-- first JJ amod
 +-- is VBZ cop
 +-- a DT det
 +-- programming NN nn
 |   +-- integer NN nn
 |       +-- mixed JJ amod
 +-- 102 CD num
 +-- as IN prep
 |   +-- alternative NN pobj
 |       +-- an DT det
 |       +-- to IN prep
 |           +-- algorithm NN pobj
 |               +-- the DT det
 |               +-- greedy JJ amod
 +-- . . punct

11
Input: This is aimed directly at eliminating strategy S4 .
Parse:
aimed VBN ROOT
 +-- This DT nsubjpass
 +-- is VBZ auxpass
 +-- directly RB advmod
 +-- at IN prep
 |   +-- eliminating VBG pcomp
 |       +-- strategy NN dobj
 |           +-- S4 CD num
 +-- . . punct

12
Input: While the MIP does not provide strategyproofness , it is able to compute approximately optimal allocations .
Parse:
able JJ ROOT
 +-- provide VB advcl
 |   +-- While IN mark
 |   +-- MIP NNP nsubj
 |   |   +-- the DT det
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- strategyproofness NN dobj
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- compute VB xcomp
 |   +-- to TO aux
 |   +-- allocations NNS dobj
 |       +-- optimal JJ amod
 |           +-- approximately RB advmod
 +-- . . punct

13
Input: Like the GVA , however , the MIP is computationally demanding and thus careful formulation of the MIP and optimizations based on the observed workloads from Mirage will be required to ensure timely clearing of the auction .
Parse:
demanding JJ ROOT
 +-- Like IN prep
 |   +-- GVA NNP pobj
 |       +-- the DT det
 +-- , , punct
 +-- however RB advmod
 +-- MIP NNP nsubj
 |   +-- the DT det
 +-- is VBZ cop
 +-- computationally RB advmod
 +-- and CC cc
 +-- thus RB advmod
 +-- required VBN conj
 |   +-- formulation NN nsubjpass
 |   |   +-- careful JJ amod
 |   |   +-- of IN prep
 |   |   |   +-- MIP NNP pobj
 |   |   |       +-- the DT det
 |   |   |       +-- and CC cc
 |   |   |       +-- optimizations NNS conj
 |   |   +-- based VBN partmod
 |   |       +-- on IN prep
 |   |           +-- workloads NNS pobj
 |   |               +-- the DT det
 |   |               +-- observed JJ amod
 |   |               +-- from IN prep
 |   |                   +-- Mirage NNP pobj
 |   +-- will MD aux
 |   +-- be VB auxpass
 |   +-- ensure VB xcomp
 |       +-- to TO aux
 |       +-- clearing NN dobj
 |           +-- timely JJ amod
 |           +-- of IN prep
 |               +-- auction NN pobj
 |                   +-- the DT det
 +-- . . punct

14
Input: Our first step is to test and optimize our MIP based algorithm on auction data from the past four months .
Parse:
is VBZ ROOT
 +-- step NN nsubj
 |   +-- Our PRP$ poss
 |   +-- first JJ amod
 +-- test VB xcomp
 |   +-- to TO aux
 |   +-- and CC cc
 |   +-- optimize VB conj
 |   +-- algorithm NN dobj
 |   |   +-- our PRP$ poss
 |   |   +-- based VBN amod
 |   |       +-- MIP NNP dep
 |   +-- on IN prep
 |   |   +-- data NNS pobj
 |   |       +-- auction NN nn
 |   +-- from IN prep
 |       +-- months NNS pobj
 |           +-- the DT det
 |           +-- past JJ amod
 |           +-- four CD num
 +-- . . punct

15
Input: We can then run both the MIP alongside the greedy algorithm in parallel and select the higher quality result each time the auction clears .
Parse:
run VB ROOT
 +-- We PRP nsubj
 +-- can MD aux
 +-- then RB advmod
 +-- MIP NNP dobj
 |   +-- both CC preconj
 |   +-- the DT det
 +-- alongside IN prep
 |   +-- algorithm NN pobj
 |       +-- the DT det
 |       +-- greedy JJ amod
 |       +-- in IN prep
 |           +-- parallel JJ pobj
 +-- and CC cc
 +-- select VB conj
 |   +-- result VBP iobj
 |   |   +-- the DT det
 |   |   +-- quality NN nn
 |   |       +-- higher JJR amod
 |   +-- time NN dobj
 |       +-- each DT det
 |       +-- clears VBZ rcmod
 |           +-- auction NN nsubj
 |               +-- the DT det
 +-- . . punct

16
Input: Second , we can also augment the auction with additional rules and fees to further mitigate strategic behavior .
Parse:
augment VB ROOT
 +-- Second RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- also RB advmod
 +-- auction NN dobj
 |   +-- the DT det
 +-- with IN prep
 |   +-- rules NNS pobj
 |       +-- additional JJ amod
 |       +-- and CC cc
 |       +-- fees NNS conj
 +-- mitigate VB xcomp
 |   +-- to TO aux
 |   +-- further RB advmod
 |   +-- behavior NN dobj
 |       +-- strategic JJ amod
 +-- . . punct

17
Input: To eliminate S4 , two possibilities are to restrict each user to having either one outstanding bid at a time or to mandate that users are not allowed to have multiple overlapping allocations in time .
Parse:
are VBP ROOT
 +-- eliminate VB advcl
 |   +-- To TO aux
 |   +-- S4 CD dobj
 +-- , , punct
 +-- possibilities NNS nsubj
 |   +-- two CD num
 +-- restrict VB xcomp
 |   +-- to TO aux
 |   +-- user NN dobj
 |   |   +-- each DT det
 |   +-- to IN prep
 |       +-- having VBG pcomp
 |           +-- bid NN dobj
 |           |   +-- one CD num
 |           |   |   +-- either DT quantmod
 |           |   +-- outstanding JJ amod
 |           +-- at IN prep
 |           |   +-- time NN pobj
 |           |       +-- a DT det
 |           +-- or CC cc
 |           +-- mandate VB conj
 |               +-- to TO aux
 |               +-- allowed VBN ccomp
 |                   +-- that IN mark
 |                   +-- users NNS nsubjpass
 |                   +-- are VBP auxpass
 |                   +-- not RB neg
 |                   +-- have VB xcomp
 |                       +-- to TO aux
 |                       +-- allocations NNS dobj
 |                       |   +-- multiple JJ amod
 |                       |   +-- overlapping NN amod
 |                       +-- in IN prep
 |                           +-- time NN pobj
 +-- . . punct

18
Input: To mitigate S1 and S2 , we could add transaction fees .
Parse:
add VB ROOT
 +-- mitigate VB advcl
 |   +-- To TO aux
 |   +-- S1 CD dobj
 |       +-- and CC cc
 |       +-- S2 CD conj
 +-- , , punct
 +-- we PRP nsubj
 +-- could MD aux
 +-- fees NNS dobj
 |   +-- transaction NN nn
 +-- . . punct

19
Input: With such fees in place , a user who understates a bid and intends to iteratively refine it will have a disincentive to do so given that each iteration incurs a fee .
Parse:
have VB ROOT
 +-- With IN prep
 |   +-- fees NNS pobj
 |       +-- such JJ amod
 |       +-- in IN prep
 |           +-- place NN pobj
 +-- , , punct
 +-- user NN nsubj
 |   +-- a DT det
 |   +-- understates VBZ rcmod
 |       +-- who WP nsubj
 |       +-- bid NN dobj
 |       |   +-- a DT det
 |       +-- and CC cc
 |       +-- intends VBZ conj
 |           +-- refine VB xcomp
 |               +-- to TO aux
 |               +-- iteratively RB advmod
 |               +-- it PRP dobj
 +-- will MD aux
 +-- disincentive NN dobj
 |   +-- a DT det
 |   +-- do VB infmod
 |       +-- to TO aux
 |       +-- so RB advmod
 |       +-- given VBN prep
 |       +-- incurs VBZ ccomp
 |           +-- that IN mark
 |           +-- iteration NN nsubj
 |           |   +-- each DT det
 |           +-- fee NN dobj
 |               +-- a DT det
 +-- . . punct

20
Input: Finally , another approach to eliminating S4 is to modify the greedy algorithm such that if users do have bids whose allocations could overlap in time , then those potential allocations are considered from lowest to highest value per node hour .
Parse:
is VBZ ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- approach NN nsubj
 |   +-- another DT det
 |   +-- to IN prep
 |       +-- eliminating VBG pcomp
 |           +-- S4 CD dobj
 +-- modify VB xcomp
 |   +-- to TO aux
 |   +-- considered VBN xcomp
 |       +-- algorithm NN nsubjpass
 |       |   +-- the DT det
 |       |   +-- greedy JJ amod
 |       +-- such JJ dep
 |       +-- that IN mark
 |       +-- have VB advcl
 |       |   +-- if IN mark
 |       |   +-- users NNS nsubj
 |       |   +-- do VBP aux
 |       |   +-- bids NNS dobj
 |       |       +-- overlap VB rcmod
 |       |           +-- allocations NNS nsubj
 |       |           |   +-- whose WP$ poss
 |       |           +-- could MD aux
 |       |           +-- in IN prep
 |       |               +-- time NN pobj
 |       +-- , , punct
 |       +-- then RB advmod
 |       +-- allocations NNS nsubjpass
 |       |   +-- those DT det
 |       |   +-- potential JJ amod
 |       +-- are VBP auxpass
 |       +-- from IN prep
 |           +-- lowest RBS pobj
 |           +-- to IN prep
 |               +-- value NN pobj
 |                   +-- highest JJS amod
 |                   +-- per IN prep
 |                       +-- hour NN pobj
 |                           +-- node NN nn
 +-- . . punct

21
Input: In effect , this allows bids for overlapping allocations but creates a disincentive for users to place such bids .
Parse:
allows VBZ ROOT
 +-- In IN prep
 |   +-- effect NN pobj
 +-- , , punct
 +-- this DT nsubj
 +-- bids NNS dobj
 |   +-- for IN prep
 |       +-- allocations NNS pobj
 |           +-- overlapping VBG amod
 +-- but CC cc
 +-- creates VBZ conj
 |   +-- disincentive JJ dobj
 |   |   +-- a DT det
 |   +-- place VB advcl
 |       +-- for IN mark
 |       +-- users NNS nsubj
 |       +-- to TO aux
 |       +-- bids NNS dobj
 |           +-- such JJ amod
 +-- . . punct

22
Input: 4.2 Towards a strategyproof mechanism Clearly , we need to evaluate our goals and identify where we can make trade offs in designing a new mechanism .
Parse:
need VBP ROOT
 +-- 4.2 LS dep
 |   +-- Towards IN prep
 |       +-- mechanism NN pobj
 |           +-- a DT det
 |           +-- strategyproof JJ amod
 +-- Clearly RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- evaluate VB xcomp
 |   +-- to TO aux
 |   +-- goals NNS dobj
 |   |   +-- our PRP$ poss
 |   +-- and CC cc
 |   +-- identify VB conj
 |       +-- make VB advcl
 |           +-- where WRB advmod
 |           +-- we PRP nsubj
 |           +-- can MD aux
 |           +-- offs NNS dobj
 |           |   +-- trade NN nn
 |           +-- in IN prep
 |               +-- designing VBG pcomp
 |                   +-- mechanism NN dobj
 |                       +-- a DT det
 |                       +-- new JJ amod
 +-- . . punct

23
Input: Computational tractability is a fundamental requirement for operational reasons .
Parse:
requirement NN ROOT
 +-- tractability NN nsubj
 |   +-- Computational JJ amod
 +-- is VBZ cop
 +-- a DT det
 +-- fundamental JJ amod
 +-- for IN prep
 |   +-- reasons NNS pobj
 |       +-- operational JJ amod
 +-- . . punct

24
Input: Strategyproofness or , minimally , making the system hard to manipulate is also key given the behavior we have observed .
Parse:
key JJ ROOT
 +-- Strategyproofness NN nsubj
 |   +-- or CC cc
 |   +-- , , punct
 |   +-- minimally RB advmod
 |   +-- making VBG partmod
 |       +-- hard JJ xcomp
 |           +-- system NN nsubj
 |           |   +-- the DT det
 |           +-- manipulate VB ccomp
 |               +-- to TO aux
 +-- is VBZ cop
 +-- also RB advmod
 +-- given VBN prep
 |   +-- behavior NN dep
 |       +-- the DT det
 |       +-- observed VBN rcmod
 |           +-- we PRP nsubj
 |           +-- have VBP aux
 +-- . . punct

25
Input: Finally , our mechanism should compute near optimal allocations given our compute time budget .
Parse:
compute VB ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- our PRP$ poss
 +-- should MD aux
 +-- near IN prep
 |   +-- allocations NNS pobj
 |       +-- optimal JJ amod
 +-- given VBN prep
 |   +-- budget NN dep
 |       +-- our PRP$ poss
 |       +-- time NN nn
 |           +-- compute JJ amod
 +-- . . punct

26
Input: Among the potential mechanisms we can extend , the LOS scheme -LRB- 12 -RRB- seems to be a good starting point .
Parse:
seems VBZ ROOT
 +-- Among IN prep
 |   +-- mechanisms NNS pobj
 |       +-- the DT det
 |       +-- potential JJ amod
 |       +-- extend VB rcmod
 |           +-- we PRP nsubj
 |           +-- can MD aux
 +-- , , punct
 +-- scheme NN nsubj
 |   +-- the DT det
 |   +-- LOS NNP nn
 |   +-- -LRB- -LRB- punct
 |   +-- 12 CD dep
 |   +-- -RRB- -RRB- punct
 +-- point NN xcomp
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- a DT det
 |   +-- good JJ amod
 |   +-- starting NN nn
 +-- . . punct

27
Input: It is a fast algorithm as the allocation rule is a greedy mechanism , ranking bids with some norm such as value per node hour .
Parse:
algorithm NN ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- fast JJ amod
 +-- mechanism NN advcl
 |   +-- as IN mark
 |   +-- rule NN nsubj
 |   |   +-- the DT det
 |   |   +-- allocation NN nn
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- greedy JJ amod
 |   +-- , , punct
 |   +-- bids NNS appos
 |       +-- ranking VBG amod
 |       +-- with IN prep
 |           +-- norm NN pobj
 |               +-- some DT det
 |               +-- as IN prep
 |                   +-- such JJ mwe
 |                   +-- value NN pobj
 |                       +-- per IN prep
 |                           +-- hour NN pobj
 |                               +-- node NN nn
 +-- . . punct

28
Input: The advantage of LOS is its special payment scheme that is tightly linked to the greedy allocation .
Parse:
scheme NN ROOT
 +-- advantage NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- LOS NNP pobj
 +-- is VBZ cop
 +-- its PRP$ poss
 +-- special JJ amod
 +-- payment NN nn
 +-- linked VBN rcmod
 |   +-- that WDT nsubjpass
 |   +-- is VBZ auxpass
 |   +-- tightly RB advmod
 |   +-- to IN prep
 |       +-- allocation NN pobj
 |           +-- the DT det
 |           +-- greedy JJ amod
 +-- . . punct

29
Input: Essentially , a winner i pays the norm of the first bidder denied access times the amount of units -LRB- i.e .
Parse:
denied VBD ROOT
 +-- Essentially RB advmod
 +-- , , punct
 +-- winner NN nsubj
 |   +-- a DT det
 |   +-- pays VBZ rcmod
 |       +-- i PRP nsubj
 |       +-- norm NN dobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- bidder NN pobj
 |                   +-- the DT det
 |                   +-- first JJ amod
 +-- times NNS dobj
 |   +-- access NN nn
 |   +-- amount NN dep
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- units NNS pobj
 |       +-- -LRB- -LRB- punct
 |       +-- i.e NN dep
 +-- . . punct

30
Input: node hours -RRB- that i won .
Parse:
hours NNS ROOT
 +-- node NN nn
 +-- -RRB- -RRB- punct
 +-- won VBD rcmod
 |   +-- that WDT dobj
 |   +-- i PRP nsubj
 +-- . . punct

31
Input: This feature makes it strategyproof .
Parse:
makes VBZ ROOT
 +-- feature NN nsubj
 |   +-- This DT det
 +-- strategyproof JJ xcomp
 |   +-- it PRP nsubj
 +-- . . punct

32
Input: The main downside , however , is that it assumes users are single minded , meaning that each bidder only cares about a specific set of goods -LRB- e.g. , a specific list of nodes for specific durations -RRB- and they do not value anything else .
Parse:
is VBZ ROOT
 +-- downside NN nsubj
 |   +-- The DT det
 |   +-- main JJ amod
 +-- , , punct
 +-- however RB advmod
 +-- assumes VBZ ccomp
 |   +-- that IN mark
 |   +-- it PRP nsubj
 |   +-- minded JJ ccomp
 |   |   +-- users NNS nsubj
 |   |   +-- are VBP cop
 |   |   +-- single JJ amod
 |   +-- , , punct
 |   +-- meaning VBG xcomp
 |       +-- cares VBZ ccomp
 |           +-- that IN mark
 |           +-- bidder NN nsubj
 |           |   +-- each DT det
 |           +-- only RB advmod
 |           +-- about IN prep
 |           |   +-- set NN pobj
 |           |       +-- a DT det
 |           |       +-- specific JJ amod
 |           |       +-- of IN prep
 |           |       |   +-- goods NNS pobj
 |           |       +-- -LRB- -LRB- punct
 |           |       +-- e.g. NNP dep
 |           |       |   +-- , , punct
 |           |       |   +-- list NN appos
 |           |       |       +-- a DT det
 |           |       |       +-- specific JJ amod
 |           |       |       +-- of IN prep
 |           |       |           +-- nodes NNS pobj
 |           |       |               +-- for IN prep
 |           |       |                   +-- durations NNS pobj
 |           |       |                       +-- specific JJ amod
 |           |       +-- -RRB- -RRB- punct
 |           +-- and CC cc
 |           +-- value VB conj
 |               +-- they PRP nsubj
 |               +-- do VBP aux
 |               +-- not RB neg
 |               +-- anything NN dobj
 |                   +-- else RB amod
 +-- . . punct

33
Input: Unfortunately , this is highly restrictive and contradicts what Mirage currently offers its users , namely the ability to select any subset of nodes for any slots and submit multiple bids .
Parse:
restrictive JJ ROOT
 +-- Unfortunately RB advmod
 +-- , , punct
 +-- this DT nsubj
 +-- is VBZ cop
 +-- highly RB advmod
 +-- and CC cc
 +-- contradicts VBZ conj
 |   +-- offers VBZ ccomp
 |       +-- what WP dobj
 |       +-- Mirage NNP nsubj
 |       +-- currently RB advmod
 |       +-- users NNS dobj
 |           +-- its PRP$ poss
 |           +-- , , punct
 |           +-- ability NN appos
 |               +-- namely RB advmod
 |               +-- the DT det
 |               +-- select VB infmod
 |                   +-- to TO aux
 |                   +-- subset NN dobj
 |                   |   +-- any DT det
 |                   |   +-- of IN prep
 |                   |   |   +-- nodes NNS pobj
 |                   |   +-- for IN prep
 |                   |       +-- slots NNS pobj
 |                   |           +-- any DT det
 |                   +-- and CC cc
 |                   +-- submit VB conj
 |                       +-- bids NNS dobj
 |                           +-- multiple JJ amod
 +-- . . punct

34
Input: Thus , LOS is vulnerable to S4 and to avoid it we must find a way to extend LOS and its strategyproof property to satisfy complex bidders .
Parse:
vulnerable JJ ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- LOS NNP nsubj
 +-- is VBZ cop
 +-- to IN prep
 |   +-- S4 CD pobj
 +-- and CC cc
 +-- find VB conj
 |   +-- avoid VB advcl
 |   |   +-- to TO aux
 |   |   +-- it PRP dobj
 |   +-- we PRP nsubj
 |   +-- must MD aux
 |   +-- way NN dobj
 |       +-- a DT det
 |       +-- extend VB infmod
 |           +-- to TO aux
 |           +-- LOS NNP dobj
 |           |   +-- and CC cc
 |           |   +-- property NN conj
 |           |       +-- its PRP$ poss
 |           |       +-- strategyproof JJ amod
 |           +-- satisfy VB xcomp
 |               +-- to TO aux
 |               +-- bidders NNS dobj
 |                   +-- complex JJ amod
 +-- . . punct

35
Input: Realistically , even with a strategyproof LOS scheme for complex bidders there will likely be further strategies we have yet to encounter and that we should consider in our design .
Parse:
strategies NNS ROOT
 +-- Realistically RB advmod
 +-- , , punct
 +-- with IN prep
 |   +-- even RB advmod
 |   +-- scheme NN pobj
 |       +-- a DT det
 |       +-- strategyproof NN nn
 |       +-- LOS NNP nn
 |       +-- for IN prep
 |       |   +-- bidders NNS pobj
 |       |       +-- complex JJ amod
 |       +-- there RB advmod
 +-- will MD aux
 +-- likely RB advmod
 +-- be VB cop
 +-- further RB amod
 +-- have VBP rcmod
 |   +-- we PRP nsubj
 |   +-- yet RB advmod
 |   +-- encounter VB xcomp
 |   |   +-- to TO aux
 |   +-- and CC cc
 |   +-- consider VB conj
 |       +-- that IN mark
 |       +-- we PRP nsubj
 |       +-- should MD aux
 |       +-- in IN prep
 |           +-- design NN pobj
 |               +-- our PRP$ poss
 +-- . . punct

36
Input: For instance , our discussion so far focuses on strategyproofness within a single auction .
Parse:
focuses VBZ ROOT
 +-- For IN prep
 |   +-- instance NN pobj
 +-- , , punct
 +-- discussion NN nsubj
 |   +-- our PRP$ poss
 +-- far RB advmod
 |   +-- so RB advmod
 +-- on IN prep
 |   +-- strategyproofness NN pobj
 +-- within IN prep
 |   +-- auction NN pobj
 |       +-- a DT det
 |       +-- single JJ amod
 +-- . . punct

37
Input: Across auctions , however , there may be temporal strategies that are possible .
Parse:
strategies NNS ROOT
 +-- Across IN prep
 |   +-- auctions NNS pobj
 +-- , , punct
 +-- however RB advmod
 +-- there EX expl
 +-- may MD aux
 +-- be VB cop
 +-- temporal JJ amod
 +-- possible JJ rcmod
 |   +-- that WDT nsubj
 |   +-- are VBP cop
 +-- . . punct

38
Input: For example , in a particular auction , suppose the highest bidder wants all nodes and pays , using GVA payment scheme for simplicity , the next bidder '' s value .
Parse:
suppose VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- in IN prep
 |   +-- auction NN pobj
 |       +-- a DT det
 |       +-- particular JJ amod
 +-- wants VBZ ccomp
 |   +-- bidder NN nsubj
 |   |   +-- the DT det
 |   |   +-- highest JJS amod
 |   +-- nodes NNS dobj
 |   |   +-- all DT det
 |   |   +-- and CC cc
 |   |   +-- pays NNS conj
 |   +-- , , punct
 |   +-- using VBG partmod
 |   |   +-- scheme NN dobj
 |   |   |   +-- GVA NNP nn
 |   |   |   +-- payment NN nn
 |   |   +-- for IN prep
 |   |       +-- simplicity NN pobj
 |   +-- value NN dobj
 |       +-- bidder NN poss
 |           +-- the DT det
 |           +-- next JJ amod
 |           +-- '' '' punct
 |           +-- s POS possessive
 +-- . . punct

39
Input: This same bidder may be better off by waiting until the next auction , if the user can still win and face bidders that have even lower values .
Parse:
better JJR ROOT
 +-- bidder NN nsubj
 |   +-- This DT det
 |   +-- same JJ amod
 +-- may MD aux
 +-- be VB cop
 +-- off RP prt
 +-- by IN prep
 |   +-- waiting VBG pcomp
 |       +-- until IN prep
 |           +-- auction NN pobj
 |               +-- the DT det
 |               +-- next JJ amod
 +-- , , punct
 +-- win VB advcl
 |   +-- if IN mark
 |   +-- user NN nsubj
 |   |   +-- the DT det
 |   +-- can MD aux
 |   +-- still RB advmod
 |   +-- and CC cc
 |   +-- bidders NNS conj
 |       +-- face NN nn
 |       +-- have VBP rcmod
 |           +-- that WDT nsubj
 |           +-- values NNS dobj
 |               +-- lower JJR amod
 |                   +-- even RB advmod
 +-- . . punct

40
Input: In this case , the user will gain additional utility due to a lower payment .
Parse:
gain VB ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- user NN nsubj
 |   +-- the DT det
 +-- will MD aux
 +-- utility NN dobj
 |   +-- additional JJ amod
 |   +-- to IN prep
 |       +-- due IN mwe
 |       +-- payment NN pobj
 |           +-- a DT det
 |           +-- lower JJR amod
 +-- . . punct

41
Input: This , however , may create various problems as total revenue , total value , as well as allocative efficiency across the auctions may be adversely affected .
Parse:
create VB ROOT
 +-- This DT nsubj
 +-- , , punct
 +-- however RB advmod
 +-- may MD aux
 +-- affected VBN ccomp
 |   +-- problems NNS nsubjpass
 |   |   +-- various JJ amod
 |   |   +-- as IN prep
 |   |       +-- revenue NN pobj
 |   |           +-- total JJ amod
 |   |           +-- , , punct
 |   |           +-- value NN conj
 |   |           |   +-- total JJ amod
 |   |           +-- well RB cc
 |   |           |   +-- as RB advmod
 |   |           |   +-- as IN mwe
 |   |           +-- efficiency NN conj
 |   |               +-- allocative JJ amod
 |   |               +-- across IN prep
 |   |                   +-- auctions NNS pobj
 |   |                       +-- the DT det
 |   +-- may MD aux
 |   +-- be VB auxpass
 |   +-- adversely RB advmod
 +-- . . punct

42
Input: There are two techniques we can use to address temporal strategies .
Parse:
are VBP ROOT
 +-- There EX expl
 +-- techniques NNS nsubj
 |   +-- two CD num
 |   +-- use VB rcmod
 |       +-- we PRP nsubj
 |       +-- can MD aux
 |       +-- address VB xcomp
 |           +-- to TO aux
 |           +-- strategies NNS dobj
 |               +-- temporal JJ amod
 +-- . . punct

43
Input: The first is a wrapper scheme such as the one employed by Virtual Worlds -LRB- 13 -RRB- that makes sequences of individually strategyproof auctions -LRB- e.g. , LOS -RRB- strategyproof .
Parse:
scheme NN ROOT
 +-- first JJ nsubj
 |   +-- The DT det
 +-- is VBZ cop
 +-- a DT det
 +-- wrapper NN nn
 +-- as IN prep
 |   +-- such JJ mwe
 |   +-- one CD pobj
 |       +-- the DT det
 |       +-- employed VBN partmod
 |       |   +-- by IN prep
 |       |       +-- Worlds NNPS pobj
 |       |           +-- Virtual NNP nn
 |       +-- 13 CD appos
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- makes VBZ rcmod
 |   +-- that WDT nsubj
 |   +-- strategyproof NNP xcomp
 |       +-- sequences NNS nsubj
 |           +-- of IN prep
 |           |   +-- auctions NNS pobj
 |           |       +-- strategyproof JJ amod
 |           |           +-- individually RB advmod
 |           +-- e.g. NN dep
 |               +-- -LRB- -LRB- punct
 |               +-- , , punct
 |               +-- LOS NNP dep
 |               +-- -RRB- -RRB- punct
 +-- . . punct

44
Input: What VW does is , after bidder i wins , it tracks what would have happened if i had submitted in a subsequent auction instead .
Parse:
does VBZ ROOT
 +-- VW NN nsubj
 |   +-- What WP det
 +-- is VBZ advmod
 +-- , , punct
 +-- wins VBZ ccomp
 |   +-- after IN prep
 |   |   +-- bidder NN pobj
 |   +-- i PRP nsubj
 +-- tracks VBZ ccomp
 |   +-- it PRP nsubj
 |   +-- happened VBN ccomp
 |       +-- what WP nsubj
 |       +-- would MD aux
 |       +-- have VB aux
 |       +-- submitted VBN advcl
 |           +-- if IN mark
 |           +-- i PRP nsubj
 |           +-- had VBD aux
 |           +-- in IN prep
 |           |   +-- auction NN pobj
 |           |       +-- a DT det
 |           |       +-- subsequent JJ amod
 |           +-- instead RB advmod
 +-- . . punct

45
Input: Specifically , it tracks what i would have paid in all following auctions during i '' s patience -LRB- i.e. , the maximum time i is willing to wait for an allocation -RRB- and keeps track of the lowest possible payment .
Parse:
tracks VBZ ROOT
 +-- Specifically RB advmod
 +-- , , punct
 +-- it PRP nsubj
 +-- paid VBN ccomp
 |   +-- what WP dobj
 |   +-- i PRP nsubj
 |   +-- would MD aux
 |   +-- have VB aux
 |   +-- in IN prep
 |   |   +-- auctions NNS pobj
 |   |       +-- all DT det
 |   |       +-- following VBG amod
 |   +-- during IN prep
 |       +-- patience NN pobj
 |           +-- i PRP poss
 |               +-- '' '' punct
 |               +-- s POS possessive
 +-- willing JJ dep
 |   +-- -LRB- -LRB- punct
 |   +-- i.e. FW advmod
 |   +-- , , punct
 |   +-- time NN nsubj
 |   |   +-- the DT det
 |   |   +-- maximum JJ amod
 |   +-- i PRP nsubj
 |   +-- is VBZ cop
 |   +-- wait VB xcomp
 |   |   +-- to TO aux
 |   |   +-- for IN prep
 |   |       +-- allocation NN pobj
 |   |           +-- an DT det
 |   +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- keeps VBZ conj
 |   +-- track NN dobj
 |   +-- of IN prep
 |       +-- payment NN pobj
 |           +-- the DT det
 |           +-- lowest JJS amod
 |           +-- possible JJ amod
 +-- . . punct

46
Input: i will instead be charged the lowest payment and will thus have no incentive to temporally game the system .
Parse:
charged VBN ROOT
 +-- i PRP nsubj
 +-- will MD aux
 +-- instead RB advmod
 +-- be VB auxpass
 +-- payment NN dobj
 |   +-- the DT det
 |   +-- lowest JJS amod
 +-- and CC cc
 +-- have VB conj
 |   +-- will MD aux
 |   +-- thus RB advmod
 |   +-- incentive NN dobj
 |       +-- no DT det
 |       +-- game VB infmod
 |           +-- to TO aux
 |           +-- temporally RB advmod
 |           +-- system NN dobj
 |               +-- the DT det
 +-- . . punct

47
Input: Alternatively , the new class of online mechanisms -LRB- 7 , 11 -RRB- assumes dynamic arrival and departure of bidders and does not hold auctions at fixed intervals .
Parse:
assumes VBZ ROOT
 +-- Alternatively RB advmod
 +-- , , punct
 +-- class NN nsubj
 |   +-- the DT det
 |   +-- new JJ amod
 |   +-- of IN prep
 |   |   +-- mechanisms NNS pobj
 |   |       +-- online JJ amod
 |   +-- -LRB- -LRB- punct
 |   +-- 11 CD dep
 |   |   +-- 7 CD num
 |   |   +-- , , punct
 |   +-- -RRB- -RRB- punct
 +-- arrival NN dobj
 |   +-- dynamic JJ amod
 |   +-- and CC cc
 |   +-- departure NN conj
 |       +-- of IN prep
 |           +-- bidders NNS pobj
 +-- and CC cc
 +-- hold VB conj
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- auctions NNS dobj
 |   +-- at IN prep
 |       +-- intervals NNS pobj
 |           +-- fixed VBN amod
 +-- . . punct

48
Input: Instead , the mechanism is a continuous scheme that accepts bids as they arrive and makes allocation decisions immediately , thus removing any need to clear auctions .
Parse:
scheme NN ROOT
 +-- Instead RB advmod
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 +-- is VBZ cop
 +-- a DT det
 +-- continuous JJ amod
 +-- accepts VBZ rcmod
 |   +-- that WDT nsubj
 |   +-- bids NNS dobj
 |   +-- arrive VBP advcl
 |   |   +-- as IN mark
 |   |   +-- they PRP nsubj
 |   +-- and CC cc
 |   +-- makes VBZ conj
 |   |   +-- decisions NNS dobj
 |   |   |   +-- allocation NN nn
 |   |   +-- immediately RB advmod
 |   +-- , , punct
 |   +-- removing VBG partmod
 |       +-- thus RB advmod
 |       +-- need NN dobj
 |       |   +-- any DT det
 |       +-- to TO prep
 |           +-- auctions NNS pobj
 |               +-- clear JJ amod
 +-- . . punct

49
Input: The challenge is that the current literature is still restricted to non combinatorial settings. .
Parse:
is VBZ ROOT
 +-- challenge NN nsubj
 |   +-- The DT det
 +-- restricted VBN ccomp
 |   +-- that IN mark
 |   +-- literature NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- current JJ amod
 |   +-- is VBZ auxpass
 |   +-- still RB advmod
 |   +-- to IN prep
 |       +-- settings. NNS pobj
 |           +-- combinatorial JJ nn
 |               +-- non NNP nn
 +-- . . punct
