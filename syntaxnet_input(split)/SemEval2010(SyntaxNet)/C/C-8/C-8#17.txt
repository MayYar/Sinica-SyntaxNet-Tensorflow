
1
Input: . Breaking the pre condition for CP The COT solution to CP is to sort all operations in CD in a total order which respects their context dependency order -LRB- in Step of ensure TPsafety -LRB- -RRB- -RRB- .
Parse:
is VBZ ROOT
 +-- . , punct
 +-- Breaking VBG csubj
 |   +-- condition NN dobj
 |       +-- the DT det
 |       +-- pre JJ amod
 |       +-- for IN prep
 |           +-- CP NNP pobj
 |               +-- solution NN dep
 |                   +-- The DT det
 |                   +-- COT NNP nn
 |                   +-- to IN prep
 |                       +-- CP NNP pobj
 +-- sort VB xcomp
 |   +-- to TO aux
 |   +-- operations NNS dobj
 |   |   +-- all DT det
 |   |   +-- in IN prep
 |   |       +-- CD NNP pobj
 |   +-- in IN prep
 |       +-- order NN pobj
 |           +-- a DT det
 |           +-- total JJ amod
 |           +-- respects VBZ rcmod
 |               +-- which WDT nsubj
 |               +-- order NN dobj
 |               |   +-- their PRP$ poss
 |               |   +-- context NN nn
 |               |   +-- dependency NN nn
 |               +-- -LRB- -LRB- punct
 |               +-- in IN prep
 |                   +-- Step NNP pobj
 |                       +-- of IN prep
 |                       |   +-- ensure NN pcomp
 |                       |       +-- TPsafety NNP dobj
 |                       +-- -LRB- -LRB- punct
 |                       +-- -RRB- -RRB- punct
 +-- . . punct

2
Input: If an operation O is transformed against the same group of context independent operations in multiple invocations to transform -LRB- O , CD -RRB- , this group of operations must be included in CD and sorted in the same total order .
Parse:
included VBN ROOT
 +-- transformed VBN advcl
 |   +-- If IN mark
 |   +-- O NN nsubjpass
 |   |   +-- an DT det
 |   |   +-- operation NN nn
 |   +-- is VBZ auxpass
 |   +-- against IN prep
 |   |   +-- group NN pobj
 |   |       +-- the DT det
 |   |       +-- same JJ amod
 |   |       +-- of IN prep
 |   |           +-- operations NNS pobj
 |   |               +-- context NN nn
 |   |               +-- independent JJ amod
 |   |               +-- in IN prep
 |   |                   +-- invocations NNS pobj
 |   |                       +-- multiple JJ amod
 |   +-- transform VB xcomp
 |       +-- to TO aux
 |       +-- -LRB- -LRB- punct
 |       +-- O NNP dobj
 |       |   +-- , , punct
 |       |   +-- CD NN appos
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- group NN nsubjpass
 |   +-- this DT det
 |   +-- of IN prep
 |       +-- operations NNS pobj
 +-- must MD aux
 +-- be VB auxpass
 +-- in IN prep
 |   +-- CD NNP pobj
 +-- and CC cc
 +-- sorted VBN conj
 |   +-- in IN prep
 |       +-- order NN pobj
 |           +-- the DT det
 |           +-- same JJ amod
 |           +-- total JJ amod
 +-- . . punct

3
Input: Therefore , O can never be transformed against the same group of operations in different orders , thus breaking PC CP .
Parse:
transformed VBN ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- O PRP nsubjpass
 +-- can MD aux
 +-- never RB neg
 +-- be VB auxpass
 +-- against IN prep
 |   +-- group NN pobj
 |       +-- the DT det
 |       +-- same JJ amod
 |       +-- of IN prep
 |       |   +-- operations NNS pobj
 |       +-- in IN prep
 |       |   +-- orders NNS pobj
 |       |       +-- different JJ amod
 |       +-- , , punct
 |       +-- breaking VBG partmod
 |           +-- thus RB advmod
 |           +-- CP NNP dobj
 |               +-- PC NN nn
 +-- . . punct

4
Input: It should be noted that CD becomes an ordered set after the sorting .
Parse:
noted VBN ROOT
 +-- It PRP nsubjpass
 +-- should MD aux
 +-- be VB auxpass
 +-- set VBN ccomp
 |   +-- that IN mark
 |   +-- CD NN nsubj
 |   +-- becomes VBZ cop
 |   +-- an DT det
 |   +-- ordered VBN amod
 |   +-- after IN prep
 |       +-- sorting NN pobj
 |           +-- the DT det
 +-- . . punct

5
Input: The first Ox in CD must meet the condition C -LRB- Ox -RRB- ? ? ? C -LRB- O -RRB- in Step -LRB- a -RRB- of transform -LRB- O , CD -RRB- -LRB- Procedure -RRB- , so this condition is no longer explicitly specified in Procedure .
Parse:
meet VB ROOT
 +-- Ox NN nsubj
 |   +-- The DT det
 |   +-- first JJ amod
 |   +-- in IN prep
 |       +-- CD NNP pobj
 +-- must MD aux
 +-- C NNP dobj
 |   +-- -LRB- -LRB- punct
 |   +-- O NN dep
 |   +-- -RRB- -RRB- punct
 |   +-- in IN prep
 |   |   +-- Step NNP pobj
 |   +-- a LS dep
 |   +-- of IN prep
 |   |   +-- transform NN pobj
 |   +-- O NNP dep
 |   |   +-- , , punct
 |   |   +-- CD NN appos
 |   +-- Procedure NNP dep
 +-- ? , punct
 +-- ? . punct
 +-- , , punct
 +-- specified VBN advcl
 |   +-- so RB mark
 |   +-- condition NN nsubjpass
 |   |   +-- this DT det
 |   +-- is VBZ auxpass
 |   +-- longer RBR advmod
 |   |   +-- no RB advmod
 |   +-- explicitly RB advmod
 |   +-- in IN prep
 |       +-- Procedure NNP pobj
 +-- . . punct

6
Input: A correct total order for breaking PCCP can be conveniently determined by using the contextdependency relations among all operations plus the site identifiers of context independent operations .
Parse:
determined VBN ROOT
 +-- order NN nsubjpass
 |   +-- A DT det
 |   +-- correct JJ amod
 |   +-- total JJ amod
 |   +-- for IN prep
 |       +-- breaking VBG pcomp
 |           +-- PCCP NN dobj
 +-- can MD aux
 +-- be VB auxpass
 +-- conveniently RB advmod
 +-- by IN prep
 |   +-- using VBG pcomp
 |       +-- relations NNS dobj
 |           +-- the DT det
 |           +-- contextdependency NN nn
 |           +-- among IN prep
 |               +-- operations NNS pobj
 |                   +-- all DT det
 |                   +-- plus CC cc
 |                   +-- identifiers NNS conj
 |                       +-- the DT det
 |                       +-- site NN nn
 |                       +-- of IN prep
 |                           +-- operations NNS pobj
 |                               +-- context NN amod
 |                               +-- independent JJ amod
 +-- . . punct

7
Input: There have been several prior OT systems capable of breaking PC CP , including the GOT system -LRB- by an undo redo scheme based on total ordering -RRB- -LRB- -RRB- , the SOCT system -LRB- by a control strategy based on global sequencing -RRB- -LRB- -RRB- , the NICE system -LRB- by a central transformation based notifier -RRB- -LRB- -RRB- , and the TIBOT system -LRB- by a distributed synchronization protocol based on time internal -RRB- -LRB- -RRB- .
Parse:
systems NNS ROOT
 +-- There EX expl
 +-- have VBP aux
 +-- been VBN cop
 +-- several JJ amod
 +-- prior JJ amod
 +-- OT NNP nn
 +-- capable JJ amod
 |   +-- of IN prep
 |       +-- breaking VBG pcomp
 |           +-- CP NNP dobj
 |               +-- PC NN nn
 +-- , , punct
 +-- including VBG prep
 |   +-- system NN pobj
 |       +-- the DT det
 |       +-- GOT NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- by IN prep
 |       |   +-- scheme NN pobj
 |       |       +-- an DT det
 |       |       +-- undo JJ amod
 |       |       +-- redo NN nn
 |       |       +-- based VBN partmod
 |       |           +-- on IN prep
 |       |               +-- ordering NN pobj
 |       |                   +-- total JJ amod
 |       +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- system NN conj
 |       |   +-- the DT det
 |       |   +-- TIBOT NNP nn
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- by IN prep
 |       |   |   +-- protocol NN pobj
 |       |   |       +-- a DT det
 |       |   |       +-- distributed VBN amod
 |       |   |       +-- synchronization NN nn
 |       |   +-- based VBN partmod
 |       |       +-- on IN prep
 |       |           +-- time NN pobj
 |       |               +-- internal JJ amod
 |       +-- and CC cc
 +-- -RRB- -RRB- punct
 +-- -LRB- -LRB- punct
 +-- . . punct

8
Input: The COT solution to CP is unique and avoids the use of any undo redo or global sequencing synchronization .
Parse:
unique JJ ROOT
 +-- solution NN nsubj
 |   +-- The DT det
 |   +-- COT NNP nn
 |   +-- to IN prep
 |       +-- CP NNP pobj
 +-- is VBZ cop
 +-- and CC cc
 +-- avoids VBZ conj
 |   +-- use NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- redo NN pobj
 |               +-- any DT det
 |               +-- undo JJ amod
 |               +-- or CC cc
 |               +-- synchronization NN conj
 |                   +-- global JJ amod
 |                   +-- sequencing NN nn
 +-- . . punct

9
Input: . Breaking the pre condition for IP The basic idea of the COT solution to IP is to make sure that an operation is never transformed against a pair of do and undo operations one by one , thus breaking PCIP .
Parse:
is VBZ ROOT
 +-- . , punct
 +-- Breaking VBG dep
 |   +-- condition NN dobj
 |       +-- the DT det
 |       +-- pre JJ nn
 |       +-- for IN prep
 |           +-- IP NNP pobj
 +-- idea NN nsubj
 |   +-- The DT det
 |   +-- basic JJ amod
 |   +-- of IN prep
 |       +-- solution NN pobj
 |           +-- the DT det
 |           +-- COT NNP nn
 |           +-- to IN prep
 |               +-- IP NN pobj
 +-- make VB xcomp
 |   +-- to TO aux
 |   +-- transformed VBN acomp
 |   |   +-- sure JJ dep
 |   |   +-- that IN mark
 |   |   +-- operation NN nsubjpass
 |   |   |   +-- an DT det
 |   |   +-- is VBZ auxpass
 |   |   +-- never RB neg
 |   |   +-- against IN prep
 |   |       +-- pair NN pobj
 |   |           +-- a DT det
 |   |           +-- do VB infmod
 |   |               +-- of IN aux
 |   |               +-- and CC cc
 |   |               +-- undo VB conj
 |   |               +-- operations NNS iobj
 |   |               +-- one CD dobj
 |   |                   +-- by IN prep
 |   |                       +-- one CD pobj
 |   +-- , , punct
 |   +-- breaking VBG xcomp
 |       +-- thus RB advmod
 |       +-- PCIP NN dobj
 +-- . . punct

10
Input: This solution consists of two parts -LRB- -RRB- Step of ensure TPsafety -LRB- CD -RRB- couples operations with their corresponding inverses if they are all included in the context difference CD , and remove these inverses from CD ; -LRB- -RRB- In Step -LRB- c -RRB- of transform -LRB- -RRB- , if Ox is found to be a do undo pair , the IT transformation of O against Ox is skipped -LRB- effectively treating this pair as an identity operation -RRB- and the context of O is updated by adding two operations -LRB- org -LRB- Ox -RRB- , org -LRB- Ox -RRB- -RRB- .
Parse:
consists VBZ ROOT
 +-- solution NN nsubj
 |   +-- This DT det
 +-- of IN prep
 |   +-- Step NN pobj
 |       +-- parts NNS nn
 |       |   +-- two CD num
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- -RRB- -RRB- punct
 |       +-- of IN prep
 |           +-- ensure VB pcomp
 |               +-- couples NNS ccomp
 |                   +-- TPsafety NNP nsubj
 |                   |   +-- -LRB- -LRB- punct
 |                   |   +-- CD NN dep
 |                   |   +-- -RRB- -RRB- punct
 |                   +-- operations NNS dobj
 |                   +-- with IN prep
 |                   |   +-- inverses NNS pobj
 |                   |       +-- their PRP$ poss
 |                   |       +-- corresponding VBG amod
 |                   +-- included VBN advcl
 |                       +-- if IN mark
 |                       +-- they PRP nsubjpass
 |                       +-- are VBP auxpass
 |                       +-- all DT dep
 |                       +-- in IN prep
 |                           +-- CD NN pobj
 |                               +-- the DT det
 |                               +-- difference NN nn
 |                                   +-- context NN nn
 +-- , , punct
 +-- and CC cc
 +-- remove VB conj
 |   +-- inverses NNS dobj
 |   |   +-- these DT det
 |   +-- from IN prep
 |       +-- CD NN pobj
 +-- ; : punct
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- skipped VBN conj
 |   +-- In IN prep
 |   |   +-- Step NN pobj
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- c LS dep
 |   |       +-- -RRB- -RRB- punct
 |   |       +-- of IN prep
 |   |           +-- transform NN pobj
 |   |               +-- -LRB- -LRB- punct
 |   |               +-- -RRB- -RRB- punct
 |   +-- , , punct
 |   +-- found VBN advcl
 |   |   +-- if IN mark
 |   |   +-- Ox NNP nsubjpass
 |   |   +-- is VBZ auxpass
 |   |   +-- pair NN xcomp
 |   |       +-- to TO aux
 |   |       +-- be VB cop
 |   |       +-- a DT det
 |   |       +-- undo JJ nn
 |   |           +-- do NN nn
 |   +-- transformation NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- IT NN nn
 |   |   +-- of IN prep
 |   |       +-- O NN pobj
 |   |           +-- against IN prep
 |   |               +-- Ox NNP pobj
 |   +-- is VBZ auxpass
 |   +-- treating VBG dep
 |       +-- -LRB- -LRB- punct
 |       +-- effectively RB advmod
 |       +-- pair NN dobj
 |       |   +-- this DT det
 |       +-- as IN prep
 |       |   +-- operation NN pobj
 |       |       +-- an DT det
 |       |       +-- identity NN nn
 |       +-- -RRB- -RRB- punct
 +-- updated VBN conj
 |   +-- context NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- O NN pobj
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |       +-- adding VBG pcomp
 |           +-- operations NNS dobj
 |               +-- two CD num
 |               +-- -LRB- -LRB- punct
 |               +-- org NN dep
 |               |   +-- -LRB- -LRB- punct
 |               |   +-- Ox NNP dep
 |               |   +-- -RRB- -RRB- punct
 |               |   +-- , , punct
 |               |   +-- Ox NNP appos
 |               |       +-- org NNP dep
 |               |       +-- -LRB- -LRB- punct
 |               |       +-- -RRB- -RRB- punct
 |               +-- -RRB- -RRB- punct
 +-- . . punct

11
Input: . Breaking the pre condition for IP The COT solution to IP is encapsulated in the procedure make IPsafe Inverse -LRB- O , CD -RRB- , which makes O an IP safe inverse with respect to the context difference CD .
Parse:
encapsulated VBN ROOT
 +-- . , punct
 +-- Breaking VBG csubj
 |   +-- condition NN dobj
 |   |   +-- the DT det
 |   |   +-- pre JJ amod
 |   +-- for IN prep
 |   |   +-- IP NNP pobj
 |   +-- solution NN dobj
 |       +-- The DT det
 |       +-- COT NNP nn
 |       +-- to IN prep
 |           +-- IP NN pobj
 +-- is VBZ cop
 +-- in IN prep
 |   +-- procedure NN pobj
 |       +-- the DT det
 +-- make VB ccomp
 |   +-- Inverse NNP dobj
 |       +-- IPsafe JJ amod
 |       +-- O NNP appos
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- , , punct
 |       |   +-- CD NNP appos
 |       |   +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- makes VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- IP NN xcomp
 |               +-- O NNP nsubj
 |               +-- an DT det
 |               +-- inverse NN dobj
 |               |   +-- safe JJ amod
 |               +-- with IN prep
 |                   +-- respect NN pobj
 |                       +-- to IN prep
 |                           +-- CD NN pobj
 |                               +-- the DT det
 |                               +-- context NN amod
 |                               +-- difference NN nn
 +-- . . punct

12
Input: An inverse O is IP safe with respect to CD if it is made from a transformed version of O , which has included all operations in CD that are context independent of O .
Parse:
safe JJ ROOT
 +-- O NN nsubj
 |   +-- An DT det
 |   +-- inverse NN amod
 +-- is VBZ cop
 +-- IP RB advmod
 +-- with IN prep
 |   +-- respect NN pobj
 |       +-- to IN prep
 |           +-- CD NN pobj
 +-- made VBN advcl
 |   +-- if IN mark
 |   +-- it PRP nsubjpass
 |   +-- is VBZ auxpass
 |   +-- from IN prep
 |       +-- version NN pobj
 |           +-- a DT det
 |           +-- transformed VBN amod
 |           +-- of IN prep
 |           |   +-- O NNP pobj
 |           +-- , , punct
 |           +-- included VBN rcmod
 |               +-- which WDT nsubj
 |               +-- has VBZ aux
 |               +-- operations NNS dobj
 |                   +-- all DT det
 |                   +-- in IN prep
 |                   |   +-- CD NNP pobj
 |                   +-- context VBG rcmod
 |                       +-- that WDT nsubj
 |                       +-- are VBP aux
 |                       +-- independent JJ acomp
 |                           +-- of IN prep
 |                               +-- O NNP pobj
 +-- . . punct

13
Input: Under the control of COT , the IP safe inverse O shall never be transformed against operations that are context independent of O , thus breaking PC IP .
Parse:
transformed VBN ROOT
 +-- Under IN prep
 |   +-- control NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- COT NNP pobj
 +-- , , punct
 +-- IP NN nsubjpass
 |   +-- the DT det
 |   +-- inverse NN dep
 |       +-- safe JJ amod
 |       +-- O , punct
 +-- shall MD aux
 +-- never RB neg
 +-- be VB auxpass
 +-- against IN prep
 |   +-- operations NNS pobj
 |       +-- context VBG rcmod
 |           +-- that WDT nsubj
 |           +-- are VBP aux
 |           +-- independent JJ acomp
 |               +-- of IN prep
 |                   +-- O NNP pobj
 +-- breaking VBG xcomp
 |   +-- thus RB advmod
 |   +-- IP NN dobj
 |       +-- PC NN nn
 +-- . . punct

14
Input: The make IPsafe Inverse procedure works as follows -LRB- -RRB- create operation O -LRB- the inverse of O -RRB- and C -LRB- O -RRB- = C -LRB- O -RRB- ? ? ? -LRB- O -RRB- ; -LRB- -RRB- select all operations from CD which are contextindependent of O and create a new context difference NCD ; -LRB- -RRB- transform O against operations in NCD -LRB- by recursively invoking transform -LRB- -RRB- -RRB- ; -LRB- -RRB- create a new inverse from the transformed O ; and -LRB- -RRB- create a new CD by subtracting NCD from the old CD -LRB- the new CD must maintain the total order as required for solving CP -RRB- .
Parse:
works NNS ROOT
 +-- procedure NN nsubj
 |   +-- The DT det
 |   +-- make NN nn
 |   +-- IPsafe JJ amod
 |   +-- Inverse NNP nn
 +-- follows VBZ advcl
 |   +-- as IN mark
 |   +-- create VB dep
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 |       +-- select VB ccomp
 |       |   +-- operation NN nsubj
 |       |   |   +-- O , punct
 |       |   |   +-- -LRB- -LRB- punct
 |       |   |   +-- inverse NN dep
 |       |   |   |   +-- the DT det
 |       |   |   |   +-- of IN prep
 |       |   |   |       +-- O NN pobj
 |       |   |   +-- -RRB- -RRB- punct
 |       |   |   +-- and CC cc
 |       |   |   +-- O NNP conj
 |       |   |       +-- C NNP nn
 |       |   |       +-- -LRB- -LRB- punct
 |       |   |       +-- -RRB- -RRB- punct
 |       |   |       +-- C NNP dep
 |       |   |       |   +-- = SYM nn
 |       |   |       +-- O NNP dep
 |       |   |       +-- ? , punct
 |       |   |       +-- ? . punct
 |       |   |       +-- O NN dep
 |       |   |       +-- ; : punct
 |       |   +-- operations NNS dobj
 |       |   |   +-- all DT det
 |       |   +-- from IN prep
 |       |       +-- CD NNP pobj
 |       |           +-- contextindependent JJ rcmod
 |       |               +-- which WDT nsubj
 |       |               +-- are VBP cop
 |       |               +-- of IN prep
 |       |               |   +-- O NNP pobj
 |       |               +-- and CC cc
 |       |               +-- create VB conj
 |       |                   +-- NCD NNP dobj
 |       |                       +-- a DT det
 |       |                       +-- new JJ amod
 |       |                       +-- context NN nn
 |       |                       +-- difference NN nn
 |       +-- ; : punct
 |       +-- transform VB parataxis
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- -RRB- -RRB- punct
 |       |   +-- O NN dobj
 |       |       +-- against IN prep
 |       |       |   +-- operations NNS pobj
 |       |       |       +-- in IN prep
 |       |       |           +-- NCD NNP pobj
 |       |       +-- -LRB- -LRB- punct
 |       |       +-- by IN prep
 |       |       |   +-- invoking VBG pcomp
 |       |       |       +-- recursively RB advmod
 |       |       |       +-- transform NN dep
 |       |       |           +-- -LRB- -LRB- punct
 |       |       +-- -RRB- -RRB- punct
 |       +-- create VBP conj
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- -RRB- -RRB- punct
 |       |   +-- inverse NN dobj
 |       |       +-- a DT det
 |       |       +-- new JJ amod
 |       |       +-- from IN prep
 |       |           +-- O CD pobj
 |       |               +-- the DT det
 |       |               +-- transformed VBN amod
 |       +-- and CC cc
 |       +-- create VB conj
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 |           +-- CD NN dobj
 |           |   +-- a DT det
 |           |   +-- new JJ amod
 |           +-- by IN prep
 |               +-- subtracting VBG pcomp
 |                   +-- NCD NNP dobj
 |                   +-- from IN prep
 |                       +-- CD NN pobj
 |                           +-- the DT det
 |                           +-- old JJ amod
 |                           +-- maintain VB dep
 |                               +-- -LRB- -LRB- punct
 |                               +-- CD NN nsubj
 |                               |   +-- the DT det
 |                               |   +-- new JJ amod
 |                               +-- must MD aux
 |                               +-- order NN dobj
 |                               |   +-- the DT det
 |                               |   +-- total JJ amod
 |                               +-- required VBN advcl
 |                               |   +-- as IN mark
 |                               |   +-- for IN prep
 |                               |       +-- solving VBG pcomp
 |                               |           +-- CP NN dobj
 |                               +-- -RRB- -RRB- punct
 +-- . . punct

15
Input: This new inverse O must be IP safe because it is created from a transformed operation whose context has included all operations in NCD .
Parse:
safe JJ ROOT
 +-- inverse NN nsubj
 |   +-- This DT det
 |   +-- new JJ amod
 |   +-- O PRP dep
 +-- must MD aux
 +-- be VB cop
 +-- IP RB advmod
 +-- created VBN advcl
 |   +-- because IN mark
 |   +-- it PRP nsubjpass
 |   +-- is VBZ auxpass
 |   +-- from IN prep
 |       +-- operation NN pobj
 |           +-- a DT det
 |           +-- transformed VBN amod
 |           +-- included VBN rcmod
 |               +-- context NN nsubj
 |               |   +-- whose WP$ poss
 |               +-- has VBZ aux
 |               +-- operations NNS dobj
 |                   +-- all DT det
 |                   +-- in IN prep
 |                       +-- NCD NNP pobj
 +-- . . punct

16
Input: The IP safe inverse O shall never be transformed against the operations in NCD since these operations have been removed from the new CD in Step -LRB- -RRB- . .
Parse:
transformed VBN ROOT
 +-- inverse NN nsubjpass
 |   +-- The DT det
 |   +-- IP JJ amod
 |   +-- safe JJ amod
 |   +-- O , punct
 +-- shall MD aux
 +-- never RB neg
 +-- be VB auxpass
 +-- against IN prep
 |   +-- operations NNS pobj
 |       +-- the DT det
 |       +-- in IN prep
 |           +-- NCD NNP pobj
 +-- removed VBN advcl
 |   +-- since IN mark
 |   +-- operations NNS nsubjpass
 |   |   +-- these DT det
 |   +-- have VBP aux
 |   +-- been VBN auxpass
 |   +-- from IN prep
 |       +-- CD NN pobj
 |           +-- the DT det
 |           +-- new JJ amod
 |           +-- in IN prep
 |           |   +-- Step NNP pobj
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- . . punct
