
1
Input: COT is a high level control algorithm responsible for determining which operation should be transformed against other operations and in which order according to contextbased conditions .
Parse:
algorithm NN ROOT
 +-- COT NNP nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- control NN nn
 |   +-- level NN nn
 |       +-- high JJ amod
 +-- responsible JJ amod
 |   +-- for IN prep
 |       +-- determining VBG pcomp
 |       |   +-- transformed VBN ccomp
 |       |       +-- operation NN nsubjpass
 |       |       |   +-- which WDT det
 |       |       +-- should MD aux
 |       |       +-- be VB auxpass
 |       |       +-- against IN prep
 |       |           +-- operations NNS pobj
 |       |               +-- other JJ amod
 |       +-- and CC cc
 |       +-- in IN conj
 |           +-- order NN pobj
 |               +-- which WDT det
 +-- according VBG prep
 |   +-- to IN pcomp
 |       +-- conditions NNS pobj
 |           +-- contextbased VBN amod
 +-- . . punct

2
Input: Another important component of an OT system is the low level transformation functions responsible for transforming operations according to their types and parameters .
Parse:
functions NNS ROOT
 +-- component NN nsubj
 |   +-- Another DT det
 |   +-- important JJ amod
 |   +-- of IN prep
 |       +-- system NN pobj
 |           +-- an DT det
 |           +-- OT NNP nn
 +-- is VBZ cop
 +-- the DT det
 +-- level NN nn
 |   +-- low JJ amod
 +-- transformation NN nn
 +-- responsible JJ amod
 |   +-- for IN prep
 |       +-- transforming VBG pcomp
 |           +-- operations NNS dobj
 |           +-- according VBG prep
 |               +-- to IN pcomp
 |                   +-- types NNS pobj
 |                       +-- their PRP$ poss
 |                       +-- and CC cc
 |                       +-- parameters NNS conj
 +-- . . punct

3
Input: Past research has identified a range of transformation properties conditions that must be maintained for ensuring the correctness of an OT system .
Parse:
identified VBN ROOT
 +-- research NN nsubj
 |   +-- Past JJ amod
 +-- has VBZ aux
 +-- range NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- conditions NNS pobj
 |           +-- transformation NN nn
 |           +-- properties NNS nn
 |           +-- maintained VBN rcmod
 |               +-- that WDT nsubjpass
 |               +-- must MD aux
 |               +-- be VB auxpass
 |               +-- for IN prep
 |                   +-- ensuring VBG pcomp
 |                       +-- correctness NN dobj
 |                           +-- the DT det
 |                           +-- of IN prep
 |                               +-- system NN pobj
 |                                   +-- an DT det
 |                                   +-- OT NNP nn
 +-- . . punct

4
Input: Different OT systems may have different control algorithms , different transformation functions , and different divisions of responsibilities among these components .
Parse:
have VB ROOT
 +-- systems NNS nsubj
 |   +-- Different JJ amod
 |   +-- OT NNP nn
 +-- may MD aux
 +-- algorithms NNS dobj
 |   +-- different JJ amod
 |   +-- control NN nn
 |   +-- , , punct
 |   +-- functions NNS conj
 |   |   +-- different JJ amod
 |   |   +-- transformation NN nn
 |   +-- and CC cc
 |   +-- divisions NNS conj
 |       +-- different JJ amod
 |       +-- of IN prep
 |           +-- responsibilities NNS pobj
 |               +-- among IN prep
 |                   +-- components NNS pobj
 |                       +-- these DT det
 +-- . . punct

5
Input: Unlike GOTO ANYUNDO , the basic COT algorithm does not use ET -LRB- Exclusion Transformation -RRB- functions -LRB- -RRB- , thus avoiding the requirement of the Reversibility Property between IT and ET functions -LRB- -RRB- .
Parse:
use VB ROOT
 +-- Unlike IN prep
 |   +-- ANYUNDO NNP pobj
 |       +-- GOTO NNP nn
 +-- , , punct
 +-- algorithm NNP nsubj
 |   +-- the DT det
 |   +-- basic JJ amod
 |   +-- COT NNP nn
 +-- does VBZ aux
 +-- not RB neg
 +-- functions NNS dobj
 |   +-- ET NNP nn
 |   +-- Transformation NNP nn
 |       +-- -LRB- -LRB- punct
 |       +-- Exclusion NNP nn
 |       +-- -RRB- -RRB- punct
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- avoiding VBG partmod
 |   +-- thus RB advmod
 |   +-- requirement NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- Property NNP pobj
 |       |       +-- the DT det
 |       |       +-- Reversibility NNP nn
 |       +-- between IN prep
 |           +-- functions NNS pobj
 |               +-- IT NNP nn
 |                   +-- and CC cc
 |                   +-- ET NNP conj
 +-- . . punct

6
Input: Similar to GOTO ANYUNDO , the basic COT algorithm assumes that underlying transformation functions are capable of preserving the following properties -LRB- , , , , -RRB- The reader is referred to -LRB- -RRB- for precise definitions of three primitive operations Insert , Delete and Update and their corresponding inverses .
Parse:
assumes VBZ ROOT
 +-- Similar JJ nsubj
 |   +-- to IN prep
 |       +-- ANYUNDO NNP pobj
 |           +-- GOTO NNP nn
 |           +-- , , punct
 |           +-- algorithm NNP appos
 |               +-- the DT det
 |               +-- basic JJ amod
 |               +-- COT NNP nn
 +-- capable JJ ccomp
 |   +-- that IN mark
 |   +-- functions NNS nsubj
 |   |   +-- underlying VBG amod
 |   |   +-- transformation NN nn
 |   +-- are VBP cop
 |   +-- of IN prep
 |       +-- preserving VBG pcomp
 |           +-- properties NNS dobj
 |           |   +-- the DT det
 |           |   +-- following VBG amod
 |           +-- referred VBN parataxis
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- , , punct
 |           |   +-- -RRB- -RRB- punct
 |           |   +-- reader NN nsubjpass
 |           |   |   +-- The DT det
 |           |   +-- is VBZ auxpass
 |           |   +-- to IN prep
 |           +-- for IN prep
 |               +-- definitions NNS pobj
 |                   +-- precise JJ amod
 |                   +-- of IN prep
 |                       +-- operations NNS pobj
 |                           +-- three CD num
 |                           +-- primitive JJ amod
 |                           +-- Insert NNP dep
 |                           |   +-- , , punct
 |                           |   +-- Delete NNP conj
 |                           |   +-- and CC cc
 |                           |   +-- Update NNP conj
 |                           +-- and CC cc
 |                           +-- inverses NNS conj
 |                               +-- their PRP$ poss
 |                               +-- corresponding VBG amod
 +-- . . punct

7
Input: The makeInverse -LRB- O -RRB- procedure directly follows these definitions. .
Parse:
follows VBZ ROOT
 +-- procedure NN nsubj
 |   +-- The DT det
 |   +-- makeInverse NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- O NN nn
 |   +-- -RRB- -RRB- punct
 +-- directly RB advmod
 +-- definitions. NNS dobj
 |   +-- these DT det
 +-- . . punct
