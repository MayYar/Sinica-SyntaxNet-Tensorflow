
1
Input: The co allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers .
Parse:
developed VBN ROOT
 +-- architecture NN nsubjpass
 |   +-- The DT det
 |   +-- allocation NN nn
 |       +-- co NN nn
 +-- was VBD auxpass
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- enable VB infmod
 |           +-- to TO aux
 |           +-- downloading NN dobj
 |           |   +-- parallel JJ amod
 |           |   +-- of IN prep
 |           |       +-- datasets NNS pobj
 |           +-- from IN prep
 |               +-- servers NNS pobj
 |                   +-- multiple JJ amod
 +-- . . punct

2
Input: Several co allocation strategies have been coupled and used to exploit rate differences among various client server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes .
Parse:
coupled VBN ROOT
 +-- strategies NNS nsubjpass
 |   +-- Several JJ amod
 |   +-- allocation NN nn
 |       +-- co NN nn
 +-- have VBP aux
 +-- been VBN auxpass
 +-- and CC cc
 +-- used VBN conj
 |   +-- exploit VB xcomp
 |       +-- to TO aux
 |       +-- differences NNS dobj
 |       |   +-- rate NN nn
 |       |   +-- among IN prep
 |       |       +-- links NNS pobj
 |       |           +-- various JJ amod
 |       |           +-- server NN nn
 |       |               +-- client NN nn
 |       +-- and CC cc
 |       +-- address VB conj
 |           +-- to TO aux
 |           +-- fluctuations NNS dobj
 |           |   +-- dynamic JJ amod
 |           |   +-- rate NN nn
 |           +-- by IN prep
 |               +-- dividing VBG pcomp
 |                   +-- files NNS dobj
 |                   +-- into IN prep
 |                       +-- blocks NNS pobj
 |                           +-- multiple JJ amod
 |                           +-- of IN prep
 |                               +-- sizes NNS pobj
 |                                   +-- equal JJ amod
 +-- . . punct

3
Input: However , a major obstacle , the idle time of faster servers having to wait for the slowest server to deliver the final block , makes it important to reduce differences in finishing time among replica servers .
Parse:
makes VBZ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- obstacle NN nsubj
 |   +-- a DT det
 |   +-- major JJ amod
 |   +-- , , punct
 |   +-- time NN appos
 |       +-- the DT det
 |       +-- idle JJ amod
 |       +-- of IN prep
 |           +-- servers NNS pobj
 |               +-- faster JJR amod
 |               +-- having VBG partmod
 |                   +-- wait VB xcomp
 |                       +-- to TO aux
 |                       +-- for IN prep
 |                       |   +-- server NN pobj
 |                       |       +-- the DT det
 |                       |       +-- slowest JJS amod
 |                       +-- deliver VB xcomp
 |                           +-- to TO aux
 |                           +-- block NN dobj
 |                               +-- the DT det
 |                               +-- final JJ amod
 +-- reduce VB xcomp
 |   +-- it PRP nsubj
 |   +-- important JJ dep
 |   +-- to TO aux
 |   +-- differences NNS dobj
 |   +-- in IN prep
 |       +-- time NN pobj
 |           +-- finishing VBG nn
 |           +-- among IN prep
 |               +-- servers NNS pobj
 |                   +-- replica JJ nn
 +-- . . punct

4
Input: In this paper , we propose a dynamic coallocation scheme , namely Recursive Adjustment Co Allocation scheme , to improve the performance of data transfer in Data Grids .
Parse:
propose VBP ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- scheme NN dobj
 |   +-- a DT det
 |   +-- dynamic JJ amod
 |   +-- coallocation NN nn
 |   +-- , , punct
 |   +-- scheme NN appos
 |   |   +-- namely RB advmod
 |   |   +-- Allocation NNP nn
 |   |       +-- Recursive NNP nn
 |   |       +-- Adjustment NNP nn
 |   |       +-- Co NNP nn
 |   +-- improve VB infmod
 |       +-- to TO aux
 |       +-- performance NN dobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- transfer NN pobj
 |                   +-- data NNS nn
 |                   +-- in IN prep
 |                       +-- Grids NNPS pobj
 |                           +-- Data NNP nn
 +-- . . punct

5
Input: Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time .
Parse:
reduces VBZ ROOT
 +-- approach NN nsubj
 |   +-- Our PRP$ poss
 +-- time NN dobj
 |   +-- the DT det
 |   +-- idle JJ amod
 |   +-- spent VBN partmod
 |       +-- waiting VBG xcomp
 |           +-- for IN prep
 |               +-- server NN pobj
 |                   +-- the DT det
 |                   +-- slowest JJS amod
 +-- and CC cc
 +-- decreases VBZ conj
 |   +-- time NN dobj
 |       +-- transfer NN nn
 |       |   +-- data NNS nn
 |       +-- completion NN nn
 +-- . . punct

6
Input: We also provide an effective scheme for reducing the cost of reassembling data blocks .
Parse:
provide VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- scheme NN dobj
 |   +-- an DT det
 |   +-- effective JJ amod
 |   +-- for IN prep
 |       +-- reducing VBG pcomp
 |           +-- cost NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- reassembling VBG pcomp
 |                       +-- blocks NNS dobj
 |                           +-- data NNS nn
 +-- . . punct

7
Input: C.2.4 -LRB- Distributed Systems -RRB-
Parse:
C.2.4 CD ROOT
 +-- -LRB- -LRB- punct
 +-- Systems NNPS dep
 |   +-- Distributed VBN amod
 +-- -RRB- -RRB- punct
