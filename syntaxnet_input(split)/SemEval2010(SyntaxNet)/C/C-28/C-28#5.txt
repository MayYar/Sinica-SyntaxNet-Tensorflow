
1
Input: MpiBLAST -LRB- 2 -RRB- was proposed for clusters and has two phases .
Parse:
proposed VBN ROOT
 +-- MpiBLAST UH nsubjpass
 |   +-- 2 CD appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- was VBD auxpass
 +-- for IN prep
 |   +-- clusters NNS pobj
 +-- and CC cc
 +-- has VBZ conj
 |   +-- phases NNS dobj
 |       +-- two CD num
 +-- . . punct

2
Input: First , the genetic database is segmented .
Parse:
segmented VBN ROOT
 +-- First RB advmod
 +-- , , punct
 +-- database NN nsubjpass
 |   +-- the DT det
 |   +-- genetic JJ amod
 +-- is VBZ auxpass
 +-- . . punct

3
Input: Then , the queries are evenly distributed among the nodes .
Parse:
distributed VBN ROOT
 +-- Then RB advmod
 +-- , , punct
 +-- queries NNS nsubjpass
 |   +-- the DT det
 +-- are VBP auxpass
 +-- evenly RB advmod
 +-- among IN prep
 |   +-- nodes NNS pobj
 |       +-- the DT det
 +-- . . punct

4
Input: If the node does not have a database fragment , a local copy is made .
Parse:
made VBN ROOT
 +-- have VB advcl
 |   +-- If IN mark
 |   +-- node NN nsubj
 |   |   +-- the DT det
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- fragment NN dobj
 |       +-- a DT det
 |       +-- database NN nn
 +-- , , punct
 +-- copy NN nsubjpass
 |   +-- a DT det
 |   +-- local JJ amod
 +-- is VBZ auxpass
 +-- . . punct

5
Input: A method is proposed that associates data fragments to nodes , trying to minimize the number of copies .
Parse:
proposed VBN ROOT
 +-- method NN nsubjpass
 |   +-- A DT det
 +-- is VBZ auxpass
 +-- data NNS ccomp
 |   +-- that IN mark
 |   +-- associates NNS nsubj
 |   +-- fragments NNS dobj
 |   +-- to IN prep
 |   |   +-- nodes NNS pobj
 |   +-- , , punct
 |   +-- trying VBG partmod
 |       +-- minimize VB xcomp
 |           +-- to TO aux
 |           +-- number NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- copies NNS pobj
 +-- . . punct

6
Input: BLAST++ -LRB- 10 -RRB- groups multiple sequences to reduce the number of database accesses .
Parse:
BLAST++ UH ROOT
 +-- groups NNS dep
 |   +-- -LRB- -LRB- punct
 |   +-- 10 CD num
 |   +-- -RRB- -RRB- punct
 |   +-- sequences NNS dep
 |   |   +-- multiple JJ amod
 |   +-- reduce VB infmod
 |       +-- to TO aux
 |       +-- number NN dobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- accesses NNS pobj
 |                   +-- database NN nn
 +-- . . punct

7
Input: A master slave approach is used that allocates the queries to the slaves according to the fixed policy -LRB- section 3.3 -RRB- .
Parse:
used VBN ROOT
 +-- approach NN nsubjpass
 |   +-- A DT det
 |   +-- master NN nn
 |   +-- slave NN nn
 +-- is VBZ auxpass
 +-- allocates VBZ ccomp
 |   +-- that IN mark
 |   +-- queries NNS dobj
 |   |   +-- the DT det
 |   +-- to IN prep
 |   |   +-- slaves NNS pobj
 |   |       +-- the DT det
 |   +-- according VBG prep
 |       +-- to IN pcomp
 |           +-- policy NN pobj
 |               +-- the DT det
 |               +-- fixed VBN amod
 |               +-- -LRB- -LRB- punct
 |               +-- section NN dep
 |               |   +-- 3.3 CD num
 |               +-- -RRB- -RRB- punct
 +-- . . punct

8
Input: Each worker executes BLAST++ independently and , finally , the results are collected and combined by the master .
Parse:
executes VBZ ROOT
 +-- worker NN nsubj
 |   +-- Each DT det
 +-- BLAST++ , dobj
 +-- independently RB advmod
 +-- and CC cc
 +-- , , punct
 +-- collected VBN conj
 |   +-- finally RB advmod
 |   +-- , , punct
 |   +-- results NNS nsubjpass
 |   |   +-- the DT det
 |   +-- are VBP auxpass
 |   +-- and CC cc
 |   +-- combined VBN conj
 |   +-- by IN prep
 |       +-- master NN pobj
 |           +-- the DT det
 +-- . . punct

9
Input: GridBlast -LRB- 9 -RRB- is a master slave grid application that uses Globus 2 .
Parse:
application NN ROOT
 +-- GridBlast NNP nsubj
 |   +-- 9 CD appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- is VBZ cop
 +-- a DT det
 +-- master NN nn
 +-- slave NN nn
 +-- grid NN nn
 +-- uses VBZ rcmod
 |   +-- that WDT nsubj
 |   +-- Globus NNP dobj
 |       +-- 2 CD num
 +-- . . punct

10
Input: It distributes sequences among the grid nodes using two allocation policies
Parse:
distributes VBZ ROOT
 +-- It PRP nsubj
 +-- sequences NNS dobj
 |   +-- among IN prep
 |       +-- nodes NNS pobj
 |           +-- the DT det
 |           +-- grid NN nn
 +-- using VBG xcomp
     +-- policies NNS dobj
         +-- two CD num
         +-- allocation NN nn

11
Input: Of those , only the last one takes into account the current load and the heterogeneity of the environment .
Parse:
takes VBZ ROOT
 +-- Of IN prep
 |   +-- those DT pobj
 +-- , , punct
 +-- one NN nsubj
 |   +-- only RB advmod
 |   +-- the DT det
 |   +-- last JJ amod
 +-- into IN prep
 |   +-- account NN pobj
 +-- load NN dobj
 |   +-- the DT det
 |   +-- current JJ amod
 |   +-- and CC cc
 |   +-- heterogeneity NN conj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- environment NN pobj
 |               +-- the DT det
 +-- . . punct

12
Input: However , to use minmax , the total execution time of each BLAST task must be known .
Parse:
known VBN ROOT
 +-- However RB advmod
 +-- , , punct
 +-- use VB advcl
 |   +-- to TO aux
 |   +-- minmax NN dobj
 +-- time NN nsubjpass
 |   +-- the DT det
 |   +-- total JJ amod
 |   +-- execution NN nn
 |   +-- of IN prep
 |       +-- task NN pobj
 |           +-- each DT det
 |           +-- BLAST JJ amod
 +-- must MD aux
 +-- be VB auxpass
 +-- . . punct

13
Input: Having decided which sequences will be compared by each node , GridBlast sends the sequences , the executable files and the whole database to the chosen node .
Parse:
sends VBZ ROOT
 +-- decided VBN partmod
 |   +-- Having VBG aux
 |   +-- compared VBN ccomp
 |       +-- sequences NNS nsubjpass
 |       |   +-- which WDT det
 |       +-- will MD aux
 |       +-- be VB auxpass
 |       +-- by IN prep
 |           +-- node NN pobj
 |               +-- each DT det
 +-- , , punct
 +-- GridBlast NNP nsubj
 +-- sequences NNS dobj
 |   +-- the DT det
 |   +-- , , punct
 |   +-- files NNS conj
 |   |   +-- the DT det
 |   |   +-- executable JJ amod
 |   +-- and CC cc
 |   +-- database NN conj
 |       +-- the DT det
 |       +-- whole JJ amod
 +-- to IN prep
 |   +-- node NN pobj
 |       +-- the DT det
 |       +-- chosen VBN amod
 +-- . . punct

14
Input: When the search finishes , the results are compacted and sent to the master .
Parse:
compacted VBN ROOT
 +-- finishes VBZ advcl
 |   +-- When WRB advmod
 |   +-- search NN nsubj
 |       +-- the DT det
 +-- , , punct
 +-- results NNS nsubjpass
 |   +-- the DT det
 +-- are VBP auxpass
 +-- and CC cc
 +-- sent VBN conj
 |   +-- to IN prep
 |       +-- master NN pobj
 |           +-- the DT det
 +-- . . punct

15
Input: Grid Blast Toolkit -LRB- 12 -RRB- is a web portal to execute BLAST searches in Globus 3 .
Parse:
portal NN ROOT
 +-- Toolkit NNP nsubj
 |   +-- Grid NNP nn
 |   +-- Blast NNP nn
 |   +-- 12 CD appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- is VBZ cop
 +-- a DT det
 +-- web NN nn
 +-- execute VB infmod
 |   +-- to TO aux
 |   +-- searches NNS dobj
 |   |   +-- BLAST NN nn
 |   +-- in IN prep
 |       +-- Globus NNP pobj
 |           +-- 3 CD num
 +-- . . punct

16
Input: All genetic databases are statically placed on the grid nodes -LRB- without replication -RRB- .
Parse:
placed VBN ROOT
 +-- databases NNS nsubjpass
 |   +-- All DT det
 |   +-- genetic JJ amod
 +-- are VBP auxpass
 +-- statically RB advmod
 +-- on IN prep
 |   +-- nodes NNS pobj
 |       +-- the DT det
 |       +-- grid NN nn
 +-- without IN prep
 |   +-- -LRB- -LRB- punct
 |   +-- replication NN pobj
 |   +-- -RRB- -RRB- punct
 +-- . . punct

17
Input: GBTK is a master slave application that receives the sequences and the name of the genetic database .
Parse:
application NN ROOT
 +-- GBTK NNP nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- master NN nn
 +-- slave NN nn
 +-- receives VBZ rcmod
 |   +-- that WDT nsubj
 |   +-- sequences NNS dobj
 |       +-- the DT det
 |       +-- and CC cc
 |       +-- name NN conj
 |       |   +-- the DT det
 |       +-- of IN prep
 |           +-- database NN pobj
 |               +-- the DT det
 |               +-- genetic JJ amod
 +-- . . punct

18
Input: It then verifies if the node that contains the database is available .
Parse:
verifies VBZ ROOT
 +-- It PRP nsubj
 +-- then RB advmod
 +-- available JJ advcl
 |   +-- if IN mark
 |   +-- node NN nsubj
 |   |   +-- the DT det
 |   |   +-- contains VBZ rcmod
 |   |       +-- that WDT nsubj
 |   |       +-- database NN dobj
 |   |           +-- the DT det
 |   +-- is VBZ cop
 +-- . . punct

19
Input: If so , it is selected .
Parse:
selected VBN ROOT
 +-- so RB advcl
 |   +-- If IN mark
 +-- , , punct
 +-- it PRP nsubjpass
 +-- is VBZ auxpass
 +-- . . punct

20
Input: If the node is not available , the less loaded node is chosen and the database is copied to it .
Parse:
chosen VBN ROOT
 +-- available JJ advcl
 |   +-- If IN mark
 |   +-- node NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 |   +-- not RB neg
 +-- , , punct
 +-- node NN nsubjpass
 |   +-- the DT det
 |   +-- loaded JJ amod
 |       +-- less RBR advmod
 +-- is VBZ auxpass
 +-- and CC cc
 +-- copied VBN conj
 |   +-- database NN nsubjpass
 |   |   +-- the DT det
 |   +-- is VBZ auxpass
 |   +-- to IN prep
 |       +-- it PRP pobj
 +-- . . punct

21
Input: Master SlaveSlaveSlave Internet database segment but only part of it is processed in each node The database is replicated in the nodes , Figure 2
Parse:
processed VBN ROOT
 +-- segment NN nsubjpass
 |   +-- SlaveSlaveSlave NN nn
 |   |   +-- Master NN nn
 |   +-- database NN nn
 |   |   +-- Internet NN nn
 |   +-- but CC cc
 |   +-- part NN conj
 |       +-- only RB advmod
 |       +-- of IN prep
 |           +-- it PRP pobj
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- node NN pobj
 |       +-- each DT det
 +-- replicated VBN ccomp
 |   +-- database NN nsubjpass
 |   |   +-- The DT det
 |   +-- is VBZ auxpass
 |   +-- in IN prep
 |       +-- nodes NNS pobj
 |           +-- the DT det
 +-- , , punct
 +-- Figure NN dobj
     +-- 2 CD num
