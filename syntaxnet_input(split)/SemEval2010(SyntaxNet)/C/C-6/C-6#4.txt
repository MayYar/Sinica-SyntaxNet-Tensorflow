
1
Input: In this section we describe our implementation of Spectrum and describe how it can be used .
Parse:
describe VBP ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- implementation NN dobj
 |   +-- our PRP$ poss
 |   +-- of IN prep
 |       +-- Spectrum NNP pobj
 +-- and CC cc
 +-- describe VB conj
 |   +-- used VBN ccomp
 |       +-- how WRB advmod
 |       +-- it PRP nsubjpass
 |       +-- can MD aux
 |       +-- be VB auxpass
 +-- . . punct

2
Input: . Implementation We have implemented Spectrum '' s three layers in C as part of a library that can be linked with Spectrum based applications .
Parse:
implemented VBN ROOT
 +-- . . prep
 |   +-- Implementation NN pobj
 +-- We PRP nsubj
 +-- have VBP aux
 +-- layers NNS dobj
 |   +-- Spectrum NNP poss
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- three CD num
 |   +-- in IN prep
 |       +-- C NNP pobj
 +-- as IN prep
 |   +-- part NN pobj
 |       +-- of IN prep
 |           +-- library NN pobj
 |               +-- a DT det
 |               +-- linked VBN rcmod
 |                   +-- that WDT nsubjpass
 |                   +-- can MD aux
 |                   +-- be VB auxpass
 |                   +-- with IN prep
 |                       +-- applications NNS pobj
 |                           +-- based VBN amod
 |                               +-- Spectrum NNP dep
 +-- . . punct

3
Input: Each layer keeps track of its state through a set of local data files that persist across reboots , thus allowing Spectrum to smoothly handle power cycles .
Parse:
keeps VBZ ROOT
 +-- layer NN nsubj
 |   +-- Each DT det
 +-- track NN dobj
 |   +-- of IN prep
 |       +-- state NN pobj
 |           +-- its PRP$ poss
 +-- through IN prep
 |   +-- set NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- files NNS pobj
 |               +-- local JJ amod
 |               +-- data NNS nn
 |               +-- persist VBP rcmod
 |                   +-- that WDT nsubj
 |                   +-- across IN prep
 |                   |   +-- reboots NNS pobj
 |                   +-- , , punct
 |                   +-- allowing VBG xcomp
 |                       +-- thus RB advmod
 |                       +-- handle VB xcomp
 |                           +-- Spectrum NNP nsubj
 |                           +-- to TO aux
 |                           +-- smoothly RB advmod
 |                           +-- cycles NNS dobj
 |                               +-- power NN nn
 +-- . . punct

4
Input: For layers that reside on remote systems -LRB- e.g .
Parse:
For IN ROOT
 +-- layers NNS pobj
 |   +-- reside VBP rcmod
 |       +-- that IN nsubj
 |       +-- on IN prep
 |           +-- systems NNS pobj
 |               +-- remote JJ amod
 |               +-- -LRB- -LRB- punct
 |               +-- e.g UH dep
 +-- . . punct

5
Input: a remote store -RRB- only the meta information needed to contact the remote Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure Spectrum in a Network Enabled DVR node is stored locally .
Parse:
stored VBN ROOT
 +-- store NN nsubjpass
 |   +-- a DT det
 |   +-- remote JJ amod
 |   +-- -RRB- -RRB- punct
 |   +-- information NN dep
 |       +-- only RB advmod
 |       +-- the DT det
 |       +-- meta JJ amod
 |       +-- needed VBN partmod
 |           +-- contact VB xcomp
 |               +-- to TO aux
 |               +-- Spectrum NNP dobj
 |                   +-- the DT det
 |                   +-- Manager NN nn
 |                   |   +-- remote JJ amod
 |                   |   +-- Manager NN nn
 |                   |   |   +-- Manager NNP nn
 |                   |   |   |   +-- Content NNP nn
 |                   |   |   +-- Policy NN nn
 |                   |   +-- Storage NN nn
 |                   |   +-- Listings NNPS dep
 |                   |       +-- Program NNP nn
 |                   |       |   +-- Fetcher NNP nn
 |                   |       |       +-- Storage NNP nn
 |                   |       +-- Network NNP dep
 |                   |           +-- Graphical NNP nn
 |                   |           +-- User NNP nn
 |                   |           +-- Interface NNP nn
 |                   |           +-- DVR NNP dep
 |                   |           |   +-- Enabled NNP nn
 |                   |           +-- Content NNP dep
 |                   |               +-- Information NNP nn
 |                   |                   +-- Program NN nn
 |                   +-- Figure NN nn
 |                   |   +-- Application NN nn
 |                   |       +-- DVR . nn
 |                   +-- in IN prep
 |                       +-- node NN pobj
 |                           +-- a DT det
 |                           +-- Network NNP nn
 |                           +-- Enabled NNP nn
 |                           +-- DVR NNP nn
 +-- is VBZ auxpass
 +-- locally RB advmod
 +-- . . punct

6
Input: Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem .
Parse:
uses VBZ ROOT
 +-- application NN nsubj
 |   +-- Our PRP$ poss
 |   +-- test NN nn
 +-- manager NN dobj
 |   +-- a DT det
 |   +-- local JJ amod
 |   +-- policy NN nn
 |       +-- and CC cc
 |       +-- storage NN conj
 +-- fetch VB xcomp
 |   +-- to TO aux
 |   +-- content NN dobj
 |   +-- and CC cc
 |   +-- store VB conj
 |       +-- it PRP dobj
 |       +-- in IN prep
 |           +-- filesystem NN pobj
 |               +-- a DT det
 |               +-- normal JJ amod
 |               +-- Unixbased NNP nn
 +-- . . punct

7
Input: To efficiently handle communications with layers running on remote systems , all Spectrum '' s API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure .
Parse:
support VBP ROOT
 +-- calls VBZ nsubj
 |   +-- Spectrum NNP poss
 |   |   +-- handle VB dep
 |   |   |   +-- To TO aux
 |   |   |   +-- efficiently RB advmod
 |   |   |   +-- communications NNS dobj
 |   |   |       +-- with IN prep
 |   |   |           +-- layers NNS pobj
 |   |   |               +-- running VBG partmod
 |   |   |                   +-- on IN prep
 |   |   |                       +-- systems NNS pobj
 |   |   |                           +-- remote JJ amod
 |   |   +-- , , punct
 |   |   +-- all DT dep
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- API NN nn
 +-- modes NNS dobj
 |   +-- synchronous JJ amod
 |       +-- both CC preconj
 |       +-- and CC cc
 |       +-- asynchronous JJ conj
 +-- through IN prep
 |   +-- interface NN pobj
 |       +-- a DT det
 |       +-- uniform JJ amod
 |       +-- defined VBN partmod
 |           +-- by IN prep
 |               +-- structure NN pobj
 |                   +-- the DT det
 |                   +-- reqinfo NN nn
 +-- . . punct

8
Input: Each API call takes a pointer to a reqinfo structure as one of its arguments .
Parse:
takes VBZ ROOT
 +-- call NN nsubj
 |   +-- Each DT det
 |   +-- API NN nn
 +-- pointer NN dobj
 |   +-- a DT det
 +-- to IN prep
 |   +-- structure NN pobj
 |       +-- a DT det
 |       +-- reqinfo NN nn
 +-- as IN prep
 |   +-- one CD pobj
 |       +-- of IN prep
 |           +-- arguments NNS pobj
 |               +-- its PRP$ poss
 +-- . . punct

9
Input: This structure is used to hold the call state and return status .
Parse:
used VBN ROOT
 +-- structure NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- hold VB xcomp
 |   +-- to TO aux
 |   +-- status NN dobj
 |       +-- the DT det
 |       +-- call NN nn
 |       +-- state NN nn
 |           +-- and CC cc
 |           +-- return NN conj
 +-- . . punct

10
Input: For async calls , the reqinfo also contains a pointer to a callback function .
Parse:
contains VBZ ROOT
 +-- For IN prep
 |   +-- calls NNS pobj
 |       +-- async NN nn
 +-- , , punct
 +-- reqinfo NN nsubj
 |   +-- the DT det
 +-- also RB advmod
 +-- pointer NN dobj
 |   +-- a DT det
 |   +-- to IN prep
 |       +-- function NN pobj
 |           +-- a DT det
 |           +-- callback NN nn
 +-- . . punct

11
Input: To use a Spectrum API function , the caller first chooses either the sync or async mode and allocates a reqinfo structure .
Parse:
chooses VBZ ROOT
 +-- use VB advcl
 |   +-- To TO aux
 |   +-- function NN dobj
 |       +-- a DT det
 |       +-- Spectrum NN nn
 |       +-- API NN nn
 +-- , , punct
 +-- caller NN nsubj
 |   +-- the DT det
 +-- first JJ advmod
 +-- sync NN dobj
 |   +-- either CC preconj
 |   +-- the DT det
 |   +-- or CC cc
 |   +-- mode NN conj
 |       +-- async NN nn
 +-- and CC cc
 +-- allocates VBZ conj
 |   +-- structure NN dobj
 |       +-- a DT det
 |       +-- reqinfo NN nn
 +-- . . punct

12
Input: For sync calls , the reqinfo can be allocated on the stack , otherwise it is allocated with malloc .
Parse:
allocated VBN ROOT
 +-- For IN prep
 |   +-- calls NNS pobj
 |       +-- sync NN amod
 +-- , , punct
 +-- reqinfo NN nsubjpass
 |   +-- the DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- on IN prep
 |   +-- stack NN pobj
 |       +-- the DT det
 +-- allocated VBN ccomp
 |   +-- otherwise RB advmod
 |   +-- it PRP nsubjpass
 |   +-- is VBZ auxpass
 |   +-- with IN prep
 |       +-- malloc NN pobj
 +-- . . punct

13
Input: For async calls , a callback function must be provided when the reqinfo is allocated .
Parse:
provided VBN ROOT
 +-- For IN prep
 |   +-- calls NNS pobj
 |       +-- async NNP nn
 +-- , , punct
 +-- function NN nsubjpass
 |   +-- a DT det
 |   +-- callback NN nn
 +-- must MD aux
 +-- be VB auxpass
 +-- allocated VBN advcl
 |   +-- when WRB advmod
 |   +-- reqinfo NN nsubjpass
 |   |   +-- the DT det
 |   +-- is VBZ auxpass
 +-- . . punct

14
Input: Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument .
Parse:
invokes VBZ ROOT
 +-- Next RB advmod
 +-- caller NN nsubj
 |   +-- the DT det
 +-- function NN dobj
 |   +-- the DT det
 |   +-- desired VBN amod
 |   +-- API NN nn
 |   |   +-- Spectrum NN nn
 |   +-- passing VBG partmod
 |       +-- structure NN dobj
 |       |   +-- the DT det
 |       |   +-- reqinfo NN nn
 |       +-- as IN prep
 |           +-- argument NN pobj
 |               +-- an DT det
 +-- . . punct

15
Input: For sync calls , the result of the calls is returned immediately in the reqinfo structure .
Parse:
returned VBN ROOT
 +-- For IN prep
 |   +-- calls NNS pobj
 |       +-- sync NN amod
 +-- , , punct
 +-- result NN nsubjpass
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- calls NNS pobj
 |           +-- the DT det
 +-- is VBZ auxpass
 +-- immediately RB advmod
 +-- in IN prep
 |   +-- structure NN pobj
 |       +-- the DT det
 |       +-- reqinfo NN nn
 +-- . . punct

16
Input: For successful async calls , a call in progress value is returned .
Parse:
returned VBN ROOT
 +-- For IN prep
 |   +-- calls NNS pobj
 |       +-- successful JJ amod
 |       +-- async NN nn
 +-- , , punct
 +-- call NN nsubjpass
 |   +-- a DT det
 |   +-- in IN prep
 |       +-- value NN pobj
 |           +-- progress NN nn
 +-- is VBZ auxpass
 +-- . . punct

17
Input: Later , when the async call completes or a timeout occurs , the async callback function is called with the appropriate information needed to complete processing .
Parse:
called VBN ROOT
 +-- Later RB advmod
 +-- , , punct
 +-- call VBP advcl
 |   +-- when WRB advmod
 |   +-- async NN nsubj
 |   |   +-- the DT det
 |   +-- completes NNS dobj
 |   +-- or CC cc
 |   +-- occurs VBZ conj
 |       +-- timeout NN nsubj
 |           +-- a DT det
 +-- function NN nsubjpass
 |   +-- the DT det
 |   +-- async NN nn
 |   +-- callback NN nn
 +-- is VBZ auxpass
 +-- with IN prep
 |   +-- information NN pobj
 |       +-- the DT det
 |       +-- appropriate JJ amod
 |       +-- needed VBN partmod
 |           +-- complete VB xcomp
 |               +-- to TO aux
 |               +-- processing NN dobj
 +-- . . punct

18
Input: The modular layered design of the Spectrum architecture simplifies the objective of distribution of functionality .
Parse:
simplifies VBZ ROOT
 +-- design NN nsubj
 |   +-- The DT det
 |   +-- modular JJ amod
 |   +-- layered VBN amod
 |   +-- of IN prep
 |       +-- architecture NN pobj
 |           +-- the DT det
 |           +-- Spectrum JJ amod
 +-- objective NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- distribution NN pobj
 |           +-- of IN prep
 |               +-- functionality NN pobj
 +-- . . punct

19
Input: Furthermore , communication between functions is typically of a master slave -LRB- s -RRB- nature .
Parse:
is VBZ ROOT
 +-- Furthermore RB advmod
 +-- , , punct
 +-- communication NN nsubj
 |   +-- between IN prep
 |       +-- functions NNS pobj
 +-- of IN prep
 |   +-- typically RB advmod
 |   +-- nature NN pobj
 |       +-- a DT det
 |       +-- master NN nn
 |       +-- slave NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- s VBZ cop
 |       +-- -RRB- -RRB- punct
 +-- . . punct

20
Input: This means that several approaches to distributed operation are possible that would satisfy the architectural requirements .
Parse:
means VBZ ROOT
 +-- This DT nsubj
 +-- possible JJ ccomp
 |   +-- that IN mark
 |   +-- approaches NNS nsubj
 |   |   +-- several JJ amod
 |   |   +-- to IN prep
 |   |       +-- operation NN pobj
 |   |           +-- distributed VBN amod
 |   +-- are VBP cop
 |   +-- satisfy VB ccomp
 |       +-- that WDT nsubj
 |       +-- would MD aux
 |       +-- requirements NNS dobj
 |           +-- the DT det
 |           +-- architectural JJ amod
 +-- . . punct

21
Input: In our implementation we have opted to realize this functionality with a simple modular design .
Parse:
opted VBN ROOT
 +-- In IN prep
 |   +-- implementation NN pobj
 |       +-- our PRP$ poss
 +-- we PRP nsubj
 +-- have VBP aux
 +-- realize VB xcomp
 |   +-- to TO aux
 |   +-- functionality NN dobj
 |   |   +-- this DT det
 |   +-- with IN prep
 |       +-- design NN pobj
 |           +-- a DT det
 |           +-- simple JJ amod
 |           +-- modular JJ amod
 +-- . . punct

22
Input: We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred .
Parse:
provide VBP ROOT
 +-- We PRP nsubj
 +-- set NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- routines NNS pobj
 |           +-- asynchronous JJ amod
 |           +-- remote JJ amod
 |           +-- stub NN nn
 |           |   +-- access NN nn
 |           +-- allow VBP rcmod
 |               +-- that WDT nsubj
 |               +-- select VB xcomp
 |                   +-- users NNS nsubj
 |                   +-- to TO aux
 |                   +-- protocol NN dobj
 |                       +-- the DT det
 |                       +-- transport NN nn
 |                       +-- use VB infmod
 |                           +-- to TO aux
 |                           +-- and CC cc
 |                           +-- select VB conj
 |                               +-- to TO aux
 |                               +-- method NN dobj
 |                                   +-- the DT det
 |                                   +-- encoding NN nn
 |                                   +-- used VBN rcmod
 |                                       +-- that WDT nsubjpass
 |                                       +-- should MD aux
 |                                       +-- be VB auxpass
 |                                       +-- with IN prep
 |                                           +-- data NNS pobj
 |                                               +-- the DT det
 |                                               +-- transferred VBN infmod
 |                                                   +-- to TO aux
 |                                                   +-- be VB auxpass
 +-- . . punct

23
Input: Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP .
Parse:
range VB ROOT
 +-- protocols NNS nsubj
 |   +-- Transport NN nn
 +-- can MD aux
 +-- protocols NNS dobj
 |   +-- simple JJ amod
 |   +-- as IN prep
 |       +-- such JJ mwe
 |       +-- UDP NNP pobj
 |           +-- up IN prep
 |               +-- to IN pcomp
 |                   +-- protocols NNS pobj
 |                       +-- complex JJ amod
 |                       |   +-- more JJR advmod
 |                       +-- as IN prep
 |                           +-- such JJ mwe
 |                           +-- HTTP NNP pobj
 +-- . . punct

24
Input: We currently are using plain TCP for most of our transport .
Parse:
using VBG ROOT
 +-- We PRP nsubj
 +-- currently RB advmod
 +-- are VBP aux
 +-- TCP NNP dobj
 |   +-- plain JJ amod
 +-- for IN prep
 |   +-- most JJS pobj
 |       +-- of IN prep
 |           +-- transport NN pobj
 |               +-- our PRP$ poss
 +-- . . punct

25
Input: Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text , XDR , and XML .
Parse:
encoded VBN ROOT
 +-- calls VBZ nsubjpass
 |   +-- Function NN nn
 |   +-- across IN prep
 |       +-- APIs NNS pobj
 |           +-- the DT det
 |           +-- different JJ amod
 |           +-- Spectrum NN nn
 +-- can MD aux
 +-- be VB auxpass
 +-- using VBG xcomp
 |   +-- include VBP ccomp
 |       +-- variety NN nsubj
 |       |   +-- a DT det
 |       |   +-- of IN prep
 |       |       +-- formats NNS pobj
 |       +-- text NN dobj
 |           +-- plain JJ amod
 |           +-- , , punct
 |           +-- XDR NNP conj
 |           +-- and CC cc
 |           +-- XML NN conj
 +-- . . punct

26
Input: We are currently using the eXpat XML library -LRB- -RRB- to encode our calls .
Parse:
using VBG ROOT
 +-- We PRP nsubj
 +-- are VBP aux
 +-- currently RB advmod
 +-- library NN dobj
 |   +-- the DT det
 |   +-- eXpat NNP nn
 |   +-- XML NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- encode VB xcomp
 |   +-- to TO aux
 |   +-- calls NNS dobj
 |       +-- our PRP$ poss
 +-- . . punct

27
Input: While we are current transferring our XML encoded messages using a simple TCP connection , in a real world setting this can easily be replaced with an implementation based on secure sockets layer to improve security by adding SSL as a transport protocol .
Parse:
encoded VBD ROOT
 +-- current JJ advcl
 |   +-- While IN mark
 |   +-- we PRP nsubj
 |   +-- are VBP cop
 |   +-- transferring VBG partmod
 |       +-- XML NN dobj
 |           +-- our PRP$ poss
 +-- messages NNS dobj
 +-- using VBG xcomp
 |   +-- connection NN dobj
 |   |   +-- a DT det
 |   |   +-- simple JJ amod
 |   |   +-- TCP NNP nn
 |   +-- , , punct
 |   +-- in IN prep
 |   |   +-- world NN pobj
 |   |       +-- a DT det
 |   |       +-- real JJ amod
 |   +-- setting VBG partmod
 |       +-- replaced VBN ccomp
 |           +-- this DT nsubjpass
 |           +-- can MD aux
 |           +-- easily RB advmod
 |           +-- be VB auxpass
 |           +-- with IN prep
 |               +-- implementation NN pobj
 |                   +-- an DT det
 |                   +-- based VBN partmod
 |                       +-- on IN prep
 |                           +-- layer NN pobj
 |                               +-- secure JJ amod
 |                               +-- sockets NNS nn
 |                               +-- improve VB infmod
 |                                   +-- to TO aux
 |                                   +-- security NN dobj
 |                                   +-- by IN prep
 |                                       +-- adding VBG pcomp
 |                                           +-- SSL NNP dobj
 |                                           +-- as IN prep
 |                                               +-- protocol NN pobj
 |                                                   +-- a DT det
 |                                                   +-- transport NN nn
 +-- . . punct

28
Input: An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms .
Parse:
is VBZ ROOT
 +-- aspect NN nsubj
 |   +-- An DT det
 |   +-- important JJ amod
 |   +-- of IN prep
 |       +-- Spectrum NNP pobj
 +-- manage VB ccomp
 |   +-- that IN mark
 |   +-- it PRP nsubj
 |   +-- can MD aux
 |   +-- content NN dobj
 |   +-- based VBN prep
 |       +-- on IN pcomp
 |           +-- policy NN pobj
 |               +-- a DT det
 |               +-- given VBN amod
 |               +-- across IN prep
 |                   +-- platforms NNS pobj
 |                       +-- heterogenous JJ amod
 +-- . . punct

29
Input: As we explained previously in Section . , envision a small set of base level policy functions that can be parameterized to produce a wide range of storage polices .
Parse:
envision VB ROOT
 +-- explained VBD advcl
 |   +-- As IN mark
 |   +-- we PRP nsubj
 |   +-- previously RB advmod
 |   +-- in IN prep
 |       +-- Section NNP pobj
 |           +-- . . punct
 +-- , , punct
 +-- set NN dobj
 |   +-- a DT det
 |   +-- small JJ amod
 |   +-- of IN prep
 |       +-- functions NNS pobj
 |           +-- level NN nn
 |           |   +-- base JJ amod
 |           +-- policy NN nn
 |           +-- parameterized VBN rcmod
 |               +-- that WDT nsubj
 |               +-- can MD aux
 |               +-- be VB cop
 |               +-- produce VB xcomp
 |                   +-- to TO aux
 |                   +-- range NN dobj
 |                       +-- a DT det
 |                       +-- wide JJ amod
 |                       +-- of IN prep
 |                           +-- polices NNS pobj
 |                               +-- storage NN nn
 +-- . . punct

30
Input: In order for this to work properly , all Spectrumbased applications must understand the base level policies and how they can be parameterized .
Parse:
understand VB ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- work VB infmod
 |           +-- for IN mark
 |           +-- this DT nsubj
 |           +-- to TO aux
 |           +-- properly RB advmod
 +-- , , punct
 +-- applications NNS nsubj
 |   +-- all DT det
 |   +-- Spectrumbased JJ amod
 +-- must MD aux
 +-- policies NNS dobj
 |   +-- the DT det
 |   +-- level NN nn
 |   |   +-- base JJ amod
 |   +-- and CC cc
 |   +-- parameterized VBN conj
 |       +-- how WRB advmod
 |       +-- they PRP nsubj
 |       +-- can MD aux
 |       +-- be VB cop
 +-- . . punct

31
Input: To address this issue , we treat each base level policy as if it was a separate program .
Parse:
treat VBP ROOT
 +-- address VB advcl
 |   +-- To TO aux
 |   +-- issue NN dobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- policy NN dobj
 |   +-- each DT det
 |   +-- level NN nn
 |       +-- base JJ nn
 +-- program NN advcl
 |   +-- as IN mark
 |   +-- if IN mark
 |   +-- it PRP nsubj
 |   +-- was VBD cop
 |   +-- a DT det
 |   +-- separate JJ amod
 +-- . . punct

32
Input: Each base level policy should have a well known name and command line options for parameterization .
Parse:
have VB ROOT
 +-- policy NN nsubj
 |   +-- Each DT det
 |   +-- level NN nn
 |       +-- base NN nn
 +-- should MD aux
 +-- name NN dobj
 |   +-- a DT det
 |   +-- known VBN amod
 |   |   +-- well RB advmod
 |   +-- and CC cc
 |   +-- options NNS conj
 |       +-- command NN nn
 |       +-- line NN nn
 |       +-- for IN prep
 |           +-- parameterization NN pobj
 +-- . . punct

33
Input: In fact , in our implementation we pass parameters to base level policies as a string that can be parsed using a getopt like function .
Parse:
pass VBP ROOT
 +-- In IN prep
 |   +-- fact NN pobj
 +-- , , punct
 +-- in IN prep
 |   +-- implementation NN pobj
 |       +-- our PRP$ poss
 +-- we PRP nsubj
 +-- parameters NNS dobj
 +-- to IN prep
 |   +-- policies NNS pobj
 |       +-- level NN nn
 |           +-- base JJ amod
 +-- as IN prep
 |   +-- string NN pobj
 |       +-- a DT det
 |       +-- parsed VBN rcmod
 |           +-- that WDT nsubj
 |           +-- can MD aux
 |           +-- be VB cop
 |           +-- using VBG xcomp
 |               +-- getopt NN dobj
 |                   +-- a DT det
 |                   +-- like JJ prep
 |                       +-- function NN pobj
 +-- . . punct

34
Input: This format is easily understood and provides portability since byte order is not an issue in a string .
Parse:
understood VBN ROOT
 +-- format NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- easily RB advmod
 +-- and CC cc
 +-- provides VBZ conj
 |   +-- portability NN dobj
 |   +-- issue NN advcl
 |       +-- since IN mark
 |       +-- order NN nsubj
 |       |   +-- byte NN nn
 |       +-- is VBZ cop
 |       +-- not RB neg
 |       +-- an DT det
 |       +-- in IN prep
 |           +-- string NN pobj
 |               +-- a DT det
 +-- . . punct

35
Input: Since this part of Spectrum is not on the critical data path , this type of formatting is not a performance issue .
Parse:
issue NN ROOT
 +-- is VBZ advcl
 |   +-- Since IN mark
 |   +-- part NN nsubj
 |   |   +-- this DT det
 |   |   +-- of IN prep
 |   |       +-- Spectrum NNP pobj
 |   +-- not RB neg
 |   +-- on IN prep
 |       +-- path NN pobj
 |           +-- the DT det
 |           +-- critical JJ amod
 |           +-- data NNS nn
 +-- , , punct
 +-- type NN nsubj
 |   +-- this DT det
 |   +-- of IN prep
 |       +-- formatting NN pobj
 +-- is VBZ cop
 +-- not RB neg
 +-- a DT det
 +-- performance NN nn
 +-- . . punct

36
Input: . Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment .
Parse:
show VBP ROOT
 +-- . . prep
 |   +-- Using VBG pcomp
 |       +-- System NN dobj
 |       |   +-- the DT det
 |       |   +-- Spectrum NNP nn
 |       |   +-- Management NN nn
 |       |       +-- Content NNP nn
 |       +-- In IN prep
 |           +-- section NN pobj
 |               +-- this DT det
 +-- we PRP nsubj
 +-- examples NNS dobj
 |   +-- two CD num
 |   +-- of IN prep
 |       +-- use NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |           |   +-- System NNP pobj
 |           |       +-- the DT det
 |           |       +-- Spectrum NNP nn
 |           |       +-- Content NNP nn
 |           |       +-- Management NNP nn
 |           +-- in IN prep
 |               +-- environment NN pobj
 |                   +-- our PRP$ poss
 +-- . . punct

37
Input: The focus of our previous work has been content distribution for streaming media content -LRB- -RRB- and network enabled digital video recording -LRB- -RRB- .
Parse:
distribution NN ROOT
 +-- focus NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- work NN pobj
 |           +-- our PRP$ poss
 |           +-- previous JJ amod
 +-- has VBZ aux
 +-- been VBN cop
 +-- content JJ amod
 +-- for IN prep
 |   +-- streaming VBG pcomp
 |       +-- content NN dobj
 |           +-- media NNS nn
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- enabled VBD conj
 |   +-- network NN nsubj
 |   +-- recording NN dobj
 |   |   +-- digital JJ amod
 |   |   +-- video NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- . . punct

38
Input: The Spectrum system is applicable to both scenarios as follows .
Parse:
applicable JJ ROOT
 +-- system NN nsubj
 |   +-- The DT det
 |   +-- Spectrum NN nn
 +-- is VBZ cop
 +-- to IN prep
 |   +-- scenarios NNS pobj
 |       +-- both DT det
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct

39
Input: Figure shows the Network Enabled DVR architecture .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 +-- architecture NN dobj
 |   +-- the DT det
 |   +-- Enabled NNP nn
 |   |   +-- Network NNP nn
 |   +-- DVR NNP nn
 +-- . . punct

40
Input: In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration .
Parse:
reside NN ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- this DT det
 +-- layers NNS nsubj
 |   +-- all DT det
 |   +-- of IN prep
 |       +-- architecture NN pobj
 |           +-- the DT det
 |           +-- Spectrum JJ amod
 +-- on IN prep
 |   +-- device NN pobj
 |       +-- the DT det
 |       +-- same JJ amod
 |       +-- physical JJ amod
 |       +-- in IN prep
 |           +-- configuration NN pobj
 |               +-- a DT det
 |               +-- local JJ amod
 +-- . . punct

41
Input: The DVR application obtains program listings from some network source , deals with user presentation through a graphical user interface -LRB- GUI -RRB- , and interface with the Spectrum system through the content management layer APIs .
Parse:
deals VBZ ROOT
 +-- listings NNS nsubj
 |   +-- The DT det
 |   +-- DVR NNP nn
 |   +-- obtains NNS nn
 |   |   +-- application NN nn
 |   +-- program NN nn
 |   +-- from IN prep
 |       +-- source NN pobj
 |           +-- some DT det
 |           +-- network NN nn
 +-- , , punct
 +-- with IN prep
 |   +-- presentation NN pobj
 |       +-- user NN nn
 +-- through IN prep
 |   +-- interface NN pobj
 |       +-- a DT det
 |       +-- graphical JJ amod
 |       +-- user NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- GUI NNP dep
 |       +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- interface VB conj
 |   +-- with IN prep
 |   |   +-- system NN pobj
 |   |       +-- the DT det
 |   |       +-- Spectrum JJ nn
 |   +-- through IN prep
 |       +-- APIs NNS pobj
 |           +-- the DT det
 |           +-- layer NN nn
 |               +-- management NN nn
 |                   +-- content NN nn
 +-- . . punct

42
Input: This combination of higher level functions allows the user to select both content to be stored and what storage policies to Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure Spectrum in a Content Distribution Architecture apply to such content .
Parse:
allows VBZ ROOT
 +-- combination NN nsubj
 |   +-- This DT det
 |   +-- of IN prep
 |       +-- functions NNS pobj
 |           +-- level NN nn
 |               +-- higher JJR amod
 +-- select VB xcomp
 |   +-- user NN nsubj
 |   |   +-- the DT det
 |   +-- to TO aux
 |   +-- stored VBN dep
 |       +-- content JJ nsubjpass
 |       |   +-- both DT det
 |       +-- to TO aux
 |       +-- be VB auxpass
 |       +-- and CC cc
 |       +-- Media VB conj
 |           +-- policies NNS nsubj
 |           |   +-- what WDT det
 |           |   +-- storage NN nn
 |           |   +-- to IN prep
 |           |       +-- Content NNP pobj
 |           |           +-- Distributed VBN amod
 |           |               +-- Server NNP dep
 |           |                   +-- Manager NN nn
 |           |                   |   +-- Manager NN nn
 |           |                   |   |   +-- Server NNP nn
 |           |                   |   |   |   +-- Manager NNP nn
 |           |                   |   |   |   |   +-- Manager NN nn
 |           |                   |   |   |   |   |   +-- station NN nn
 |           |                   |   |   |   |   |   |   +-- Management NNP nn
 |           |                   |   |   |   |   |   |       +-- Manager NNP nn
 |           |                   |   |   |   |   |   |       |   +-- Content NNP nn
 |           |                   |   |   |   |   |   |       +-- Centralized NNP nn
 |           |                   |   |   |   |   |   |       +-- Content NNP nn
 |           |                   |   |   |   |   |   +-- Content NNP nn
 |           |                   |   |   |   |   |   +-- Policy NNP nn
 |           |                   |   |   |   |   |       +-- InformationUser NNP nn
 |           |                   |   |   |   |   |       +-- Interface NNP nn
 |           |                   |   |   |   |   +-- Storage NN nn
 |           |                   |   |   |   +-- Storage NNP nn
 |           |                   |   |   |   +-- Fetcher NNP nn
 |           |                   |   |   |   +-- Edge NNP nn
 |           |                   |   |   |   +-- Portal NNP nn
 |           |                   |   |   +-- Policy NN nn
 |           |                   |   +-- Storage NN nn
 |           |                   +-- Storage NNP nn
 |           |                   +-- Fetcher NNP nn
 |           |                   +-- Edge NNP nn
 |           |                   +-- Portal NNP nn
 |           +-- To IN aux
 |           +-- Endpoints NNS dobj
 |           +-- apply VB dep
 |               +-- Media VB csubj
 |               |   +-- To IN aux
 |               |   +-- Spectrum NNP dobj
 |               |   |   +-- Endpoints NNS nn
 |               |   |   +-- Figure NN nn
 |               |   +-- in IN prep
 |               |       +-- Architecture NNP pobj
 |               |           +-- a DT det
 |               |           +-- Content JJ nn
 |               |           +-- Distribution NN nn
 |               +-- to IN prep
 |                   +-- content NN pobj
 |                       +-- such JJ amod
 +-- . . punct

43
Input: Obtaining the content -LRB- through the network or locally -RRB- and the subsequent storage on the local system is then handled by the policy and storage managers .
Parse:
Obtaining VBG ROOT
 +-- content NN dobj
 |   +-- the DT det
 +-- through IN prep
 |   +-- -LRB- -LRB- punct
 |   +-- network NN pobj
 |   |   +-- the DT det
 |   +-- or CC cc
 |   +-- locally RB conj
 |   +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- handled VBN conj
 |   +-- storage NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- subsequent JJ amod
 |   |   +-- on IN prep
 |   |       +-- system NN pobj
 |   |           +-- the DT det
 |   |           +-- local JJ amod
 |   +-- is VBZ auxpass
 |   +-- then RB advmod
 |   +-- by IN prep
 |       +-- managers NNS pobj
 |           +-- the DT det
 |           +-- policy NN nn
 |               +-- and CC cc
 |               +-- storage NN conj
 +-- . . punct

44
Input: The use of Spectrum in a streaming content distribution architecture -LRB- e.g .
Parse:
use NN ROOT
 +-- The DT det
 +-- of IN prep
 |   +-- Spectrum NN pobj
 +-- in IN prep
 |   +-- architecture NN pobj
 |       +-- a DT det
 |       +-- streaming VBG amod
 |       +-- content NN nn
 |       +-- distribution NN nn
 +-- -LRB- -LRB- punct
 +-- e.g UH dep
 +-- . . punct

45
Input: PRISM -LRB- -RRB- -RRB- is depicted in Figure .
Parse:
depicted VBN ROOT
 +-- PRISM UH nsubjpass
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- Figure NNP pobj
 +-- . . punct

46
Input: In this environment streaming media content -LRB- both live , canned live and on demand -RRB- is being distributed to edge portals from where streaming endpoints are being served .
Parse:
distributed VBN ROOT
 +-- In IN prep
 |   +-- environment NN pobj
 |       +-- this DT det
 +-- streaming VBG csubjpass
 |   +-- content NN dobj
 |   |   +-- media NNS nn
 |   +-- live VBP dep
 |       +-- -LRB- -LRB- punct
 |       +-- both CC preconj
 |       +-- , , punct
 |       +-- canned VBN conj
 |       +-- live RB dep
 |       |   +-- and CC cc
 |       |   +-- on IN conj
 |       |       +-- demand NN pobj
 |       +-- -RRB- -RRB- punct
 +-- is VBZ aux
 +-- being VBG auxpass
 +-- edge VB xcomp
 |   +-- to TO aux
 |   +-- portals NNS dobj
 |   +-- from IN prep
 |       +-- served VBN pcomp
 |           +-- where WRB advmod
 |           +-- endpoints NNS nsubjpass
 |           |   +-- streaming VBG amod
 |           +-- are VBP aux
 |           +-- being VBG auxpass
 +-- . . punct

47
Input: In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals .
Parse:
done VBN ROOT
 +-- In IN prep
 |   +-- environment NN pobj
 |       +-- our PRP$ poss
 +-- distribution NN nsubjpass
 |   +-- content NN nn
 |   +-- and CC cc
 |   +-- storage NN conj
 +-- is VBZ auxpass
 +-- from IN prep
 |   +-- station NN pobj
 |       +-- a DT det
 |       +-- centralized JJ amod
 |       +-- management NN nn
 |       |   +-- content NN nn
 |       +-- controls VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- several JJ dobj
 |               +-- of IN prep
 |                   +-- portals NNS pobj
 |                       +-- the DT det
 |                       +-- edge NN nn
 +-- . . punct

48
Input: The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices , i.e .
Parse:
allows VBZ ROOT
 +-- station NN nsubj
 |   +-- The DT det
 |   +-- centralized JJ amod
 +-- manage VB xcomp
 |   +-- administrators NNS nsubj
 |   +-- to TO aux
 |   +-- distribution NN dobj
 |   |   +-- the DT det
 |   |   +-- and CC cc
 |   |   +-- storage NN conj
 |   |   +-- of IN prep
 |   |       +-- content NN pobj
 |   +-- without IN prep
 |       +-- requiring VBG pcomp
 |           +-- communication NN dobj
 |               +-- continuous JJ amod
 |               +-- between IN prep
 |                   +-- manager NN pobj
 |                       +-- the DT det
 |                       +-- content NN nn
 |                       +-- and CC cc
 |                       +-- devices NNS conj
 |                           +-- the DT det
 |                           +-- edge NN nn
 |                           +-- , , punct
 |                           +-- i.e NN appos
 +-- . . punct

49
Input: once instructions have been given to edge devices they can operate independently until changes are to be made .
Parse:
operate VB ROOT
 +-- given VBN advcl
 |   +-- once IN mark
 |   +-- instructions NNS nsubjpass
 |   +-- have VBP aux
 |   +-- been VBN auxpass
 |   +-- to IN prep
 |       +-- devices NNS pobj
 |           +-- edge VB nn
 +-- they PRP nsubj
 +-- can MD aux
 +-- independently RB advmod
 +-- are VBP advcl
 |   +-- until IN mark
 |   +-- changes NNS nsubj
 |   +-- made VBN xcomp
 |       +-- to TO aux
 |       +-- be VB auxpass
 +-- . . punct

50
Input: . Spectrum Operational Example To illustrate how Spectrum handles references to content , consider a Spectrum based PVR application programmed to store one days worth of streaming content in a rolling window .
Parse:
Spectrum VB ROOT
 +-- . , punct
 +-- Operational NNP prep
 |   +-- Example NNP pobj
 +-- illustrate VB xcomp
 |   +-- To TO aux
 |   +-- handles VBZ ccomp
 |       +-- how WRB advmod
 |       +-- Spectrum JJ nsubj
 |       +-- references NNS dobj
 |           +-- to IN prep
 |               +-- content NN pobj
 +-- , , punct
 +-- consider VB dep
 |   +-- application NN dobj
 |       +-- a DT det
 |       +-- based VBN amod
 |       |   +-- Spectrum NNP dep
 |       +-- PVR NNP nn
 |       +-- programmed VBN partmod
 |           +-- store VB xcomp
 |               +-- to TO aux
 |               +-- worth JJ advmod
 |               |   +-- days NNS dep
 |               |   |   +-- one CD num
 |               |   +-- of IN prep
 |               |       +-- content NN pobj
 |               |           +-- streaming VBG amod
 |               +-- in IN prep
 |                   +-- window NN pobj
 |                       +-- a DT det
 |                       +-- rolling JJ amod
 +-- . . punct

51
Input: To set up the rolling window , the application would use the content manager API to create a policy group and policy reference to the desired content .
Parse:
use VB ROOT
 +-- set VB advcl
 |   +-- To TO aux
 |   +-- up RP prt
 |   +-- window NN dobj
 |       +-- the DT det
 |       +-- rolling VBG amod
 +-- , , punct
 +-- application NN nsubj
 |   +-- the DT det
 +-- would MD aux
 +-- API NN dobj
 |   +-- the DT det
 |   +-- manager NN nn
 |       +-- content NN nn
 +-- create VB xcomp
 |   +-- to TO aux
 |   +-- group NN dobj
 |   |   +-- a DT det
 |   |   +-- policy NN nn
 |   |   +-- and CC cc
 |   |   +-- reference NN conj
 |   |       +-- policy NN nn
 |   +-- to IN prep
 |       +-- content NN pobj
 |           +-- the DT det
 |           +-- desired VBN amod
 +-- . . punct

52
Input: The establishment of the one day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream .
Parse:
cause VB ROOT
 +-- establishment NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- reference NN pobj
 |           +-- the DT det
 |           +-- day NN nn
 |           |   +-- one CD num
 |           +-- policy NN nn
 |               +-- window NN nn
 |                   +-- rolling VBG amod
 +-- would MD aux
 +-- ask VB xcomp
 |   +-- manger NN nsubj
 |   |   +-- the DT det
 |   |   +-- policy NN nn
 |   +-- to TO aux
 |   +-- manager NN dobj
 |   |   +-- the DT det
 |   |   +-- storage NN nn
 |   +-- start VB xcomp
 |       +-- to TO aux
 |       +-- receiving VBG xcomp
 |           +-- stream NN dobj
 |               +-- the DT det
 +-- . . punct

53
Input: As each chunk of streaming data arrives , the policy manager executes the policy reference '' s newclip function .
Parse:
executes VBZ ROOT
 +-- As IN prep
 |   +-- chunk NN pobj
 |       +-- each DT det
 |       +-- of IN prep
 |           +-- arrives NNS pobj
 |               +-- streaming VBG amod
 |               +-- data NNS nn
 +-- , , punct
 +-- manager NN nsubj
 |   +-- the DT det
 |   +-- policy NN nn
 +-- function NN dobj
 |   +-- reference NN poss
 |   |   +-- the DT det
 |   |   +-- policy NN nn
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- newclip NN nn
 +-- . . punct

54
Input: The newclip function adds a reference to each arriving chunk , and schedules a callback a day later .
Parse:
adds VBZ ROOT
 +-- function NN nsubj
 |   +-- The DT det
 |   +-- newclip NN nn
 +-- reference NN dobj
 |   +-- a DT det
 |   +-- to IN prep
 |       +-- chunk NN pobj
 |           +-- each DT det
 |           +-- arriving VBG amod
 +-- , , punct
 +-- and CC cc
 +-- schedules VBZ conj
 |   +-- callback NN dobj
 |   |   +-- a DT det
 |   +-- later RB advmod
 |       +-- day NN npadvmod
 |           +-- a DT det
 +-- . . punct

55
Input: At that time , the policy will drop its now day old reference to the content and the content will be discarded unless it is referenced by some other policy .
Parse:
drop VB ROOT
 +-- At IN prep
 |   +-- time NN pobj
 |       +-- that DT det
 +-- , , punct
 +-- policy NN nsubj
 |   +-- the DT det
 +-- will MD aux
 +-- reference NN dobj
 |   +-- its PRP$ poss
 |   +-- old JJ amod
 |       +-- now RB advmod
 |       +-- day NN npadvmod
 +-- to IN prep
 |   +-- content NN pobj
 |       +-- the DT det
 +-- and CC cc
 +-- discarded VBN conj
 |   +-- content NN nsubjpass
 |   |   +-- the DT det
 |   +-- will MD aux
 |   +-- be VB auxpass
 |   +-- referenced VBN advcl
 |       +-- unless IN mark
 |       +-- it PRP nsubjpass
 |       +-- is VBZ auxpass
 |       +-- by IN prep
 |           +-- policy NN pobj
 |               +-- some DT det
 |               +-- other JJ amod
 +-- . . punct

56
Input: Now , consider the case where the user decides to save part of the content -LRB- e.g .
Parse:
consider VB ROOT
 +-- Now RB advmod
 +-- , , punct
 +-- case NN dobj
 |   +-- the DT det
 |   +-- decides VBZ rcmod
 |       +-- where WRB advmod
 |       +-- user NN nsubj
 |       |   +-- the DT det
 |       +-- save VB xcomp
 |           +-- to TO aux
 |           +-- part NN dobj
 |           |   +-- of IN prep
 |           |       +-- content NN pobj
 |           |           +-- the DT det
 |           +-- e.g NFP dep
 |               +-- -LRB- -LRB- punct
 +-- . . punct

57
Input: a specific program -RRB- in the rolling window for an extra week .
Parse:
program NN ROOT
 +-- a DT det
 +-- specific JJ amod
 +-- -RRB- -RRB- punct
 +-- in IN prep
 |   +-- window NN pobj
 |       +-- the DT det
 |       +-- rolling JJ nn
 +-- for IN prep
 |   +-- week NN pobj
 |       +-- an DT det
 |       +-- extra JJ amod
 +-- . . punct

58
Input: To do this , the application requests that the content manager add an additional new policy reference to the part of the content to preserved .
Parse:
requests NNS ROOT
 +-- do VB advcl
 |   +-- To TO aux
 |   +-- this DT dobj
 +-- , , punct
 +-- application NN nsubj
 |   +-- the DT det
 +-- add VB ccomp
 |   +-- that IN mark
 |   +-- manager NN nsubj
 |   |   +-- the DT det
 |   |   +-- content JJ amod
 |   +-- reference NN dobj
 |       +-- an DT det
 |       +-- additional JJ amod
 |       +-- new JJ amod
 |       +-- policy NN nn
 |       +-- to IN prep
 |           +-- part NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- content NN pobj
 |                       +-- the DT det
 |                       +-- to IN prep
 |                           +-- preserved VBN pobj
 +-- . . punct

59
Input: Thus , the preserved content has two references to it one from the rolling window and one from the request to preserve the content for an additional week .
Parse:
has VBZ ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- content NN nsubj
 |   +-- the DT det
 |   +-- preserved VBN amod
 +-- references NNS dobj
 |   +-- two CD num
 |   +-- to IN prep
 |   |   +-- it PRP pobj
 |   +-- one CD dep
 |       +-- from IN prep
 |       |   +-- window NN pobj
 |       |       +-- the DT det
 |       |       +-- rolling VBG nn
 |       +-- and CC cc
 |       +-- one CD conj
 |           +-- from IN prep
 |               +-- request NN pobj
 |                   +-- the DT det
 |                   +-- preserve VB infmod
 |                       +-- to TO aux
 |                       +-- content NN dobj
 |                       |   +-- the DT det
 |                       +-- for IN prep
 |                           +-- week NN pobj
 |                               +-- an DT det
 |                               +-- additional JJ amod
 +-- . . punct

60
Input: After one day the reference from the rolling window will be discarded , but the content will be ref , etc .
Parse:
discarded VBN ROOT
 +-- After IN prep
 |   +-- day NN pobj
 |       +-- one CD num
 +-- reference NN nsubjpass
 |   +-- the DT det
 |   +-- from IN prep
 |       +-- window NN pobj
 |           +-- the DT det
 |           +-- rolling JJ amod
 +-- will MD aux
 +-- be VB auxpass
 +-- , , punct
 +-- but CC cc
 +-- ref JJ conj
 |   +-- content NN nsubj
 |   |   +-- the DT det
 |   +-- will MD aux
 |   +-- be VB cop
 |   +-- , , punct
 |   +-- etc FW advmod
 +-- . . punct

61
Input: base data url url -LRB- media files ... -RRB- -LRB- media files ... -RRB- meta store -LRB- general info ... -RRB- url chunks prefs ranges media chunks , etc.url poly host ref ref.files ref.state Figure Data layout of Spectrum policy store preserved by the second reference .
Parse:
url NN ROOT
 +-- base NN amod
 +-- url NN nn
 |   +-- data NNS nn
 +-- -LRB- -LRB- punct
 +-- files NNS dep
 |   +-- -LRB- -LRB- punct
 |   +-- media NN nn
 |   +-- ... NFP punct
 |   +-- -RRB- -RRB- punct
 +-- ... : punct
 +-- -RRB- -RRB- punct
 +-- store NN dep
 |   +-- meta NNP nn
 |   +-- info NN appos
 |       +-- -LRB- -LRB- punct
 |       +-- general JJ amod
 |       +-- ... NFP punct
 |       +-- -RRB- -RRB- punct
 +-- chunks NNS dep
 |   +-- url JJ amod
 |   +-- ranges VBZ rcmod
 |       +-- prefs NNS nsubj
 |       +-- chunks NNS dobj
 |           +-- media NNS nn
 |           +-- , , punct
 |           +-- layout NN appos
 |               +-- etc.url FW nn
 |               +-- ref.files NNS nn
 |               |   +-- host NN nn
 |               |   |   +-- poly JJ amod
 |               |   +-- ref NN nn
 |               +-- ref.state VB nn
 |               +-- Figure NNP nn
 |               +-- Data NNP nn
 |               +-- of IN prep
 |               |   +-- store NN pobj
 |               |       +-- Spectrum NNP nn
 |               |       +-- policy NN nn
 |               +-- preserved VBN partmod
 |                   +-- by IN prep
 |                       +-- reference NN pobj
 |                           +-- the DT det
 |                           +-- second JJ amod
 +-- . . punct

62
Input: After the additional week has past , the callback function for the second reference will be called .
Parse:
called VBN ROOT
 +-- has VBZ advcl
 |   +-- After IN mark
 |   +-- week NN nsubj
 |   |   +-- the DT det
 |   |   +-- additional JJ amod
 |   +-- past JJ dobj
 +-- , , punct
 +-- function NN nsubjpass
 |   +-- the DT det
 |   +-- callback NN nn
 |   +-- for IN prep
 |       +-- reference NN pobj
 |           +-- the DT det
 |           +-- second JJ amod
 +-- will MD aux
 +-- be VB auxpass
 +-- . . punct

63
Input: This function will discard the remaining reference to the content and as there are no remaining references the content will be freed .
Parse:
discard VB ROOT
 +-- function NN nsubj
 |   +-- This DT det
 +-- will MD aux
 +-- reference NN dobj
 |   +-- the DT det
 |   +-- remaining VBG amod
 |   +-- to IN prep
 |       +-- content NN pobj
 |           +-- the DT det
 +-- and CC cc
 +-- freed VBN conj
 |   +-- are VBP advcl
 |   |   +-- as IN mark
 |   |   +-- there EX expl
 |   |   +-- references NNS nsubj
 |   |       +-- no DT det
 |   |       +-- remaining VBG amod
 |   +-- content NN nsubjpass
 |   |   +-- the DT det
 |   +-- will MD aux
 |   +-- be VB auxpass
 +-- . . punct

64
Input: In order to function in scenarios like the ones described above , Spectrum '' s policy manager must manage and maintain all the references to various chunks of media .
Parse:
manage VB ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- function VB infmod
 |           +-- to TO aux
 |           +-- in IN prep
 |               +-- scenarios NNS pobj
 |                   +-- like IN prep
 |                       +-- ones NNS pobj
 |                           +-- the DT det
 |                           +-- described VBN partmod
 |                               +-- above RB advmod
 +-- , , punct
 +-- manager NN nsubj
 |   +-- Spectrum NNP poss
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- policy NN nn
 +-- must MD aux
 +-- and CC cc
 +-- maintain VB conj
 |   +-- references NNS dobj
 |       +-- all PDT predet
 |       +-- the DT det
 |       +-- to IN prep
 |           +-- chunks NNS pobj
 |               +-- various JJ amod
 |               +-- of IN prep
 |                   +-- media NNS pobj
 +-- . . punct

65
Input: These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted .
Parse:
persistent JJ ROOT
 +-- references NNS nsubj
 |   +-- These DT det
 +-- are VBP cop
 +-- and CC cc
 +-- thus RB advmod
 +-- able JJ conj
 |   +-- must MD aux
 |   +-- be VB cop
 |   +-- survive VB xcomp
 |       +-- to TO aux
 |       +-- maintaining VBG advcl
 |           +-- even RB advmod
 |           +-- if IN mark
 |           +-- machine NN nsubj
 |           |   +-- the DT det
 |           +-- rebooted VBN ccomp
 |               +-- them PRP nsubj
 |               +-- is VBZ cop
 +-- . . punct

66
Input: Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure .
Parse:
accomplishes VBZ ROOT
 +-- implementation NN nsubj
 |   +-- Our PRP$ poss
 |   +-- manager NN nn
 |       +-- Spectrum NN nn
 |       +-- policy NN nn
 +-- this DT dobj
 +-- using VBG xcomp
 |   +-- file NN dobj
 |       +-- the DT det
 |       +-- and CC cc
 |       +-- structure NN conj
 |       |   +-- directory NN nn
 |       +-- shown VBN partmod
 |           +-- in IN prep
 |               +-- Figure NN pobj
 +-- . . punct

67
Input: There are three classes of data stored , and each class has its own top level directory .
Parse:
are VBP ROOT
 +-- There EX expl
 +-- classes NNS nsubj
 |   +-- three CD num
 |   +-- of IN prep
 |   |   +-- data NNS pobj
 |   +-- stored VBN partmod
 +-- , , punct
 +-- and CC cc
 +-- has VBZ conj
 |   +-- class NN nsubj
 |   |   +-- each DT det
 |   +-- directory NN dobj
 |       +-- its PRP$ poss
 |       +-- own JJ amod
 |       +-- level NN nn
 |           +-- top JJ amod
 +-- . . punct

68
Input: The directories are data this directory is used by the storage manager to store each active URL '' s chunks of media .
Parse:
data NNS ROOT
 +-- directories NNS nsubj
 |   +-- The DT det
 +-- are VBP cop
 +-- used VBN rcmod
 |   +-- directory NN nsubjpass
 |   |   +-- this DT det
 |   +-- is VBZ auxpass
 |   +-- by IN prep
 |   |   +-- manager NN pobj
 |   |       +-- the DT det
 |   |       +-- storage NN nn
 |   +-- store VB xcomp
 |       +-- to TO aux
 |       +-- chunks NNS dobj
 |           +-- URL NN poss
 |           |   +-- each DT det
 |           |   +-- active JJ amod
 |           |   +-- '' '' punct
 |           |   +-- s POS possessive
 |           +-- of IN prep
 |               +-- media NNS pobj
 +-- . . punct

69
Input: The media files can be encoded in any format , for example MPEG , Windows Media , or QuickTime .
Parse:
encoded VBN ROOT
 +-- files NNS nsubjpass
 |   +-- The DT det
 |   +-- media NNS nn
 +-- can MD aux
 +-- be VB auxpass
 +-- in IN prep
 |   +-- format NN pobj
 |       +-- any DT det
 +-- , , punct
 +-- MPEG NNP xcomp
 |   +-- for IN prep
 |   |   +-- example NN pobj
 |   +-- , , punct
 |   +-- Media NNP conj
 |   |   +-- Windows NNP nn
 |   +-- or CC cc
 |   +-- QuickTime NNP conj
 +-- . . punct

70
Input: Note that this directory is used only if the storage manager is local .
Parse:
Note VB ROOT
 +-- used VBN ccomp
 |   +-- that IN mark
 |   +-- directory NN nsubjpass
 |   |   +-- this DT det
 |   +-- is VBZ auxpass
 |   +-- local JJ advcl
 |       +-- only RB advmod
 |       +-- if IN mark
 |       +-- manager NN nsubj
 |       |   +-- the DT det
 |       |   +-- storage NN nn
 |       +-- is VBZ cop
 +-- . . punct

71
Input: If the policy manager is using an external storage manager -LRB- e.g .
Parse:
using VBG ROOT
 +-- If IN mark
 +-- manager NN nsubj
 |   +-- the DT det
 |   +-- policy NN nn
 +-- is VBZ aux
 +-- manager NN dobj
 |   +-- an DT det
 |   +-- external JJ amod
 |   +-- storage NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- e.g UH dep
 +-- . . punct

72
Input: a storage appliance -RRB- , then the media files are stored remotely and are only remotely referenced by the policy manager .
Parse:
stored VBN ROOT
 +-- appliance NN nsubjpass
 |   +-- a DT det
 |   +-- storage NN nn
 |   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- then RB advmod
 +-- files NNS nsubjpass
 |   +-- the DT det
 |   +-- media NNS nn
 +-- are VBP auxpass
 +-- remotely RB advmod
 +-- and CC cc
 +-- referenced VBN conj
 |   +-- are VBP auxpass
 |   +-- remotely RB advmod
 |   |   +-- only RB advmod
 |   +-- by IN prep
 |       +-- manager NN pobj
 |           +-- the DT det
 |           +-- policy NN nn
 +-- . . punct

73
Input: meta this directory contains general meta information about the storage manager being used and the data it is storing .
Parse:
contains VBZ ROOT
 +-- meta UH advmod
 +-- directory NN nsubj
 |   +-- this DT det
 +-- information NN dobj
 |   +-- general JJ amod
 |   +-- meta NN amod
 |   +-- about IN prep
 |       +-- manager NN pobj
 |           +-- the DT det
 |           +-- storage NN nn
 |           +-- used VBN partmod
 |           |   +-- being VBG auxpass
 |           +-- and CC cc
 |           +-- data NNS conj
 |               +-- the DT det
 |               +-- storing VBG rcmod
 |                   +-- it PRP nsubj
 |                   +-- is VBZ aux
 +-- . . punct

74
Input: General information is stored in the store subdirectory and includes the location of the store -LRB- local or remote -RRB- and information about the types of chunks of data the store can handle .
Parse:
stored VBN ROOT
 +-- information NN nsubjpass
 |   +-- General JJ amod
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- subdirectory NN pobj
 |       +-- the DT det
 |       +-- store NN nn
 +-- and CC cc
 +-- includes VBZ conj
 |   +-- location NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- store NN pobj
 |       |       +-- the DT det
 |       |       +-- -LRB- -LRB- punct
 |       |       +-- local JJ amod
 |       |       |   +-- or CC cc
 |       |       |   +-- remote JJ conj
 |       |       +-- -RRB- -RRB- punct
 |       +-- and CC cc
 |       +-- information NN conj
 |           +-- about IN prep
 |               +-- types NNS pobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                   |   +-- chunks NNS pobj
 |                   |       +-- of IN prep
 |                   |           +-- data NNS pobj
 |                   +-- handle VB rcmod
 |                       +-- store NN nsubj
 |                       |   +-- the DT det
 |                       +-- can MD aux
 +-- . . punct

75
Input: The meta directory also contains a subdirectory per URL that contains information about the chunks of data stored .
Parse:
contains VBZ ROOT
 +-- directory NN nsubj
 |   +-- The DT det
 |   +-- meta NN amod
 +-- also RB advmod
 +-- subdirectory NN dobj
 |   +-- a DT det
 |   +-- per IN prep
 |   |   +-- URL NNS pobj
 |   +-- contains VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- information NN dobj
 |           +-- about IN prep
 |               +-- chunks NNS pobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- data NNS pobj
 |                           +-- stored VBN partmod
 +-- . . punct

76
Input: The chunks file contains a list of chunks currently stored and their reference counts .
Parse:
contains VBZ ROOT
 +-- file VBP nsubj
 |   +-- The DT det
 |   +-- chunks NNS nn
 +-- list NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- chunks NNS pobj
 |   |       +-- stored VBN partmod
 |   |           +-- currently RB advmod
 |   +-- and CC cc
 |   +-- counts NNS conj
 |       +-- their PRP$ poss
 |       +-- reference NN nn
 +-- . . punct

77
Input: The prefs file contains a list of active policy references that point to this URL .
Parse:
contains VBZ ROOT
 +-- file NN nsubj
 |   +-- The DT det
 |   +-- prefs NNS nn
 +-- list NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- references NNS pobj
 |           +-- active JJ amod
 |           +-- policy NN nn
 |           +-- point VBP rcmod
 |               +-- that WDT nsubj
 |               +-- to IN prep
 |                   +-- URL NN pobj
 |                       +-- this DT det
 +-- . . punct

78
Input: The ranges file contains a list of time ranges of data currently stored .
Parse:
contains VBZ ROOT
 +-- file NN nsubj
 |   +-- The DT det
 |   +-- ranges NNS nn
 +-- list NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- ranges NNS pobj
 |           +-- time NN nn
 |           +-- of IN prep
 |               +-- data NNS pobj
 |                   +-- stored VBN partmod
 |                       +-- currently RB advmod
 +-- . . punct

79
Input: Finally , the media file describes the format of the media being stored under the current URL .
Parse:
describes VBZ ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- file NN nsubj
 |   +-- the DT det
 |   +-- media NNS nn
 +-- format NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- stored VBN pcomp
 |           +-- media NNS nsubjpass
 |           |   +-- the DT det
 |           +-- being VBG auxpass
 |           +-- under IN prep
 |               +-- URL NN pobj
 |                   +-- the DT det
 |                   +-- current JJ amod
 +-- . . punct

80
Input: poly this directory contains a set of host subdirectories .
Parse:
contains VBZ ROOT
 +-- directory NN nsubj
 |   +-- poly JJ amod
 |   +-- this DT det
 +-- set NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- subdirectories NNS pobj
 |           +-- host NN nn
 +-- . . punct

81
Input: Each host subdirectory contains the set of policy references created by that host .
Parse:
contains VBZ ROOT
 +-- subdirectory NN nsubj
 |   +-- Each DT det
 |   +-- host NN nn
 +-- set NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- references NNS pobj
 |           +-- policy NN nn
 |           +-- created VBN partmod
 |               +-- by IN prep
 |                   +-- host NN pobj
 |                       +-- that DT det
 +-- . . punct

82
Input: Information on each policy reference is broken up into three files .
Parse:
broken VBN ROOT
 +-- Information NN nsubjpass
 |   +-- on IN prep
 |       +-- reference NN pobj
 |           +-- each DT det
 |           +-- policy NN nn
 +-- is VBZ auxpass
 +-- up RP prt
 +-- into IN prep
 |   +-- files NNS pobj
 |       +-- three CD num
 +-- . . punct

83
Input: For example , a policy reference named ref would be stored in ref , ref.files , and ref.state .
Parse:
stored VBN ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- reference NN nsubjpass
 |   +-- a DT det
 |   +-- policy NN nn
 |   +-- named VBN partmod
 |       +-- ref NN xcomp
 +-- would MD aux
 +-- be VB auxpass
 +-- in IN prep
 |   +-- ref NN pobj
 |       +-- , , punct
 |       +-- ref.files NNS conj
 |       +-- and CC cc
 |       +-- ref.state VB conj
 +-- . . punct

84
Input: The ref file contains information about the policy reference that does not change frequently .
Parse:
contains VBZ ROOT
 +-- file NN nsubj
 |   +-- The DT det
 |   +-- ref JJ amod
 +-- information NN dobj
 |   +-- about IN prep
 |       +-- reference NN pobj
 |           +-- the DT det
 |           +-- policy NN nn
 |           +-- change VB rcmod
 |               +-- that WDT nsubj
 |               +-- does VBZ aux
 |               +-- not RB neg
 |               +-- frequently RB advmod
 +-- . . punct

85
Input: This information includes the base policy and the parameters used to create the reference .
Parse:
includes VBZ ROOT
 +-- information NN nsubj
 |   +-- This DT det
 +-- policy NN dobj
 |   +-- the DT det
 |   +-- base NN nn
 |   +-- and CC cc
 |   +-- parameters NNS conj
 |       +-- the DT det
 |       +-- used VBN partmod
 |           +-- create VB xcomp
 |               +-- to TO aux
 |               +-- reference NN dobj
 |                   +-- the DT det
 +-- . . punct

86
Input: The ref.files file contains the list of references to chunks that pref ref owns .
Parse:
contains VBZ ROOT
 +-- file VBP nsubj
 |   +-- The DT det
 |   +-- ref.files NNS nn
 +-- list NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- references NNS pobj
 |           +-- to IN prep
 |               +-- chunks NNS pobj
 |                   +-- owns VBZ rcmod
 |                       +-- that IN dobj
 |                       +-- ref NN nsubj
 |                           +-- pref NN nn
 +-- . . punct

87
Input: Finally , the ref.state file contains optional policy specific state information that can change over time .
Parse:
contains VBZ ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- file NN nsubj
 |   +-- the DT det
 |   +-- ref.state JJ amod
 +-- information NN dobj
 |   +-- policy NN nn
 |   |   +-- optional JJ amod
 |   +-- specific JJ amod
 |   +-- state NN nn
 |   +-- change VB rcmod
 |       +-- that WDT nsubj
 |       +-- can MD aux
 |       +-- over IN prep
 |           +-- time NN pobj
 +-- . . punct

88
Input: Together , these files and directories are used to track references in our implementation of Spectrum .
Parse:
used VBN ROOT
 +-- Together RB advmod
 +-- , , punct
 +-- files NNS nsubjpass
 |   +-- these DT det
 |   +-- and CC cc
 |   +-- directories NNS conj
 +-- are VBP auxpass
 +-- track VB xcomp
 |   +-- to TO aux
 |   +-- references NNS dobj
 |   +-- in IN prep
 |       +-- implementation NN pobj
 |           +-- our PRP$ poss
 |           +-- of IN prep
 |               +-- Spectrum NNP pobj
 +-- . . punct

89
Input: Note that other implementations are possible .
Parse:
Note VB ROOT
 +-- possible JJ ccomp
 |   +-- that IN mark
 |   +-- implementations NNS nsubj
 |   |   +-- other JJ amod
 |   +-- are VBP cop
 +-- . . punct

90
Input: For example , a carrier grade Spectrum manager might store all its policy and reference information in a high performance database system .
Parse:
store VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- manager NN nsubj
 |   +-- a DT det
 |   +-- carrier NN nn
 |   +-- Spectrum NN nn
 |       +-- grade NN nn
 +-- might MD aux
 +-- policy NN dobj
 |   +-- all PDT predet
 |   +-- its PRP$ poss
 |   +-- and CC cc
 |   +-- information NN conj
 |       +-- reference NN nn
 +-- in IN prep
 |   +-- system NN pobj
 |       +-- a DT det
 |       +-- performance NN nn
 |       |   +-- high JJ amod
 |       +-- database NN nn
 +-- . . punct

91
Input: .
Parse:
. . ROOT
