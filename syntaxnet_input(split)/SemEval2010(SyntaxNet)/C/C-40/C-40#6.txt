
1
Input: To support dynamic extensibility and scalability in highly dynamic environments , we proposed a new view paradigm , the object initiated view model , and its efficient indexing method , edge indexing
Parse:
proposed VBD ROOT
 +-- support VB advcl
 |   +-- To TO aux
 |   +-- extensibility NN dobj
 |       +-- dynamic JJ amod
 |       +-- and CC cc
 |       +-- scalability NN conj
 |       +-- in IN prep
 |           +-- environments NNS pobj
 |               +-- dynamic JJ amod
 |                   +-- highly RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- paradigm NN dobj
     +-- a DT det
     +-- view NN nn
     |   +-- new JJ amod
     +-- , , punct
     +-- model NN conj
     |   +-- the DT det
     |   +-- initiated VBN amod
     |   |   +-- object NN dep
     |   +-- view NN nn
     +-- and CC cc
     +-- method NN conj
         +-- its PRP$ poss
         +-- efficient JJ amod
         +-- indexing NN nn
         +-- , , punct
         +-- indexing NN appos
             +-- edge NN nn

2
Input: Compared with the traditional view model , our new view model promises to eliminate any object popping problem that can easily be observed in existing virtual environments at the expense of increased indexing complexity
Parse:
promises NNS ROOT
 +-- Compared VBN prep
 |   +-- with IN pcomp
 |       +-- model NN pobj
 |           +-- the DT det
 |           +-- traditional JJ amod
 |           +-- view NN nn
 +-- , , punct
 +-- model NN nsubj
 |   +-- our PRP$ poss
 |   +-- view NN nn
 |       +-- new JJ amod
 +-- eliminate VB infmod
     +-- to TO aux
     +-- problem NN dobj
         +-- any DT det
         +-- object NN nn
         +-- popping NN nn
         +-- observed VBN rcmod
             +-- that WDT nsubjpass
             +-- can MD aux
             +-- easily RB advmod
             +-- be VB auxpass
             +-- in IN prep
             |   +-- environments NNS pobj
             |       +-- existing VBG amod
             |       +-- virtual JJ amod
             +-- at IN prep
                 +-- expense NN pobj
                     +-- the DT det
                     +-- of IN prep
                         +-- complexity NN pobj
                             +-- increased VBN amod
                             +-- indexing NN nn

3
Input: Our edge indexing model , however , can overcome such higher indexing complexity by indexing spatial extensions at edge level not at node level in a grid partitioned sub world and was validated through quantitative analyses and simulations
Parse:
overcome VB ROOT
 +-- model NN nsubj
 |   +-- Our PRP$ poss
 |   +-- edge NN nn
 |   +-- indexing NN nn
 +-- , , punct
 +-- however RB advmod
 +-- can MD aux
 +-- complexity NN dobj
 |   +-- such JJ amod
 |   +-- higher JJR amod
 |   +-- indexing NN nn
 +-- by IN prep
 |   +-- indexing VBG pcomp
 |       +-- extensions NNS dobj
 |       |   +-- spatial JJ amod
 |       +-- at IN prep
 |           +-- not RB neg
 |           +-- level NN pobj
 |               +-- node NN nn
 |               +-- in IN prep
 |                   +-- world NN pobj
 |                       +-- a DT det
 |                       +-- sub NN nn
 |                           +-- grid NN nn
 |                           +-- partitioned VBN amod
 +-- and CC cc
 +-- validated VBN conj
     +-- was VBD auxpass
     +-- through IN prep
         +-- analyses NNS pobj
             +-- quantitative JJ amod
             +-- and CC cc
             +-- simulations NNS conj

4
Input: However , for now our edge indexing still retains a higher complexity , even in a two dimensional domain
Parse:
retains VBZ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- for IN prep
 |   +-- now RB pcomp
 +-- indexing NN nsubj
 |   +-- our PRP$ poss
 |   +-- edge NN nn
 +-- still RB advmod
 +-- complexity NN dobj
 |   +-- a DT det
 |   +-- higher JJR amod
 +-- in IN prep
     +-- even RB advmod
     +-- domain NN pobj
         +-- a DT det
         +-- two CD num
         +-- dimensional JJ amod

5
Input: Currently , we are developing another edge indexing method to make the indexing complexity constant
Parse:
developing VBG ROOT
 +-- Currently RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- are VBP aux
 +-- method NN dobj
     +-- another DT det
     +-- edge NN nn
     +-- indexing NN nn
     +-- make VB infmod
         +-- to TO aux
         +-- constant JJ xcomp
             +-- complexity NN nsubj
                 +-- the DT det
                 +-- indexing NN nn

6
Input: Once indexing complexity becomes constant , we plan to index 3D spatial extensions and multi resolutional geometry data
Parse:
plan VBP ROOT
 +-- constant JJ advcl
 |   +-- Once IN mark
 |   +-- complexity NN nsubj
 |   |   +-- indexing NN nn
 |   +-- becomes VBZ cop
 +-- , , punct
 +-- we PRP nsubj
 +-- index NN xcomp
     +-- to TO aux
     +-- extensions NNS dobj
         +-- 3D CD num
         +-- spatial JJ amod
         +-- and CC cc
         +-- data NNS conj
             +-- multi JJ amod
             +-- geometry NN nn
                 +-- resolutional JJ amod

7
Input: We expect that our edge indexing can contribute to successful deployment of next generation gaming environments .
Parse:
expect VBP ROOT
 +-- We PRP nsubj
 +-- contribute VB ccomp
 |   +-- that IN mark
 |   +-- indexing NN nsubj
 |   |   +-- our PRP$ poss
 |   |   +-- edge NN nn
 |   +-- can MD aux
 |   +-- to IN prep
 |       +-- deployment NN pobj
 |           +-- successful JJ amod
 |           +-- of IN prep
 |               +-- environments NNS pobj
 |                   +-- generation NN nn
 |                   |   +-- next JJ amod
 |                   +-- gaming NN nn
 +-- . . punct
