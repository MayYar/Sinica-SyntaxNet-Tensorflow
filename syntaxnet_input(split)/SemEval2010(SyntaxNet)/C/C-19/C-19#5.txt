
1
Input: FRAMEWORK In this section , we describe our new approach for implementing and composing protocols that is based on services .
Parse:
describe VBP ROOT
 +-- FRAMEWORK LS nsubj
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- approach NN dobj
 |   +-- our PRP$ poss
 |   +-- new JJ amod
 |   +-- for IN prep
 |       +-- implementing VBG pcomp
 |           +-- and CC cc
 |           +-- composing NN conj
 |           +-- protocols NNS dobj
 |               +-- based VBN rcmod
 |                   +-- that WDT nsubjpass
 |                   +-- is VBZ auxpass
 |                   +-- on IN prep
 |                       +-- services NNS pobj
 +-- . . punct

2
Input: 692 We show in Section 5 the advantages of service based protocol frameworks over event based protocol frameworks .
Parse:
692 CD ROOT
 +-- show VBP dep
 |   +-- We PRP nsubj
 |   +-- in IN prep
 |   |   +-- Section NN pobj
 |   |       +-- 5 CD num
 |   +-- advantages NNS dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- frameworks NNS pobj
 |               +-- based VBN amod
 |               |   +-- service NN dep
 |               +-- protocol NN nn
 |               +-- over IN prep
 |                   +-- frameworks NNS pobj
 |                       +-- based VBN amod
 |                       |   +-- event NN dep
 |                       +-- protocol NN nn
 +-- . . punct

3
Input: Service Interface .
Parse:
Interface NNP ROOT
 +-- Service NN nn
 +-- . . punct

4
Input: In our service based framework , protocol modules in the same stack communicate through objects called service interfaces .
Parse:
communicate VB ROOT
 +-- In IN prep
 |   +-- framework NN pobj
 |       +-- our PRP$ poss
 |       +-- based VBN amod
 |           +-- service NN dep
 +-- , , punct
 +-- modules NNS nsubj
 |   +-- protocol NN nn
 |   +-- in IN prep
 |       +-- stack NN pobj
 |           +-- the DT det
 |           +-- same JJ amod
 +-- through IN prep
 |   +-- objects NNS pobj
 |       +-- called VBN partmod
 |           +-- interfaces NNS dep
 |               +-- service NN nn
 +-- . . punct

5
Input: Requests , replies and notifications are all issued to service interfaces .
Parse:
issued VBN ROOT
 +-- Requests NNS nsubjpass
 |   +-- , , punct
 |   +-- replies NNS conj
 |   +-- and CC cc
 |   +-- notifications NNS conj
 +-- are VBP auxpass
 +-- all DT dep
 +-- to TO prep
 |   +-- interfaces NNS pobj
 |       +-- service NN nn
 +-- . . punct

6
Input: Protocol Modules .
Parse:
Modules NNP ROOT
 +-- Protocol NNP nn
 +-- . . punct

7
Input: A protocol module is a set of executers , listeners and interceptors .
Parse:
set NN ROOT
 +-- module NN nsubj
 |   +-- A DT det
 |   +-- protocol NN nn
 +-- is VBZ cop
 +-- a DT det
 +-- of IN prep
 |   +-- executers NNS pobj
 |       +-- , , punct
 |       +-- listeners NNS conj
 |       +-- and CC cc
 |       +-- interceptors NNS conj
 +-- . . punct

8
Input: Executers handle requests .
Parse:
handle VBP ROOT
 +-- Executers NNS nsubj
 +-- requests NNS dobj
 +-- . . punct

9
Input: An executer can be dynamically bound to a service interface .
Parse:
bound VBN ROOT
 +-- executer NN nsubjpass
 |   +-- An DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- dynamically RB advmod
 +-- to IN prep
 |   +-- interface NN pobj
 |       +-- a DT det
 |       +-- service NN nn
 +-- . . punct

10
Input: It can be later unbound .
Parse:
unbound JJ ROOT
 +-- It PRP nsubj
 +-- can MD aux
 +-- be VB cop
 +-- later RB advmod
 +-- . . punct

11
Input: A request issued to a service interface si leads to the execution of the executer bound to si .
Parse:
leads VBZ ROOT
 +-- request NN nsubj
 |   +-- A DT det
 |   +-- issued VBN partmod
 |   |   +-- to IN prep
 |   |       +-- interface NN pobj
 |   |           +-- a DT det
 |   |           +-- service NN nn
 |   +-- si NNS dep
 +-- to IN prep
 |   +-- execution NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- executer NN pobj
 |       |       +-- the DT det
 |       +-- bound VBN partmod
 |           +-- si VB xcomp
 |               +-- to TO aux
 +-- . . punct

12
Input: If no executer is bound to si , the request is delayed until some executer is bound to si .
Parse:
delayed VBN ROOT
 +-- bound VBN advcl
 |   +-- until IN mark
 |   +-- executer NN nsubjpass
 |   |   +-- some DT det
 |   +-- is VBZ auxpass
 |   +-- si VB xcomp
 |       +-- to TO aux
 +-- , , punct
 +-- request NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- . . punct

13
Input: Contrary to events , at most one executer at any time can be bound to a service interface on every machine .
Parse:
bound VBN ROOT
 +-- Contrary JJ nsubjpass
 |   +-- to IN prep
 |       +-- events NNS pobj
 |           +-- , , punct
 |           +-- at IN prep
 |               +-- time NN pobj
 |                   +-- any DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- to IN prep
 |   +-- interface NN pobj
 |       +-- a DT det
 |       +-- service NN nn
 |       +-- on IN prep
 |           +-- machine NN pobj
 |               +-- every DT det
 +-- . . punct

14
Input: Listeners handle replies and notifications .
Parse:
handle VBP ROOT
 +-- Listeners NNS nsubj
 +-- replies NNS dobj
 |   +-- and CC cc
 |   +-- notifications NNS conj
 +-- . . punct

15
Input: A listener can be dynamically bound and unbound to from a service interface si .
Parse:
bound VBN ROOT
 +-- listener NN nsubjpass
 |   +-- A DT det
 +-- can MD aux
 +-- be VB auxpass
 +-- dynamically RB advmod
 +-- and CC cc
 +-- unbound JJ conj
 |   +-- to TO prep
 +-- from IN prep
 |   +-- interface NN pobj
 |       +-- a DT det
 |       +-- service NN nn
 |       +-- si NNS appos
 +-- . . punct

16
Input: A notification issued to a service interface si is handled by all listeners bound to si in the local stack .
Parse:
handled VBN ROOT
 +-- notification NN nsubjpass
 |   +-- A DT det
 |   +-- issued VBN partmod
 |       +-- to IN prep
 |           +-- interface NN pobj
 |               +-- a DT det
 |               +-- service NN nn
 |               +-- si FW num
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- listeners NNS pobj
 |       +-- all DT det
 |       +-- bound VBN partmod
 |           +-- si VB xcomp
 |               +-- to TO aux
 |               +-- in IN prep
 |                   +-- stack NN pobj
 |                       +-- the DT det
 |                       +-- local JJ amod
 +-- . . punct

17
Input: A reply issued to a service interface is handled by one single listener .
Parse:
handled VBN ROOT
 +-- reply NN nsubjpass
 |   +-- A DT det
 |   +-- issued VBN partmod
 |       +-- to IN prep
 |           +-- interface NN pobj
 |               +-- a DT det
 |               +-- service NN nn
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- listener NN pobj
 |       +-- one CD num
 |       +-- single JJ amod
 +-- . . punct

18
Input: To ensure that one single listener handles a reply , a module Pi has to identify , each time it issues a request , the listener to handle the possible reply .
Parse:
issues VBZ ROOT
 +-- ensure VB advcl
 |   +-- To TO aux
 |   +-- handles VBZ ccomp
 |       +-- that IN mark
 |       +-- listener NN nsubj
 |       |   +-- one CD num
 |       |   +-- single JJ amod
 |       +-- reply NN dobj
 |           +-- a DT det
 |           +-- , , punct
 |           +-- module NN appos
 |               +-- a DT det
 |               +-- has VBZ rcmod
 |                   +-- Pi NNP nsubj
 |                   +-- identify VB xcomp
 |                       +-- to TO aux
 +-- , , punct
 +-- time NN nsubj
 |   +-- each DT det
 +-- it PRP nsubj
 +-- request NN dobj
 |   +-- a DT det
 |   +-- , , punct
 |   +-- listener NN appos
 |       +-- the DT det
 |       +-- handle VB infmod
 |           +-- to TO aux
 |           +-- reply NN dobj
 |               +-- the DT det
 |               +-- possible JJ amod
 +-- . . punct

19
Input: If the request and the reply occur respectively , in stack i and in stack j , the service interface si on i communicates to the service interface si on j the listener that must handle the reply .
Parse:
si VBZ ROOT
 +-- occur VBP advcl
 |   +-- If IN mark
 |   +-- request NN nsubj
 |   |   +-- the DT det
 |   |   +-- and CC cc
 |   |   +-- reply NN conj
 |   |       +-- the DT det
 |   +-- respectively RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- stack NN pcomp
 |   |   +-- i PRP dobj
 |   +-- and CC cc
 |   +-- in IN conj
 |   |   +-- stack NN pobj
 |   +-- j , pobj
 +-- interface NN nsubj
 |   +-- the DT det
 |   +-- service NN nn
 +-- si VBZ ccomp
 |   +-- communicates VBZ csubj
 |   |   +-- on IN mark
 |   |   +-- i PRP nsubj
 |   |   +-- to IN prep
 |   |       +-- interface NN pobj
 |   |           +-- the DT det
 |   |           +-- service NN nn
 |   +-- on IN prep
 |   |   +-- j , pobj
 |   +-- listener NN dobj
 |       +-- the DT det
 |       +-- handle VB rcmod
 |           +-- that WDT nsubj
 |           +-- must MD aux
 |           +-- reply NN dobj
 |               +-- the DT det
 +-- . . punct

20
Input: If the listener that must handle the reply does not exist , the reply is delayed until the listener is created .
Parse:
delayed VBN ROOT
 +-- exist VB advcl
 |   +-- If IN mark
 |   +-- listener NN nsubj
 |   |   +-- the DT det
 |   |   +-- handle VB rcmod
 |   |       +-- that WDT nsubj
 |   |       +-- must MD aux
 |   |       +-- reply NN dobj
 |   |           +-- the DT det
 |   +-- does VBZ aux
 |   +-- not RB neg
 +-- , , punct
 +-- reply NN nsubjpass
 |   +-- the DT det
 +-- is VBZ auxpass
 +-- created VBN advcl
 |   +-- until IN mark
 |   +-- listener NN nsubjpass
 |   |   +-- the DT det
 |   +-- is VBZ auxpass
 +-- . . punct

21
Input: Stack 1 P1 Q1 R1 S1 Network t u nt Figure 3
Parse:
Stack VB ROOT
 +-- Figure NN dobj
     +-- P1 CD num
     |   +-- 1 CD number
     +-- S1 CD dep
     |   +-- Q1 CD num
     |   +-- R1 CD num
     +-- t NNP dep
     |   +-- Network NNP nn
     +-- u PRP dep
     +-- nt RB neg
     +-- 3 CD num

22
Input: We denote a service interface by a small letter -LRB- e.g .
Parse:
denote VBP ROOT
 +-- We PRP nsubj
 +-- interface NN dobj
 |   +-- a DT det
 |   +-- service NN nn
 +-- by IN prep
 |   +-- letter NN pobj
 |       +-- a DT det
 |       +-- small JJ amod
 |       +-- -LRB- -LRB- punct
 |       +-- e.g NNP dep
 +-- . . punct

23
Input: t , u and nt -RRB- in a hexagonal box .
Parse:
u PRP ROOT
 +-- t UH discourse
 +-- , , punct
 +-- and CC cc
 +-- nt RB conj
 +-- -RRB- -RRB- punct
 +-- in IN prep
 |   +-- box NN pobj
 |       +-- a DT det
 |       +-- hexagonal JJ amod
 +-- . . punct

24
Input: The fact that a module Pi can generate a request to a service interface si is represented by a dashed black arrow going from Pi to si .
Parse:
represented VBN ROOT
 +-- fact NN nsubjpass
 |   +-- The DT det
 |   +-- generate VB ccomp
 |       +-- that IN mark
 |       +-- Pi NNP nsubj
 |       |   +-- a DT det
 |       |   +-- module NN nn
 |       +-- can MD aux
 |       +-- request NN dobj
 |           +-- a DT det
 |           +-- to IN prep
 |               +-- interface NN pobj
 |                   +-- a DT det
 |                   +-- service NN nn
 |                   +-- si '' punct
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- arrow NN pobj
 |       +-- a DT det
 |       +-- dashed JJ amod
 |       +-- black JJ amod
 |       +-- going VBG partmod
 |           +-- from IN prep
 |           |   +-- Pi NNP pobj
 |           +-- to IN prep
 |               +-- si FW pobj
 +-- . . punct

25
Input: Similarly , a dashed white arrow going from module Pi to service interface si represents the fact that Pi can generate a reply or a notification to si .
Parse:
represents VBZ ROOT
 +-- Similarly RB advmod
 +-- , , punct
 +-- arrow NN nsubj
 |   +-- a DT det
 |   +-- dashed VBN amod
 |   +-- white JJ amod
 |   +-- going VBG partmod
 |       +-- from IN prep
 |       |   +-- Pi NNP pobj
 |       |       +-- module NN nn
 |       +-- service VB xcomp
 |           +-- to TO aux
 |           +-- interface NN dobj
 |               +-- si FW dep
 +-- fact NN dobj
 |   +-- the DT det
 |   +-- generate VB ccomp
 |       +-- that IN mark
 |       +-- Pi NNP nsubj
 |       +-- can MD aux
 |       +-- reply NN dobj
 |           +-- a DT det
 |           +-- or CC cc
 |           +-- notification NN conj
 |               +-- a DT det
 |               +-- to IN prep
 |                   +-- si FW pobj
 +-- . . punct

26
Input: We represent executers with white boxes inside protocol modules and listeners with white boxes with a gray border .
Parse:
represent VBP ROOT
 +-- We PRP nsubj
 +-- executers NNS dobj
 |   +-- with IN prep
 |       +-- boxes NNS pobj
 |           +-- white JJ amod
 |           +-- inside IN prep
 |           |   +-- modules NNS pobj
 |           |       +-- protocol NN nn
 |           +-- and CC cc
 |           +-- listeners NNS conj
 |               +-- with IN prep
 |                   +-- boxes NNS pobj
 |                       +-- white JJ amod
 |                       +-- with IN prep
 |                           +-- border NN pobj
 |                               +-- a DT det
 |                               +-- gray JJ amod
 +-- . . punct

27
Input: A connecting line between a service interface si and an executer e -LRB- resp .
Parse:
line NN ROOT
 +-- A DT det
 +-- connecting VBG amod
 +-- between IN prep
 |   +-- interface NN pobj
 |       +-- a DT det
 |       +-- service NN nn
 |       +-- si NNS amod
 |       +-- and CC cc
 |       +-- e NN conj
 |           +-- an DT det
 |           +-- executer NN nn
 |           +-- -LRB- -LRB- punct
 |           +-- resp FW dep
 +-- . . punct

28
Input: a listener l -RRB- shows that e -LRB- resp .
Parse:
shows VBZ ROOT
 +-- l NN nsubj
 |   +-- a DT det
 |   +-- listener NN nn
 |   +-- -RRB- -RRB- punct
 +-- resp NN ccomp
 |   +-- that IN mark
 |   +-- e NNP discourse
 |   +-- -LRB- -LRB- punct
 +-- . . punct

29
Input: l -RRB- is bound to si .
Parse:
bound VBN ROOT
 +-- l LS nsubjpass
 |   +-- -RRB- -RRB- punct
 +-- is VBZ auxpass
 +-- si VB xcomp
 |   +-- to TO aux
 +-- . . punct

30
Input: In Figure 3 , module Q1 contains an executer bound to service interface t and a listener bound to service interface u .
Parse:
contains VBZ ROOT
 +-- In IN prep
 |   +-- Figure NN pobj
 |       +-- 3 CD num
 +-- , , punct
 +-- module NN nsubj
 |   +-- Q1 CD num
 +-- executer NN dobj
 |   +-- an DT det
 |   +-- bound VBN partmod
 |   |   +-- service VB xcomp
 |   |       +-- to TO aux
 |   |       +-- t NN dobj
 |   |           +-- interface NN nn
 |   +-- and CC cc
 |   +-- listener NN conj
 |       +-- a DT det
 |       +-- bound VBN partmod
 |           +-- service VB xcomp
 |               +-- to TO aux
 |               +-- u NNP dobj
 |                   +-- interface VB nn
 +-- . . punct

31
Input: Module Q1 can generate replies and notifications to service interface t and requests to service interface u .
Parse:
generate VB ROOT
 +-- Q1 CD nsubj
 |   +-- Module NN amod
 +-- can MD aux
 +-- replies NNS dobj
 |   +-- and CC cc
 |   +-- notifications NNS conj
 +-- service VB xcomp
 |   +-- to TO aux
 |   +-- t NN dobj
 |       +-- interface NN nn
 |       +-- and CC cc
 |       +-- requests NNS conj
 |           +-- service VB infmod
 |               +-- to TO aux
 |               +-- u NNP dobj
 |                   +-- interface NN nn
 +-- . . punct

32
Input: Note that the service interface nt allows to access the network .
Parse:
Note VB ROOT
 +-- allows VBZ ccomp
 |   +-- that IN mark
 |   +-- interface NN nsubj
 |   |   +-- the DT det
 |   |   +-- service NN nn
 |   +-- nt RB neg
 |   +-- access VB xcomp
 |       +-- to TO aux
 |       +-- network NN dobj
 |           +-- the DT det
 +-- . . punct

33
Input: P1 Q1 P1 Q1 T1T1 t t t Figure 4
Parse:
P1 LS ROOT
 +-- Q1 CD dep
     +-- Figure NN dep
     |   +-- P1 CD num
     |   +-- t NN nn
     |       +-- Q1 CD num
     |       +-- t NN nn
     +-- 4 CD dep

34
Input: Similarly to executers , interceptors can be dynamically bound or unbound to a service interface .
Parse:
bound VBN ROOT
 +-- Similarly RB advmod
 |   +-- to IN prep
 |       +-- executers NNS pobj
 +-- , , punct
 +-- interceptors NNS nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- dynamically RB advmod
 +-- or CC cc
 +-- unbound JJ conj
 |   +-- to IN prep
 |       +-- interface NN pobj
 |           +-- a DT det
 |           +-- service NN nn
 +-- . . punct

35
Input: They are activated each time a request , a reply or a notification is issued to the service interface they are bound to .
Parse:
activated VBN ROOT
 +-- They PRP nsubjpass
 +-- are VBP auxpass
 +-- time NN dobj
 |   +-- each DT det
 |   +-- issued VBN rcmod
 |       +-- request NN nsubjpass
 |       |   +-- a DT det
 |       |   +-- , , punct
 |       |   +-- reply NN conj
 |       |   |   +-- a DT det
 |       |   +-- or CC cc
 |       |   +-- notification NN conj
 |       |       +-- a DT det
 |       +-- is VBZ auxpass
 |       +-- to IN prep
 |           +-- interface NN pobj
 |               +-- the DT det
 |               +-- service NN nn
 |               +-- bound VBN rcmod
 |                   +-- they PRP nsubjpass
 |                   +-- are VBP auxpass
 |                   +-- to TO prep
 +-- . . punct

36
Input: This is illustrated in Figure 4 .
Parse:
illustrated VBN ROOT
 +-- This DT nsubjpass
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- Figure NN pobj
 |       +-- 4 CD num
 +-- . . punct

37
Input: In the right part of the figure , the interceptor of the protocol module T1 is represented by a rounded box .
Parse:
represented VBN ROOT
 +-- In IN prep
 |   +-- part NN pobj
 |       +-- the DT det
 |       +-- right JJ amod
 |       +-- of IN prep
 |           +-- figure NN pobj
 |               +-- the DT det
 +-- , , punct
 +-- interceptor NN nsubjpass
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- module NN pobj
 |           +-- the DT det
 |           +-- protocol NN nn
 |           +-- T1 CD num
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- box NN pobj
 |       +-- a DT det
 |       +-- rounded JJ amod
 +-- . . punct

38
Input: The interceptor is bound to service interface t .
Parse:
bound VBN ROOT
 +-- interceptor NN nsubjpass
 |   +-- The DT det
 +-- is VBZ auxpass
 +-- service VB xcomp
 |   +-- to TO aux
 |   +-- t NN dobj
 |       +-- interface NN nn
 +-- . . punct

39
Input: The left part of the figure shows that an interceptor can be seen as an executer plus a listener .
Parse:
shows VBZ ROOT
 +-- part NN nsubj
 |   +-- The DT det
 |   +-- left JJ amod
 |   +-- of IN prep
 |       +-- figure NN pobj
 |           +-- the DT det
 +-- seen VBN ccomp
 |   +-- that IN mark
 |   +-- interceptor NN nsubjpass
 |   |   +-- an DT det
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- as IN prep
 |       +-- executer NN pobj
 |           +-- an DT det
 |           +-- plus CC cc
 |           +-- listener NN conj
 |               +-- a DT det
 +-- . . punct

40
Input: When P1 issues a request req to the service interface t , the executer interceptor of T1 is executed .
Parse:
executed VBN ROOT
 +-- req VBN advcl
 |   +-- When WRB advmod
 |   +-- issues NNS nsubj
 |   |   +-- P1 CD num
 |   |   +-- request NN dep
 |   |       +-- a DT det
 |   +-- to IN prep
 |       +-- t NN pobj
 |           +-- the DT det
 |           +-- interface NN nn
 |               +-- service NN nn
 +-- , , punct
 +-- interceptor NN nsubjpass
 |   +-- the DT det
 |   +-- executer NN nn
 |   +-- of IN prep
 |       +-- T1 CD pobj
 +-- is VBZ auxpass
 +-- . . punct

41
Input: Then , module T1 may forward a request req to the service interface t , where we can have req = req 1 .
Parse:
forward VB ROOT
 +-- Then RB advmod
 +-- , , punct
 +-- T1 CD nsubj
 |   +-- module NN nn
 +-- may MD aux
 +-- request NN dobj
 |   +-- a DT det
 |   +-- req VBN partmod
 |       +-- to IN prep
 |           +-- t NN pobj
 |               +-- the DT det
 |               +-- interface NN nn
 |               |   +-- service NN nn
 |               +-- , , punct
 |               +-- req VBN rcmod
 |                   +-- where WRB advmod
 |                   +-- we PRP nsubj
 |                   +-- can MD aux
 |                   +-- have VB aux
 |                   +-- = , punct
 |                   +-- req VBN dobj
 |                       +-- 1 CD num
 +-- . . punct

42
Input: When module Q1 issues a reply or a notification , a similar mechanism is used , except that this time the listener interceptor of T1 is executed .
Parse:
used VBN ROOT
 +-- issues VBZ advcl
 |   +-- When WRB advmod
 |   +-- Q1 CD nsubj
 |   |   +-- module NN nn
 |   +-- reply NN dobj
 |       +-- a DT det
 |       +-- or CC cc
 |       +-- notification NN conj
 |           +-- a DT det
 +-- , , punct
 +-- mechanism NN nsubjpass
 |   +-- a DT det
 |   +-- similar JJ amod
 +-- is VBZ auxpass
 +-- except IN prep
 |   +-- executed VBN pcomp
 |       +-- that IN mark
 |       +-- time NN nsubjpass
 |       |   +-- this DT det
 |       +-- interceptor NN nsubjpass
 |       |   +-- the DT det
 |       |   +-- listener NN nn
 |       |   +-- of IN prep
 |       |       +-- T1 CD pobj
 |       +-- is VBZ auxpass
 +-- . . punct

43
Input: Note that a protocol module Ti , that has an interceptor bound to a service interface , is able to modify requests , replies and notifications .
Parse:
Note VB ROOT
 +-- able JJ ccomp
 |   +-- that IN mark
 |   +-- Ti NNP nsubj
 |   |   +-- a DT det
 |   |   +-- protocol NN nn
 |   |   +-- module NN nn
 |   |   +-- , , punct
 |   |   +-- has VBZ rcmod
 |   |       +-- that WDT nsubj
 |   |       +-- interceptor NN dobj
 |   |           +-- an DT det
 |   |           +-- bound VBN partmod
 |   |               +-- to IN prep
 |   |                   +-- interface NN pobj
 |   |                       +-- a DT det
 |   |                       +-- service NN nn
 |   +-- is VBZ cop
 |   +-- modify VB xcomp
 |       +-- to TO aux
 |       +-- requests NNS dobj
 |           +-- , , punct
 |           +-- replies NNS conj
 |           +-- and CC cc
 |           +-- notifications NNS conj
 +-- . . punct

44
Input: Upon requests , if several interceptors are bound to the same service interface , they are executed in the order of binding .
Parse:
executed VBN ROOT
 +-- Upon IN prep
 |   +-- requests NNS pobj
 +-- , , punct
 +-- bound VBN advcl
 |   +-- if IN mark
 |   +-- interceptors NNS nsubjpass
 |   |   +-- several JJ amod
 |   +-- are VBP auxpass
 |   +-- to IN prep
 |       +-- interface NN pobj
 |           +-- the DT det
 |           +-- same JJ amod
 |           +-- service NN nn
 +-- they PRP nsubjpass
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- order NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- binding VBG pobj
 +-- . . punct

45
Input: Upon replies and notifications , the order is reversed. .
Parse:
reversed. JJ ROOT
 +-- Upon IN prep
 |   +-- replies NNS pobj
 |       +-- and CC cc
 |       +-- notifications NNS conj
 +-- , , punct
 +-- order NN nsubj
 |   +-- the DT det
 +-- is VBZ cop
 +-- . . punct
