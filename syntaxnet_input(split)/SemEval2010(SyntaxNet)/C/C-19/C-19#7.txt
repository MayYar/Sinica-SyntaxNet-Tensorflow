
1
Input: We have implemented an experimental service based protocol framework -LRB- called SAMOA -RRB- -LRB- 7 -RRB- .
Parse:
implemented VBN ROOT
 +-- We PRP nsubj
 +-- have VBP aux
 +-- framework NN dobj
 |   +-- an DT det
 |   +-- based VBN amod
 |   |   +-- experimental JJ dep
 |   |   +-- service NN dep
 |   +-- protocol NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- called VBN partmod
 |   |   +-- SAMOA NNP dep
 |   +-- -RRB- -RRB- punct
 |   +-- 7 CD dep
 +-- . . punct

2
Input: Our implementation is light weight
Parse:
weight NN ROOT
 +-- implementation NN nsubj
 |   +-- Our PRP$ poss
 +-- is VBZ cop
 +-- light JJ amod

3
Input: In this section , we describe the main two classes of our implementation
Parse:
describe VBP ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- classes NNS dobj
     +-- the DT det
     +-- main JJ amod
     +-- two CD num
     +-- of IN prep
         +-- implementation NN pobj
             +-- our PRP$ poss

4
Input: event based Protocol -LRB- encoding protocol modules -RRB- .
Parse:
Protocol NNP ROOT
 +-- event NN nn
 +-- based VBN amod
 +-- -LRB- -LRB- punct
 +-- modules NNS dep
 |   +-- protocol NN nn
 |       +-- encoding VBG nn
 +-- -RRB- -RRB- punct
 +-- . . punct

5
Input: Finally , we present an example protocol stack that we have implemented to validate the service based approach .
Parse:
present VBP ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- stack NN dobj
 |   +-- an DT det
 |   +-- example NN amod
 |   +-- protocol NN nn
 |   +-- implemented VBN rcmod
 |       +-- that IN dobj
 |       +-- we PRP nsubj
 |       +-- have VBP aux
 |       +-- validate VB xcomp
 |           +-- to TO aux
 |           +-- approach NN dobj
 |               +-- the DT det
 |               +-- based VBN amod
 |                   +-- service NN dep
 +-- . . punct

6
Input: The Service Class .
Parse:
Class NNP ROOT
 +-- The DT det
 +-- Service NNP nn
 +-- . . punct

7
Input: A Service object is characterized by the arguments of requests and the arguments of responses .
Parse:
characterized VBN ROOT
 +-- object NN nsubjpass
 |   +-- A DT det
 |   +-- Service NNP nn
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- arguments NNS pobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- requests NNS pobj
 |       +-- and CC cc
 |       +-- arguments NNS conj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- responses NNS pobj
 +-- . . punct

8
Input: A response is either a reply or a notification .
Parse:
reply NN ROOT
 +-- response NN nsubj
 |   +-- A DT det
 +-- is VBZ cop
 +-- either CC preconj
 +-- a DT det
 +-- or CC cc
 +-- notification NN conj
 |   +-- a DT det
 +-- . . punct

9
Input: A special argument , called message , determines the kind of interactions modeled by the response .
Parse:
determines VBZ ROOT
 +-- argument NN nsubj
 |   +-- A DT det
 |   +-- special JJ amod
 |   +-- , , punct
 |   +-- called VBN partmod
 |       +-- message NN dep
 +-- kind NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- interactions NNS pobj
 |           +-- modeled VBN partmod
 |               +-- by IN prep
 |                   +-- response NN pobj
 |                       +-- the DT det
 +-- . . punct

10
Input: A message represents a piece of information sent over the network .
Parse:
represents VBZ ROOT
 +-- message NN nsubj
 |   +-- A DT det
 +-- piece NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- information NN pobj
 |   +-- sent VBN partmod
 |       +-- over IN prep
 |           +-- network NN pobj
 |               +-- the DT det
 +-- . . punct

11
Input: When a protocol module issues a request , it can give a message as an argument .
Parse:
give VB ROOT
 +-- issues NNS advcl
 |   +-- When WRB advmod
 |   +-- module NN nsubj
 |   |   +-- a DT det
 |   |   +-- protocol NN nn
 |   +-- request NN dobj
 |       +-- a DT det
 +-- , , punct
 +-- it PRP nsubj
 +-- can MD aux
 +-- message NN dobj
 |   +-- a DT det
 +-- as IN prep
 |   +-- argument NN pobj
 |       +-- an DT det
 +-- . . punct

12
Input: The message can specify the listener that must handle the reply .
Parse:
specify VB ROOT
 +-- message NN nsubj
 |   +-- The DT det
 +-- can MD aux
 +-- listener NN dobj
 |   +-- the DT det
 |   +-- handle VB rcmod
 |       +-- that WDT nsubj
 |       +-- must MD aux
 |       +-- reply NN dobj
 |           +-- the DT det
 +-- . . punct

13
Input: When a protocol module issues a response to a service interface , a reply is issued if one of the arguments of the response is a message specifying a listener .
Parse:
issued VBN ROOT
 +-- issues VBZ advcl
 |   +-- When WRB advmod
 |   +-- module NN nsubj
 |   |   +-- a DT det
 |   |   +-- protocol NN nn
 |   +-- response NN dobj
 |       +-- a DT det
 |       +-- to IN prep
 |           +-- interface NN pobj
 |               +-- a DT det
 |               +-- service NN nn
 +-- , , punct
 +-- reply NN nsubjpass
 |   +-- a DT det
 +-- is VBZ auxpass
 +-- message NN advcl
 |   +-- if IN mark
 |   +-- one CD nsubj
 |   |   +-- of IN prep
 |   |       +-- arguments NNS pobj
 |   |           +-- the DT det
 |   |           +-- of IN prep
 |   |               +-- response NN pobj
 |   |                   +-- the DT det
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- specifying VBG partmod
 |       +-- listener NN dobj
 |           +-- a DT det
 +-- . . punct

14
Input: Otherwise , a notification is issued .
Parse:
issued VBN ROOT
 +-- Otherwise RB advmod
 +-- , , punct
 +-- notification NN nsubjpass
 |   +-- a DT det
 +-- is VBZ auxpass
 +-- . . punct

15
Input: Executers , listeners and interceptors are encoded as innerclasses of the Service class .
Parse:
encoded VBN ROOT
 +-- Executers NNS nsubjpass
 |   +-- , , punct
 |   +-- listeners NNS conj
 |   +-- and CC cc
 |   +-- interceptors NNS conj
 +-- are VBP auxpass
 +-- as IN prep
 |   +-- innerclasses NNS pobj
 |       +-- of IN prep
 |           +-- class NN pobj
 |               +-- the DT det
 |               +-- Service NNP nn
 +-- . . punct

16
Input: This allows to provide type safe protocol interactions .
Parse:
allows VBZ ROOT
 +-- This DT nsubj
 +-- provide VB xcomp
 |   +-- to TO aux
 |   +-- interactions NNS dobj
 |       +-- safe JJ amod
 |       |   +-- type NN npadvmod
 |       +-- protocol NN nn
 +-- . . punct

17
Input: For instance , executers can only be bound to the Service object , they belong to .
Parse:
bound VBN ROOT
 +-- For IN prep
 |   +-- instance NN pobj
 +-- , , punct
 +-- executers NNS nsubjpass
 +-- can MD aux
 +-- only RB advmod
 +-- be VB auxpass
 +-- to IN prep
 |   +-- object NN pobj
 |       +-- the DT det
 |       +-- Service NNP nn
 |       +-- , , punct
 |       +-- belong VBP rcmod
 |           +-- they PRP nsubj
 |           +-- to IN prep
 +-- . . punct

18
Input: Thus , the parameters passed to requests -LRB- that are verified statically -RRB- always correspond to the parameters accepted by the corresponding executers .
Parse:
passed VBD ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- parameters NNS nsubj
 |   +-- the DT det
 +-- correspond VBP advcl
 |   +-- to IN mark
 |   +-- requests NNS nsubj
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- verified VBN rcmod
 |   |   |   +-- that WDT nsubjpass
 |   |   |   +-- are VBP auxpass
 |   |   |   +-- statically RB advmod
 |   |   +-- -RRB- -RRB- punct
 |   +-- always RB advmod
 |   +-- to IN prep
 |       +-- parameters NNS pobj
 |           +-- the DT det
 |           +-- accepted VBN partmod
 |               +-- by IN prep
 |                   +-- executers NNS pobj
 |                       +-- the DT det
 |                       +-- corresponding VBG amod
 +-- . . punct

19
Input: The type of a Service object is determined by the type of the arguments of requests and responses .
Parse:
determined VBN ROOT
 +-- type NN nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- object NN pobj
 |           +-- a DT det
 |           +-- Service NNP nn
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- type NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- arguments NNS pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- requests NNS pobj
 |                       +-- and CC cc
 |                       +-- responses NNS conj
 +-- . . punct

20
Input: A Service object t is compatible with another Service object s if the type of the arguments of requests -LRB- and responses -RRB- of t is a subtype of the arguments of requests -LRB- and responses -RRB- of s .
Parse:
compatible JJ ROOT
 +-- t NN nsubj
 |   +-- A DT det
 |   +-- object NN nn
 |       +-- Service NN nn
 +-- is VBZ cop
 +-- with IN prep
 |   +-- object NN pobj
 |       +-- another DT det
 |       +-- Service NNP nn
 |       +-- s POS possessive
 +-- subtype NN advcl
 |   +-- if IN mark
 |   +-- type NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- arguments NNS pobj
 |   |           +-- the DT det
 |   |           +-- of IN prep
 |   |           |   +-- t NN pobj
 |   |           +-- -LRB- -LRB- punct
 |   |           +-- and CC cc
 |   |           +-- responses NNS conj
 |   |           +-- -RRB- -RRB- punct
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- arguments NNS pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- requests NNS pobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- and CC cc
 |                   +-- responses NNS conj
 |                   +-- -RRB- -RRB- punct
 |                   +-- of IN prep
 |                       +-- s CD pobj
 +-- . . punct

21
Input: In practice , if a protocol module Pi can issue a request to a protocol UDP , then it may also issue a request to TCP -LRB- compatible with UDP -RRB- due to the subtyping relation on parameters of communicating modules .
Parse:
issue VB ROOT
 +-- In IN prep
 |   +-- practice NN pobj
 +-- , , punct
 +-- issue VB advcl
 |   +-- if IN mark
 |   +-- module NN nsubj
 |   |   +-- a DT det
 |   |   +-- protocol NN nn
 |   |   +-- Pi NNP appos
 |   +-- can MD aux
 |   +-- request NN dobj
 |       +-- a DT det
 |       +-- to IN prep
 |           +-- UDP NNP pobj
 |               +-- a DT det
 |               +-- protocol NN nn
 +-- then RB advmod
 +-- it PRP nsubj
 +-- may MD aux
 +-- also RB advmod
 +-- request NN dobj
 |   +-- a DT det
 |   +-- to IN prep
 |       +-- due IN mwe
 |       +-- relation NN pobj
 |           +-- the DT det
 |           +-- subtyping VBG nn
 |           +-- on IN prep
 |               +-- parameters NNS pobj
 |                   +-- of IN prep
 |                       +-- communicating VBG pcomp
 |                           +-- modules NNS dobj
 +-- . . punct

22
Input: The Protocol Class .
Parse:
Class NNP ROOT
 +-- The DT det
 +-- Protocol NNP nn
 +-- . . punct

23
Input: A Protocol object consists of three sets of components , one set for each component type -LRB- a listener , an executer , and an interceptor -RRB- .
Parse:
consists VBZ ROOT
 +-- object NN nsubj
 |   +-- A DT det
 |   +-- Protocol NNP nn
 +-- of IN prep
 |   +-- sets NNS pobj
 |       +-- three CD num
 |       +-- of IN prep
 |       |   +-- components NNS pobj
 |       +-- , , punct
 |       +-- set NN appos
 |           +-- one CD num
 |           +-- for IN prep
 |               +-- type NN pobj
 |                   +-- each DT det
 |                   +-- component NN nn
 |                   +-- -LRB- -LRB- punct
 |                   +-- listener NN dep
 |                   |   +-- a DT det
 |                   |   +-- , , punct
 |                   |   +-- executer NN conj
 |                   |   |   +-- an DT det
 |                   |   +-- and CC cc
 |                   |   +-- interceptor NN conj
 |                   |       +-- an DT det
 |                   +-- -RRB- -RRB- punct
 +-- . . punct

24
Input: Protocol objects are characterized by names to retrieve them easily .
Parse:
characterized VBN ROOT
 +-- objects NNS nsubjpass
 |   +-- Protocol NN nn
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- names NNS pobj
 +-- retrieve VB xcomp
 |   +-- to TO aux
 |   +-- them PRP dobj
 |   +-- easily RB advmod
 +-- . . punct

25
Input: Moreover , we have added some features to bind and unbind all executers or interceptors to from the corresponding Service objects .
Parse:
added VBN ROOT
 +-- Moreover RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- have VBP aux
 +-- features NNS dobj
 |   +-- some DT det
 |   +-- bind VB infmod
 |       +-- to TO aux
 |       +-- and CC cc
 |       +-- unbind VB conj
 |       +-- executers NNS dobj
 |       |   +-- all DT det
 |       |   +-- or CC cc
 |       |   +-- interceptors NNS conj
 |       +-- to TO prep
 |       +-- from IN prep
 |           +-- objects NNS pobj
 |               +-- the DT det
 |               +-- corresponding VBG amod
 |               +-- Service NN nn
 +-- . . punct

26
Input: Protocol objects can be loaded to a stack dynamically .
Parse:
loaded VBN ROOT
 +-- objects NNS nsubjpass
 |   +-- Protocol NN nn
 +-- can MD aux
 +-- be VB auxpass
 +-- to IN prep
 |   +-- stack NN pobj
 |       +-- a DT det
 +-- dynamically RB advmod
 +-- . . punct

27
Input: All these features made it easy to implement dynamic replacement of network protocols .
Parse:
made VBD ROOT
 +-- features NNS nsubj
 |   +-- All PDT predet
 |   +-- these DT det
 +-- implement VB xcomp
 |   +-- it PRP nsubj
 |   +-- easy JJ dep
 |   +-- to TO aux
 |   +-- replacement NN dobj
 |       +-- dynamic JJ amod
 |       +-- of IN prep
 |           +-- protocols NNS pobj
 |               +-- network NN nn
 +-- . . punct

28
Input: Protocol Stack Implementation .
Parse:
Implementation NN ROOT
 +-- Protocol NNP nn
 +-- Stack NNP nn
 +-- . . punct

29
Input: To validate our ideas , we have developed an Adaptive Group Communication middleware , adopting both the service and the event based approaches .
Parse:
developed VBN ROOT
 +-- validate VB advcl
 |   +-- To TO aux
 |   +-- ideas NNS dobj
 |       +-- our PRP$ poss
 +-- , , punct
 +-- we PRP nsubj
 +-- have VBP aux
 +-- middleware NN dobj
 |   +-- an DT det
 |   +-- Communication NNP nn
 |       +-- Adaptive NNP nn
 |       +-- Group NNP nn
 +-- adopting VBG partmod
 |   +-- approaches NNS dobj
 |       +-- based VBN amod
 |           +-- service NN dep
 |               +-- both CC preconj
 |               +-- the DT det
 |               +-- and CC cc
 |               +-- event NN conj
 |                   +-- the DT det
 +-- . . punct

30
Input: Fig .
Parse:
Fig NNP ROOT
 +-- . . punct

31
Input: 6 shows the corresponding stacks of the AGC middleware .
Parse:
shows VBZ ROOT
 +-- 6 CD nsubj
 +-- stacks NNS dobj
 |   +-- the DT det
 |   +-- corresponding VBG amod
 |   +-- of IN prep
 |       +-- middleware NN pobj
 |           +-- the DT det
 |           +-- AGC NNP nn
 +-- . . punct

32
Input: Both stacks allow the Consensus and Atomic Broadcast protocols to be dynamically updated .
Parse:
allow VBP ROOT
 +-- stacks NNS nsubj
 |   +-- Both DT det
 +-- updated VBN xcomp
 |   +-- protocols NNS nsubjpass
 |   |   +-- the DT det
 |   |   +-- Consensus NNP nn
 |   |       +-- and CC cc
 |   |       +-- Broadcast NNP conj
 |   |           +-- Atomic NNP nn
 |   +-- to TO aux
 |   +-- be VB auxpass
 |   +-- dynamically RB advmod
 +-- . . punct

33
Input: The architecture of our middleware , shown in Fig .
Parse:
shown VBN ROOT
 +-- architecture NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- middleware NN pobj
 |           +-- our PRP$ poss
 +-- , , punct
 +-- in IN prep
 |   +-- Fig NNP pobj
 +-- . . punct

34
Input: 6 , builds on the group communication stack described in -LRB- 15 -RRB- .
Parse:
builds VBZ ROOT
 +-- 6 CD nsubj
 +-- , , punct
 +-- on IN prep
 |   +-- stack NN pobj
 |       +-- the DT det
 |       +-- group NN nn
 |       +-- communication NN nn
 |       +-- described VBN partmod
 |           +-- in IN prep
 |               +-- 15 CD pobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- -RRB- -RRB- punct
 +-- . . punct

35
Input: The UDP and RP2P modules provide respectively , unreliable and reliable point to point transport .
Parse:
provide VBP ROOT
 +-- modules NNS nsubj
 |   +-- The DT det
 |   +-- UDP NNP nn
 |       +-- and CC cc
 |       +-- RP2P CD conj
 +-- respectively RB advmod
 +-- , , punct
 +-- point NN dobj
 |   +-- unreliable JJ amod
 |   |   +-- and CC cc
 |   |   +-- reliable JJ conj
 |   +-- to IN prep
 |       +-- transport NN pobj
 |           +-- point VB nn
 +-- . . punct

36
Input: The FD module implements a failure detector ; we assume that it ensures the Stack 1 UDP1RP2P1 Repl CT1 1ABc .
Parse:
implements VBZ ROOT
 +-- module NN nsubj
 |   +-- The DT det
 |   +-- FD NNP nn
 +-- detector NN dobj
 |   +-- a DT det
 |   +-- failure NN nn
 +-- ; : punct
 +-- assume VBP parataxis
 |   +-- we PRP nsubj
 |   +-- ensures VBZ ccomp
 |       +-- that IN mark
 |       +-- it PRP nsubj
 |       +-- 1ABc CD dobj
 |           +-- the DT det
 |           +-- Stack NNP nn
 |           +-- UDP1RP2P1 CD num
 |           |   +-- 1 CD number
 |           +-- Repl NNP nn
 |           +-- CT1 NNP nn
 +-- . . punct

37
Input: Repl CT1 ABc.1 Network FD1 GM1 rp2p nt udp d f abcast consensus Stack 1 Repl CT1 1ABc .
Parse:
Network NNP ROOT
 +-- Repl NNP nn
 +-- CT1 NNP nn
 +-- ABc.1 NNP nn
 +-- GM1 NNP dep
 |   +-- FD1 NNP nn
 +-- rp2p CD dep
 |   +-- udp VB dep
 |       +-- nt RB neg
 |       +-- d NN dobj
 +-- consensus NN dep
 |   +-- f FW nn
 |   +-- abcast JJ amod
 +-- Stack NNP dep
 |   +-- 1 CD num
 +-- Repl NNP dep
 +-- CT1 CD dep
 +-- 1ABc CD dep
 +-- . . punct

38
Input: Repl ABc.1 UDP1 FD1 RP2P1 CT1 Network 1GM send deliver Figure 6
Parse:
send VB ROOT
 +-- Network NNP nsubj
 |   +-- Repl NNP nn
 |   +-- ABc.1 CD num
 |   +-- UDP1 NNP nn
 |   +-- FD1 CD num
 |   +-- RP2P1 CD num
 |   +-- CT1 NNP nn
 |   +-- 1GM CD dep
 +-- deliver VBP ccomp
     +-- Figure NN dobj
         +-- 6 CD num

39
Input: event based -LRB- right -RRB- properties of the 3S failure detector -LRB- 9 -RRB- .
Parse:
event NN ROOT
 +-- based VBN partmod
 |   +-- properties NNS dobj
 |       +-- -LRB- -LRB- punct
 |       +-- right JJ amod
 |       +-- -RRB- -RRB- punct
 |       +-- of IN prep
 |           +-- detector NN pobj
 |               +-- the DT det
 |               +-- 3S CD num
 |               +-- failure NN nn
 |               +-- -LRB- -LRB- punct
 |               +-- 9 CD dep
 |               +-- -RRB- -RRB- punct
 +-- . . punct

40
Input: The CT module provides a distributed consensus service using the ChandraToueg algorithm -LRB- 10 -RRB- .
Parse:
provides VBZ ROOT
 +-- module NN nsubj
 |   +-- The DT det
 |   +-- CT NNP nn
 +-- service NN dobj
 |   +-- a DT det
 |   +-- distributed VBN amod
 |   +-- consensus NN nn
 |   +-- using VBG partmod
 |       +-- algorithm NNP dobj
 |           +-- the DT det
 |           +-- ChandraToueg NNP nn
 |           +-- -LRB- -LRB- punct
 |           +-- 10 CD dep
 |           +-- -RRB- -RRB- punct
 +-- . . punct

41
Input: The ABc .
Parse:
ABc NNP ROOT
 +-- The DT det
 +-- . . punct

42
Input: module implements atomic broadcast a group communication primitive that delivers messages to all processes in the same order .
Parse:
broadcast VBD ROOT
 +-- atomic NN nsubj
 |   +-- module NN nn
 |       +-- implements VBZ amod
 +-- communication NN dobj
 |   +-- a DT det
 |   +-- group NN nn
 |   +-- primitive JJ amod
 |   +-- delivers VBZ rcmod
 |       +-- that IN nsubj
 |       +-- messages NNS dobj
 |       +-- to IN prep
 |       |   +-- processes NNS pobj
 |       |       +-- all DT det
 |       +-- in IN prep
 |           +-- order NN pobj
 |               +-- the DT det
 |               +-- same JJ amod
 +-- . . punct

43
Input: The GM module provides a group membership service that maintains consistent membership data among group members -LRB- see -LRB- 19 -RRB- for details -RRB- .
Parse:
provides VBZ ROOT
 +-- module NN nsubj
 |   +-- The DT det
 |   +-- GM NNP nn
 +-- service NN dobj
 |   +-- a DT det
 |   +-- group NN nn
 |   +-- membership NN nn
 |   +-- maintains VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- data NNS dobj
 |       |   +-- consistent JJ amod
 |       |   +-- membership NN nn
 |       |   +-- among IN prep
 |       |       +-- members NNS pobj
 |       |           +-- group NN nn
 |       +-- see VB parataxis
 |           +-- -LRB- -LRB- punct
 |           +-- 19 CD dobj
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- -RRB- -RRB- punct
 |           +-- for IN prep
 |           |   +-- details NNS pobj
 |           +-- -RRB- -RRB- punct
 +-- . . punct

44
Input: The Repl ABc .
Parse:
ABc NNP ROOT
 +-- The DT det
 +-- Repl NNP nn
 +-- . . punct

45
Input: and the Repl CT modules implement the replacement algorithms -LRB- 18 -RRB- for , respectively , the ABc .
Parse:
implement VB ROOT
 +-- and CC cc
 +-- modules NNS nsubj
 |   +-- the DT det
 |   +-- Repl NNP nn
 |   +-- CT NNP nn
 +-- algorithms NNS dobj
 |   +-- the DT det
 |   +-- replacement NN nn
 |   +-- 18 CD appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- , , punct
 |   +-- respectively RB advmod
 |   +-- ABc NNP pobj
 |       +-- the DT det
 +-- . . punct

46
Input: and the CT protocol modules .
Parse:
modules NNS ROOT
 +-- and CC cc
 +-- protocol NN nsubj
 |   +-- the DT det
 |   +-- CT NNP nn
 +-- . . punct

47
Input: Note that each arrow in the event based architecture represents an event .
Parse:
Note VB ROOT
 +-- represents VBZ ccomp
 |   +-- that IN mark
 |   +-- arrow NN nsubj
 |   |   +-- each DT det
 |   |   +-- in IN prep
 |   |       +-- architecture NN pobj
 |   |           +-- the DT det
 |   |           +-- based VBN amod
 |   |               +-- event NN dep
 |   +-- event NN dobj
 |       +-- an DT det
 +-- . . punct

48
Input: We do not name events in the figure for readability .
Parse:
name VB ROOT
 +-- We PRP nsubj
 +-- do VBP aux
 +-- not RB neg
 +-- events NNS dobj
 |   +-- in IN prep
 |       +-- figure NN pobj
 |           +-- the DT det
 |           +-- for IN prep
 |               +-- readability NN pobj
 +-- . . punct

49
Input: The left stack in Figure 6 shows the implementation of AGC with our service based framework .
Parse:
shows VBZ ROOT
 +-- stack NN nsubj
 |   +-- The DT det
 |   +-- left VBN amod
 |   +-- in IN prep
 |       +-- Figure NN pobj
 |           +-- 6 CD num
 +-- implementation NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- AGC NN pobj
 |   +-- with IN prep
 |       +-- framework NN pobj
 |           +-- our PRP$ poss
 |           +-- based VBN amod
 |               +-- service NN dep
 +-- . . punct

50
Input: The right stack shows the same implementation with an event based framework .
Parse:
shows VBZ ROOT
 +-- stack NN nsubj
 |   +-- The DT det
 |   +-- right JJ amod
 +-- implementation NN dobj
 |   +-- the DT det
 |   +-- same JJ amod
 |   +-- with IN prep
 |       +-- framework NN pobj
 |           +-- an DT det
 |           +-- based VBN amod
 |               +-- event NN dep
 +-- . . punct

51
Input: Performance Evaluation .
Parse:
Evaluation NNP ROOT
 +-- Performance NN nn
 +-- . . punct

52
Input: To evaluate the overhead of service interfaces , we compared performance of the serviceand event based implementations of the AGC middleware .
Parse:
compared VBD ROOT
 +-- evaluate VB advcl
 |   +-- To TO aux
 |   +-- overhead NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- interfaces NNS pobj
 |               +-- service NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- performance NN dobj
 |   +-- of IN prep
 |       +-- implementations NNS pobj
 |           +-- the DT det
 |           +-- based VBN amod
 |           |   +-- event NN dep
 |           |       +-- serviceand NN nn
 |           +-- of IN prep
 |               +-- middleware NN pobj
 |                   +-- the DT det
 |                   +-- AGC NNP nn
 +-- . . punct

53
Input: The latter implementation of AGC uses the Cactus protocol framework -LRB- 5 , 2 -RRB- .
Parse:
uses VBZ ROOT
 +-- implementation NN nsubj
 |   +-- The DT det
 |   +-- latter JJ amod
 |   +-- of IN prep
 |       +-- AGC NNP pobj
 +-- framework NN dobj
 |   +-- the DT det
 |   +-- Cactus NNP nn
 |   +-- protocol NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- 2 CD dep
 |   |   +-- 5 CD num
 |   |   +-- , , punct
 |   +-- -RRB- -RRB- punct
 +-- . . punct

54
Input: In our experiment , we compared the average latency of Atomic Broadcast -LRB- ABcast -RRB- , which is defined as follows .
Parse:
compared VBD ROOT
 +-- In IN prep
 |   +-- experiment NN pobj
 |       +-- our PRP$ poss
 +-- , , punct
 +-- we PRP nsubj
 +-- latency NN dobj
 |   +-- the DT det
 |   +-- average JJ amod
 |   +-- of IN prep
 |   |   +-- Broadcast NNP pobj
 |   |       +-- Atomic NNP nn
 |   |       +-- ABcast NNP appos
 |   |           +-- -LRB- -LRB- punct
 |   |           +-- -RRB- -RRB- punct
 |   +-- , , punct
 |   +-- defined VBN rcmod
 |       +-- which WDT nsubjpass
 |       +-- is VBZ auxpass
 |       +-- follows VBZ advcl
 |           +-- as IN mark
 +-- . . punct

55
Input: Consider a message m sent using ABcast .
Parse:
Consider VB ROOT
 +-- m NN dobj
 |   +-- a DT det
 |   +-- message NN nn
 |   +-- sent VBN partmod
 |       +-- using VBG xcomp
 |           +-- ABcast NNP dobj
 +-- . . punct

56
Input: We denote by ti -LRB- m -RRB- the time between the moment of sending m and the moment of delivering m on a machine -LRB- stack -RRB- i .
Parse:
denote VBP ROOT
 +-- We PRP nsubj
 +-- by IN prep
 |   +-- m LS pobj
 |       +-- ti NNS dep
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- time NN dobj
 |   +-- the DT det
 |   +-- between IN prep
 |   |   +-- moment NN pobj
 |   |       +-- the DT det
 |   |       +-- of IN prep
 |   |       |   +-- sending VBG pcomp
 |   |       |       +-- m NN dobj
 |   |       +-- and CC cc
 |   |       +-- moment NN conj
 |   |           +-- the DT det
 |   |           +-- of IN prep
 |   |               +-- delivering VBG pcomp
 |   |                   +-- m NN dobj
 |   |                   +-- on IN prep
 |   |                       +-- machine NN pobj
 |   |                           +-- a DT det
 |   |                           +-- -LRB- -LRB- punct
 |   |                           +-- stack NN dep
 |   |                           +-- -RRB- -RRB- punct
 |   +-- i PRP dep
 +-- . . punct

57
Input: We define the average latency of m as the average of ti -LRB- m -RRB- for all machines -LRB- stacks -RRB- i within a group of stacks .
Parse:
define VBP ROOT
 +-- We PRP nsubj
 +-- latency NN dobj
 |   +-- the DT det
 |   +-- average JJ amod
 |   +-- of IN prep
 |       +-- m NN pobj
 +-- as IN prep
 |   +-- average NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- ti NN pobj
 |       +-- -LRB- -LRB- punct
 |       +-- m NN dep
 |       +-- -RRB- -RRB- punct
 |       +-- for IN prep
 |       |   +-- machines NNS pobj
 |       |       +-- all DT det
 |       +-- stacks NNS dep
 |       +-- i PRP dep
 |           +-- within IN prep
 |               +-- group NN pobj
 |                   +-- a DT det
 |                   +-- of IN prep
 |                       +-- stacks NNS pobj
 +-- . . punct

58
Input: Performance tests have been made using a cluster of PCs running Red Hat Linux 7.2 , where each PC has a Pentium III 766 MHz processor and 128MB of RAM .
Parse:
made VBN ROOT
 +-- tests NNS nsubjpass
 |   +-- Performance NN nn
 +-- have VBP aux
 +-- been VBN auxpass
 +-- using VBG xcomp
 |   +-- cluster NN dobj
 |       +-- a DT det
 |       +-- of IN prep
 |       |   +-- PCs NNS pobj
 |       +-- running VBG partmod
 |           +-- Linux NNP dobj
 |               +-- Hat NNP nn
 |               |   +-- Red NNP nn
 |               +-- 7.2 CD num
 |               +-- , , punct
 |               +-- has VBZ rcmod
 |                   +-- where WRB advmod
 |                   +-- PC NN nsubj
 |                   |   +-- each DT det
 |                   +-- processor NN dobj
 |                       +-- a DT det
 |                       +-- III NNP nn
 |                       |   +-- Pentium NNP nn
 |                       +-- 766 CD num
 |                       +-- MHz NNP nn
 |                       +-- and CC cc
 |                       +-- 128MB CD conj
 |                           +-- of IN prep
 |                               +-- RAM NN pobj
 +-- . . punct

59
Input: All PCs are interconnected by a 100 Base TX duplex Ethernet hub .
Parse:
interconnected VBN ROOT
 +-- PCs NNS nsubjpass
 |   +-- All DT det
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- hub NN pobj
 |       +-- a DT det
 |       +-- duplex NN nn
 |       |   +-- Base NN nn
 |       |   |   +-- 100 CD num
 |       |   +-- TX NNP nn
 |       +-- Ethernet NNP nn
 +-- . . punct

60
Input: Our experiment has involved 7 machines -LRB- stacks -RRB- that ABcast messages of 4Mb under a constant load , where a load is a number of messages per second .
Parse:
involved VBN ROOT
 +-- experiment NN nsubj
 |   +-- Our PRP$ poss
 +-- has VBZ aux
 +-- machines NNS dobj
 |   +-- 7 CD num
 |   +-- -LRB- -LRB- punct
 |   +-- stacks NNS dep
 |   +-- -RRB- -RRB- punct
 |   +-- that IN prep
 |       +-- messages NNS pobj
 |           +-- ABcast NNP nn
 |           +-- of IN prep
 |           |   +-- 4Mb CD pobj
 |           +-- under IN prep
 |               +-- load NN pobj
 |                   +-- a DT det
 |                   +-- constant JJ amod
 |                   +-- , , punct
 |                   +-- number NN rcmod
 |                       +-- where WRB advmod
 |                       +-- load NN nsubj
 |                       |   +-- a DT det
 |                       +-- is VBZ cop
 |                       +-- a DT det
 |                       +-- of IN prep
 |                           +-- messages NNS pobj
 |                               +-- per IN prep
 |                                   +-- second NN pobj
 +-- . . punct

61
Input: In Figure 7 , we show the results of our experiment for different loads .
Parse:
show VBP ROOT
 +-- In IN prep
 |   +-- Figure NN pobj
 |       +-- 7 CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- results NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- experiment NN pobj
 |           +-- our PRP$ poss
 |           +-- for IN prep
 |               +-- loads NNS pobj
 |                   +-- different JJ amod
 +-- . . punct

62
Input: Latencies are shown on the vertical axis , while message loads are shown on the horizontal axis .
Parse:
shown VBN ROOT
 +-- Latencies NNS nsubjpass
 +-- are VBP auxpass
 +-- on IN prep
 |   +-- axis NN pobj
 |       +-- the DT det
 |       +-- vertical JJ amod
 +-- , , punct
 +-- shown VBN advcl
 |   +-- while IN mark
 |   +-- loads NNS nsubjpass
 |   |   +-- message NN nn
 |   +-- are VBP auxpass
 |   +-- on IN prep
 |       +-- axis NN pobj
 |           +-- the DT det
 |           +-- horizontal JJ amod
 +-- . . punct

63
Input: The solid line shows the results obtained with our service based framework .
Parse:
shows VBZ ROOT
 +-- line NN nsubj
 |   +-- The DT det
 |   +-- solid JJ amod
 +-- results NNS dobj
 |   +-- the DT det
 |   +-- obtained VBN partmod
 |       +-- with IN prep
 |           +-- framework NN pobj
 |               +-- our PRP$ poss
 |               +-- based VBN amod
 |                   +-- service NN dep
 +-- . . punct

64
Input: The dashed line shows the results obtained with the Cactus framework .
Parse:
shows VBZ ROOT
 +-- line NN nsubj
 |   +-- The DT det
 |   +-- dashed JJ amod
 +-- results NNS dobj
 |   +-- the DT det
 |   +-- obtained VBN partmod
 |       +-- with IN prep
 |           +-- framework NN pobj
 |               +-- the DT det
 |               +-- Cactus NNP nn
 +-- . . punct

65
Input: The 695 0 500 1000 1500 2000 10 20 30 40 50 60 70 80 90 100 Averagelatency -LRB- ms -RRB- Load -LRB- msg s -RRB- Service Based Framework Cactus Figure 7
Parse:
695 CD ROOT
 +-- The DT det
 +-- ms NNS dep
     +-- 90 CD num
     |   +-- 60 CD number
     |   |   +-- 0 CD dep
     |   |   +-- 500 CD number
     |   |   +-- 1000 CD number
     |   |   +-- 1500 CD number
     |   |   +-- 2000 CD dep
     |   |   +-- 10 CD number
     |   |   +-- 20 CD number
     |   |   +-- 30 CD quantmod
     |   |   +-- 40 CD number
     |   |   +-- 50 CD number
     |   +-- 70 CD number
     |   +-- 80 CD number
     +-- 100 CD num
     +-- Averagelatency NNP nn
     +-- -LRB- -LRB- punct
     +-- -RRB- -RRB- punct
     +-- Service NN dep
     |   +-- Load NN nn
     |   +-- -LRB- -LRB- punct
     |   +-- msg NNP nn
     |   +-- s NNP nn
     |   +-- -RRB- -RRB- punct
     |   +-- Based NNP prep
     |       +-- Cactus NNP pobj
     |           +-- Framework NNP nn
     +-- Figure NN dep
         +-- 7 CD num

66
Input: This can be explained as follows .
Parse:
explained VBN ROOT
 +-- This DT nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct

67
Input: Firstly , the servicebased framework provides a higher level abstraction , which has a small cost .
Parse:
provides VBZ ROOT
 +-- Firstly RB advmod
 +-- , , punct
 +-- framework NN nsubj
 |   +-- the DT det
 |   +-- servicebased VBN amod
 +-- abstraction NN dobj
 |   +-- a DT det
 |   +-- level NN nn
 |   |   +-- higher JJR amod
 |   +-- , , punct
 |   +-- has VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- cost NN dobj
 |           +-- a DT det
 |           +-- small JJ amod
 +-- . . punct

68
Input: Secondly , the AGC middleware was initially implemented and optimized for the event based Cactus framework .
Parse:
implemented VBN ROOT
 +-- Secondly RB advmod
 +-- , , punct
 +-- middleware NN nsubjpass
 |   +-- the DT det
 |   +-- AGC NNP nn
 +-- was VBD auxpass
 +-- initially RB advmod
 +-- and CC cc
 +-- optimized VBN conj
 |   +-- for IN prep
 |       +-- framework NN pobj
 |           +-- the DT det
 |           +-- based VBN amod
 |           |   +-- event NN dep
 |           +-- Cactus NNP nn
 +-- . . punct

69
Input: However , it is possible to optimize the AGC middleware for the service based framework. .
Parse:
possible JJ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- optimize VB xcomp
 |   +-- to TO aux
 |   +-- middleware NN dobj
 |       +-- the DT det
 |       +-- AGC NN nn
 |       +-- for IN prep
 |           +-- framework. NN pobj
 |               +-- the DT det
 |               +-- based VBN amod
 |                   +-- service NN dep
 +-- . . punct
