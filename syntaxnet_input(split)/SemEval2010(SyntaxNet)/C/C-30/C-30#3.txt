
1
Input: Our approach to high bandwidth data dissemination centers around the techniques depicted in Figure 1 .
Parse:
centers NNS ROOT
 +-- approach NN nsubj
 |   +-- Our PRP$ poss
 |   +-- to IN prep
 |       +-- dissemination NN pobj
 |           +-- bandwidth NN nn
 |           |   +-- high JJ amod
 |           +-- data NNS nn
 +-- around IN prep
 |   +-- techniques NNS pobj
 |       +-- the DT det
 |       +-- depicted VBN partmod
 |           +-- in IN prep
 |               +-- Figure NN pobj
 |                   +-- 1 CD num
 +-- . . punct

2
Input: First , we split the target data stream into blocks which are further subdivided into individual -LRB- typically packet sized -RRB- objects .
Parse:
split VBD ROOT
 +-- First RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- stream NN dobj
 |   +-- the DT det
 |   +-- target NN nn
 |   +-- data NNS nn
 +-- into IN prep
 |   +-- objects NNS pobj
 |       +-- blocks NNS amod
 |           +-- subdivided VBN rcmod
 |           |   +-- which WDT nsubjpass
 |           |   +-- are VBP auxpass
 |           |   +-- further RB advmod
 |           |   +-- into IN prep
 |           |       +-- individual JJ pobj
 |           +-- -LRB- -LRB- punct
 |           +-- sized JJ dep
 |           |   +-- typically RB advmod
 |           |   +-- packet NN npadvmod
 |           +-- -RRB- -RRB- punct
 +-- . . punct

3
Input: Depending on the requirements of the target applications , objects may be encoded -LRB- 17 , 26 -RRB- to make data recovery more efficient .
Parse:
encoded VBN ROOT
 +-- Depending VBG prep
 |   +-- on IN pcomp
 |       +-- requirements NNS pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- applications NNS pobj
 |                   +-- the DT det
 |                   +-- target NN nn
 +-- , , punct
 +-- objects NNS nsubjpass
 +-- may MD aux
 +-- be VB auxpass
 +-- 17 CD dobj
 |   +-- -LRB- -LRB- punct
 |   +-- , , punct
 |   +-- 26 CD appos
 |   +-- -RRB- -RRB- punct
 +-- make VB xcomp
 |   +-- to TO aux
 |   +-- efficient JJ xcomp
 |       +-- recovery NN nsubj
 |       |   +-- data NNS nn
 |       +-- more RBR advmod
 +-- . . punct

4
Input: Next , we purposefully disseminate disjoint objects 283 S A C Original data stream
Parse:
disseminate VBP ROOT
 +-- Next RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- purposefully RB advmod
 +-- objects NNS dobj
     +-- disjoint NN nn
     +-- 283 CD num
     +-- S IN prep
         +-- stream NN pobj
             +-- A DT det
             +-- Original JJ nn
             |   +-- C NNP nn
             +-- data NNS nn

5
Input: to different clients at a rate determined by the available bandwidth to each client .
Parse:
to IN ROOT
 +-- clients NNS pobj
 |   +-- different JJ amod
 +-- at IN prep
 |   +-- rate NN pobj
 |       +-- a DT det
 |       +-- determined VBN partmod
 |           +-- by IN prep
 |               +-- bandwidth NN pobj
 |                   +-- the DT det
 |                   +-- available JJ amod
 |                   +-- to IN prep
 |                       +-- client NN pobj
 |                           +-- each DT det
 +-- . . punct

6
Input: We use the equation based TFRC protocol to communicate among all nodes in the overlay in a congestion responsive and TCP friendly manner .
Parse:
use VBP ROOT
 +-- We PRP nsubj
 +-- protocol NN dobj
 |   +-- the DT det
 |   +-- based VBN amod
 |   |   +-- equation NN dep
 |   +-- TFRC NNP nn
 +-- communicate VB xcomp
 |   +-- to TO aux
 |   +-- among IN prep
 |   |   +-- nodes NNS pobj
 |   |       +-- all DT det
 |   |       +-- in IN prep
 |   |           +-- overlay NN pobj
 |   |               +-- the DT det
 |   +-- in IN prep
 |       +-- manner NN pobj
 |           +-- a DT det
 |           +-- responsive JJ amod
 |               +-- congestion NN npadvmod
 |               +-- and CC cc
 |               +-- friendly JJ conj
 |                   +-- TCP NNP npadvmod
 +-- . . punct

7
Input: Given the above techniques , data is spread across the overlay tree at a rate commensurate with the available bandwidth in the overlay tree .
Parse:
spread VBN ROOT
 +-- Given VBN prep
 |   +-- techniques NNS dep
 |       +-- the DT det
 |       +-- above JJ amod
 +-- , , punct
 +-- data NN nsubjpass
 +-- is VBZ auxpass
 +-- across IN prep
 |   +-- tree NN pobj
 |       +-- the DT det
 |       +-- overlay NN nn
 +-- at IN prep
 |   +-- rate NN pobj
 |       +-- a DT det
 |       +-- commensurate JJ amod
 |           +-- with IN prep
 |               +-- bandwidth NN pobj
 |                   +-- the DT det
 |                   +-- available JJ amod
 |                   +-- in IN prep
 |                       +-- tree NN pobj
 |                           +-- the DT det
 |                           +-- overlay NN nn
 +-- . . punct

8
Input: Our overall goal however is to deliver more bandwidth than would otherwise be available through any tree .
Parse:
is VBZ ROOT
 +-- goal NN nsubj
 |   +-- Our PRP$ poss
 |   +-- overall JJ amod
 +-- however RB advmod
 +-- deliver VB xcomp
 |   +-- to TO aux
 |   +-- bandwidth NN dobj
 |       +-- more JJR amod
 |       +-- available JJ dep
 |           +-- than IN mark
 |           +-- would MD aux
 |           +-- otherwise RB advmod
 |           +-- be VB cop
 |           +-- through IN prep
 |               +-- tree NN pobj
 |                   +-- any DT det
 +-- . . punct

9
Input: Thus , at this point , nodes require a scalable technique for locating and retrieving disjoint data from their peers .
Parse:
require VBP ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- at IN prep
 |   +-- point NN pobj
 |       +-- this DT det
 +-- nodes NNS nsubj
 +-- technique NN dobj
 |   +-- a DT det
 |   +-- scalable JJ amod
 |   +-- for IN prep
 |       +-- locating VBG pcomp
 |           +-- and CC cc
 |           +-- retrieving VBG conj
 |           +-- data NNS dobj
 |           |   +-- disjoint NN nn
 |           +-- from IN prep
 |               +-- peers NNS pobj
 |                   +-- their PRP$ poss
 +-- . . punct

10
Input: In essence , these perpendicular links across the overlay form a mesh to augment the bandwidth available through the tree .
Parse:
form NN ROOT
 +-- In IN prep
 |   +-- essence NN pobj
 +-- , , punct
 +-- links NNS nsubj
 |   +-- these DT det
 |   +-- perpendicular JJ amod
 |   +-- across IN prep
 |       +-- overlay NN pobj
 |           +-- the DT det
 +-- mesh NN dobj
 |   +-- a DT det
 |   +-- augment VB infmod
 |       +-- to TO aux
 |       +-- bandwidth NN dobj
 |           +-- the DT det
 |           +-- available JJ amod
 |               +-- through IN prep
 |                   +-- tree NN pobj
 |                       +-- the DT det
 +-- . . punct

11
Input: In Figure 1 , node D only has sufficient bandwidth to receive 3 objects per time unit from its parent .
Parse:
has VBZ ROOT
 +-- In IN prep
 |   +-- Figure NN pobj
 |       +-- 1 CD num
 +-- , , punct
 +-- D NN nsubj
 |   +-- node NN nn
 +-- only RB advmod
 +-- bandwidth NN dobj
 |   +-- sufficient JJ amod
 |   +-- receive VB infmod
 |       +-- to TO aux
 |       +-- objects NNS dobj
 |       |   +-- 3 CD num
 |       |   +-- per IN prep
 |       |       +-- unit NN pobj
 |       |           +-- time NN nn
 |       +-- from IN prep
 |           +-- parent NN pobj
 |               +-- its PRP$ poss
 +-- . . punct

12
Input: However , it is able to locate two peers , C and E , who are able to transmit missing data objects , in this example increasing delivered bandwidth from 3 objects per time unit to 6 data objects per time unit .
Parse:
able JJ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- locate VB xcomp
 |   +-- to TO aux
 |   +-- peers NNS dobj
 |   |   +-- two CD num
 |   |   +-- , , punct
 |   |   +-- C NNP appos
 |   |   |   +-- and CC cc
 |   |   |   +-- E NNP conj
 |   |   +-- able JJ rcmod
 |   |       +-- who WP nsubj
 |   |       +-- are VBP cop
 |   |       +-- transmit VB xcomp
 |   |           +-- to TO aux
 |   |           +-- objects NNS dobj
 |   |               +-- missing VBG amod
 |   |               +-- data NNS nn
 |   +-- , , punct
 |   +-- increasing VBG partmod
 |       +-- in IN prep
 |       |   +-- example NN pobj
 |       |       +-- this DT det
 |       +-- unit NN dobj
 |       |   +-- bandwidth NN nn
 |       |   |   +-- delivered VBN amod
 |       |   |   +-- from IN prep
 |       |   |       +-- objects NNS pobj
 |       |   |           +-- 3 CD num
 |       |   +-- per IN nn
 |       |       +-- time NN pobj
 |       +-- to IN prep
 |           +-- objects NNS pobj
 |               +-- 6 CD num
 |               +-- data NNS nn
 |               +-- per IN prep
 |                   +-- unit NN pobj
 |                       +-- time NN nn
 +-- . . punct

13
Input: Locating appropriate remote peers can not require global state or global communication .
Parse:
require VB ROOT
 +-- peers NNS nsubj
 |   +-- Locating VBG amod
 |   +-- appropriate JJ amod
 |   +-- remote JJ amod
 +-- can MD aux
 +-- not RB neg
 +-- state NN dobj
 |   +-- global JJ amod
 |   +-- or CC cc
 |   +-- communication NN conj
 |       +-- global JJ amod
 +-- . . punct

14
Input: Thus , we propose the periodic dissemination of changing , uniformly random subsets of global state to each overlay node once per configurable time period .
Parse:
propose VBP ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- dissemination NN dobj
 |   +-- the DT det
 |   +-- periodic JJ amod
 |   +-- of IN prep
 |       +-- changing VBG pcomp
 |           +-- , , punct
 |           +-- subsets NNS dobj
 |           |   +-- random JJ amod
 |           |   |   +-- uniformly RB advmod
 |           |   +-- of IN prep
 |           |   |   +-- state NN pobj
 |           |   |       +-- global JJ amod
 |           |   +-- to IN prep
 |           |       +-- node NN pobj
 |           |           +-- each DT det
 |           |           +-- overlay NN nn
 |           +-- per IN prep
 |               +-- once RB advmod
 |               +-- period NN pobj
 |                   +-- time NN nn
 |                       +-- configurable JJ amod
 +-- . . punct

15
Input: This random subset contains summary tickets of the objects available at a subset of the nodes in the system .
Parse:
contains VBZ ROOT
 +-- subset NN nsubj
 |   +-- This DT det
 |   +-- random JJ amod
 +-- tickets NNS dobj
 |   +-- summary NN nn
 |   +-- of IN prep
 |       +-- objects NNS pobj
 |           +-- the DT det
 |           +-- available JJ amod
 |               +-- at IN prep
 |                   +-- subset NN pobj
 |                       +-- a DT det
 |                       +-- of IN prep
 |                           +-- nodes NNS pobj
 |                               +-- the DT det
 |                               +-- in IN prep
 |                                   +-- system NN pobj
 |                                       +-- the DT det
 +-- . . punct

16
Input: Each node uses this information to request data objects from remote nodes that have significant divergence in object membership .
Parse:
uses VBZ ROOT
 +-- node NN nsubj
 |   +-- Each DT det
 +-- information NN dobj
 |   +-- this DT det
 +-- request VB xcomp
 |   +-- to IN aux
 |   +-- objects NNS dobj
 |   |   +-- data NNS nn
 |   +-- from IN prep
 |       +-- nodes NNS pobj
 |           +-- remote JJ amod
 |           +-- have VBP rcmod
 |               +-- that WDT nsubj
 |               +-- divergence NN dobj
 |                   +-- significant JJ amod
 |                   +-- in IN prep
 |                       +-- membership NN pobj
 |                           +-- object JJ amod
 +-- . . punct

17
Input: It then attempts to establish a number of these peering relationships with the goals of minimizing overlap in the objects received from each peer and maximizing the total useful bandwidth delivered to it .
Parse:
attempts VBZ ROOT
 +-- It PRP nsubj
 +-- then RB advmod
 +-- establish VB xcomp
 |   +-- to TO aux
 |   +-- number NN dobj
 |   |   +-- a DT det
 |   |   +-- of IN prep
 |   |       +-- relationships NNS pobj
 |   |           +-- these DT det
 |   |           +-- peering VBG amod
 |   +-- with IN prep
 |       +-- goals NNS pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- minimizing VBG pcomp
 |                   +-- overlap NN dobj
 |                   |   +-- in IN prep
 |                   |       +-- objects NNS pobj
 |                   |           +-- the DT det
 |                   |           +-- received VBN partmod
 |                   |               +-- from IN prep
 |                   |                   +-- peer NN pobj
 |                   |                       +-- each DT det
 |                   +-- and CC cc
 |                   +-- maximizing VBG conj
 |                       +-- bandwidth NN dobj
 |                           +-- the DT det
 |                           +-- total JJ amod
 |                           +-- useful JJ amod
 |                           +-- delivered VBN partmod
 |                               +-- to IN prep
 |                                   +-- it PRP pobj
 +-- . . punct

18
Input: In the remainder of this section , we provide brief background on each of the techniques that we employ as fundamental building blocks for our work .
Parse:
provide VBP ROOT
 +-- In IN prep
 |   +-- remainder NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- section NN pobj
 |               +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- background NN dobj
 |   +-- brief JJ amod
 |   +-- on IN prep
 |       +-- each DT pobj
 |           +-- of IN prep
 |               +-- techniques NNS pobj
 |                   +-- the DT det
 |                   +-- employ VBP rcmod
 |                       +-- that WDT dobj
 |                       +-- we PRP nsubj
 |                       +-- as IN prep
 |                           +-- blocks NNS pobj
 |                               +-- fundamental JJ amod
 |                               +-- building NN nn
 |                               +-- for IN prep
 |                                   +-- work NN pobj
 |                                       +-- our PRP$ poss
 +-- . . punct

19
Input: Section 3 then presents the details of the entire Bullet architecture .
Parse:
presents VBZ ROOT
 +-- Section NN nsubj
 |   +-- 3 CD num
 +-- then RB advmod
 +-- details NNS dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- architecture NN pobj
 |           +-- the DT det
 |           +-- entire JJ amod
 |           +-- Bullet NNP nn
 +-- . . punct

20
Input: 2.1 Data Encoding Depending on the type of data being distributed through the system , a number of data encoding schemes can improve system efficiency .
Parse:
improve VB ROOT
 +-- Encoding NNP nsubj
 |   +-- 2.1 CD num
 |   +-- Data NNP nn
 |   +-- Depending VBG prep
 |   |   +-- on IN pcomp
 |   |       +-- type NN pobj
 |   |           +-- the DT det
 |   |           +-- of IN prep
 |   |               +-- data NNS pobj
 |   |                   +-- distributed VBN partmod
 |   |                       +-- being VBG auxpass
 |   |                       +-- through IN prep
 |   |                           +-- system NN pobj
 |   |                               +-- the DT det
 |   +-- , , punct
 |   +-- number NN appos
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- schemes NNS pobj
 |               +-- encoding VBG nn
 |                   +-- data NNS nn
 +-- can MD aux
 +-- efficiency NN dobj
 |   +-- system NN nn
 +-- . . punct

21
Input: For instance , if multimedia data is being distributed to a set of heterogeneous receivers with variable bandwidth , MDC -LRB- 17 -RRB- allows receivers obtaining different subsets of the data to still maintain a usable multimedia stream .
Parse:
allows VBZ ROOT
 +-- For IN prep
 |   +-- instance NN pobj
 +-- , , punct
 +-- distributed VBN advcl
 |   +-- if IN mark
 |   +-- data NN nsubjpass
 |   |   +-- multimedia NN nn
 |   +-- is VBZ aux
 |   +-- being VBG auxpass
 |   +-- to IN prep
 |   |   +-- set NN pobj
 |   |       +-- a DT det
 |   |       +-- of IN prep
 |   |           +-- receivers NNS pobj
 |   |               +-- heterogeneous JJ amod
 |   +-- with IN prep
 |       +-- bandwidth NN pobj
 |           +-- variable JJ amod
 +-- MDC NNP nsubj
 |   +-- -LRB- -LRB- punct
 |   +-- 17 CD num
 |   +-- -RRB- -RRB- punct
 +-- maintain VB xcomp
 |   +-- receivers NNS nsubj
 |   |   +-- obtaining VBG partmod
 |   |       +-- subsets NNS dobj
 |   |           +-- different JJ amod
 |   |           +-- of IN prep
 |   |               +-- data NNS pobj
 |   |                   +-- the DT det
 |   +-- to TO aux
 |   +-- still RB advmod
 |   +-- stream NN dobj
 |       +-- a DT det
 |       +-- usable JJ amod
 |       +-- multimedia NN nn
 +-- . . punct

22
Input: For dissemination of a large file among a set of receivers , Erasure codes enable receivers not to focus on retrieving every transmitted data packet .
Parse:
enable VBP ROOT
 +-- For IN prep
 |   +-- dissemination NN pobj
 |       +-- of IN prep
 |           +-- file NN pobj
 |               +-- a DT det
 |               +-- large JJ amod
 |               +-- among IN prep
 |                   +-- set NN pobj
 |                       +-- a DT det
 |                       +-- of IN prep
 |                           +-- receivers NNS pobj
 +-- , , punct
 +-- codes NNS nsubj
 |   +-- Erasure NNP nn
 +-- receivers NNS dobj
 +-- focus VB xcomp
 |   +-- not RB neg
 |   +-- to TO aux
 |   +-- on IN prep
 |       +-- retrieving VBG pcomp
 |           +-- packet NN dobj
 |               +-- every DT det
 |               +-- transmitted VBN amod
 |               +-- data NNS nn
 +-- . . punct

23
Input: Rather , after obtaining a threshold minimum number of packets , receivers are able to decode the original data stream .
Parse:
able JJ ROOT
 +-- Rather RB advmod
 +-- , , punct
 +-- after IN prep
 |   +-- obtaining VBG pcomp
 |       +-- number NN dobj
 |           +-- a DT det
 |           +-- threshold NN nn
 |           +-- minimum JJ nn
 |           +-- of IN prep
 |               +-- packets NNS pobj
 +-- receivers NNS nsubj
 +-- are VBP cop
 +-- decode VB xcomp
 |   +-- to TO aux
 |   +-- stream NN dobj
 |       +-- the DT det
 |       +-- original JJ amod
 |       +-- data NNS nn
 +-- . . punct

24
Input: Of course , Bullet is amenable to a variety of other encoding schemes or even the null encoding scheme , where the original data stream is transmitted best effort through the system .
Parse:
amenable JJ ROOT
 +-- course RB advmod
 |   +-- Of RB advmod
 +-- , , punct
 +-- Bullet NNP nsubj
 +-- is VBZ cop
 +-- to IN prep
 |   +-- variety NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- schemes NNS pobj
 |               +-- other JJ amod
 |               +-- encoding VBG nn
 |               +-- or CC cc
 |               +-- scheme NN conj
 |                   +-- even RB advmod
 |                   +-- the DT det
 |                   +-- null NN amod
 |                   +-- encoding NN nn
 |                   +-- , , punct
 |                   +-- transmitted VBN rcmod
 |                       +-- where WRB advmod
 |                       +-- stream NN nsubjpass
 |                       |   +-- the DT det
 |                       |   +-- original JJ amod
 |                       |   +-- data NNS nn
 |                       +-- is VBZ auxpass
 |                       +-- effort NN dobj
 |                       |   +-- best JJS amod
 |                       +-- through IN prep
 |                           +-- system NN pobj
 |                               +-- the DT det
 +-- . . punct

25
Input: In this paper , we focus on the benefits of a special class of erasure correcting codes used to implement the digital fountain -LRB- 7 -RRB- approach .
Parse:
focus VBP ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- on IN prep
 |   +-- benefits NNS pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- approach NN pobj
 |               +-- class NN dep
 |               |   +-- a DT det
 |               |   +-- special JJ amod
 |               |   +-- of IN prep
 |               |   |   +-- erasure NN pobj
 |               |   +-- correcting VBG partmod
 |               |       +-- codes NNS dobj
 |               |           +-- used VBN partmod
 |               |               +-- implement VB xcomp
 |               |                   +-- to TO aux
 |               |                   +-- fountain NN dobj
 |               |                       +-- the DT det
 |               |                       +-- digital JJ amod
 |               +-- -LRB- -LRB- punct
 |               +-- 7 CD num
 |               +-- -RRB- -RRB- punct
 +-- . . punct

26
Input: Redundant Tornado -LRB- 26 -RRB- codes are created by performing XOR operations on a selected number of original data packets , and then transmitted along with the original data packets .
Parse:
created VBN ROOT
 +-- codes NNS nsubjpass
 |   +-- Tornado NNP nn
 |       +-- Redundant NNP nn
 |       +-- -LRB- -LRB- punct
 |       +-- 26 CD num
 |       +-- -RRB- -RRB- punct
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- performing VBG pcomp
 |       +-- operations NNS dobj
 |       |   +-- XOR NN nn
 |       +-- on IN prep
 |       |   +-- number NN pobj
 |       |       +-- a DT det
 |       |       +-- selected VBN amod
 |       |       +-- of IN prep
 |       |           +-- packets NNS pobj
 |       |               +-- original JJ amod
 |       |               +-- data NNS nn
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- then RB advmod
 |       +-- transmitted VBN conj
 |           +-- along RP prt
 |           +-- with IN prep
 |               +-- packets NNS pobj
 |                   +-- the DT det
 |                   +-- original JJ amod
 |                   +-- data NNS nn
 +-- . . punct

27
Input: Tornado codes require any -LRB- 1+ -RRB- k correctly received packets to reconstruct the original k data packets , with the typically low reception overhead -LRB- -RRB- of 0.03 ? 0.05 .
Parse:
require VBP ROOT
 +-- codes NNS nsubj
 |   +-- Tornado NNP nn
 +-- received VBD ccomp
 |   +-- 1+ LS nsubj
 |   |   +-- any DT det
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- k CD num
 |   +-- correctly RB advmod
 |   +-- packets NNS dobj
 |   |   +-- reconstruct VB infmod
 |   |       +-- to TO aux
 |   |       +-- packets NNS dobj
 |   |           +-- the DT det
 |   |           +-- original JJ amod
 |   |           +-- k CD nn
 |   |           +-- data NNS nn
 |   +-- , , punct
 |   +-- with IN prep
 |   |   +-- reception NN pobj
 |   |       +-- the DT det
 |   |       +-- low JJ amod
 |   |       |   +-- typically RB advmod
 |   |       +-- overhead RB advmod
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- -RRB- -RRB- punct
 |   |       +-- of IN prep
 |   |           +-- 0.03 CD pobj
 |   +-- ? . punct
 |   +-- 0.05 CD dobj
 +-- . . punct

28
Input: In return , they provide significantly faster encoding and decoding times .
Parse:
provide VBP ROOT
 +-- In IN prep
 |   +-- return NN pobj
 +-- , , punct
 +-- they PRP nsubj
 +-- encoding NN dobj
 |   +-- faster RBR amod
 |   |   +-- significantly RB advmod
 |   +-- and CC cc
 |   +-- times NNS conj
 |       +-- decoding VBG amod
 +-- . . punct

29
Input: Additionally , the decoding algorithm can run in real time , and the reconstruction process can start as soon as sufficiently many packets have arrived .
Parse:
run VB ROOT
 +-- Additionally RB advmod
 +-- , , punct
 +-- algorithm NN nsubj
 |   +-- the DT det
 |   +-- decoding VBG amod
 +-- can MD aux
 +-- in IN prep
 |   +-- time NN pobj
 |       +-- real JJ amod
 +-- and CC cc
 +-- start VB conj
 |   +-- process NN nsubj
 |   |   +-- the DT det
 |   |   +-- reconstruction NN nn
 |   +-- can MD aux
 |   +-- soon RB advmod
 |       +-- as RB advmod
 |       +-- arrived VBN ccomp
 |           +-- as IN mark
 |           +-- packets NNS nsubj
 |           |   +-- many JJ amod
 |           |       +-- sufficiently RB advmod
 |           +-- have VBP aux
 +-- . . punct

30
Input: Tornado codes require a predetermined stretch factor -LRB- n k , where n is the total number of encoded packets -RRB- , and their encoding time is proportional to n .
Parse:
require VBP ROOT
 +-- codes NNS nsubj
 |   +-- Tornado NNP nn
 +-- factor NN dobj
 |   +-- a DT det
 |   +-- predetermined JJ amod
 |   +-- stretch NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- n IN prep
 |   |   +-- k CD pobj
 |   |       +-- , , punct
 |   |       +-- number NN rcmod
 |   |           +-- where WRB advmod
 |   |           +-- n NNP nsubj
 |   |           +-- is VBZ cop
 |   |           +-- the DT det
 |   |           +-- total JJ amod
 |   |           +-- of IN prep
 |   |               +-- packets NNS pobj
 |   |                   +-- encoded VBN amod
 |   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- and CC cc
 +-- proportional JJ conj
 |   +-- time NN nsubj
 |   |   +-- their PRP$ poss
 |   |   +-- encoding VBG nn
 |   +-- is VBZ cop
 |   +-- to IN prep
 |       +-- n NNP pobj
 +-- . . punct

31
Input: LT codes -LRB- 25 -RRB- remove these two limitations , while maintaining a low reception overhead of 0.05 .
Parse:
remove VB ROOT
 +-- codes NNS nsubj
 |   +-- LT NNP nn
 |   +-- 25 CD appos
 |       +-- -LRB- -LRB- punct
 |       +-- -RRB- -RRB- punct
 +-- limitations NNS dobj
 |   +-- these DT det
 |   +-- two CD num
 +-- , , punct
 +-- maintaining VBG advcl
 |   +-- while IN mark
 |   +-- overhead NN dobj
 |       +-- a DT det
 |       +-- low JJ amod
 |       +-- reception NN nn
 |       +-- of IN prep
 |           +-- 0.05 CD pobj
 +-- . . punct

32
Input: 2.2 RanSub To address the challenge of locating disjoint content within the system , we use RanSub -LRB- 24 -RRB- , a scalable approach to distributing changing , uniform random subsets of global state to all nodes of an overlay tree .
Parse:
RanSub NNP ROOT
 +-- 2.2 CD num
 +-- address VB infmod
 |   +-- To TO aux
 |   +-- challenge NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- locating VBG pcomp
 |               +-- content NN dobj
 |               |   +-- disjoint NN nn
 |               +-- within IN prep
 |                   +-- system NN pobj
 |                       +-- the DT det
 +-- , , punct
 +-- use VBP dep
 |   +-- we PRP nsubj
 |   +-- RanSub NNP dobj
 |       +-- -LRB- -LRB- punct
 |       +-- 24 CD dep
 |       +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- approach NN appos
 |           +-- a DT det
 |           +-- scalable JJ amod
 |           +-- to IN prep
 |               +-- distributing VBG pcomp
 |                   +-- changing VBG partmod
 |                       +-- , , punct
 |                       +-- subsets NNS dobj
 |                           +-- uniform JJ amod
 |                           +-- random JJ amod
 |                           +-- of IN prep
 |                           |   +-- state NN pobj
 |                           |       +-- global JJ amod
 |                           +-- to IN prep
 |                               +-- nodes NNS pobj
 |                                   +-- all DT det
 |                                   +-- of IN prep
 |                                       +-- tree NN pobj
 |                                           +-- an DT det
 |                                           +-- overlay JJ amod
 +-- . . punct

33
Input: RanSub assumes the presence of some scalable mechanism for efficiently building and maintaining the underlying tree .
Parse:
assumes VBZ ROOT
 +-- RanSub NNP nsubj
 +-- presence NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- mechanism NN pobj
 |           +-- some DT det
 |           +-- scalable JJ amod
 |           +-- for IN prep
 |               +-- building VBG pcomp
 |                   +-- efficiently RB advmod
 |                   +-- and CC cc
 |                   +-- maintaining VBG conj
 |                       +-- tree NN dobj
 |                           +-- the DT det
 |                           +-- underlying VBG amod
 +-- . . punct

34
Input: A number of such techniques are described in -LRB- 1 , 18 , 21 , 24 , 34 -RRB- .
Parse:
described VBN ROOT
 +-- number NN nsubjpass
 |   +-- A DT det
 |   +-- of IN prep
 |       +-- techniques NNS pobj
 |           +-- such JJ amod
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- -LRB- -LRB- punct
 |   +-- 1 CD pobj
 |   |   +-- , , punct
 |   |   +-- 18 CD num
 |   |   +-- 21 CD num
 |   |   +-- 24 CD num
 |   |   +-- 34 CD num
 |   +-- -RRB- -RRB- punct
 +-- . . punct

35
Input: RanSub distributes random subsets of participating nodes throughout the tree using collect and distribute messages .
Parse:
distributes VBZ ROOT
 +-- RanSub NNP nsubj
 +-- subsets NNS dobj
 |   +-- random JJ amod
 |   +-- of IN prep
 |       +-- participating VBG pcomp
 |           +-- nodes NNS dobj
 |           |   +-- throughout IN prep
 |           |       +-- tree NN pobj
 |           |           +-- the DT det
 |           +-- using VBG partmod
 |               +-- collect VB ccomp
 |                   +-- and CC cc
 |                   +-- distribute VB conj
 |                   +-- messages NNS dobj
 +-- . . punct

36
Input: Collect messages start at the leaves and propagate up the tree , leaving state at each node along the path to the root .
Parse:
start VBP ROOT
 +-- messages NNS nsubj
 |   +-- Collect JJ nn
 +-- at IN prep
 |   +-- leaves NNS pobj
 |       +-- the DT det
 +-- and CC cc
 +-- propagate VB conj
 |   +-- up RP prt
 |   +-- tree NN dobj
 |   |   +-- the DT det
 |   +-- , , punct
 |   +-- leaving VBG partmod
 |       +-- state NN dobj
 |       +-- at IN prep
 |       |   +-- node NN pobj
 |       |       +-- each DT det
 |       +-- along IN prep
 |           +-- path NN pobj
 |               +-- the DT det
 |               +-- to IN prep
 |                   +-- root NN pobj
 |                       +-- the DT det
 +-- . . punct

37
Input: Distribute messages start at the root and travel down the tree , using the information left at the nodes during the previous collect round to distribute uniformly random subsets to all participants .
Parse:
start VBP ROOT
 +-- messages NNS nsubj
 |   +-- Distribute NN nn
 +-- at IN prep
 |   +-- root NN pobj
 |       +-- the DT det
 +-- and CC cc
 +-- travel VB conj
 |   +-- down RP prt
 |   +-- tree NN dobj
 |   |   +-- the DT det
 |   +-- , , punct
 |   +-- using VBG partmod
 |       +-- information NN dobj
 |       |   +-- the DT det
 |       |   +-- left VBN partmod
 |       |       +-- at IN prep
 |       |       |   +-- nodes NNS pobj
 |       |       |       +-- the DT det
 |       |       +-- during IN prep
 |       |           +-- round JJ pobj
 |       |               +-- the DT det
 |       |               +-- previous JJ amod
 |       |               +-- collect JJ amod
 |       +-- distribute VB xcomp
 |           +-- to TO aux
 |           +-- subsets NNS dobj
 |           |   +-- random JJ amod
 |           |       +-- uniformly RB advmod
 |           +-- to IN prep
 |               +-- participants NNS pobj
 |                   +-- all DT det
 +-- . . punct

38
Input: Using the collect and distribute messages , RanSub distributes a random subset of participants to each node once per epoch .
Parse:
distributes VBZ ROOT
 +-- Using VBG partmod
 |   +-- messages NNS dobj
 |       +-- the DT det
 |       +-- collect JJ amod
 |           +-- and CC cc
 |           +-- distribute VB conj
 +-- , , punct
 +-- RanSub NNP nsubj
 +-- subset NN dobj
 |   +-- a DT det
 |   +-- random JJ amod
 |   +-- of IN prep
 |       +-- participants NNS pobj
 +-- to IN prep
 |   +-- node NN pobj
 |       +-- each DT det
 +-- per IN prep
 |   +-- once RB advmod
 |   +-- epoch NN pobj
 +-- . . punct

39
Input: The lower bound on the length of an epoch is determined by the time it takes to propagate data up then back down the tree , or roughly twice the height of the tree .
Parse:
determined VBN ROOT
 +-- lower JJR nsubjpass
 |   +-- The DT det
 |   +-- bound VBN partmod
 |       +-- on IN prep
 |           +-- length NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- epoch NN pobj
 |                       +-- an DT det
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- time NN pobj
 |       +-- the DT det
 |       +-- takes VBZ rcmod
 |       |   +-- it PRP nsubj
 |       |   +-- propagate VB xcomp
 |       |       +-- to TO aux
 |       |       +-- data NNS dobj
 |       |       +-- up IN prep
 |       |       |   +-- then RB pcomp
 |       |       +-- down IN prep
 |       |           +-- back RB advmod
 |       |           +-- tree NN pobj
 |       |               +-- the DT det
 |       +-- , , punct
 |       +-- or CC cc
 |       +-- height NN conj
 |           +-- twice PDT num
 |           |   +-- roughly RB quantmod
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- tree NN pobj
 |                   +-- the DT det
 +-- . . punct

40
Input: For appropriately constructed trees , the minimum epoch length will grow with the logarithm of the number of participants , though this is not required for correctness .
Parse:
grow VB ROOT
 +-- For IN prep
 |   +-- trees NNS pobj
 |       +-- constructed VBN amod
 |           +-- appropriately RB advmod
 +-- , , punct
 +-- length NN nsubj
 |   +-- the DT det
 |   +-- minimum JJ amod
 |   +-- epoch NN nn
 +-- will MD aux
 +-- with IN prep
 |   +-- logarithm NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- number NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- participants NNS pobj
 +-- required VBN advcl
 |   +-- though IN mark
 |   +-- this DT nsubjpass
 |   +-- is VBZ auxpass
 |   +-- not RB neg
 |   +-- for IN prep
 |       +-- correctness NN pobj
 +-- . . punct

41
Input: As part of the distribute message , each participant sends a uniformly random subset of remote nodes , called a distribute set , down to its children .
Parse:
sends VBZ ROOT
 +-- As IN prep
 |   +-- part NN pobj
 |       +-- of IN prep
 |           +-- message NN pobj
 |               +-- the DT det
 |               +-- distribute JJ amod
 +-- , , punct
 +-- participant NN nsubj
 |   +-- each DT det
 +-- subset NN dobj
 |   +-- a DT det
 |   +-- uniformly JJ amod
 |   +-- random JJ amod
 |   +-- of IN prep
 |       +-- nodes NNS pobj
 |           +-- remote JJ amod
 +-- called VBD dep
 |   +-- distribute NN dobj
 |   |   +-- a DT det
 |   +-- set VBN dep
 |       +-- , , punct
 |       +-- down RB advmod
 |           +-- to IN prep
 |               +-- children NNS pobj
 |                   +-- its PRP$ poss
 +-- . . punct

42
Input: The contents of the distribute set are constructed using the collect set gathered during the previous collect phase .
Parse:
constructed VBN ROOT
 +-- contents NNS nsubjpass
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- distribute NN pobj
 |           +-- the DT det
 |           +-- set VBN partmod
 +-- are VBP auxpass
 +-- using VBG xcomp
 |   +-- collect NN dobj
 |       +-- the DT det
 |       +-- set VBN partmod
 |           +-- gathered VBN prt
 |           +-- during IN prep
 |               +-- phase NN pobj
 |                   +-- the DT det
 |                   +-- previous JJ amod
 |                   +-- collect JJ amod
 +-- . . punct

43
Input: During this phase , each participant sends a collect set consisting of a random subset of its descendant nodes up the tree to the root along with an estimate of its total number of descendants .
Parse:
sends VBZ ROOT
 +-- During IN prep
 |   +-- phase NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- participant NN nsubj
 |   +-- each DT det
 +-- collect NN dobj
 |   +-- a DT det
 |   +-- set VBN partmod
 |       +-- consisting VBG xcomp
 |           +-- of IN prep
 |           |   +-- subset NN pobj
 |           |       +-- a DT det
 |           |       +-- random JJ amod
 |           |       +-- of IN prep
 |           |           +-- nodes NNS pobj
 |           |               +-- its PRP$ poss
 |           |               +-- descendant NN amod
 |           +-- up RP prep
 |           |   +-- tree NN pobj
 |           |       +-- the DT det
 |           +-- to IN prep
 |               +-- root NN pobj
 |                   +-- the DT det
 |                   +-- along IN prep
 |                       +-- with IN pcomp
 |                           +-- estimate NN pobj
 |                               +-- an DT det
 |                               +-- of IN prep
 |                                   +-- number NN pobj
 |                                       +-- its PRP$ poss
 |                                       +-- total JJ amod
 |                                       +-- of IN prep
 |                                           +-- descendants NNS pobj
 +-- . . punct

44
Input: After the root receives all collect sets and the collect phase completes , the distribute phase begins again in a new epoch .
Parse:
begins VBZ ROOT
 +-- receives VBZ advcl
 |   +-- After IN mark
 |   +-- root NN nsubj
 |   |   +-- the DT det
 |   +-- sets NNS dobj
 |       +-- all DT det
 |       +-- collect VBP amod
 |       +-- and CC cc
 |       +-- completes NNS conj
 |           +-- phase NN nsubj
 |               +-- the DT det
 |               +-- collect JJ amod
 +-- , , punct
 +-- phase NN nsubj
 |   +-- the DT det
 |   +-- distribute NN nn
 +-- again RB advmod
 +-- in IN prep
 |   +-- epoch NN pobj
 |       +-- a DT det
 |       +-- new JJ amod
 +-- . . punct

45
Input: One of the key features of RanSub is the Compact operation .
Parse:
operation NN ROOT
 +-- One CD nsubj
 |   +-- of IN prep
 |       +-- features NNS pobj
 |           +-- the DT det
 |           +-- key JJ amod
 |           +-- of IN prep
 |               +-- RanSub NNP pobj
 +-- is VBZ cop
 +-- the DT det
 +-- Compact NNP nn
 +-- . . punct

46
Input: This is the process used to ensure that membership in a collect set propagated by a node to its parent is both random and uniformly representative of all members of the sub tree rooted at that node .
Parse:
random JJ ROOT
 +-- process NN nsubj
 |   +-- This DT nsubj
 |   +-- is VBZ cop
 |   +-- the DT det
 |   +-- used VBN partmod
 |       +-- ensure VB xcomp
 |           +-- to TO aux
 |           +-- membership NN dobj
 |           |   +-- that DT det
 |           +-- in IN prep
 |               +-- set NN pobj
 |                   +-- a DT det
 |                   +-- collect NN amod
 |                   +-- propagated VBN partmod
 |                       +-- by IN prep
 |                           +-- node NN pobj
 |                               +-- a DT det
 |                               +-- to IN prep
 |                                   +-- parent NN pobj
 |                                       +-- its PRP$ poss
 +-- is VBZ cop
 +-- both CC preconj
 +-- and CC cc
 +-- representative JJ conj
 |   +-- uniformly RB advmod
 +-- of IN prep
 |   +-- members NNS pobj
 |       +-- all DT det
 |       +-- of IN prep
 |           +-- tree NN pobj
 |               +-- the DT det
 |               +-- sub NN nn
 |               +-- rooted VBN partmod
 |                   +-- at IN prep
 |                       +-- node NN pobj
 |                           +-- that DT det
 +-- . . punct

47
Input: Compact takes multiple fixedsize subsets and the total population represented by each subset as input , and generates a new fixed size subset .
Parse:
takes VBZ ROOT
 +-- Compact NN nsubj
 +-- subsets NNS dobj
 |   +-- multiple JJ amod
 |   +-- fixedsize NN nn
 |   +-- and CC cc
 |   +-- population NN conj
 |       +-- the DT det
 |       +-- total JJ amod
 |       +-- represented VBN partmod
 |           +-- by IN prep
 |               +-- subset NN pobj
 |                   +-- each DT det
 |                   +-- as IN prep
 |                       +-- input NN pobj
 +-- , , punct
 +-- and CC cc
 +-- generates VBZ conj
 |   +-- subset NN dobj
 |       +-- a DT det
 |       +-- new JJ amod
 |       +-- size NN nn
 |           +-- fixed VBN amod
 +-- . . punct

48
Input: The 284 A CSC= -LRB- Cs -RRB- , CSD= -LRB- Ds -RRB- CSF= -LRB- Fs -RRB- , CSG= -LRB- Gs -RRB- CSB= -LRB- Bs , Cs , Ds -RRB- , CSE= -LRB- Es , Fs , Gs -RRB- B C E D GF B C A E D GF DSE= -LRB- As , Bs , Cs , Ds -RRB- DSB= -LRB- As , Es , Fs , Gs -RRB- DSG= -LRB- As , Bs , Cs , Ds , Es , Fs -RRB- DSD= -LRB- As , Bs , Cs , Es , Fs , Gs -RRB- DSF= -LRB- As , Bs , Cs , Ds , Es , Gs -RRB- DSC= -LRB- As , Bs , Ds , Es , Fs , Gs -RRB- Figure 2
Parse:
CSC= NN ROOT
 +-- The DT det
 +-- 284 CD num
 +-- A NNP nn
 +-- Cs NNS appos
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- Ds NNS appos
 |   +-- CSD= NNP nn
 |   +-- -LRB- -LRB- punct
 |   +-- -RRB- -RRB- punct
 +-- CSF= NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- Fs NNP dep
 |   +-- -RRB- -RRB- punct
 +-- CSG= NN dep
     +-- Ds NNS appos
     |   +-- -LRB- -LRB- punct
     |   +-- Gs NNP nn
     |   +-- -RRB- -RRB- punct
     |   +-- CSB= NNP nn
     |   +-- Bs NNS dep
     |   +-- , , punct
     |   +-- Cs NNS dep
     +-- , , punct
     +-- Fs NNP appos
     |   +-- CSE= NNP dep
     |   +-- -LRB- -LRB- punct
     |   +-- Es NNP nn
     |   +-- , , punct
     +-- D NNP appos
     |   +-- C NN nn
     |   |   +-- Gs FW nn
     |   |   +-- -RRB- -RRB- punct
     |   |   +-- B NNP nn
     |   +-- E NNP nn
     +-- GF , punct
     +-- DSE= NNP dep
         +-- A DT det
         |   +-- B NN nn
         |   +-- C NNP nn
         +-- D NN nn
         |   +-- E NN nn
         +-- GF FW nn
         +-- Ds NNS dep
             +-- -LRB- -LRB- punct
             +-- As IN goeswith
             +-- , , punct
             +-- Bs NNS dep
             +-- Cs NNS dep
             +-- -RRB- -RRB- punct
             +-- DSB= NNP dep
                 +-- -LRB- -LRB- punct
                 +-- As IN prep
                     +-- , , punct
                     +-- Es NNP conj
                     +-- Fs NNP conj
                     +-- Gs NFP conj
                     +-- -RRB- -RRB- punct
                     +-- DSG= NNP pobj
                         +-- -LRB- -LRB- punct
                         +-- As IN prep
                             +-- , , punct
                             +-- Bs NNS conj
                             +-- Cs NNS conj
                             +-- Ds NNS conj
                             +-- Es NNP conj
                             +-- Fs NFP punct
                             +-- -RRB- -RRB- punct
                             +-- DSD= NNP pobj
                                 +-- -LRB- -LRB- punct
                                 +-- As IN prep
                                     +-- , , punct
                                     +-- Bs NNS conj
                                     +-- Cs NNS conj
                                     +-- Es NNP conj
                                     +-- Fs NNP conj
                                     +-- Gs NFP conj
                                     +-- -RRB- -RRB- punct
                                     +-- DSF= NNP pobj
                                         +-- -LRB- -LRB- punct
                                         +-- Figure NN dep
                                             +-- As IN dep
                                             |   +-- , , punct
                                             |   +-- Bs NNS conj
                                             |   +-- Cs NNS conj
                                             |   +-- Ds NNS conj
                                             |   +-- Es NNP conj
                                             |   +-- Gs . conj
                                             |   +-- -RRB- -RRB- punct
                                             +-- DSC= NNP dep
                                             +-- -LRB- -LRB- punct
                                             +-- As IN mark
                                             +-- , , punct
                                             +-- Bs NNS nsubj
                                             |   +-- , , punct
                                             |   +-- Ds NNS conj
                                             |   +-- Es NNP conj
                                             |   +-- Fs NNP conj
                                             |   +-- Gs NFP conj
                                             |   +-- -RRB- -RRB- punct
                                             +-- 2 CD num

49
Input: The collect phase is shown on the left , where the collect sets are traveling up the overlay to the root .
Parse:
shown VBN ROOT
 +-- phase NN nsubjpass
 |   +-- The DT det
 |   +-- collect JJ amod
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- left NN pobj
 |       +-- the DT det
 |       +-- , , punct
 |       +-- traveling VBG rcmod
 |           +-- where WRB advmod
 |           +-- sets NNS nsubj
 |           |   +-- the DT det
 |           |   +-- collect NN amod
 |           +-- are VBP aux
 |           +-- up RP prep
 |           |   +-- overlay NN pobj
 |           |       +-- the DT det
 |           +-- to IN prep
 |               +-- root NN pobj
 |                   +-- the DT det
 +-- . . punct

50
Input: The distribute phase on the right shows the distribute sets traveling down the overlay to the leaf nodes .
Parse:
shows VBZ ROOT
 +-- phase NN nsubj
 |   +-- The DT det
 |   +-- distribute NN nn
 |   +-- on IN prep
 |       +-- right NN pobj
 |           +-- the DT det
 +-- sets NNS dobj
 |   +-- the DT det
 |   +-- distribute NN nn
 |   +-- traveling VBG partmod
 |       +-- down RP prep
 |       |   +-- overlay NN pobj
 |       |       +-- the DT det
 |       +-- to IN prep
 |           +-- nodes NNS pobj
 |               +-- the DT det
 |               +-- leaf NN nn
 +-- . . punct

51
Input: members of the resulting set are uniformly random representatives of the input subset members .
Parse:
representatives NNS ROOT
 +-- members NNS nsubj
 |   +-- of IN prep
 |       +-- set NN pobj
 |           +-- the DT det
 |           +-- resulting VBG amod
 +-- are VBP cop
 +-- uniformly RB advmod
 +-- random JJ amod
 +-- of IN prep
 |   +-- members NNS pobj
 |       +-- the DT det
 |       +-- input NN nn
 |       +-- subset NN nn
 +-- . . punct

52
Input: RanSub offers several ways of constructing distribute sets .
Parse:
offers VBZ ROOT
 +-- RanSub NNP nsubj
 +-- ways NNS dobj
 |   +-- several JJ amod
 |   +-- of IN prep
 |       +-- constructing VBG pcomp
 |           +-- sets NNS dobj
 |               +-- distribute NN nn
 +-- . . punct

53
Input: For our system , we choose the RanSub nondescendants option .
Parse:
choose VBP ROOT
 +-- For IN prep
 |   +-- system NN pobj
 |       +-- our PRP$ poss
 +-- , , punct
 +-- we PRP nsubj
 +-- option NN dobj
 |   +-- the DT det
 |   +-- RanSub NNP nn
 |   +-- nondescendants NNS nn
 +-- . . punct

54
Input: In this case , each node receives a random subset consisting of all nodes excluding its descendants .
Parse:
receives VBZ ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- node NN nsubj
 |   +-- each DT det
 +-- subset NN dobj
 |   +-- a DT det
 |   +-- random JJ amod
 |   +-- consisting VBG partmod
 |       +-- of IN prep
 |           +-- nodes NNS pobj
 |               +-- all DT det
 |               +-- excluding VBG prep
 |                   +-- descendants NNS pobj
 |                       +-- its PRP$ poss
 +-- . . punct

55
Input: This is appropriate for our download structure where descendants are expected to have less content than an ancestor node in most cases .
Parse:
appropriate JJ ROOT
 +-- This DT nsubj
 +-- is VBZ cop
 +-- for IN prep
 |   +-- structure NN pobj
 |       +-- our PRP$ poss
 |       +-- download NN nn
 |       +-- expected VBN rcmod
 |           +-- where WRB advmod
 |           +-- descendants NNS nsubjpass
 |           +-- are VBP auxpass
 |           +-- have VB xcomp
 |               +-- to TO aux
 |               +-- content JJ dobj
 |                   +-- less JJR amod
 |                   +-- than IN prep
 |                       +-- node NN pobj
 |                           +-- an DT det
 |                           +-- ancestor NN nn
 |                           +-- in IN prep
 |                               +-- cases NNS pobj
 |                                   +-- most JJS amod
 +-- . . punct

56
Input: A parent creates RanSub nondescendants distribute sets for each child by compacting collect sets from that child '' s siblings and its own distribute set .
Parse:
creates VBZ ROOT
 +-- parent NN nsubj
 |   +-- A DT det
 +-- distribute VBP ccomp
 |   +-- nondescendants NNS nsubj
 |   |   +-- RanSub NNP nn
 |   +-- sets NNS dobj
 |   |   +-- for IN prep
 |   |       +-- child NN pobj
 |   |           +-- each DT det
 |   +-- by IN prep
 |       +-- compacting VBG pcomp
 |           +-- sets NNS dobj
 |           |   +-- collect JJ amod
 |           +-- from IN prep
 |               +-- siblings NNS pobj
 |                   +-- child NN poss
 |                   |   +-- that DT det
 |                   |   +-- '' '' punct
 |                   |   +-- s POS possessive
 |                   +-- and CC cc
 |                   +-- distribute NN conj
 |                       +-- its PRP$ poss
 |                       +-- own JJ amod
 |                       +-- set VBN partmod
 +-- . . punct

57
Input: The result is a distribute set that contains a random subset representing all nodes in the tree except for those rooted at that particular child .
Parse:
distribute NN ROOT
 +-- result NN nsubj
 |   +-- The DT det
 +-- is VBZ cop
 +-- a DT det
 +-- set VBN partmod
 +-- contains VBZ rcmod
 |   +-- that WDT nsubj
 |   +-- subset NN dobj
 |   |   +-- a DT det
 |   |   +-- random JJ amod
 |   |   +-- representing VBG partmod
 |   |       +-- nodes NNS dobj
 |   |           +-- all DT det
 |   |           +-- in IN prep
 |   |               +-- tree NN pobj
 |   |                   +-- the DT det
 |   +-- except IN prep
 |       +-- for IN pcomp
 |           +-- those DT pobj
 |               +-- rooted VBN partmod
 |                   +-- at IN prep
 |                       +-- child NN pobj
 |                           +-- that DT det
 |                           +-- particular JJ amod
 +-- . . punct

58
Input: We depict an example of RanSub '' s collect distribute process in Figure 2 .
Parse:
depict VBP ROOT
 +-- We PRP nsubj
 +-- example NN dobj
 |   +-- an DT det
 |   +-- of IN prep
 |       +-- collect VB pcomp
 |           +-- RanSub NNP nsubj
 |           |   +-- '' '' punct
 |           |   +-- s POS possessive
 |           +-- process NN dobj
 |           |   +-- distribute NN nn
 |           +-- in IN prep
 |               +-- Figure NN pobj
 |                   +-- 2 CD num
 +-- . . punct

59
Input: In the figure , AS stands for node A '' s state .
Parse:
stands VBZ ROOT
 +-- In IN prep
 |   +-- figure NN pobj
 |       +-- the DT det
 +-- , , punct
 +-- AS IN nsubj
 +-- for IN prep
 |   +-- state NN pobj
 |       +-- A DT poss
 |           +-- node NN nn
 |           +-- '' '' punct
 |           +-- s POS possessive
 +-- . . punct

60
Input: 2.3 Informed Content Delivery Techniques Assuming we can enable a node to locate a peer with disjoint content using RanSub , we need a method for reconciling the differences in the data .
Parse:
need VBP ROOT
 +-- Assuming VBG partmod
 |   +-- Techniques NNPS nsubj
 |   |   +-- 2.3 CD num
 |   |   +-- Informed VBN amod
 |   |   +-- Content NNP nn
 |   |   +-- Delivery NNP nn
 |   +-- enable VB ccomp
 |       +-- we PRP nsubj
 |       +-- can MD aux
 |       +-- node NN dobj
 |           +-- a DT det
 |           +-- locate VB infmod
 |               +-- to TO aux
 |               +-- peer NN dobj
 |                   +-- a DT det
 |                   +-- with IN prep
 |                       +-- content NN pobj
 |                           +-- disjoint NN nn
 |                           +-- using VBG partmod
 |                               +-- RanSub NNP dobj
 +-- , , punct
 +-- we PRP nsubj
 +-- method NN dobj
 |   +-- a DT det
 |   +-- for IN prep
 |       +-- reconciling VBG pcomp
 |           +-- differences NNS dobj
 |               +-- the DT det
 |               +-- in IN prep
 |                   +-- data NNS pobj
 |                       +-- the DT det
 +-- . . punct

61
Input: Additionally , we require a bandwidth efficient method with low computational overhead .
Parse:
require VBP ROOT
 +-- Additionally RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- method NN dobj
 |   +-- a DT det
 |   +-- efficient JJ amod
 |   |   +-- bandwidth NN npadvmod
 |   +-- with IN prep
 |       +-- overhead NN pobj
 |           +-- low JJ amod
 |           +-- computational JJ amod
 +-- . . punct

62
Input: We chose to implement the approximate reconciliation techniques proposed in -LRB- 6 -RRB- for these tasks in Bullet .
Parse:
chose VBD ROOT
 +-- We PRP nsubj
 +-- implement VB xcomp
 |   +-- to TO aux
 |   +-- techniques NNS dobj
 |       +-- the DT det
 |       +-- approximate JJ amod
 |       +-- reconciliation NN nn
 |       +-- proposed VBN partmod
 |           +-- in IN prep
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- 6 CD pobj
 |           |   +-- -RRB- -RRB- punct
 |           +-- for IN prep
 |               +-- tasks NNS pobj
 |                   +-- these DT det
 |                   +-- in IN prep
 |                       +-- Bullet NNP pobj
 +-- . . punct

63
Input: To describe the content , nodes maintain working sets .
Parse:
maintain VBP ROOT
 +-- describe VB advcl
 |   +-- To TO aux
 |   +-- content NN dobj
 |       +-- the DT det
 +-- , , punct
 +-- nodes NNS nsubj
 +-- sets NNS dobj
 |   +-- working VBG nn
 +-- . . punct

64
Input: The working set contains sequence numbers of packets that have been successfully received by each node over some period of time .
Parse:
contains VBZ ROOT
 +-- set VBD nsubj
 |   +-- The DT det
 |   +-- working VBG nn
 +-- numbers NNS dobj
 |   +-- sequence NN nn
 |   +-- of IN prep
 |   |   +-- packets NNS pobj
 |   +-- received VBN rcmod
 |       +-- that WDT nsubjpass
 |       +-- have VBP aux
 |       +-- been VBN auxpass
 |       +-- successfully RB advmod
 |       +-- by IN prep
 |       |   +-- node NN pobj
 |       |       +-- each DT det
 |       +-- over IN prep
 |           +-- period NN pobj
 |               +-- some DT det
 |               +-- of IN prep
 |                   +-- time NN pobj
 +-- . . punct

65
Input: We need the ability to quickly discern the resemblance between working sets from two nodes and decide whether a fine grained reconciliation is beneficial .
Parse:
need VBP ROOT
 +-- We PRP nsubj
 +-- ability NN dobj
 |   +-- the DT det
 |   +-- discern VB infmod
 |       +-- to TO aux
 |       +-- quickly RB advmod
 |       +-- resemblance NN dobj
 |       |   +-- the DT det
 |       |   +-- between IN prep
 |       |       +-- sets NNS pobj
 |       |           +-- working VBG nn
 |       |           +-- from IN prep
 |       |               +-- nodes NNS pobj
 |       |                   +-- two CD num
 |       +-- and CC cc
 |       +-- decide VB conj
 |           +-- beneficial JJ ccomp
 |               +-- whether IN mark
 |               +-- reconciliation NN nsubj
 |               |   +-- a DT det
 |               |   +-- fine JJ amod
 |               |   +-- grained VBN amod
 |               +-- is VBZ cop
 +-- . . punct

66
Input: Summary tickets , or min wise sketches -LRB- 5 -RRB- , serve this purpose .
Parse:
serve VBP ROOT
 +-- tickets NNS nsubj
 |   +-- Summary JJ amod
 |   +-- , , punct
 |   +-- or CC cc
 |   +-- sketches NNS conj
 |       +-- wise JJ amod
 |       |   +-- min $ npadvmod
 |       +-- -LRB- -LRB- punct
 |       +-- 5 CD dep
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- purpose NN dobj
 |   +-- this DT det
 +-- . . punct

67
Input: The main idea is to create a summary ticket that is an unbiased random sample of the working set .
Parse:
is VBZ ROOT
 +-- idea NN nsubj
 |   +-- The DT det
 |   +-- main JJ amod
 +-- create VB xcomp
 |   +-- to TO aux
 |   +-- ticket NN dobj
 |       +-- a DT det
 |       +-- summary NN nn
 |       +-- sample NN rcmod
 |           +-- that WDT nsubj
 |           +-- is VBZ cop
 |           +-- an DT det
 |           +-- unbiased JJ amod
 |           +-- random JJ amod
 |           +-- of IN prep
 |               +-- set NN pobj
 |                   +-- the DT det
 |                   +-- working VBG amod
 +-- . . punct

68
Input: A summary ticket is a small fixed size array .
Parse:
array NN ROOT
 +-- ticket NN nsubj
 |   +-- A DT det
 |   +-- summary NN nn
 +-- is VBZ cop
 +-- a DT det
 +-- small JJ amod
 +-- size NN nn
 |   +-- fixed VBN amod
 +-- . . punct

69
Input: Each entry in this array is maintained by a specific permutation function .
Parse:
maintained VBN ROOT
 +-- entry NN nsubjpass
 |   +-- Each DT det
 |   +-- in IN prep
 |       +-- array NN pobj
 |           +-- this DT det
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- function NN pobj
 |       +-- a DT det
 |       +-- specific JJ amod
 |       +-- permutation NN nn
 +-- . . punct

70
Input: The goal is to have each entry populated by the element with the smallest permuted value .
Parse:
is VBZ ROOT
 +-- goal NN nsubj
 |   +-- The DT det
 +-- have VB xcomp
 |   +-- to TO aux
 |   +-- populated VBN ccomp
 |       +-- entry NN nsubj
 |       |   +-- each DT det
 |       +-- by IN prep
 |           +-- element NN pobj
 |               +-- the DT det
 |               +-- with IN prep
 |                   +-- value NN pobj
 |                       +-- the DT det
 |                       +-- smallest JJS amod
 |                       +-- permuted VBN amod
 +-- . . punct

71
Input: To insert a new element into the summary ticket , we apply the permutation functions in order and update array values as appropriate .
Parse:
apply VBP ROOT
 +-- insert VB advcl
 |   +-- To TO aux
 |   +-- element NN dobj
 |   |   +-- a DT det
 |   |   +-- new JJ amod
 |   +-- into IN prep
 |       +-- ticket NN pobj
 |           +-- the DT det
 |           +-- summary NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- functions NNS dobj
 |   +-- the DT det
 |   +-- permutation NN nn
 +-- in IN prep
 |   +-- values NNS pobj
 |       +-- order NN nn
 |       |   +-- and CC cc
 |       |   +-- update NN conj
 |       +-- array NN amod
 +-- as IN prep
 |   +-- appropriate JJ pobj
 +-- . . punct

72
Input: The permutation function can be thought of as a specialized hash function .
Parse:
thought VBN ROOT
 +-- function NN nsubjpass
 |   +-- The DT det
 |   +-- permutation NN amod
 +-- can MD aux
 +-- be VB auxpass
 +-- of IN prep
 +-- as IN prep
 |   +-- function NN pobj
 |       +-- a DT det
 |       +-- specialized JJ amod
 |       +-- hash NN nn
 +-- . . punct

73
Input: The choice of permutation functions is important as the quality of the summary ticket depends directly on the randomness properties of the permutation functions .
Parse:
important JJ ROOT
 +-- choice NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- functions NNS pobj
 |           +-- permutation NN nn
 +-- is VBZ cop
 +-- depends VBZ advcl
 |   +-- as IN mark
 |   +-- quality NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- ticket NN pobj
 |   |           +-- the DT det
 |   |           +-- summary NN nn
 |   +-- directly RB advmod
 |   +-- on IN prep
 |       +-- properties NNS pobj
 |           +-- the DT det
 |           +-- randomness NN amod
 |           +-- of IN prep
 |               +-- functions NNS pobj
 |                   +-- the DT det
 |                   +-- permutation NN nn
 +-- . . punct

74
Input: Since we require them to have a low computational overhead , we use simple permutation functions , such as Pj -LRB- x -RRB- = -LRB- ax+b -RRB- mod|U| , where U is the universe size -LRB- dependant on the data encoding scheme -RRB- .
Parse:
use VBP ROOT
 +-- require VBP advcl
 |   +-- Since IN mark
 |   +-- we PRP nsubj
 |   +-- them PRP dobj
 |   +-- have VB xcomp
 |       +-- to TO aux
 |       +-- overhead NN dobj
 |           +-- a DT det
 |           +-- low JJ amod
 |           +-- computational JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- functions NNS dobj
 |   +-- simple JJ amod
 |   +-- permutation NN nn
 |   +-- , , punct
 |   +-- as IN prep
 |       +-- such JJ mwe
 |       +-- mod|U| NN pobj
 |           +-- ax+b SYM amod
 |           |   +-- Pj . dep
 |           |   +-- x SYM dep
 |           |   |   +-- -LRB- -LRB- punct
 |           |   |   +-- -RRB- -RRB- punct
 |           |   +-- = SYM dep
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- -RRB- -RRB- punct
 |           +-- , , punct
 |           +-- size NN rcmod
 |               +-- where WRB advmod
 |               +-- U NNP nsubj
 |               +-- is VBZ cop
 |               +-- the DT det
 |               +-- universe JJ amod
 |               +-- -LRB- -LRB- punct
 |               +-- dependant JJ dep
 |               |   +-- on IN prep
 |               |       +-- scheme NN pobj
 |               |           +-- the DT det
 |               |           +-- encoding VBG nn
 |               |               +-- data NNS nn
 |               +-- -RRB- -RRB- punct
 +-- . . punct

75
Input: To compute the resemblance between two working sets , we compute the number of summary ticket entries that have the same value , and divide it by the total number of entries in the summary tickets .
Parse:
compute VBP ROOT
 +-- compute VB advcl
 |   +-- To TO aux
 |   +-- resemblance NN dobj
 |       +-- the DT det
 |       +-- between IN prep
 |           +-- sets NNS pobj
 |               +-- two CD num
 |               +-- working VBG amod
 +-- , , punct
 +-- we PRP nsubj
 +-- number NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- entries NNS pobj
 |   |       +-- summary NN nn
 |   |       +-- ticket NN nn
 |   +-- have VBP rcmod
 |       +-- that WDT nsubj
 |       +-- value NN dobj
 |           +-- the DT det
 |           +-- same JJ amod
 +-- and CC cc
 +-- divide VB conj
 |   +-- it PRP dobj
 |   +-- by IN prep
 |       +-- number NN pobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- of IN prep
 |           |   +-- entries NNS pobj
 |           +-- in IN prep
 |               +-- tickets NNS pobj
 |                   +-- the DT det
 |                   +-- summary NN nn
 +-- . . punct

76
Input: Figure 3 shows the way the permutation functions are used to populate the summary ticket .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 3 CD num
 +-- way NN dobj
 |   +-- the DT det
 |   +-- used VBN rcmod
 |       +-- functions NNS nsubjpass
 |       |   +-- the DT det
 |       |   +-- permutation NN nn
 |       +-- are VBP auxpass
 |       +-- populate VB xcomp
 |           +-- to TO aux
 |           +-- ticket NN dobj
 |               +-- the DT det
 |               +-- summary NN nn
 +-- . . punct
