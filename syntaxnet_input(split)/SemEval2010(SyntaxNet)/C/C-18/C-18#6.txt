
1
Input: 325 Structure Function Example Infection , Infection Vector Executable is run Protection & Stealthiness Disable McAfee -LRB- Staying Alive -RRB- Propagation Send email to everyone in address book Goal Based Action DDoS www.sco.com Everything else , often called payload Figure 1
Parse:
run VBN ROOT
 +-- Infection NNP nsubjpass
 |   +-- 325 CD num
 |   +-- Structure NNP nn
 |   +-- Function NNP nn
 |   +-- Example NNP nn
 |   +-- , , punct
 |   +-- Executable NNP appos
 |       +-- Infection NNP nn
 |       +-- Vector NNP nn
 +-- is VBZ auxpass
 +-- Send VB ccomp
 |   +-- Propagation NN nsubj
 |   |   +-- McAfee NNP nn
 |   |       +-- Protection NNP nn
 |   |       |   +-- & CC cc
 |   |       |   +-- Stealthiness NNP conj
 |   |       +-- Disable NNP nn
 |   |       +-- Alive NNP appos
 |   |           +-- -LRB- -LRB- punct
 |   |           +-- Staying VBG amod
 |   |           +-- -RRB- -RRB- punct
 |   +-- email NN dobj
 |   +-- to IN prep
 |       +-- everyone NN pobj
 |           +-- in IN prep
 |               +-- Goal NNP pobj
 |                   +-- book NN nn
 |                       +-- address NN nn
 +-- Based VBD prep
     +-- DDoS NNPS pobj
         +-- Action NNP nn
         +-- www.sco.com ADD dep
         |   +-- else RB advmod
         |       +-- Everything NN npadvmod
         +-- , , punct
         +-- called VBN partmod
             +-- often RB advmod
             +-- Figure NN dep
                 +-- payload NN nn
                 +-- 1 CD num

2
Input: The presence of these attributes distinguishes swarm worms from otherwise regular worms , or other types of malware such as Zombies .
Parse:
distinguishes VBZ ROOT
 +-- presence NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- attributes NNS pobj
 |           +-- these DT det
 +-- worms NNS dobj
 |   +-- swarm NN amod
 +-- from IN prep
 |   +-- worms NNS pobj
 |       +-- regular JJ amod
 |       |   +-- otherwise RB advmod
 |       +-- , , punct
 |       +-- or CC cc
 |       +-- types NNS conj
 |           +-- other JJ amod
 |           +-- of IN prep
 |           |   +-- malware NN pobj
 |           +-- as IN prep
 |               +-- such JJ mwe
 |               +-- Zombies NNS pobj
 +-- . . punct

3
Input: In figure ? ? , the generic model of a worm is expanded to included these set of actions .
Parse:
expanded VBN ROOT
 +-- In IN prep
 |   +-- figure NN pobj
 +-- ? . punct
 +-- , , punct
 +-- model NN nsubjpass
 |   +-- the DT det
 |   +-- generic JJ amod
 |   +-- of IN prep
 |       +-- worm NN pobj
 |           +-- a DT det
 +-- is VBZ auxpass
 +-- included VBN xcomp
 |   +-- to TO aux
 |   +-- set NN dobj
 |       +-- these DT det
 |       +-- of IN prep
 |           +-- actions NNS pobj
 +-- . . punct

4
Input: Within this context then , a worm like Slammer can not be categorized as a swarm worm due to the fact that new instances of the worm do not coordinate their actions or share information .
Parse:
categorized VBN ROOT
 +-- Within IN prep
 |   +-- context NN pobj
 |       +-- this DT det
 +-- then RB advmod
 +-- , , punct
 +-- worm NN nsubjpass
 |   +-- a DT det
 |   +-- like IN prep
 |       +-- Slammer NNP pobj
 +-- can MD aux
 +-- not RB neg
 +-- be VB auxpass
 +-- as IN prep
 |   +-- worm NN pobj
 |       +-- a DT det
 |       +-- swarm NN nn
 +-- to IN prep
 |   +-- due IN mwe
 |   +-- fact NN pobj
 |       +-- the DT det
 |       +-- coordinate VB ccomp
 |           +-- that IN mark
 |           +-- instances NNS nsubj
 |           |   +-- new JJ amod
 |           |   +-- of IN prep
 |           |       +-- worm NN pobj
 |           |           +-- the DT det
 |           +-- do VBP aux
 |           +-- not RB neg
 |           +-- actions NNS dobj
 |               +-- their PRP$ poss
 |               +-- or CC cc
 |               +-- information NN conj
 |                   +-- share NN nn
 +-- . . punct

5
Input: On the other hand , Zombies and many other forms of DDoS , which at first glance may be consider swarm worms are not .
Parse:
are VBP ROOT
 +-- On IN prep
 |   +-- hand NN pobj
 |       +-- the DT det
 |       +-- other JJ amod
 +-- , , punct
 +-- Zombies NNS nsubj
 |   +-- and CC cc
 |   +-- forms NNS conj
 |   |   +-- many JJ amod
 |   |   +-- other JJ amod
 |   |   +-- of IN prep
 |   |       +-- DDoS NNP pobj
 |   +-- , , punct
 |   +-- consider VB rcmod
 |       +-- which WDT nsubj
 |       +-- at IN prep
 |       |   +-- glance NN pobj
 |       |       +-- first JJ amod
 |       +-- may MD aux
 |       +-- be VB auxpass
 |       +-- worms NNS dobj
 |           +-- swarm JJ amod
 +-- not RB neg
 +-- . . punct

6
Input: This is simply due to fact that in the case of Zombies , control is not distributed but rather centralized , and no emergent behaviors arise .
Parse:
is VBZ ROOT
 +-- This DT nsubj
 +-- simply RB advmod
 +-- to IN prep
 |   +-- due IN mwe
 |   +-- fact NN pobj
 |       +-- distributed VBN ccomp
 |           +-- that IN mark
 |           +-- in IN prep
 |           |   +-- case NN pobj
 |           |       +-- the DT det
 |           |       +-- of IN prep
 |           |           +-- Zombies NNS pobj
 |           +-- , , punct
 |           +-- control NN nsubjpass
 |           +-- is VBZ auxpass
 |           +-- not RB neg
 |           +-- rather RB cc
 |           |   +-- but CC cc
 |           +-- centralized JJ conj
 |           +-- and CC cc
 |           +-- arise VBP conj
 |               +-- behaviors NNS nsubj
 |                   +-- no DT det
 |                   +-- emergent NN nn
 +-- . . punct

7
Input: The latter , the potential emergence of intelligence or new behaviors is what makes swarm worms so potentially dangerous .
Parse:
is VBZ ROOT
 +-- latter JJ nsubj
 |   +-- The DT det
 +-- , , punct
 +-- emergence NN nsubj
 |   +-- the DT det
 |   +-- potential JJ amod
 |   +-- of IN prep
 |       +-- intelligence NN pobj
 |           +-- or CC cc
 |           +-- behaviors NNS conj
 |               +-- new JJ amod
 +-- makes VBZ ccomp
 |   +-- what WP nsubj
 |   +-- dangerous JJ xcomp
 |       +-- worms NNS nsubj
 |       |   +-- swarm JJ amod
 |       +-- so RB advmod
 |       +-- potentially RB advmod
 +-- . . punct

8
Input: Finally , when one considers the majority of recent disruptions to the Internet Infrastructure , and in light of our description of swarm attacks , then said disruptions can be easily categorized as precursors to truly swarm behavior .
Parse:
said VBD ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- considers VBZ advcl
 |   +-- when WRB advmod
 |   +-- one CD nsubj
 |   +-- majority NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- disruptions NNS pobj
 |   |           +-- recent JJ amod
 |   |           +-- to IN prep
 |   |               +-- Infrastructure NN pobj
 |   |                   +-- the DT det
 |   |                   +-- Internet NN nn
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- in IN conj
 |       +-- light NN pobj
 |           +-- of IN prep
 |               +-- description NN pobj
 |                   +-- our PRP$ poss
 |                   +-- of IN prep
 |                       +-- attacks NNS pobj
 |                           +-- swarm NN nn
 +-- then RB advmod
 +-- categorized VBN ccomp
 |   +-- disruptions NNS nsubjpass
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- easily RB advmod
 |   +-- as IN prep
 |       +-- precursors NNS pobj
 |           +-- swarm VB infmod
 |               +-- to TO aux
 |               +-- truly RB advmod
 |               +-- behavior NN dobj
 +-- . . punct

9
Input: Specifically , ? DDOS Large number of compromised hosts send useless packets requiring processing -LRB- Stacheldraht , http
Parse:
send VBP ROOT
 +-- Specifically RB advmod
 +-- , , punct
 +-- ? . punct
 +-- number NN nsubj
 |   +-- DDOS NNP nn
 |   +-- Large JJ amod
 |   +-- of IN prep
 |       +-- hosts NNS pobj
 |           +-- compromised VBN amod
 +-- packets NNS dobj
     +-- useless JJ amod
     +-- requiring VBG partmod
         +-- processing NN prep
             +-- Stacheldraht NNP pobj
                 +-- -LRB- -LRB- punct
                 +-- , , punct
                 +-- http ADD appos

10
Input: DDoS attacks are the early precursors to Swarm Attacks due to the large number of agents involved .
Parse:
precursors NNS ROOT
 +-- attacks NNS nsubj
 |   +-- DDoS NNP nn
 +-- are VBP cop
 +-- the DT det
 +-- early JJ amod
 +-- to IN prep
 |   +-- due IN mwe
 |   +-- number NN pobj
 |       +-- the DT det
 |       +-- large JJ amod
 |       +-- of IN prep
 |           +-- agents NNS pobj
 |               +-- involved VBN partmod
 +-- . . punct

11
Input: ? Code Red CrV1 , Code Red II , Nimbda Exhibit early notions of swarm attacks , including a backdoor communication channel .
Parse:
CrV1 NNP ROOT
 +-- ? , punct
 +-- Code NNP dep
 +-- Red NNP amod
 +-- , , punct
 +-- II NNP conj
 |   +-- Code NNP nn
 |   +-- Red NNP nn
 +-- Exhibit NNP appos
 |   +-- Nimbda NNP nn
 |   +-- notions NNS dep
 |       +-- early JJ amod
 |       +-- of IN prep
 |           +-- attacks NNS pobj
 |               +-- swarm NN nn
 |               +-- , , punct
 |               +-- including VBG prep
 |                   +-- channel NN pobj
 |                       +-- a DT det
 |                       +-- backdoor JJ amod
 |                       +-- communication NN nn
 +-- . . punct

12
Input: ? Staniford & Paxson in How to Own the Internet in Your Spare Time ? explore modifications to CrV1 , Code Red I , II with a swarm like type of behavior .
Parse:
Staniford NNP ROOT
 +-- ? , punct
 +-- & CC cc
 +-- Paxson NNP conj
 +-- in IN prep
 |   +-- Own VB pcomp
 |       +-- How WRB advmod
 |       +-- to TO aux
 |       +-- Internet NN dobj
 |       |   +-- the DT det
 |       +-- in IN prep
 |       |   +-- Time NN pobj
 |       |       +-- Your PRP$ poss
 |       |       +-- Spare NNP nn
 |       +-- ? . punct
 |       +-- explore VB dep
 |           +-- modifications NNS dobj
 |               +-- to IN prep
 |                   +-- CrV1 CD pobj
 +-- , , punct
 +-- I PRP appos
 |   +-- Code NNP nn
 |   +-- Red NNP nn
 |   +-- , , punct
 |   +-- II CD amod
 |       +-- with IN prep
 |           +-- swarm NN pobj
 |               +-- a DT det
 |               +-- like IN prep
 |                   +-- type NN pobj
 |                       +-- of IN prep
 |                           +-- behavior NN pobj
 +-- . . punct

13
Input: For example , they speculate on new worms which employ direct worm to worm communication , and employ programmable updates .
Parse:
speculate VBP ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- they PRP nsubj
 +-- on IN prep
 |   +-- worms NNS pobj
 |       +-- new JJ amod
 |       +-- employ VBP rcmod
 |           +-- which WDT nsubj
 |           +-- worm NN dobj
 |           |   +-- direct JJ amod
 |           +-- worm VB xcomp
 |           |   +-- to TO aux
 |           |   +-- communication NN dobj
 |           +-- , , punct
 |           +-- and CC cc
 |           +-- employ VB conj
 |               +-- updates NNS dobj
 |                   +-- programmable JJ amod
 +-- . . punct

14
Input: For example the Warhol worm , and Permutation Scanning -LRB- self coordinating -RRB- worms .
Parse:
worms NNS ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- worm NN nsubj
 |   +-- the DT det
 |   +-- Warhol NNP nn
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- Scanning NNP conj
 |       +-- Permutation NNP nn
 |       +-- -LRB- -LRB- punct
 |       +-- coordinating VBG dep
 |       |   +-- self NN nn
 |       +-- -RRB- -RRB- punct
 +-- . . punct

15
Input: 2.6 Swarm Worm
Parse:
Worm NN ROOT
 +-- 2.6 CD num
 +-- Swarm NNP nn

16
Input: For this reason , we selected as the first instance Structure Function Example Infection , Infection Vector Executable is run Protection & Stealthiness Disable McAfee -LRB- Staying Alive -RRB- Propagation Send email to everyone in address book Learning , Communication , Pheromones Flags -LRB- Test and Distributed Control if Worm is already present -RRB- Time bombs , Learning Algorithms , IRC channel Goal Based Action DDoS www.sco.com Everything else , often called payload Figure 2
Parse:
selected VBD ROOT
 +-- For IN prep
 |   +-- reason NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- as IN prep
     +-- instance NN pobj
         +-- the DT det
         +-- first JJ amod
         +-- run VBN rcmod
         |   +-- Infection NNP nsubjpass
         |   |   +-- Structure NNP nn
         |   |   +-- Function NNP nn
         |   |   +-- Example NNP nn
         |   |   +-- , , punct
         |   |   +-- Executable NNP appos
         |   |       +-- Infection NNP nn
         |   |       +-- Vector NNP nn
         |   +-- is VBZ auxpass
         |   +-- bombs NNS xcomp
         |       +-- Protection NNP nn
         |       |   +-- & CC cc
         |       |   +-- Stealthiness NNP conj
         |       |   +-- McAfee NNP dep
         |       |   |   +-- Disable NNP nn
         |       |   |   +-- Alive NNP appos
         |       |   |       +-- -LRB- -LRB- punct
         |       |   |       +-- Staying VBG amod
         |       |   |       +-- -RRB- -RRB- punct
         |       |   +-- Propagation NN dep
         |       |       +-- Send VB partmod
         |       |           +-- email NN dobj
         |       |           +-- to IN prep
         |       |           |   +-- everyone NN pobj
         |       |           |       +-- in IN prep
         |       |           |           +-- Learning NNP pobj
         |       |           |               +-- book NN nn
         |       |           |               |   +-- address NN nn
         |       |           |               +-- , , punct
         |       |           |               +-- Communication NNP conj
         |       |           |               +-- Test NNP conj
         |       |           |               |   +-- Flags NNPS dep
         |       |           |               |   |   +-- Pheromones NNP nn
         |       |           |               |   +-- -LRB- -LRB- punct
         |       |           |               +-- and CC cc
         |       |           |               +-- Control NNP conj
         |       |           |                   +-- Distributed VBD nn
         |       |           +-- present JJ advcl
         |       |               +-- if IN mark
         |       |               +-- Worm NNP nsubj
         |       |               +-- is VBZ cop
         |       |               +-- already RB advmod
         |       +-- -RRB- -RRB- punct
         |       +-- Time NNP nn
         +-- , , punct
         +-- Based VBD rcmod
             +-- Algorithms NNP nsubj
             |   +-- Learning NNP nn
             |   +-- , , punct
             |   +-- Goal NNP appos
             |       +-- channel NN nn
             |           +-- IRC NNP nn
             +-- DDoS NNP dobj
                 +-- Action NNP nn
                 +-- www.sco.com ADD dep
                 |   +-- else RB advmod
                 |       +-- Everything NN npadvmod
                 +-- , , punct
                 +-- called VBN partmod
                     +-- often RB advmod
                     +-- Figure NN dep
                         +-- payload NN nn
                         +-- 2 CD num

17
Input: The objective of this worm simply is to infect a host by sequentially attempting to login into the host using well known passwords -LRB- dictionary attack -RRB- , passwords that have been discovered previously by any member of the swarm , and random passwords .
Parse:
is VBZ ROOT
 +-- objective NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- worm NN pobj
 |           +-- this DT det
 +-- simply RB advmod
 +-- infect VB xcomp
 |   +-- to TO aux
 |   +-- host NN dobj
 |   |   +-- a DT det
 |   +-- by IN prep
 |       +-- attempting VBG pcomp
 |           +-- sequentially RB advmod
 |           +-- login VB xcomp
 |               +-- to TO aux
 |               +-- into IN prep
 |               |   +-- host NN pobj
 |               |       +-- the DT det
 |               +-- using VBG xcomp
 |                   +-- passwords NNS dobj
 |                       +-- known VBN amod
 |                       |   +-- well RB advmod
 |                       +-- -LRB- -LRB- punct
 |                       +-- attack NN dep
 |                       |   +-- dictionary JJ amod
 |                       +-- -RRB- -RRB- punct
 |                       +-- , , punct
 |                       +-- passwords NNS conj
 |                       |   +-- random JJ amod
 |                       +-- and CC cc
 +-- . . punct

18
Input: Once , a host is infected , the worm will create communication channels with both its known neighbors at that time , as well as with any offsprings that it successfully generates .
Parse:
create VB ROOT
 +-- infected VBN advcl
 |   +-- Once RB mark
 |   +-- , , punct
 |   +-- host NN nsubjpass
 |   |   +-- a DT det
 |   +-- is VBZ auxpass
 +-- , , punct
 +-- worm NN nsubj
 |   +-- the DT det
 +-- will MD aux
 +-- channels NNS dobj
 |   +-- communication NN nn
 |   +-- with IN prep
 |       +-- neighbors NNS pobj
 |           +-- both DT predet
 |           +-- its PRP$ poss
 |           +-- known VBN amod
 +-- at IN prep
 |   +-- time NN pobj
 |   |   +-- that DT det
 |   +-- , , punct
 |   +-- well RB cc
 |   |   +-- as RB advmod
 |   |   +-- as IN mwe
 |   +-- with IN conj
 |       +-- offsprings NNS pobj
 |           +-- any DT det
 |           +-- generates VBZ rcmod
 |               +-- that IN dobj
 |               +-- it PRP nsubj
 |               +-- successfully RB advmod
 +-- . . punct

19
Input: In this context a successful generation of an offspring means simply infecting a new host and replicating an exact copy of itself in such a host .
Parse:
means VBZ ROOT
 +-- In IN prep
 |   +-- context NN pobj
 |       +-- this DT det
 +-- generation NN nsubj
 |   +-- a DT det
 |   +-- successful JJ amod
 |   +-- of IN prep
 |       +-- offspring NN pobj
 |           +-- an DT det
 +-- infecting VBG ccomp
 |   +-- simply RB advmod
 |   +-- host NN dobj
 |   |   +-- a DT det
 |   |   +-- new JJ amod
 |   +-- and CC cc
 |   +-- replicating VBG conj
 |       +-- copy NN dobj
 |       |   +-- an DT det
 |       |   +-- exact JJ amod
 |       |   +-- of IN prep
 |       |       +-- itself PRP pobj
 |       +-- in IN prep
 |           +-- host NN pobj
 |               +-- such PDT predet
 |               +-- a DT det
 +-- . . punct

20
Input: We call this swarm worm the ZachiK worm in honor of one of its creators .
Parse:
call VBP ROOT
 +-- We PRP nsubj
 +-- swarm NN dobj
 |   +-- this DT det
 +-- worm VB dep
 |   +-- worm NN dobj
 |   |   +-- the DT det
 |   |   +-- ZachiK NNP nn
 |   +-- in IN prep
 |       +-- honor NN pobj
 |           +-- of IN prep
 |               +-- one CD pobj
 |                   +-- of IN prep
 |                       +-- creators NNS pobj
 |                           +-- its PRP$ poss
 +-- . . punct

21
Input: As it can be seen from this description , the ZachiK worm exhibits all of the elements described before .
Parse:
exhibits VBZ ROOT
 +-- seen VBN advcl
 |   +-- As IN mark
 |   +-- it PRP nsubjpass
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- from IN prep
 |       +-- description NN pobj
 |           +-- this DT det
 +-- , , punct
 +-- worm NN nsubj
 |   +-- the DT det
 |   +-- ZachiK NNP nn
 +-- all DT dobj
 |   +-- of IN prep
 |       +-- elements NNS pobj
 |           +-- the DT det
 |           +-- described VBN partmod
 |               +-- before RB advmod
 +-- . . punct

22
Input: In the following sections , we described in detail each one of the elements of the ZachiK worm .
Parse:
described VBD ROOT
 +-- In IN prep
 |   +-- sections NNS pobj
 |       +-- the DT det
 |       +-- following JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- in IN prep
 |   +-- detail NN pobj
 +-- one CD dobj
 |   +-- each DT det
 |   +-- of IN prep
 |       +-- elements NNS pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- worm NN pobj
 |                   +-- the DT det
 |                   +-- ZachiK NNP nn
 +-- . . punct

23
Input: 2.7 Infection Vector The infection vector used for ZachiK worm is the secure shell protocol SSH .
Parse:
protocol NN ROOT
 +-- vector NN nsubj
 |   +-- 2.7 CD num
 |   +-- Infection NNP nn
 |   +-- Vector NNP nn
 |   +-- infection NN nn
 |   |   +-- The DT det
 |   +-- used VBN partmod
 |       +-- for IN prep
 |           +-- worm NN pobj
 |               +-- ZachiK NNP nn
 +-- is VBZ cop
 +-- the DT det
 +-- secure JJ amod
 +-- shell NN nn
 +-- SSH NNP appos
 +-- . . punct

24
Input: A modified client which is capable of receiving passwords from the command line was written , and integrated with a script that supplies it with various passwords
Parse:
written VBN ROOT
 +-- client NN nsubjpass
 |   +-- A DT det
 |   +-- modified JJ amod
 |   +-- capable JJ rcmod
 |       +-- which WDT nsubj
 |       +-- is VBZ cop
 |       +-- of IN prep
 |           +-- receiving VBG pcomp
 |               +-- passwords NNS dobj
 |               +-- from IN prep
 |                   +-- line NN pobj
 |                       +-- the DT det
 |                       +-- command NN nn
 +-- was VBD auxpass
 +-- , , punct
 +-- and CC cc
 +-- integrated VBN conj
     +-- with IN prep
         +-- script NN pobj
             +-- a DT det
             +-- supplies VBZ rcmod
                 +-- that WDT nsubj
                 +-- it PRP dobj
                 +-- with IN prep
                     +-- passwords NNS pobj
                         +-- various JJ amod

25
Input: When a password is found for an appropriate target , the infection process begins .
Parse:
begins VBZ ROOT
 +-- found VBN advcl
 |   +-- When WRB advmod
 |   +-- password NN nsubjpass
 |   |   +-- a DT det
 |   +-- is VBZ auxpass
 |   +-- for IN prep
 |       +-- target NN pobj
 |           +-- an DT det
 |           +-- appropriate JJ amod
 +-- , , punct
 +-- process NN nsubj
 |   +-- the DT det
 |   +-- infection NN nn
 +-- . . punct

26
Input: After the root password of a host is discovered , the worm infects the target host and replicates itself .
Parse:
infects VBZ ROOT
 +-- discovered VBN advcl
 |   +-- After IN mark
 |   +-- password NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- root NN nn
 |   |   +-- of IN prep
 |   |       +-- host NN pobj
 |   |           +-- a DT det
 |   +-- is VBZ auxpass
 +-- , , punct
 +-- worm NN nsubj
 |   +-- the DT det
 +-- host NN dobj
 |   +-- the DT det
 |   +-- target NN nn
 +-- and CC cc
 +-- replicates VBZ conj
 |   +-- itself PRP dobj
 +-- . . punct

27
Input: The worm creates a new directory in the target host , copies the modified ssh client , the script , the communications servers , and the updated versions of data files -LRB- list of known passwords and a list of current neighbors -RRB- .
Parse:
creates VBZ ROOT
 +-- worm NN nsubj
 |   +-- The DT det
 +-- directory NN dobj
 |   +-- a DT det
 |   +-- new JJ amod
 |   +-- in IN prep
 |   |   +-- host NN pobj
 |   |       +-- the DT det
 |   |       +-- target NN nn
 |   +-- , , punct
 |   +-- copies NNS conj
 |   |   +-- client NN dobj
 |   |       +-- the DT det
 |   |       +-- modified VBN amod
 |   |       +-- ssh JJ amod
 |   +-- script NN conj
 |   |   +-- the DT det
 |   +-- servers NNS conj
 |   |   +-- the DT det
 |   |   +-- communications NNS nn
 |   +-- and CC cc
 |   +-- versions NNS conj
 |       +-- the DT det
 |       +-- updated VBN amod
 |       +-- of IN prep
 |       |   +-- files NNS pobj
 |       |       +-- data NNS nn
 |       +-- -LRB- -LRB- punct
 |       +-- list NN dep
 |       |   +-- of IN prep
 |       |   |   +-- passwords NNS pobj
 |       |   |       +-- known VBN amod
 |       |   +-- and CC cc
 |       |   +-- list NN conj
 |       |       +-- a DT det
 |       |       +-- of IN prep
 |       |           +-- neighbors NNS pobj
 |       |               +-- current JJ amod
 |       +-- -RRB- -RRB- punct
 +-- . . punct

28
Input: It then runs the modified script on the newly infected hosts , which spawns the communications server , notifies the neighbors and starts looking for new targets .
Parse:
runs VBZ ROOT
 +-- It PRP nsubj
 +-- then RB advmod
 +-- script NN dobj
 |   +-- the DT det
 |   +-- modified JJ amod
 |   +-- on IN prep
 |       +-- hosts NNS pobj
 |           +-- the DT det
 |           +-- infected JJ amod
 |           |   +-- newly RB advmod
 |           +-- , , punct
 |           +-- spawns VBZ rcmod
 |               +-- which WDT nsubj
 |               +-- server NN dobj
 |                   +-- the DT det
 |                   +-- communications NNS nn
 +-- , , punct
 +-- notifies VBZ conj
 |   +-- neighbors NNS dobj
 |       +-- the DT det
 +-- and CC cc
 +-- starts VBZ conj
 |   +-- looking VBG xcomp
 |       +-- for IN prep
 |           +-- targets NNS pobj
 |               +-- new JJ amod
 +-- . . punct

29
Input: It could be argued , correctly , that the ZachiK worm can be easily defeated by current countermeasure techniques present on most systems today , such as disallowing direct root logins from the network .
Parse:
argued VBN ROOT
 +-- It PRP nsubjpass
 +-- could MD aux
 +-- be VB auxpass
 +-- , , punct
 +-- correctly RB advmod
 +-- defeated VBN ccomp
 |   +-- that IN mark
 |   +-- worm NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- ZachiK NNP nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- easily RB advmod
 |   +-- by IN prep
 |       +-- techniques NNS pobj
 |           +-- current JJ amod
 |           +-- countermeasure NN nn
 |           +-- present JJ amod
 |           |   +-- on IN prep
 |           |   |   +-- systems NNS pobj
 |           |   |       +-- most JJS amod
 |           |   +-- today NN tmod
 |           +-- , , punct
 |           +-- as IN prep
 |               +-- such JJ mwe
 |               +-- disallowing VBG pcomp
 |                   +-- logins NNS dobj
 |                       +-- direct JJ amod
 |                       +-- root NN nn
 |                       +-- from IN prep
 |                           +-- network NN pobj
 |                               +-- the DT det
 +-- . . punct

30
Input: Within this context ZachiK can quickly be discarded as very simple and harmless worm that does not require further study .
Parse:
discarded VBN ROOT
 +-- Within IN prep
 |   +-- context NN pobj
 |       +-- this DT det
 +-- ZachiK NNP nsubjpass
 +-- can MD aux
 +-- quickly RB advmod
 +-- be VB auxpass
 +-- as IN prep
 |   +-- worm NN pobj
 |       +-- simple JJ amod
 |       |   +-- very RB advmod
 |       |   +-- and CC cc
 |       |   +-- harmless JJ conj
 |       +-- require VB rcmod
 |           +-- that WDT nsubj
 |           +-- does VBZ aux
 |           +-- not RB neg
 |           +-- study NN dobj
 |               +-- further JJ amod
 +-- . . punct

31
Input: However , the reader should consider the following
Parse:
consider VB ROOT
 +-- However RB advmod
 +-- , , punct
 +-- reader NN nsubj
 |   +-- the DT det
 +-- should MD aux
 +-- following VBG xcomp
     +-- the DT det

32
Input: For example , it could be programmed to guess common user names and their passwords ; gain 326 access to a system , then guess the root password or use other well know vulnerabilities to gain root privileges ; of ZachiK is that it incorporates all of the behaviors of a swarm worm including , but not restricted to , distributed control , communication amongst agents , and learning ; operating independently which lends itself naturally to parallel algorithms such as a parallel search of the IPV4 address space .
Parse:
programmed VBN ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- it PRP nsubjpass
 +-- could MD aux
 +-- be VB auxpass
 +-- guess VB xcomp
 |   +-- to TO aux
 |   +-- names NNS dobj
 |       +-- user NN nn
 |       |   +-- common JJ amod
 |       +-- and CC cc
 |       +-- passwords NNS conj
 |           +-- their PRP$ poss
 +-- ; : punct
 +-- gain VB parataxis
 |   +-- access NN dobj
 |   |   +-- 326 CD num
 |   |   +-- to IN prep
 |   |       +-- system NN pobj
 |   |           +-- a DT det
 |   +-- , , punct
 |   +-- then RB advmod
 |   +-- guess VB dep
 |       +-- password NN dobj
 |       |   +-- the DT det
 |       |   +-- root NN nn
 |       +-- or CC cc
 |       +-- use VB conj
 |           +-- vulnerabilities NNS dobj
 |           |   +-- other JJ amod
 |           |   +-- know VB amod
 |           |       +-- well RB advmod
 |           +-- gain VB xcomp
 |               +-- to TO aux
 |               +-- privileges NNS dobj
 |                   +-- root NN nn
 +-- is VBZ parataxis
 |   +-- of IN prep
 |   |   +-- ZachiK NNP pobj
 |   +-- incorporates VBZ ccomp
 |       +-- that IN mark
 |       +-- it PRP nsubj
 |       +-- all DT dobj
 |       |   +-- of IN prep
 |       |       +-- behaviors NNS pobj
 |       |           +-- the DT det
 |       |           +-- of IN prep
 |       |               +-- worm NN pobj
 |       |                   +-- a DT det
 |       |                   +-- swarm NN nn
 |       |                   +-- including VBG prep
 |       |                       +-- , , punct
 |       |                       +-- but CC cc
 |       |                       +-- restricted VBN conj
 |       |                       |   +-- not RB neg
 |       |                       |   +-- to IN prep
 |       |                       +-- control NN conj
 |       |                       |   +-- distributed VBN amod
 |       |                       +-- communication NN conj
 |       |                       |   +-- amongst IN prep
 |       |                       |       +-- agents NNS pobj
 |       |                       +-- and CC cc
 |       |                       +-- learning VBG conj
 |       +-- ; : punct
 |       +-- operating NN dep
 |           +-- independently RB advmod
 |           +-- lends VBZ rcmod
 |               +-- which WDT nsubj
 |               +-- itself PRP dobj
 |               +-- naturally RB advmod
 |               +-- to TO prep
 |                   +-- algorithms NNS pobj
 |                       +-- parallel JJ amod
 |                       +-- as IN prep
 |                           +-- such JJ mwe
 |                           +-- search NN pobj
 |                               +-- a DT det
 |                               +-- parallel JJ amod
 |                               +-- of IN prep
 |                                   +-- space NN pobj
 |                                       +-- the DT det
 |                                       +-- IPV4 CD num
 |                                       +-- address NN nn
 +-- . . punct

33
Input: Within this context , SLAMMER , does incorporate a parallel search capability of potentially susceptible addresses .
Parse:
incorporate VB ROOT
 +-- Within IN prep
 |   +-- context NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- SLAMMER NNP nsubj
 +-- does VBZ aux
 +-- capability NN dobj
 |   +-- a DT det
 |   +-- parallel JJ amod
 |   +-- search NN nn
 |   +-- of IN prep
 |       +-- addresses NNS pobj
 |           +-- susceptible JJ amod
 |               +-- potentially RB advmod
 +-- . . punct

34
Input: However , unlike ZachiK , the knowledge discovered by the search is never shared amongst the agents .
Parse:
shared VBN ROOT
 +-- However RB advmod
 +-- , , punct
 +-- unlike IN prep
 |   +-- ZachiK NNP pobj
 +-- knowledge NN nsubjpass
 |   +-- the DT det
 |   +-- discovered VBN partmod
 |       +-- by IN prep
 |           +-- search NN pobj
 |               +-- the DT det
 +-- is VBZ auxpass
 +-- never RB neg
 +-- amongst IN prep
 |   +-- agents NNS pobj
 |       +-- the DT det
 +-- . . punct

35
Input: For this reasons , and many others , one should not discard the potential of this new class of worms but rather embrace its study .
Parse:
discard VB ROOT
 +-- For IN prep
 |   +-- reasons NNS pobj
 |       +-- this DT det
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- others NNS conj
 |           +-- many JJ amod
 +-- , , punct
 +-- one PRP nsubj
 +-- should MD aux
 +-- not RB neg
 +-- potential NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- class NN pobj
 |           +-- this DT det
 |           +-- new JJ amod
 |           +-- of IN prep
 |               +-- worms NNS pobj
 +-- but CC cc
 +-- rather RB advmod
 +-- embrace VB conj
 |   +-- study NN dobj
 |       +-- its PRP$ poss
 +-- . . punct

36
Input: 2.8 Self Preservation In the case of ZachiK worm , the main self preservation techniques used are simply keeping the payload small .
Parse:
keeping VBG ROOT
 +-- In IN prep
 |   +-- Preservation NN npadvmod
 |   |   +-- 2.8 CD num
 |   |   +-- Self NN nn
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- worm NN pobj
 |               +-- ZachiK NNP nn
 +-- , , punct
 +-- techniques NNS nsubj
 |   +-- the DT det
 |   +-- main JJ amod
 |   +-- preservation NN nn
 |   |   +-- self NN nn
 |   +-- used VBN partmod
 +-- are VBP aux
 +-- simply RB advmod
 +-- payload NN dobj
 |   +-- the DT det
 +-- small JJ dep
 +-- . . punct

37
Input: In this context , this simply means restricting the number of passwords that an offspring inherits , masquerading worm messages as common http requests , and restricting the number of neighbors to a maximum of five -LRB- 5 -RRB- .
Parse:
means VBZ ROOT
 +-- In IN prep
 |   +-- context NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- this DT nsubj
 +-- simply RB advmod
 +-- restricting VBG ccomp
 |   +-- number NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |   |   +-- passwords NNS pobj
 |   |   +-- inherits NNS rcmod
 |   |       +-- that WDT dobj
 |   |       +-- offspring NN nsubj
 |   |           +-- an DT det
 |   +-- , , punct
 |   +-- masquerading VBG conj
 |   |   +-- messages NNS dobj
 |   |   |   +-- worm NN nn
 |   |   +-- as IN prep
 |   |       +-- requests NNS pobj
 |   |           +-- common JJ amod
 |   |           +-- http FW nn
 |   +-- and CC cc
 |   +-- restricting VBG conj
 |       +-- number NN dobj
 |       |   +-- the DT det
 |       |   +-- of IN prep
 |       |       +-- neighbors NNS pobj
 |       +-- to IN prep
 |           +-- maximum NN pobj
 |               +-- a DT det
 |               +-- of IN prep
 |                   +-- 5 CD pobj
 |                       +-- five CD num
 |                       +-- -LRB- -LRB- punct
 |                       +-- -RRB- -RRB- punct
 +-- . . punct

38
Input: 2.9 Propagation Choosing the next target -LRB- s -RRB- in an efficient matter requires thought .
Parse:
requires VBZ ROOT
 +-- Propagation NN nsubj
 |   +-- 2.9 CD num
 |   +-- Choosing VBG partmod
 |       +-- target NN dobj
 |       |   +-- the DT det
 |       |   +-- next JJ amod
 |       |   +-- -LRB- -LRB- punct
 |       |   +-- s VBZ dep
 |       |   +-- -RRB- -RRB- punct
 |       +-- in IN prep
 |           +-- matter NN pobj
 |               +-- an DT det
 |               +-- efficient JJ amod
 +-- thought VBN dobj
 +-- . . punct

39
Input: In the past , known and proposed worms , see -LRB- 5 -RRB- , have applied propagation techniques that varied .
Parse:
known VBN ROOT
 +-- In IN prep
 |   +-- past NN pobj
 |       +-- the DT det
 +-- , , punct
 +-- and CC cc
 +-- applied VBN conj
 |   +-- worms NNS nsubj
 |   |   +-- proposed VBN amod
 |   |   +-- , , punct
 |   |   +-- see VB dep
 |   |       +-- 5 CD dobj
 |   |           +-- -LRB- -LRB- punct
 |   |           +-- -RRB- -RRB- punct
 |   +-- have VBP aux
 |   +-- techniques NNS dobj
 |       +-- propagation NN nn
 |       +-- varied VBD rcmod
 |           +-- that WDT nsubj
 +-- . . punct

40
Input: These include
Parse:
include VBP ROOT
 +-- These DT nsubj

41
Input: In our test and simulation environments , we will apply a combination of locally biased and totally random selection of potential vulnerable hosts .
Parse:
apply VB ROOT
 +-- In IN prep
 |   +-- environments NNS pobj
 |       +-- our PRP$ poss
 |       +-- test NN nn
 |           +-- and CC cc
 |           +-- simulation NN conj
 +-- , , punct
 +-- we PRP nsubj
 +-- will MD aux
 +-- combination NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- selection NN pobj
 |           +-- biased VBN amod
 |           |   +-- locally RB advmod
 |           |   +-- and CC cc
 |           |   +-- random JJ conj
 |           |       +-- totally RB advmod
 |           +-- of IN prep
 |               +-- hosts NNS pobj
 |                   +-- potential JJ amod
 |                   +-- vulnerable JJ amod
 +-- . . punct

42
Input: However , due to the fact that the ZachiK worm is a swarm worm , address discovery -LRB- that is when non existent addresses are discovered -RRB- information will be shared amongst members of the swarm .
Parse:
is VBZ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- to IN prep
 |   +-- due IN mwe
 |   +-- fact NN pobj
 |       +-- the DT det
 |       +-- worm NN ccomp
 |           +-- that IN mark
 |           +-- worm NN nsubj
 |           |   +-- the DT det
 |           |   +-- ZachiK NNP nn
 |           +-- is VBZ cop
 |           +-- a DT det
 |           +-- swarm JJ nn
 |           +-- , , punct
 |           +-- discovery NN appos
 |               +-- address NN nn
 +-- -LRB- -LRB- punct
 +-- that DT nsubj
 +-- discovered VBN advcl
 |   +-- when WRB advmod
 |   +-- addresses NNS nsubjpass
 |   |   +-- existent NN amod
 |   |       +-- non IN dep
 |   +-- are VBP auxpass
 +-- -RRB- -RRB- punct
 +-- shared VBN ccomp
 |   +-- information NN nsubjpass
 |   +-- will MD aux
 |   +-- be VB auxpass
 |   +-- amongst IN prep
 |       +-- members NNS pobj
 |           +-- of IN prep
 |               +-- swarm NN pobj
 |                   +-- the DT det
 +-- . . punct

43
Input: The infection and propagation threads do the following set of activities repeatedly
Parse:
do VBP ROOT
 +-- threads NNS nsubj
 |   +-- The DT det
 |   +-- infection NN nn
 |       +-- and CC cc
 |       +-- propagation NN conj
 +-- set NN dobj
 |   +-- the DT det
 |   +-- following VBG amod
 |   +-- of IN prep
 |       +-- activities NNS pobj
 +-- repeatedly RB advmod

44
Input: Specifically , to choose an address , the instance may either
Parse:
may MD ROOT
 +-- Specifically RB advmod
 +-- , , punct
 +-- choose VB advcl
 |   +-- to TO aux
 |   +-- address NN dobj
 |       +-- an DT det
 +-- instance NN nsubj
 |   +-- the DT det
 +-- either RB advmod

45
Input: Password are either chosen from the list of known passwords or newly generated .
Parse:
chosen VBN ROOT
 +-- Password NN nsubjpass
 +-- are VBP auxpass
 +-- either CC preconj
 +-- from IN prep
 |   +-- list NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- passwords NNS pobj
 |               +-- known VBN amod
 |               +-- or CC cc
 |               +-- generated VBN conj
 |                   +-- newly RB advmod
 +-- . . punct

46
Input: When an infection of a valid address fails , it is added to a list of handoffs , which is sent to the neighbors to try to work on .
Parse:
added VBN ROOT
 +-- fails VBZ advcl
 |   +-- When WRB advmod
 |   +-- infection NN nsubj
 |       +-- an DT det
 |       +-- of IN prep
 |           +-- address NN pobj
 |               +-- a DT det
 |               +-- valid JJ amod
 +-- , , punct
 +-- it PRP nsubjpass
 +-- is VBZ auxpass
 +-- to IN prep
 |   +-- list NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- handoffs NNS pobj
 |               +-- , , punct
 |               +-- sent VBN rcmod
 |                   +-- which WDT nsubjpass
 |                   +-- is VBZ auxpass
 |                   +-- to IN prep
 |                   |   +-- neighbors NNS pobj
 |                   |       +-- the DT det
 |                   +-- try VB xcomp
 |                       +-- to TO aux
 |                       +-- work VB xcomp
 |                           +-- to TO aux
 |                           +-- on RP prt
 +-- . . punct

47
Input: 2.10 Learning , CommunicationandDistributed Control 2.10.1 Communication The concept of a swarm is based on transfer of information amongst neighbors , which relay their new incoming messages to their neighbors , and so on until every worm instance in the swarm is aware of these messages .
Parse:
Learning NNP ROOT
 +-- 2.10 CD num
 +-- , , punct
 +-- Communication NNP appos
 |   +-- CommunicationandDistributed NNP nn
 |   +-- Control NNP nn
 |   +-- 2.10.1 CD nn
 +-- based VBN rcmod
 |   +-- concept NN nsubjpass
 |   |   +-- The DT det
 |   |   +-- of IN prep
 |   |       +-- swarm NN pobj
 |   |           +-- a DT det
 |   +-- is VBZ auxpass
 |   +-- on IN prep
 |       +-- transfer NN pobj
 |       |   +-- of IN prep
 |       |   |   +-- information NN pobj
 |       |   +-- amongst IN prep
 |       |       +-- neighbors NNS pobj
 |       |           +-- , , punct
 |       |           +-- relay VBP rcmod
 |       |               +-- which WDT nsubj
 |       |               +-- messages NNS dobj
 |       |               |   +-- their PRP$ poss
 |       |               |   +-- new JJ amod
 |       |               |   +-- incoming JJ amod
 |       |               +-- to IN prep
 |       |                   +-- neighbors NNS pobj
 |       |                       +-- their PRP$ poss
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- on IN conj
 |           +-- so RB advmod
 |           +-- aware JJ pcomp
 |               +-- until IN mark
 |               +-- instance NN nsubj
 |               |   +-- every DT det
 |               |   +-- worm NN nn
 |               |   +-- in IN prep
 |               |       +-- swarm NN pobj
 |               |           +-- the DT det
 |               +-- is VBZ cop
 |               +-- of IN prep
 |                   +-- messages NNS pobj
 |                       +-- these DT det
 +-- . . punct

48
Input: There are two classes of messages
Parse:
are VBP ROOT
 +-- There EX expl
 +-- classes NNS nsubj
     +-- two CD num
     +-- of IN prep
         +-- messages NNS pobj

49
Input: The command messages are meant for an external user -LRB- a.k.a. , hackers and or crackers -RRB- to control the actions of the instances , and are currently not implemented .
Parse:
meant VBN ROOT
 +-- messages NNS nsubjpass
 |   +-- The DT det
 |   +-- command NN nn
 +-- are VBP auxpass
 +-- control VB advcl
 |   +-- for IN mark
 |   +-- user NN nsubj
 |   |   +-- an DT det
 |   |   +-- external JJ amod
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- a.k.a. NN dep
 |   |   |   +-- , , punct
 |   |   |   +-- hackers NNS conj
 |   |   |   +-- or CC cc
 |   |   |   |   +-- and CC cc
 |   |   |   +-- crackers NNS conj
 |   |   +-- -RRB- -RRB- punct
 |   +-- to TO aux
 |   +-- actions NNS dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- instances NNS pobj
 |               +-- the DT det
 +-- , , punct
 +-- and CC cc
 +-- implemented VBN conj
 |   +-- are VBP auxpass
 |   +-- currently RB advmod
 |   +-- not RB neg
 +-- . . punct

50
Input: The information messages are currently of three kinds
Parse:
are VBP ROOT
 +-- messages NNS nsubj
 |   +-- The DT det
 |   +-- information NN nn
 +-- currently RB advmod
 +-- of IN prep
     +-- kinds NNS pobj
         +-- three CD num

51
Input: The new member messages are messages that a new instance sends to the neighbors on its -LRB- short -RRB- list of initial neighbors .
Parse:
messages NNS ROOT
 +-- messages NNS nsubj
 |   +-- The DT det
 |   +-- new JJ amod
 |   +-- member NN nn
 +-- are VBP cop
 +-- sends VBZ rcmod
 |   +-- that IN dobj
 |   +-- instance NN nsubj
 |   |   +-- a DT det
 |   |   +-- new JJ amod
 |   +-- to IN prep
 |       +-- neighbors NNS pobj
 |           +-- the DT det
 |           +-- on IN prep
 |               +-- list NN pobj
 |                   +-- its PRP$ poss
 |                   +-- -LRB- -LRB- punct
 |                   +-- short JJ amod
 |                   +-- -RRB- -RRB- punct
 |                   +-- of IN prep
 |                       +-- neighbors NNS pobj
 |                           +-- initial JJ amod
 +-- . . punct

52
Input: The neighbors then register these instances in their neighbor list .
Parse:
register VBP ROOT
 +-- neighbors NNS nsubj
 |   +-- The DT det
 +-- then RB advmod
 +-- instances NNS dobj
 |   +-- these DT det
 +-- in IN prep
 |   +-- list NN pobj
 |       +-- their PRP$ poss
 |       +-- neighbor NN nn
 +-- . . punct

53
Input: These are messages that form the multi connectivity of the swarm , and without them , the topology will be a treelike structure , where eliminating a single node would cause the instances beneath it to be inaccessible .
Parse:
messages NNS ROOT
 +-- These DT nsubj
 +-- are VBP cop
 +-- form VBP rcmod
 |   +-- that WDT nsubj
 |   +-- connectivity NN dobj
 |   |   +-- the DT det
 |   |   +-- multi JJ amod
 |   |   +-- of IN prep
 |   |       +-- swarm NN pobj
 |   |           +-- the DT det
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- structure NN conj
 |       +-- without IN prep
 |       |   +-- them PRP pobj
 |       +-- , , punct
 |       +-- topology NN nsubj
 |       |   +-- the DT det
 |       +-- will MD aux
 |       +-- be VB cop
 |       +-- a DT det
 |       +-- treelike NN nn
 |       +-- cause VB rcmod
 |           +-- where WRB advmod
 |           +-- eliminating VBG csubj
 |           |   +-- node NN dobj
 |           |       +-- a DT det
 |           |       +-- single JJ amod
 |           +-- would MD aux
 |           +-- inaccessible JJ xcomp
 |               +-- instances NNS nsubj
 |               |   +-- the DT det
 |               |   +-- beneath IN prep
 |               |       +-- it PRP pobj
 |               +-- to TO aux
 |               +-- be VB cop
 +-- . . punct

54
Input: The passwords messages inform instances of newly discovered passwords , and by informing all instances , the swarm as whole collects this information , which allows it to infect new instances more effectively .
Parse:
inform VBP ROOT
 +-- messages NNS nsubj
 |   +-- The DT det
 |   +-- passwords NNS nn
 +-- instances NNS dobj
 |   +-- of IN prep
 |       +-- passwords NNS pobj
 |           +-- discovered VBN amod
 |               +-- newly RB advmod
 +-- , , punct
 +-- and CC cc
 +-- collects VBZ conj
 |   +-- by IN prep
 |   |   +-- informing VBG pcomp
 |   |       +-- instances NNS dobj
 |   |           +-- all DT det
 |   |           +-- , , punct
 |   |           +-- swarm NN appos
 |   |               +-- the DT det
 |   |               +-- as IN prep
 |   |                   +-- whole JJ pobj
 |   +-- information NN dobj
 |       +-- this DT det
 |       +-- , , punct
 |       +-- allows VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- infect VB xcomp
 |               +-- it PRP nsubj
 |               +-- to TO aux
 |               +-- instances NNS dobj
 |               |   +-- new JJ amod
 |               +-- effectively RB advmod
 |                   +-- more RBR advmod
 +-- . . punct

55
Input: The handoffs messages inform instances of valid addresses that could not be compromised -LRB- fail at breaking the password for the root account -RRB- .
Parse:
inform VBP ROOT
 +-- messages NNS nsubj
 |   +-- The DT det
 |   +-- handoffs NNS nn
 +-- instances NNS dobj
 |   +-- of IN prep
 |   |   +-- addresses NNS pobj
 |   |       +-- valid JJ amod
 |   +-- compromised VBN rcmod
 |   |   +-- that WDT nsubjpass
 |   |   +-- could MD aux
 |   |   +-- not RB neg
 |   |   +-- be VB auxpass
 |   +-- -LRB- -LRB- punct
 |   +-- fail VB dep
 |   |   +-- at IN prep
 |   |       +-- breaking VBG pcomp
 |   |           +-- password NN dobj
 |   |           |   +-- the DT det
 |   |           +-- for IN prep
 |   |               +-- account NN pobj
 |   |                   +-- the DT det
 |   |                   +-- root NN nn
 |   +-- -RRB- -RRB- punct
 +-- . . punct

56
Input: Since the address space is rather sparse , it takes a relatively long time -LRB- i.e .
Parse:
takes VBZ ROOT
 +-- sparse JJ advcl
 |   +-- Since IN mark
 |   +-- space NN nsubj
 |   |   +-- the DT det
 |   |   +-- address NN nn
 |   +-- is VBZ cop
 |   +-- rather RB advmod
 +-- , , punct
 +-- it PRP nsubj
 +-- time NN dobj
 |   +-- a DT det
 |   +-- long JJ amod
 |   |   +-- relatively RB advmod
 |   +-- -LRB- -LRB- punct
 |   +-- i.e NN dep
 +-- . . punct

57
Input: many trials -RRB- to discover a valid address .
Parse:
trials NNS ROOT
 +-- many JJ amod
 +-- -RRB- -RRB- punct
 +-- discover VB infmod
 |   +-- to TO aux
 |   +-- address NN dobj
 |       +-- a DT det
 |       +-- valid JJ amod
 +-- . . punct

58
Input: Therefore , by handing off discovered valid addresses , the swarm is -LRB- a -RRB- conserving energy by not re discovering the same addresses -LRB- b -RRB- attacking more effectively .
Parse:
is VBZ ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- by IN prep
 |   +-- handing VBG pcomp
 |       +-- off RP prt
 |       +-- addresses NNS dobj
 |           +-- discovered VBN amod
 |           +-- valid JJ amod
 +-- swarm NN nsubj
 |   +-- the DT det
 +-- conserving VBG xcomp
 |   +-- a LS dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- -RRB- -RRB- punct
 |   +-- energy NN dobj
 |   +-- by IN prep
 |       +-- re IN pcomp
 |           +-- not RB neg
 |           +-- discovering VBG pcomp
 |               +-- addresses NNS dobj
 |                   +-- the DT det
 |                   +-- same JJ amod
 |                   +-- -LRB- -LRB- punct
 |                   +-- b LS dep
 |                   +-- -RRB- -RRB- punct
 |                   +-- attacking VBG partmod
 |                       +-- effectively RB advmod
 |                           +-- more RBR advmod
 +-- . . punct

59
Input: In a way , this is a simple instance of coordinated activity of a swarm .
Parse:
instance NN ROOT
 +-- In IN prep
 |   +-- way NN pobj
 |       +-- a DT det
 +-- , , punct
 +-- this DT nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- simple JJ amod
 +-- of IN prep
 |   +-- activity NN pobj
 |       +-- coordinated JJ amod
 |       +-- of IN prep
 |           +-- swarm NN pobj
 |               +-- a DT det
 +-- . . punct

60
Input: 2.10.2 Coordination When a worm instance is born , it relays its existence to all neighbors on its list .
Parse:
relays VBZ ROOT
 +-- Coordination NN nsubj
 |   +-- 2.10.2 CD num
 |   +-- born VBN rcmod
 |       +-- When WRB advmod
 |       +-- instance NN nsubjpass
 |       |   +-- a DT det
 |       |   +-- worm NN nn
 |       +-- is VBZ auxpass
 +-- , , punct
 +-- it PRP nsubj
 +-- existence NN dobj
 |   +-- its PRP$ poss
 +-- to IN prep
 |   +-- neighbors NNS pobj
 |       +-- all DT det
 |       +-- on IN prep
 |           +-- list NN pobj
 |               +-- its PRP$ poss
 +-- . . punct

61
Input: The main thread then spawns a few infection threads , and continues to handle incoming messages -LRB- registering neighbors , adding new passwords , receiving addresses and relaying these messages -RRB- .
Parse:
spawns VBZ ROOT
 +-- thread NN nsubj
 |   +-- The DT det
 |   +-- main JJ amod
 +-- then RB advmod
 +-- threads NNS dobj
 |   +-- a DT det
 |   +-- few JJ amod
 |   +-- infection NN nn
 +-- , , punct
 +-- and CC cc
 +-- continues VBZ conj
 |   +-- handle VB xcomp
 |       +-- to TO aux
 |       +-- messages NNS dobj
 |           +-- incoming JJ amod
 |           +-- -LRB- -LRB- punct
 |           +-- registering VBG dep
 |           |   +-- neighbors NNS dobj
 |           |   +-- , , punct
 |           |   +-- adding VBG conj
 |           |   |   +-- passwords NNS dobj
 |           |   |       +-- new JJ amod
 |           |   +-- receiving VBG conj
 |           |   |   +-- addresses NNS dobj
 |           |   +-- and CC cc
 |           |   +-- relaying VBG conj
 |           |       +-- messages NNS dobj
 |           |           +-- these DT det
 |           +-- -RRB- -RRB- punct
 +-- . . punct

62
Input: 2.10.3 Distributed Control Control in the ZachiK worm is distributed in the sense that each instance of the worm performs a set of actions independently of every other instance while at the same time benefiting from the learning achieve by its immediate neighbors .
Parse:
distributed VBN ROOT
 +-- Control NNP nsubjpass
 |   +-- 2.10.3 CD num
 |   +-- Distributed NNP nn
 |   +-- Control NNP nn
 |   +-- in IN prep
 |       +-- worm NN pobj
 |           +-- the DT det
 |           +-- ZachiK NNP nn
 +-- is VBZ auxpass
 +-- in IN prep
 |   +-- sense NN pobj
 |       +-- the DT det
 +-- performs VBZ ccomp
 |   +-- that IN mark
 |   +-- instance NN nsubj
 |   |   +-- each DT det
 |   |   +-- of IN prep
 |   |       +-- worm NN pobj
 |   |           +-- the DT det
 |   +-- set NN dobj
 |   |   +-- a DT det
 |   |   +-- of IN prep
 |   |       +-- actions NNS pobj
 |   |           +-- independently RB advmod
 |   |           +-- of IN prep
 |   |               +-- instance NN pobj
 |   |                   +-- every DT det
 |   |                   +-- other JJ amod
 |   +-- benefiting VBG advcl
 |       +-- while IN mark
 |       +-- at IN prep
 |       |   +-- time NN pobj
 |       |       +-- the DT det
 |       |       +-- same JJ amod
 |       +-- from IN prep
 |           +-- learning NN pobj
 |               +-- the DT det
 |               +-- achieve VB partmod
 |                   +-- by IN prep
 |                       +-- neighbors NNS pobj
 |                           +-- its PRP$ poss
 |                           +-- immediate JJ amod
 +-- . . punct

63
Input: 2.11 Goal Based Actions The first instantiation of the ZachiK worm has two basic goals .
Parse:
Actions VBZ ROOT
 +-- 2.11 CD nsubj
 |   +-- Based VBD rcmod
 |       +-- Goal NNP nsubj
 +-- has VBZ ccomp
 |   +-- instantiation NN nsubj
 |   |   +-- The DT det
 |   |   +-- first JJ amod
 |   |   +-- of IN prep
 |   |       +-- worm NN pobj
 |   |           +-- the DT det
 |   |           +-- ZachiK NNP nn
 |   +-- goals NNS dobj
 |       +-- two CD num
 |       +-- basic JJ amod
 +-- . . punct

64
Input: These are
Parse:
are VBP ROOT
 +-- These DT nsubj
