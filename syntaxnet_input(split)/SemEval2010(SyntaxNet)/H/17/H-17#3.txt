
1
Input: SAVINGS FROM A PRUNED INDEX Typically , a search engine downloads documents from the Web and maintains a local inverted index that is used to answer queries quickly .
Parse:
maintains VBZ ROOT
 +-- SAVINGS NNS nsubj
 |   +-- FROM IN prep
 |       +-- INDEX NNP pobj
 |           +-- A DT det
 |           +-- PRUNED JJ amod
 |           +-- Typically RB advmod
 |           +-- , , punct
 |           +-- documents NNS appos
 |           |   +-- a DT det
 |           |   +-- downloads NNS nn
 |           |   |   +-- engine NN nn
 |           |   |       +-- search NN nn
 |           |   +-- from IN prep
 |           |       +-- Web NN pobj
 |           |           +-- the DT det
 |           +-- and CC cc
 +-- index NN dobj
 |   +-- a DT det
 |   +-- local JJ amod
 |   +-- inverted JJ amod
 |   +-- used VBN rcmod
 |       +-- that WDT nsubjpass
 |       +-- is VBZ auxpass
 |       +-- answer VB xcomp
 |           +-- to TO aux
 |           +-- queries NNS dobj
 |           +-- quickly RB advmod
 +-- . . punct

2
Input: Inverted indexes .
Parse:
indexes NNS ROOT
 +-- Inverted VBN amod
 +-- . . punct

3
Input: Assume that we have collected a set of documents D = -LRB- D1 , .
Parse:
Assume VB ROOT
 +-- collected VBN ccomp
 |   +-- that IN mark
 |   +-- we PRP nsubj
 |   +-- have VBP aux
 |   +-- set NN dobj
 |       +-- a DT det
 |       +-- of IN prep
 |       |   +-- documents NNS pobj
 |       |       +-- D NNP appos
 |       +-- = , punct
 |       +-- -LRB- -LRB- punct
 |       +-- D1 CD dep
 |       +-- , , punct
 +-- . . punct

4
Input: .
Parse:
. . ROOT

5
Input: .
Parse:
. . ROOT

6
Input: , DM -RRB- and that we have extracted all the terms T = -LRB- t1 , .
Parse:
DM NNP ROOT
 +-- , , punct
 +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- extracted VBN conj
 |   +-- that IN mark
 |   +-- we PRP nsubj
 |   +-- have VBP aux
 |   +-- terms NNS iobj
 |   |   +-- all PDT predet
 |   |   +-- the DT det
 |   +-- T NNP dobj
 |   |   +-- = SYM prep
 |   |       +-- t1 CD dep
 |   |           +-- -LRB- -LRB- punct
 |   +-- , , punct
 +-- . . punct

7
Input: .
Parse:
. . ROOT

8
Input: .
Parse:
. . ROOT

9
Input: , tn -RRB- from the documents .
Parse:
tn LS ROOT
 +-- , , punct
 +-- -RRB- -RRB- punct
 +-- from IN prep
 |   +-- documents NNS pobj
 |       +-- the DT det
 +-- . . punct

10
Input: For every single term ti ? T we maintain a list I -LRB- ti -RRB- of document IDs that contain ti .
Parse:
maintain VBP ROOT
 +-- For IN prep
 |   +-- ti NNS pobj
 |       +-- every DT det
 |       +-- term NN nn
 |           +-- single JJ amod
 +-- ? . punct
 +-- T NNP nsubj
 +-- we PRP nsubj
 +-- list NN dobj
 |   +-- a DT det
 |   +-- I PRP dep
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- ti NN dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- of IN prep
 |       +-- IDs NNS pobj
 |           +-- document NN nn
 |           +-- contain VBP rcmod
 |               +-- that WDT nsubj
 |               +-- ti NN dobj
 +-- . . punct

11
Input: Every entry in I -LRB- ti -RRB- is called a posting and can be extended to include additional information , such as how many times ti appears in a document , the positions of ti in the document , whether ti is bold italic , etc .
Parse:
called VBN ROOT
 +-- entry NN nsubjpass
 |   +-- Every DT det
 |   +-- in IN prep
 |       +-- I PRP pobj
 |           +-- -LRB- -LRB- punct
 |           +-- ti NN dep
 |           +-- -RRB- -RRB- punct
 +-- is VBZ auxpass
 +-- posting NN xcomp
 |   +-- a DT det
 +-- and CC cc
 +-- extended VBN conj
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- include VB xcomp
 |       +-- to TO aux
 |       +-- information NN dobj
 |           +-- additional JJ amod
 |           +-- , , punct
 |           +-- as IN prep
 |           |   +-- such JJ mwe
 |           |   +-- appears VBZ pcomp
 |           |       +-- times NNS dobj
 |           |       |   +-- many JJ amod
 |           |       |       +-- how WRB advmod
 |           |       +-- ti NNS nsubj
 |           |       +-- in IN prep
 |           |           +-- document NN pobj
 |           |               +-- a DT det
 |           +-- positions NNS conj
 |           |   +-- the DT det
 |           |   +-- of IN prep
 |           |   |   +-- ti NNS pobj
 |           |   +-- in IN prep
 |           |       +-- document NN pobj
 |           |           +-- the DT det
 |           +-- italic JJ dep
 |           |   +-- whether IN mark
 |           |   +-- ti NN nsubj
 |           |   +-- is VBZ cop
 |           |   +-- bold JJ amod
 |           +-- etc FW advmod
 +-- . . punct

12
Input: The set of all the lists I = -LRB- I -LRB- t1 -RRB- , .
Parse:
set NN ROOT
 +-- The DT det
 +-- of IN prep
 |   +-- lists NNS pobj
 |       +-- all PDT predet
 |       +-- the DT det
 |       +-- = , rcmod
 |           +-- I PRP nsubj
 +-- -LRB- -LRB- punct
 +-- I PRP dep
 |   +-- -LRB- -LRB- punct
 |   +-- t1 CD dep
 |   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- . . punct

13
Input: .
Parse:
. . ROOT

14
Input: .
Parse:
. . ROOT

15
Input: , I -LRB- tn -RRB- -RRB- is our inverted index .
Parse:
index NN ROOT
 +-- , , punct
 +-- I PRP nsubj
 |   +-- -LRB- -LRB- punct
 |   +-- tn NNP dep
 |   +-- -RRB- -RRB- punct
 +-- is VBZ cop
 +-- our PRP$ poss
 +-- inverted JJ amod
 +-- . . punct

16
Input: 2.1 Two tier index architecture Search engines are accepting an enormous number of queries every day from eager users searching for relevant information .
Parse:
accepting VBG ROOT
 +-- engines NNS nsubj
 |   +-- Two CD num
 |   |   +-- 2.1 CD number
 |   +-- architecture NN nn
 |   |   +-- index NN nn
 |   |       +-- tier NN nn
 |   +-- Search NN nn
 +-- are VBP aux
 +-- number NN dobj
 |   +-- an DT det
 |   +-- enormous JJ amod
 |   +-- of IN prep
 |       +-- queries NNS pobj
 +-- day NN tmod
 |   +-- every DT det
 +-- from IN prep
 |   +-- users NNS pobj
 |       +-- eager JJ amod
 |       +-- searching VBG partmod
 |           +-- for IN prep
 |               +-- information NN pobj
 |                   +-- relevant JJ amod
 +-- . . punct

17
Input: For example , Google is estimated to answer more than 250 million user queries per day .
Parse:
estimated VBN ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- Google NNP nsubjpass
 +-- is VBZ auxpass
 +-- answer VB xcomp
 |   +-- to TO aux
 |   +-- queries NNS dobj
 |       +-- million CD num
 |       |   +-- than IN quantmod
 |       |   |   +-- more JJR mwe
 |       |   +-- 250 CD number
 |       +-- user NN nn
 |       +-- per IN prep
 |           +-- day NN pobj
 +-- . . punct

18
Input: In order to cope with this huge query load , search engines typically replicate their index across a large cluster of machines as the following example illustrates
Parse:
replicate VBP ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- cope VB infmod
 |           +-- to TO aux
 |           +-- with IN prep
 |           |   +-- this DT pobj
 |           +-- load NN dobj
 |               +-- huge JJ amod
 |               +-- query NN nn
 +-- , , punct
 +-- engines NNS nsubj
 |   +-- search NN nn
 +-- typically RB advmod
 +-- index NN dobj
 |   +-- their PRP$ poss
 +-- across IN prep
 |   +-- cluster NN pobj
 |       +-- a DT det
 |       +-- large JJ amod
 |       +-- of IN prep
 |           +-- machines NNS pobj
 +-- illustrates VBZ advcl
     +-- as IN mark
     +-- example NN nsubj
         +-- the DT det
         +-- following VBG amod

19
Input: The size of its full inverted index IF is larger than what can be stored in a single machine , so each copy of IF is stored across four different machines .
Parse:
larger JJR ROOT
 +-- size NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- index NN pobj
 |           +-- its PRP$ poss
 |           +-- full JJ amod
 |           +-- inverted JJ amod
 +-- IF RB advmod
 +-- is VBZ cop
 +-- than IN prep
 |   +-- stored VBN pcomp
 |       +-- what WP nsubjpass
 |       +-- can MD aux
 |       +-- be VB auxpass
 |       +-- in IN prep
 |           +-- machine NN pobj
 |               +-- a DT det
 |               +-- single JJ amod
 +-- , , punct
 +-- stored VBN advcl
 |   +-- so IN mark
 |   +-- copy NN nsubjpass
 |   |   +-- each DT det
 |   |   +-- of IN prep
 |   |       +-- IF RB pcomp
 |   +-- is VBZ auxpass
 |   +-- across IN prep
 |       +-- machines NNS pobj
 |           +-- four CD num
 |           +-- different JJ amod
 +-- . . punct

20
Input: We also suppose that one copy of IF can handle the query load of 1000 queries sec .
Parse:
suppose VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- handle VB ccomp
 |   +-- that IN mark
 |   +-- copy NN nsubj
 |   |   +-- one CD num
 |   |   +-- of IN prep
 |   |       +-- IF IN pobj
 |   +-- can MD aux
 |   +-- load NN dobj
 |       +-- the DT det
 |       +-- query NN nn
 |       +-- of IN prep
 |           +-- queries NNS pobj
 |               +-- 1000 CD num
 |               +-- sec JJ amod
 +-- . . punct

21
Input: Assuming that the search engine gets 5000 queries sec , it needs to replicate IF five times to handle the load .
Parse:
needs VBZ ROOT
 +-- Assuming VBG partmod
 |   +-- gets VBZ ccomp
 |       +-- that IN mark
 |       +-- engine NN nsubj
 |       |   +-- the DT det
 |       |   +-- search NN nn
 |       +-- sec JJ xcomp
 |           +-- queries NNS nsubj
 |               +-- 5000 CD num
 +-- , , punct
 +-- it PRP nsubj
 +-- replicate VB xcomp
 |   +-- to TO aux
 |   +-- IF IN prep
 |   |   +-- times NNS pobj
 |   |       +-- five CD num
 |   +-- handle VB xcomp
 |       +-- to TO aux
 |       +-- load NN dobj
 |           +-- the DT det
 +-- . . punct
