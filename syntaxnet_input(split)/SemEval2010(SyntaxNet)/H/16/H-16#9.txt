
1
Input: Caching is an effective technique in search engines for improving response time , reducing the load on query processors , and improving network bandwidth utilization
Parse:
technique NN ROOT
 +-- Caching NNP nsubj
 +-- is VBZ cop
 +-- an DT det
 +-- effective JJ amod
 +-- in IN prep
 |   +-- engines NNS pobj
 |       +-- search NN nn
 +-- for IN prep
     +-- improving VBG pcomp
         +-- time NN dobj
         |   +-- response NN nn
         +-- , , punct
         +-- reducing VBG conj
         |   +-- load NN dobj
         |       +-- the DT det
         |       +-- on IN prep
         |           +-- processors NNS pobj
         |               +-- query NN nn
         +-- and CC cc
         +-- improving VBG conj
             +-- utilization NN dobj
                 +-- network NN nn
                 +-- bandwidth NN nn

2
Input: We present results on both dynamic and static caching
Parse:
present VBP ROOT
 +-- We PRP nsubj
 +-- results NNS dobj
     +-- on IN prep
         +-- caching NN pobj
             +-- dynamic JJ amod
                 +-- both DT preconj
                 +-- and CC cc
                 +-- static JJ conj

3
Input: Dynamic caching of queries has limited effectiveness due to the high number of compulsory misses caused by the number of unique or infrequent queries
Parse:
limited VBN ROOT
 +-- caching NN nsubj
 |   +-- Dynamic JJ amod
 |   +-- of IN prep
 |       +-- queries NNS pobj
 +-- has VBZ aux
 +-- effectiveness NN dobj
 +-- to IN prep
     +-- due IN mwe
     +-- number NN pobj
         +-- the DT det
         +-- high JJ amod
         +-- of IN prep
         |   +-- misses NNS pobj
         |       +-- compulsory JJ amod
         +-- caused VBN partmod
             +-- by IN prep
                 +-- number NN pobj
                     +-- the DT det
                     +-- of IN prep
                         +-- queries NNS pobj
                             +-- unique JJ amod
                                 +-- or CC cc
                                 +-- infrequent JJ conj

4
Input: Our results show that in our UK log , the minimum miss rate is 50 % using a working set strategy
Parse:
show VBP ROOT
 +-- results NNS nsubj
 |   +-- Our PRP$ poss
 +-- % NN ccomp
     +-- that IN mark
     +-- in IN prep
     |   +-- log NN pobj
     |       +-- our PRP$ poss
     |       +-- UK NNP nn
     +-- , , punct
     +-- rate NN nsubj
     |   +-- the DT det
     |   +-- minimum JJ amod
     |   +-- miss NN nn
     +-- is VBZ cop
     +-- 50 CD num
     +-- using VBG partmod
         +-- strategy NN dobj
             +-- a DT det
             +-- working VBG amod
             +-- set VBN amod

5
Input: Caching terms is more effective with respect to miss rate , achieving values as low as 12 %
Parse:
effective JJ ROOT
 +-- terms NNS nsubj
 |   +-- Caching VBG nn
 +-- is VBZ cop
 +-- more RBR advmod
 +-- with IN prep
 |   +-- respect NN pobj
 |       +-- miss VB infmod
 |           +-- to TO aux
 |           +-- rate NN dobj
 +-- , , punct
 +-- achieving VBG xcomp
     +-- values NNS dobj
         +-- low JJ amod
             +-- as RB advmod
             +-- as IN prep
                 +-- % NN pobj
                     +-- 12 CD num

6
Input: We also propose a new algorithm for static caching of posting lists that outperforms previous static caching algorithms as well as dynamic algorithms such as LRU and LFU , obtaining hit rate values that are over 10 % higher compared these strategies
Parse:
propose VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- algorithm NN dobj
 |   +-- a DT det
 |   +-- new JJ amod
 |   +-- for IN prep
 |       +-- caching NN pobj
 |           +-- static JJ amod
 |           +-- of IN prep
 |               +-- lists NNS pobj
 |                   +-- posting NN nn
 |                   +-- outperforms VBZ rcmod
 |                       +-- that WDT nsubj
 |                       +-- algorithms NNS dobj
 |                           +-- previous JJ amod
 |                           +-- static JJ amod
 |                           +-- caching VBG nn
 |                           +-- well RB cc
 |                           |   +-- as RB advmod
 |                           |   +-- as IN mwe
 |                           +-- algorithms NNS conj
 |                               +-- dynamic JJ amod
 |                               +-- as IN prep
 |                                   +-- such JJ mwe
 |                                   +-- LRU NN pobj
 |                                       +-- and CC cc
 |                                       +-- LFU NNP conj
 +-- , , punct
 +-- obtaining VBG partmod
     +-- hit VBN partmod
         +-- values NNS dobj
         |   +-- rate NN nn
         |   +-- are VBP rcmod
         |       +-- that WDT nsubj
         |       +-- higher JJR advmod
         |           +-- % NN npadvmod
         |               +-- 10 CD num
         |                   +-- over IN quantmod
         +-- compared VBN prep
             +-- strategies NNS pobj
                 +-- these DT det

7
Input: We present a framework for the analysis of the trade off between caching query results and caching posting lists , and we simulate different types of architectures
Parse:
present VBP ROOT
 +-- We PRP nsubj
 +-- framework NN dobj
 |   +-- a DT det
 |   +-- for IN prep
 |       +-- analysis NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- trade NN pobj
 |                   +-- the DT det
 |                   +-- off RP dep
 |                   +-- between IN prep
 |                       +-- results NNS pobj
 |                           +-- query NN nn
 |                           |   +-- caching VBG nn
 |                           +-- and CC cc
 |                           +-- lists NNS conj
 |                               +-- posting NN nn
 |                                   +-- caching VBG nn
 +-- , , punct
 +-- and CC cc
 +-- simulate VBP conj
     +-- we PRP nsubj
     +-- types NNS dobj
         +-- different JJ amod
         +-- of IN prep
             +-- architectures NNS pobj

8
Input: Our results show that for centralized and LAN environments , there is an optimal allocation of caching query results and caching of posting lists , while for WAN scenarios in which network time prevails it is more important to cache query results
Parse:
show VBP ROOT
 +-- results NNS nsubj
 |   +-- Our PRP$ poss
 +-- is VBZ ccomp
     +-- that IN mark
     +-- for IN prep
     |   +-- environments NNS pobj
     |       +-- centralized JJ amod
     |           +-- and CC cc
     |           +-- LAN NNP conj
     +-- , , punct
     +-- there EX expl
     +-- allocation NN nsubj
     |   +-- an DT det
     |   +-- optimal JJ amod
     |   +-- of IN prep
     |       +-- results NNS pobj
     |           +-- caching VBG amod
     |           +-- query NN nn
     |           +-- and CC cc
     |           +-- caching NN conj
     |           +-- of IN prep
     |               +-- lists NNS pobj
     |                   +-- posting NN nn
     +-- important JJ advcl
         +-- while IN mark
         +-- for IN prep
         |   +-- scenarios NNS pobj
         |       +-- WAN NNP nn
         |       +-- prevails VBZ rcmod
         |           +-- in IN prep
         |           |   +-- which WDT pobj
         |           +-- time NN nsubj
         |               +-- network NN nn
         +-- it PRP nsubj
         +-- is VBZ cop
         +-- more RBR advmod
         +-- cache NN xcomp
             +-- to TO aux
             +-- results NNS dobj
                 +-- query NN nn

9
Input: 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 0.1 0.2 0.3 0.4 0.5 0.6 0.7 Hitrate Cache size Dynamics of static QTF DF caching policy perfect knowledge 6 week training 3 week training Figure 14
Parse:
Figure NN ROOT
 +-- 0.45 CD num
 +-- 0.5 CD num
 +-- 0.55 CD num
 +-- 0.6 CD num
 +-- 0.65 CD num
 +-- 0.7 CD num
 +-- 0.75 CD num
 +-- 0.8 CD num
 +-- 0.85 CD num
 +-- 0.9 CD num
 +-- 0.95 CD num
 +-- 0.1 CD num
 +-- 0.2 CD num
 +-- knowledge NN nn
 |   +-- 0.3 CD num
 |   +-- size NN nn
 |   |   +-- 0.6 CD num
 |   |   |   +-- 0.4 CD number
 |   |   |   +-- 0.5 CD number
 |   |   +-- 0.7 CD num
 |   |   +-- Hitrate NNP nn
 |   |   +-- Cache NNP nn
 |   +-- Dynamics NNPS nn
 |   |   +-- of IN prep
 |   |       +-- policy NN pobj
 |   |           +-- static NN amod
 |   |           +-- DF NNP nn
 |   |           |   +-- QTF NNP nn
 |   |           +-- caching VBG nn
 |   +-- perfect JJ amod
 +-- week NN nn
 |   +-- 3 CD num
 +-- training NN nn
 +-- 14 CD num
