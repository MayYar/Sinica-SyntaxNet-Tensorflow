
1
Input: The presentation of query biased document snippets as part of results pages presented by search engines has become an expectation of search engine users .
Parse:
biased VBN ROOT
 +-- presentation NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- query NN pobj
 +-- snippets NNS dobj
 |   +-- document NN nn
 +-- expectation NN advcl
 |   +-- as IN mark
 |   +-- part NN nsubj
 |   |   +-- of IN prep
 |   |       +-- pages NNS pobj
 |   |           +-- results NNS nn
 |   |           +-- presented VBN partmod
 |   |               +-- by IN prep
 |   |                   +-- engines NNS pobj
 |   |                       +-- search NN nn
 |   +-- has VBZ aux
 |   +-- become VBN cop
 |   +-- an DT det
 |   +-- of IN prep
 |       +-- users NNS pobj
 |           +-- engine NN nn
 |               +-- search NN nn
 +-- . . punct

2
Input: In this paper we explore the algorithms and data structures required as part of a search engine to allow efficient generation of query biased snippets .
Parse:
explore VBP ROOT
 +-- In IN prep
 |   +-- paper NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- algorithms NNS dobj
 |   +-- the DT det
 |   +-- and CC cc
 |   +-- structures NNS conj
 |   |   +-- data NNS nn
 |   +-- required VBN partmod
 |       +-- as IN prep
 |       |   +-- part NN pobj
 |       |       +-- of IN prep
 |       |           +-- engine NN pobj
 |       |               +-- a DT det
 |       |               +-- search NN nn
 |       +-- allow VB xcomp
 |           +-- to TO aux
 |           +-- generation NN dobj
 |               +-- efficient JJ amod
 |               +-- of IN prep
 |                   +-- snippets NNS pobj
 |                       +-- query NN nn
 |                       +-- biased VBN amod
 +-- . . punct

3
Input: We begin by proposing and analysing a document compression method that reduces snippet generation time by 58 % over a baseline using the zlib compression library .
Parse:
begin VBP ROOT
 +-- We PRP nsubj
 +-- by IN prep
 |   +-- proposing VBG pcomp
 |       +-- and CC cc
 |       +-- analysing VBG conj
 |       +-- method NN dobj
 |           +-- a DT det
 |           +-- document NN nn
 |           +-- compression NN nn
 |           +-- reduces VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- time NN dobj
 |               |   +-- generation NN nn
 |               |       +-- snippet NN amod
 |               +-- by IN prep
 |               |   +-- % NN pobj
 |               |       +-- 58 CD num
 |               +-- over IN prep
 |                   +-- baseline NN pobj
 |                       +-- a DT det
 |                       +-- using VBG partmod
 |                           +-- library NN dobj
 |                               +-- the DT det
 |                               +-- zlib JJ amod
 |                               +-- compression NN nn
 +-- . . punct

4
Input: These experiments reveal that finding documents on secondary storage dominates the total cost of generating snippets , and so caching documents in RAM is essential for a fast snippet generation process .
Parse:
reveal VBP ROOT
 +-- experiments NNS nsubj
 |   +-- These DT det
 +-- dominates VBZ ccomp
 |   +-- that IN mark
 |   +-- finding VBG csubj
 |   |   +-- documents NNS dobj
 |   |       +-- on IN prep
 |   |           +-- storage NN pobj
 |   |               +-- secondary JJ amod
 |   +-- cost NN dobj
 |   |   +-- the DT det
 |   |   +-- total JJ amod
 |   |   +-- of IN prep
 |   |       +-- snippets NNS pobj
 |   |           +-- generating VBG amod
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- essential JJ conj
 |       +-- so RB advmod
 |       +-- documents NNS nsubj
 |       |   +-- caching VBG amod
 |       |   +-- in IN prep
 |       |       +-- RAM NN pobj
 |       +-- is VBZ cop
 |       +-- for IN prep
 |           +-- process NN pobj
 |               +-- a DT det
 |               +-- generation NN nn
 |                   +-- fast JJ amod
 |                   +-- snippet NN nn
 +-- . . punct

5
Input: Using simulation , we examine snippet generation performance for different size RAM caches .
Parse:
examine VBP ROOT
 +-- Using VBG partmod
 |   +-- simulation NN dobj
 +-- , , punct
 +-- we PRP nsubj
 +-- performance NN dobj
 |   +-- generation NN nn
 |   |   +-- snippet NN nn
 |   +-- for IN prep
 |       +-- caches NNS pobj
 |           +-- different JJ amod
 |           +-- size NN nn
 |           +-- RAM NN nn
 +-- . . punct

6
Input: Finally we propose and analyse document reordering and compaction , revealing a scheme that increases the number of document cache hits with only a marginal affect on snippet quality .
Parse:
propose VBP ROOT
 +-- Finally RB advmod
 +-- we PRP nsubj
 +-- and CC cc
 +-- analyse NN conj
 +-- reordering NN dobj
 |   +-- document NN nn
 |   +-- and CC cc
 |   +-- compaction NN conj
 +-- , , punct
 +-- revealing VBG partmod
 |   +-- scheme NN dobj
 |       +-- a DT det
 |       +-- increases VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- number NN dobj
 |           |   +-- the DT det
 |           |   +-- of IN prep
 |           |       +-- hits NNS pobj
 |           |           +-- cache NN nn
 |           |               +-- document NN nn
 |           +-- with IN prep
 |               +-- affect NN pobj
 |                   +-- only RB advmod
 |                   +-- a DT det
 |                   +-- marginal JJ amod
 |                   +-- on IN prep
 |                       +-- quality NN pobj
 |                           +-- snippet NN nn
 +-- . . punct

7
Input: This scheme effectively doubles the number of documents that can fit in a fixed size cache .
Parse:
doubles VBZ ROOT
 +-- scheme NN nsubj
 |   +-- This DT det
 +-- effectively RB advmod
 +-- number NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- documents NNS pobj
 |           +-- fit VB rcmod
 |               +-- that WDT nsubj
 |               +-- can MD aux
 |               +-- in IN prep
 |                   +-- cache NN pobj
 |                       +-- a DT det
 |                       +-- size NN nn
 |                           +-- fixed VBN amod
 +-- . . punct

8
Input: H.3.3 -LRB- Information Storage and Retrieval -RRB-
Parse:
H.3.3 CD ROOT
 +-- -LRB- -LRB- punct
 +-- Storage NNP dep
 |   +-- Information NNP nn
 |   +-- and CC cc
 |   +-- Retrieval NNP conj
 +-- -RRB- -RRB- punct
