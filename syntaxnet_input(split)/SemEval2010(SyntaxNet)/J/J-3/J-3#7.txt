
1
Input: GRAPHS If a graph has special structure , we can sometimes solve the budget optimization problem exactly .
Parse:
solve VB ROOT
 +-- GRAPHS NNP nsubj
 +-- has VBZ advcl
 |   +-- If IN mark
 |   +-- graph NN nsubj
 |   |   +-- a DT det
 |   +-- structure NN dobj
 |       +-- special JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- sometimes RB advmod
 +-- problem NN dobj
 |   +-- the DT det
 |   +-- optimization NN nn
 |       +-- budget NN nn
 +-- exactly RB advmod
 +-- . . punct

2
Input: Note that the knapsack algorithm in Section 2 solves the problem for the case when the graph is a simple matching .
Parse:
Note VB ROOT
 +-- solves VBZ ccomp
 |   +-- that IN mark
 |   +-- algorithm NNP nsubj
 |   |   +-- the DT det
 |   |   +-- knapsack NN nn
 |   |   +-- in IN prep
 |   |       +-- Section NN pobj
 |   |           +-- 2 CD num
 |   +-- problem NN dobj
 |   |   +-- the DT det
 |   |   +-- for IN prep
 |   |       +-- case NN pobj
 |   |           +-- the DT det
 |   +-- matching NN advcl
 |       +-- when WRB advmod
 |       +-- graph NN nsubj
 |       |   +-- the DT det
 |       +-- is VBZ cop
 |       +-- a DT det
 |       +-- simple JJ amod
 +-- . . punct

3
Input: Here we generalize this to the case when the graph has a laminar structure , which will allow us to impose a -LRB- partial -RRB- ordering on the possible bid values , and thereby give a pseudopolynomial algorithm via dynamic programming .
Parse:
generalize VBP ROOT
 +-- Here RB advmod
 +-- we PRP nsubj
 +-- this DT dobj
 +-- to IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 +-- has VBZ advcl
 |   +-- when WRB advmod
 |   +-- graph NN nsubj
 |   |   +-- the DT det
 |   +-- structure NN dobj
 |       +-- a DT det
 |       +-- laminar NN nn
 |       +-- , , punct
 |       +-- allow VB rcmod
 |           +-- which WDT nsubj
 |           +-- will MD aux
 |           +-- impose VB xcomp
 |               +-- us PRP nsubj
 |               +-- to TO aux
 |               +-- ordering VBG dobj
 |               |   +-- a DT det
 |               |   +-- -LRB- -LRB- punct
 |               |   +-- partial JJ amod
 |               |   +-- -RRB- -RRB- punct
 |               +-- on IN prep
 |               |   +-- values NNS pobj
 |               |       +-- the DT det
 |               |       +-- possible JJ amod
 |               |       +-- bid NN nn
 |               +-- , , punct
 |               +-- and CC cc
 |               +-- thereby RB advmod
 |               +-- give VB conj
 |                   +-- algorithm NN dobj
 |                   |   +-- a DT det
 |                   |   +-- pseudopolynomial JJ amod
 |                   +-- via IN prep
 |                       +-- programming NN pobj
 |                           +-- dynamic JJ amod
 +-- . . punct

4
Input: We first show that to solve the Budget Optimization problem -LRB- for general graphs -RRB- optimally in pseudopolynomial time , it suffices to provide an algorithm that solves the deterministic case .
Parse:
show VBP ROOT
 +-- We PRP nsubj
 +-- first RB advmod
 +-- suffices VBZ ccomp
 |   +-- that IN mark
 |   +-- solve VB advcl
 |   |   +-- to TO aux
 |   |   +-- problem NN dobj
 |   |   |   +-- the DT det
 |   |   |   +-- Optimization NNP nn
 |   |   |   |   +-- Budget NNP nn
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- for IN prep
 |   |   |   |   +-- graphs NNS pobj
 |   |   |   |       +-- general JJ amod
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- optimally RB advmod
 |   |   +-- in IN prep
 |   |       +-- time NN pobj
 |   |           +-- pseudopolynomial JJ amod
 |   +-- , , punct
 |   +-- it PRP nsubj
 |   +-- provide VB xcomp
 |       +-- to TO aux
 |       +-- algorithm NN dobj
 |           +-- an DT det
 |           +-- solves VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- case NN dobj
 |                   +-- the DT det
 |                   +-- deterministic JJ amod
 +-- . . punct

5
Input: The proof -LRB- omitted -RRB- uses ideas similar to Observation 1 and Lemma 1 .
Parse:
uses VBZ ROOT
 +-- proof NN nsubj
 |   +-- The DT det
 |   +-- -LRB- -LRB- punct
 |   +-- omitted VBN partmod
 |   +-- -RRB- -RRB- punct
 +-- ideas NNS dobj
 |   +-- similar JJ amod
 |       +-- to IN prep
 |           +-- Observation NN pobj
 |               +-- 1 CD num
 |               +-- and CC cc
 |               +-- Lemma NNP conj
 |                   +-- 1 CD num
 +-- . . punct

6
Input: Lemma 9 .
Parse:
Lemma NNP ROOT
 +-- 9 CD num
 +-- . . punct

7
Input: Let I be an input to the Budget Optimization problem and suppose that we find the optimal deterministic solution for every possible budget U ? U .
Parse:
Let VB ROOT
 +-- input NN ccomp
 |   +-- I PRP nsubj
 |   +-- be VB cop
 |   +-- an DT det
 |   +-- to IN prep
 |       +-- problem NN pobj
 |           +-- the DT det
 |           +-- Optimization NNP nn
 |               +-- Budget NNP nn
 +-- and CC cc
 +-- suppose VB conj
 |   +-- find VBP ccomp
 |       +-- that IN mark
 |       +-- we PRP nsubj
 |       +-- solution NN dobj
 |           +-- the DT det
 |           +-- optimal JJ amod
 |           +-- deterministic JJ amod
 |           +-- for IN prep
 |           |   +-- U NNP pobj
 |           |       +-- every DT det
 |           |       +-- possible JJ amod
 |           |       +-- budget NN nn
 |           +-- ? . punct
 |           +-- U NNP dep
 +-- . . punct

8
Input: Then we can find the optimal solution in time O -LRB- U log U -RRB- .
Parse:
find VB ROOT
 +-- Then RB advmod
 +-- we PRP nsubj
 +-- can MD aux
 +-- solution NN dobj
 |   +-- the DT det
 |   +-- optimal JJ amod
 |   +-- in IN prep
 |       +-- O NNP pobj
 |           +-- time NN nn
 |           +-- -LRB- -LRB- punct
 |           +-- U NNP dep
 |           |   +-- U NNP nn
 |           |   +-- log NNP nn
 |           +-- -RRB- -RRB- punct
 +-- . . punct

9
Input: A collection S of n sets S1 , .
Parse:
collection NN ROOT
 +-- A DT det
 +-- S NNP dep
 |   +-- of IN prep
 |       +-- sets NNS pobj
 |           +-- n DT det
 +-- S1 CD dep
 +-- , , punct
 +-- . . punct

10
Input: .
Parse:
. . ROOT

11
Input: .
Parse:
. . ROOT
