
1
Input: We consider permutation betting , or betting on the outcome of a competition among n candidates .
Parse:
consider VBP ROOT
 +-- We PRP nsubj
 +-- betting NN dobj
 |   +-- permutation NN nn
 |   +-- , , punct
 |   +-- or CC cc
 |   +-- betting VBG conj
 |       +-- on IN prep
 |           +-- outcome NN pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- competition NN pobj
 |                       +-- a DT det
 |                       +-- among IN prep
 |                           +-- candidates NNS pobj
 |                               +-- n DT det
 +-- . . punct

2
Input: The final outcome or state s ? S is an ordinal ranking of the n candidates .
Parse:
ranking NN ROOT
 +-- outcome NN nsubj
 |   +-- The DT det
 |   +-- final JJ amod
 |   +-- or CC cc
 |   +-- state NN conj
 |   |   +-- s POS possessive
 |   +-- ? . punct
 |   +-- S NNP dep
 +-- is VBZ cop
 +-- an DT det
 +-- ordinal JJ amod
 +-- of IN prep
 |   +-- candidates NNS pobj
 |       +-- the DT det
 |       +-- n JJ nn
 +-- . . punct

3
Input: For example , the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times .
Parse:
horses NNS ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- candidates NNS nsubj
 |   +-- the DT det
 +-- could MD aux
 +-- be VB cop
 +-- in IN prep
 |   +-- race NN pobj
 |       +-- a DT det
 +-- and CC cc
 +-- outcome NN conj
 |   +-- the DT det
 |   +-- list NN dep
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- horses NNS pobj
 |   +-- in IN prep
 |       +-- order NN pobj
 |           +-- increasing VBG amod
 |           +-- of IN prep
 |               +-- times NNS pobj
 |                   +-- their PRP$ poss
 |                   +-- finishing VBG amod
 +-- . . punct

4
Input: The state space S contains all n ! mutually exclusive and exhaustive permutations of candidates .
Parse:
contains VBZ ROOT
 +-- space NN nsubj
 |   +-- The DT det
 |   +-- state NN nn
 |   +-- S NNP appos
 +-- n RB advmod
 |   +-- all DT advmod
 +-- ! . punct
 +-- mutually RB advmod
 +-- permutations NNS dobj
 |   +-- exclusive JJ amod
 |   |   +-- and CC cc
 |   |   +-- exhaustive JJ conj
 |   +-- of IN prep
 |       +-- candidates NNS pobj
 +-- . . punct

5
Input: In a typical horse race , people bet on properties of the outcome like horse A will win , horse A will show , or finish in either first or second place , or horses A and B will finish in first and second place , respectively .
Parse:
bet VBP ROOT
 +-- In IN prep
 |   +-- race NN pobj
 |       +-- a DT det
 |       +-- typical JJ amod
 |       +-- horse NN nn
 +-- , , punct
 +-- people NNS nsubj
 +-- on IN prep
 |   +-- properties NNS pobj
 |       +-- of IN prep
 |           +-- outcome NN pobj
 |               +-- the DT det
 |               +-- win VB infmod
 |                   +-- like IN mark
 |                   +-- A NN nsubj
 |                   |   +-- horse NN nn
 |                   +-- will MD aux
 +-- show VB ccomp
 |   +-- A DT nsubj
 |   |   +-- horse NN nn
 |   +-- will MD aux
 |   +-- , , punct
 |   +-- or CC cc
 |   +-- finish NN conj
 |   |   +-- in IN prep
 |   |       +-- place NN pobj
 |   |           +-- first JJ amod
 |   |               +-- either CC preconj
 |   |               +-- or CC cc
 |   |               +-- second JJ conj
 |   +-- finish VB conj
 |       +-- A NN nsubj
 |       |   +-- horses NNS nn
 |       |   +-- and CC cc
 |       |   +-- B NNP conj
 |       +-- will MD aux
 |       +-- in IN prep
 |       |   +-- place NN pobj
 |       |       +-- first RB amod
 |       |           +-- and CC cc
 |       |           +-- second JJ conj
 |       +-- , , punct
 |       +-- respectively RB advmod
 +-- . . punct

6
Input: In practice at the racetrack , each of these different types of bets are processed in separate pools or groups .
Parse:
processed VBN ROOT
 +-- In IN prep
 |   +-- practice NN pobj
 |       +-- at IN prep
 |           +-- racetrack NN pobj
 |               +-- the DT det
 +-- , , punct
 +-- each DT nsubjpass
 |   +-- of IN prep
 |       +-- types NNS pobj
 |           +-- these DT det
 |           +-- different JJ amod
 |           +-- of IN prep
 |               +-- bets NNS pobj
 +-- are VBP auxpass
 +-- in IN prep
 |   +-- pools NNS pobj
 |       +-- separate JJ amod
 |       +-- or CC cc
 |       +-- groups NNS conj
 +-- . . punct

7
Input: In other words , all the win bets are processed together , and all the show bets are processed together , but the two types of bets do not mix .
Parse:
processed VBN ROOT
 +-- In IN prep
 |   +-- words NNS pobj
 |       +-- other JJ amod
 +-- , , punct
 +-- bets NNS nsubjpass
 |   +-- all PDT predet
 |   +-- the DT det
 |   +-- win NN nn
 +-- are VBP auxpass
 +-- together RB advmod
 +-- and CC cc
 +-- processed VBN conj
 |   +-- bets NNS nsubjpass
 |   |   +-- all PDT predet
 |   |   +-- the DT det
 |   |   +-- show NN nn
 |   +-- are VBP auxpass
 |   +-- together RB advmod
 |   +-- , , punct
 |   +-- but CC cc
 |   +-- mix VB conj
 |       +-- types NNS nsubj
 |       |   +-- the DT det
 |       |   +-- two CD num
 |       |   +-- of IN prep
 |       |       +-- bets NNS pobj
 |       +-- do VBP aux
 |       +-- not RB neg
 +-- . . punct

8
Input: This separation can hurt liquidity and information aggregation .
Parse:
hurt VB ROOT
 +-- separation NN nsubj
 |   +-- This DT det
 +-- can MD aux
 +-- liquidity NN dobj
 |   +-- and CC cc
 |   +-- aggregation NN conj
 |       +-- information NN nn
 +-- . . punct

9
Input: For example , even though horse A is heavily favored to win , that may not directly boost the horse '' s odds to show .
Parse:
boost VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- favored VBN advcl
 |   +-- even RB advmod
 |   +-- though IN mark
 |   +-- A NN nsubjpass
 |   |   +-- horse NN nn
 |   +-- is VBZ auxpass
 |   +-- heavily RB advmod
 |   +-- win VB xcomp
 |       +-- to TO aux
 +-- that DT nsubj
 +-- may MD aux
 +-- not RB neg
 +-- directly RB advmod
 +-- odds NNS dobj
 |   +-- horse NN poss
 |   |   +-- the DT det
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- show VB infmod
 |       +-- to TO aux
 +-- . . punct

10
Input: Instead , we describe a central exchange where all bets on the outcome are processed together , thus aggregating liquidity and ensuring that informational inference happens automatically .
Parse:
describe VBP ROOT
 +-- Instead RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- exchange NN dobj
 |   +-- a DT det
 |   +-- central JJ amod
 |   +-- processed VBN rcmod
 |       +-- where WRB advmod
 |       +-- bets NNS nsubjpass
 |       |   +-- all DT det
 |       |   +-- on IN prep
 |       |       +-- outcome NN pobj
 |       |           +-- the DT det
 |       +-- are VBP auxpass
 |       +-- together RB advmod
 |       +-- , , punct
 |       +-- aggregating VBG ccomp
 |           +-- thus RB advmod
 |           +-- liquidity NN dobj
 |           +-- and CC cc
 |           +-- ensuring VBG conj
 |               +-- happens VBZ ccomp
 |                   +-- that IN mark
 |                   +-- inference NN nsubj
 |                   |   +-- informational JJ amod
 |                   +-- automatically RB advmod
 +-- . . punct

11
Input: Ideally , we '' d like to allow traders to bet on any property of the final ordering they like , stated in exactly the language they prefer .
Parse:
like IN ROOT
 +-- Ideally RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- '' '' punct
 +-- d MD aux
 +-- allow VB xcomp
 |   +-- to TO aux
 |   +-- bet VB xcomp
 |       +-- traders NNS nsubj
 |       +-- to TO aux
 |       +-- on IN prep
 |           +-- property NN pobj
 |               +-- any DT det
 |               +-- of IN prep
 |                   +-- ordering NN pobj
 |                       +-- the DT det
 |                       +-- final JJ amod
 |                       +-- like VBP rcmod
 |                       |   +-- they PRP nsubj
 |                       +-- , , punct
 |                       +-- stated VBN partmod
 |                           +-- in IN prep
 |                               +-- language NN pobj
 |                                   +-- exactly RB advmod
 |                                   +-- the DT det
 |                                   +-- prefer VBP rcmod
 |                                       +-- they PRP nsubj
 +-- . . punct

12
Input: In practice , allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders .
Parse:
creates VBZ ROOT
 +-- In IN prep
 |   +-- practice NN pobj
 +-- , , punct
 +-- allowing VBG csubj
 |   +-- language NN dobj
 |       +-- flexible JJ amod
 |       |   +-- too RB advmod
 |       +-- a DT det
 +-- burden NN dobj
 |   +-- a DT det
 |   +-- computational JJ amod
 |   +-- for IN prep
 |       +-- auctioneer NN pobj
 |           +-- the DT det
 |           +-- attempting VBG partmod
 |               +-- match VB xcomp
 |                   +-- to TO aux
 |                   +-- traders NNS dobj
 |                       +-- willing JJ amod
 +-- . . punct

13
Input: We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem .
Parse:
explore VBP ROOT
 +-- We PRP nsubj
 +-- tradeoff NN dobj
 |   +-- the DT det
 |   +-- between IN prep
 |       +-- expressiveness NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |           |   +-- language NN pobj
 |           |       +-- the DT det
 |           |       +-- bidding NN nn
 |           +-- and CC cc
 |           +-- complexity NN conj
 |               +-- the DT det
 |               +-- computational JJ amod
 |               +-- of IN prep
 |                   +-- problem NN pobj
 |                       +-- the DT det
 |                       +-- matching NN nn
 +-- . . punct

14
Input: We consider a framework where people propose to buy securities that pay $ 1 if and only if some property of the final ordering is true .
Parse:
consider VBP ROOT
 +-- We PRP nsubj
 +-- framework NN dobj
 |   +-- a DT det
 |   +-- propose VBP rcmod
 |       +-- where WRB advmod
 |       +-- people NNS nsubj
 |       +-- buy VB xcomp
 |           +-- to TO aux
 |           +-- securities NNS dobj
 |               +-- pay VBP rcmod
 |                   +-- that WDT nsubj
 |                   +-- $ $ dobj
 |                   |   +-- 1 CD num
 |                   +-- true JJ advcl
 |                       +-- if IN dep
 |                       |   +-- and CC cc
 |                       |   +-- only RB conj
 |                       +-- if IN mark
 |                       +-- property NN nsubj
 |                       |   +-- some DT det
 |                       |   +-- of IN prep
 |                       |       +-- ordering NN pobj
 |                       |           +-- the DT det
 |                       |           +-- final JJ amod
 |                       +-- is VBZ cop
 +-- . . punct

15
Input: Traders state the price they are willing to pay per share and the number of shares they would like to purchase .
Parse:
state VBP ROOT
 +-- Traders NNS nsubj
 +-- price NN dobj
 |   +-- the DT det
 |   +-- willing JJ rcmod
 |   |   +-- they PRP nsubj
 |   |   +-- are VBP cop
 |   |   +-- pay VB xcomp
 |   |       +-- to TO aux
 |   |       +-- per IN prep
 |   |           +-- share NN pobj
 |   +-- and CC cc
 |   +-- number NN conj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- shares NNS pobj
 |               +-- like VB rcmod
 |                   +-- they PRP nsubj
 |                   +-- would MD aux
 |                   +-- purchase VB xcomp
 |                       +-- to TO aux
 +-- . . punct

16
Input: -LRB- Sell orders may not be explicitly needed , since buying the negation of an event is equivalent to selling the event. -RRB- A divisible order permits the trader to receive fewer shares than requested , as long as the price constraint is met ; an indivisible order is an all or nothing order .
Parse:
permits VBZ ROOT
 +-- needed VBN parataxis
 |   +-- -LRB- -LRB- punct
 |   +-- orders NNS nsubjpass
 |   |   +-- Sell VB nn
 |   +-- may MD aux
 |   +-- not RB neg
 |   +-- be VB auxpass
 |   +-- explicitly RB advmod
 |   +-- , , punct
 |   +-- equivalent JJ advcl
 |   |   +-- since IN mark
 |   |   +-- buying VBG csubj
 |   |   |   +-- negation NN dobj
 |   |   |       +-- the DT det
 |   |   |       +-- of IN prep
 |   |   |           +-- event NN pobj
 |   |   |               +-- an DT det
 |   |   +-- is VBZ cop
 |   |   +-- to IN prep
 |   |       +-- selling VBG pcomp
 |   |           +-- event. NN dobj
 |   |               +-- the DT det
 |   +-- -RRB- -RRB- punct
 +-- order NN nsubj
 |   +-- A DT det
 |   +-- divisible JJ amod
 +-- trader NN dobj
 |   +-- the DT det
 +-- receive VB xcomp
 |   +-- to TO aux
 |   +-- shares NNS dobj
 |   |   +-- fewer JJR amod
 |   |   +-- than IN prep
 |   |       +-- requested VBN pobj
 |   +-- , , punct
 |   +-- long RB advmod
 |       +-- as RB advmod
 |       +-- met VBN ccomp
 |           +-- as IN mark
 |           +-- constraint NN nsubjpass
 |           |   +-- the DT det
 |           |   +-- price NN nn
 |           +-- is VBZ auxpass
 +-- ; : punct
 +-- order NN parataxis
 |   +-- order NN nsubj
 |   |   +-- an DT det
 |   |   +-- indivisible JJ amod
 |   +-- is VBZ cop
 |   +-- an DT det
 |   +-- all DT num
 |       +-- or CC cc
 |       +-- nothing NN conj
 +-- . . punct

17
Input: The description of bets in terms of prices and shares is without loss of generality
Parse:
is VBZ ROOT
 +-- description NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- bets NNS pobj
 |           +-- in IN prep
 |               +-- terms NNS pobj
 |                   +-- of IN prep
 |                       +-- prices NNS pobj
 |                           +-- and CC cc
 |                           +-- shares NNS conj
 +-- without IN prep
     +-- loss NN pobj
         +-- of IN prep
             +-- generality NN pobj

18
Input: In principle , we can do everything we want by explicitly offering n ! securities , one for every state s ? S -LRB- or in fact any set of n ! linearly independent securities -RRB- .
Parse:
do VB ROOT
 +-- In IN prep
 |   +-- principle NN pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- everything NN dobj
 |   +-- want VBP rcmod
 |       +-- we PRP nsubj
 +-- by IN prep
 |   +-- offering VBG pcomp
 |       +-- explicitly RB advmod
 |       +-- n RB advmod
 |       +-- ! , punct
 |       +-- securities NNS dobj
 |           +-- , , punct
 |           +-- one CD appos
 |           |   +-- for IN prep
 |           |       +-- state NN pobj
 |           |           +-- every DT det
 |           |           +-- s POS possessive
 |           +-- ? , punct
 |           +-- S NNP appos
 |               +-- -LRB- -LRB- punct
 |               +-- or CC cc
 |               +-- set NN conj
 |               |   +-- in IN prep
 |               |   |   +-- fact NN pobj
 |               |   +-- any DT det
 |               |   +-- of IN prep
 |               |       +-- n CC pobj
 |               |           +-- ! . punct
 |               |           +-- securities NNS dep
 |               |               +-- independent JJ amod
 |               |                   +-- linearly RB advmod
 |               +-- -RRB- -RRB- punct
 +-- . . punct

19
Input: This is the so called complete Arrow Debreu securities market -LRB- 1 -RRB- for our setting .
Parse:
market NN ROOT
 +-- This DT nsubj
 +-- is VBZ cop
 +-- the DT det
 +-- called VBN amod
 |   +-- so RB advmod
 +-- complete JJ amod
 +-- Debreu NNP nn
 |   +-- Arrow NNP nn
 +-- securities NNS nn
 +-- -LRB- -LRB- punct
 +-- 1 CD num
 +-- -RRB- -RRB- punct
 +-- for IN prep
 |   +-- setting NN pobj
 |       +-- our PRP$ poss
 +-- . . punct

20
Input: In practice , traders do not want to deal with low level specification of complete orderings
Parse:
want VB ROOT
 +-- In IN prep
 |   +-- practice NN pobj
 +-- , , punct
 +-- traders NNS nsubj
 +-- do VBP aux
 +-- not RB neg
 +-- deal VB xcomp
     +-- to TO aux
     +-- with IN prep
         +-- specification NN pobj
             +-- level NN nn
             |   +-- low JJ amod
             +-- of IN prep
                 +-- orderings NNS pobj
                     +-- complete JJ amod

21
Input: Moreover , operating n ! securities is infeasible in practice from a computational point of view as n grows .
Parse:
infeasible JJ ROOT
 +-- Moreover RB advmod
 +-- , , punct
 +-- operating VBG partmod
 |   +-- n CC advmod
 +-- ! . punct
 +-- securities NNS nsubj
 +-- is VBZ cop
 +-- in IN prep
 |   +-- practice NN pobj
 |       +-- from IN prep
 |           +-- point NN pobj
 |               +-- a DT det
 |               +-- computational JJ amod
 |               +-- of IN prep
 |               |   +-- view NN pobj
 |               +-- grows VBZ dep
 |                   +-- as IN mark
 |                   +-- n DT nsubj
 +-- . . punct

22
Input: A very simple bidding language might allow traders to bet only on who wins the competition , as is done in the win pool at racetracks .
Parse:
allow VB ROOT
 +-- language NN nsubj
 |   +-- A DT det
 |   +-- simple JJ amod
 |   |   +-- very RB advmod
 |   +-- bidding NN nn
 +-- might MD aux
 +-- bet VB xcomp
 |   +-- traders NNS nsubj
 |   +-- to TO aux
 |   +-- on IN prep
 |       +-- only RB advmod
 |       +-- wins VBZ pcomp
 |           +-- who WP nsubj
 |           +-- competition NN dobj
 |           |   +-- the DT det
 |           +-- , , punct
 |           +-- done VBN advcl
 |               +-- as IN mark
 |               +-- is VBZ auxpass
 |               +-- in IN prep
 |                   +-- pool NN pobj
 |                       +-- the DT det
 |                       +-- win NN nn
 |                       +-- at IN prep
 |                           +-- racetracks NNS pobj
 +-- . . punct

23
Input: The corresponding matching problem is polynomial , however the language is not very expressive .
Parse:
polynomial JJ ROOT
 +-- problem NN nsubj
 |   +-- The DT det
 |   +-- corresponding JJ amod
 |   +-- matching NN nn
 +-- is VBZ cop
 +-- , , punct
 +-- expressive JJ ccomp
 |   +-- however RB advmod
 |   +-- language NN nsubj
 |   |   +-- the DT det
 |   +-- is VBZ cop
 |   +-- not RB neg
 |   +-- very RB advmod
 +-- . . punct

24
Input: A trader who believes that A will defeat B , but that neither will win outright can not usefully impart his information to the market .
Parse:
trader NN ROOT
 +-- A DT det
 +-- believes VBZ rcmod
 |   +-- who WP nsubj
 |   +-- defeat VB ccomp
 |       +-- that IN mark
 |       +-- A DT nsubj
 |       +-- will MD aux
 |       +-- B NN dobj
 |       +-- , , punct
 |       +-- but CC cc
 |       +-- win VB conj
 |           +-- that IN mark
 |           +-- neither DT nsubj
 |           +-- will MD aux
 |           +-- impart VB iobj
 |           |   +-- outright RB advmod
 |           |   +-- can MD aux
 |           |   +-- not RB neg
 |           |   +-- usefully RB advmod
 |           +-- information NN dobj
 |               +-- his PRP$ poss
 |               +-- to IN prep
 |                   +-- market NN pobj
 |                       +-- the DT det
 +-- . . punct

25
Input: The price space of the market reveals the collective estimates of win probabilities but nothing else .
Parse:
reveals VBZ ROOT
 +-- space NN nsubj
 |   +-- The DT det
 |   +-- price NN nn
 |   +-- of IN prep
 |       +-- market NN pobj
 |           +-- the DT det
 +-- estimates NNS dobj
 |   +-- the DT det
 |   +-- collective JJ amod
 |   +-- of IN prep
 |       +-- win VB pcomp
 |           +-- probabilities NNS dobj
 |               +-- but CC cc
 |               +-- nothing NN conj
 |                   +-- else RB amod
 +-- . . punct

26
Input: Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible , while maintaining computational feasibility .
Parse:
is VBZ ROOT
 +-- goal NN nsubj
 |   +-- Our PRP$ poss
 +-- find VB xcomp
 |   +-- to TO aux
 |   +-- languages NNS dobj
 |   |   +-- expressive JJ rcmod
 |   |       +-- that WDT nsubj
 |   |       +-- are VBP cop
 |   |       +-- as IN advmod
 |   |       +-- and CC cc
 |   |       +-- intuitive JJ conj
 |   |       +-- as IN prep
 |   |       |   +-- possible JJ pobj
 |   |       +-- reveal VB conj
 |   |           +-- as IN prep
 |   |               +-- information NN pobj
 |   |                   +-- much JJ amod
 |   |                   +-- as IN prep
 |   |                       +-- possible JJ pobj
 |   +-- , , punct
 |   +-- maintaining VBG advcl
 |       +-- while IN mark
 |       +-- feasibility NN dobj
 |           +-- computational JJ amod
 +-- . . punct

27
Input: Our work is in direct analogy to work by Fortnow et .
Parse:
is VBZ ROOT
 +-- work NN nsubj
 |   +-- Our PRP$ poss
 +-- in IN prep
 |   +-- analogy NN pobj
 |       +-- direct JJ amod
 |       +-- work VB infmod
 |           +-- to TO aux
 |           +-- by IN prep
 |           |   +-- Fortnow NNP pobj
 |           +-- et CC advmod
 +-- . . punct

28
Input: al .
Parse:
al NNP ROOT
 +-- . . punct

29
Input: -LRB- 6 -RRB- .
Parse:
6 CD ROOT
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- . . punct

30
Input: Whereas we explore permutation combinatorics , Fortnow et .
Parse:
explore VBP ROOT
 +-- Whereas IN mark
 +-- we PRP nsubj
 +-- combinatorics NNS dobj
 |   +-- permutation NN nn
 |   +-- , , punct
 |   +-- Fortnow NNP appos
 |       +-- et CC advmod
 +-- . . punct

31
Input: al .
Parse:
al NNP ROOT
 +-- . . punct

32
Input: explore Boolean combinatorics .
Parse:
explore VB ROOT
 +-- combinatorics NNS dobj
 |   +-- Boolean JJ amod
 +-- . . punct

33
Input: The authors consider a state space of the 2n possible outcomes of n binary variables .
Parse:
consider VBP ROOT
 +-- authors NNS nsubj
 |   +-- The DT det
 +-- space NN dobj
 |   +-- a DT det
 |   +-- state NN nn
 |   +-- of IN prep
 |       +-- outcomes NNS pobj
 |           +-- the DT det
 |           +-- 2n CD num
 |           +-- possible JJ amod
 |           +-- of IN prep
 |               +-- variables NNS pobj
 |                   +-- n DT det
 |                   +-- binary JJ amod
 +-- . . punct

34
Input: Traders express bets in Boolean logic .
Parse:
express VBP ROOT
 +-- Traders NNS nsubj
 +-- bets NNS dobj
 |   +-- in IN prep
 |       +-- logic NN pobj
 |           +-- Boolean NNP nn
 +-- . . punct
