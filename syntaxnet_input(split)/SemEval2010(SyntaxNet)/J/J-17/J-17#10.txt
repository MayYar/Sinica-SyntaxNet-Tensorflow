
1
Input: THE TWO VALUES CASE We now present a deterministic 2 approximation truthful mechanism for the case where pij ? -LRB- L , H -RRB- for all i , j
Parse:
VALUES NNS ROOT
 +-- THE DT det
 +-- TWO NNP nn
 +-- CASE , punct
 +-- present VBP rcmod
 |   +-- We PRP nsubj
 |   +-- now RB advmod
 |   +-- mechanism NN dobj
 |       +-- a DT det
 |       +-- deterministic JJ amod
 |       +-- approximation NN nn
 |       |   +-- 2 CD num
 |       +-- truthful JJ amod
 |       +-- for IN prep
 |           +-- case NN pobj
 |               +-- the DT det
 |               +-- where WRB prep
 |               |   +-- pij NN pobj
 |               |       +-- ? . punct
 |               |       +-- L NNP appos
 |               |           +-- -LRB- -LRB- punct
 |               |           +-- , , punct
 |               |           +-- H NNP appos
 |               |           +-- -RRB- -RRB- punct
 |               +-- for IN prep
 |                   +-- i PRP pobj
 |                       +-- all DT det
 +-- , , punct
 +-- j NFP punct

2
Input: In the sequel , we will often say that j is assigned to a lowmachine to denote that j is assigned to a machine i where pij = L
Parse:
say VB ROOT
 +-- In IN prep
 |   +-- sequel NN pobj
 |       +-- the DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- will MD aux
 +-- often RB advmod
 +-- assigned VBN ccomp
     +-- that IN mark
     +-- j NN nsubjpass
     +-- is VBZ auxpass
     +-- to IN prep
     |   +-- lowmachine NN pobj
     |       +-- a DT det
     +-- denote VB xcomp
         +-- to TO aux
         +-- assigned VBN ccomp
             +-- that IN mark
             +-- j NN nsubjpass
             +-- is VBZ auxpass
             +-- to IN prep
             |   +-- machine NN pobj
             |       +-- a DT det
             +-- i PRP prep
                 +-- where WRB dep
                     +-- pij FW pobj
                         +-- = : punct
                         +-- L NNP dep

3
Input: We will call a job j a low job of machine i if pij = L ; the low load of i is the load on i due to its low jobs , i.e. , P j
Parse:
call VB ROOT
 +-- We PRP nsubj
 +-- will MD aux
 +-- job NN dobj
 |   +-- a DT det
 |   +-- j , punct
 |   +-- job NN appos
 |       +-- a DT det
 |       +-- low JJ amod
 |       +-- of IN prep
 |           +-- machine NN pobj
 +-- i PRP xcomp
 |   +-- if IN prep
 |       +-- L NN pobj
 |           +-- pij NNP nn
 |           +-- = SYM nn
 +-- ; : punct
 +-- load NN parataxis
 |   +-- load NN nsubj
 |   |   +-- the DT det
 |   |   +-- low JJ amod
 |   |   +-- of IN prep
 |   |       +-- i PRP pobj
 |   +-- is VBZ cop
 |   +-- the DT det
 |   +-- on IN prep
 |   |   +-- i PRP pobj
 |   +-- to IN prep
 |   |   +-- due IN mwe
 |   |   +-- jobs NNS pobj
 |   |       +-- its PRP$ poss
 |   |       +-- low JJ amod
 |   |       +-- , , punct
 |   |       +-- i.e. FW advmod
 |   +-- , , punct
 |   +-- P NN dep
 +-- j . punct

4
Input: As in Section 4 , our goal is to obtain an approximation algorithm that satisfies cycle monotonicity
Parse:
is VBZ ROOT
 +-- As IN prep
 |   +-- in IN pcomp
 |       +-- Section NN pobj
 |           +-- 4 CD num
 +-- , , punct
 +-- goal NN nsubj
 |   +-- our PRP$ poss
 +-- obtain VB xcomp
     +-- to TO aux
     +-- algorithm NN dobj
         +-- an DT det
         +-- approximation NN nn
         +-- satisfies VBZ rcmod
             +-- that WDT nsubj
             +-- monotonicity NN dobj
                 +-- cycle NN nn

5
Input: We first obtain a simplification of condition -LRB- 3 -RRB- for our two values -LRB- L , H -RRB- scheduling domain -LRB- Proposition 5.1 -RRB- that will be convenient to work with
Parse:
obtain VBP ROOT
 +-- We PRP nsubj
 +-- first RB advmod
 +-- simplification NN dobj
     +-- a DT det
     +-- of IN prep
     |   +-- condition NN pobj
     |       +-- -LRB- -LRB- punct
     |       +-- 3 CD dep
     |       +-- -RRB- -RRB- punct
     +-- for IN prep
         +-- values NNS pobj
             +-- our PRP$ poss
             +-- two CD num
             +-- H NN dep
             |   +-- -LRB- -LRB- punct
             |   +-- L NN nn
             |   +-- , , punct
             |   +-- -RRB- -RRB- punct
             |   +-- domain NN dep
             |       +-- scheduling VBG nn
             |       +-- Proposition NNP appos
             |           +-- -LRB- -LRB- punct
             |           +-- 5.1 CD num
             |           +-- -RRB- -RRB- punct
             +-- convenient JJ rcmod
                 +-- that WDT nsubj
                 +-- will MD aux
                 +-- be VB cop
                 +-- work VB xcomp
                     +-- to TO aux
                     +-- with IN prep

6
Input: We describe our algorithm in Section 5.1
Parse:
describe VBP ROOT
 +-- We PRP nsubj
 +-- algorithm NN dobj
 |   +-- our PRP$ poss
 +-- in IN prep
     +-- Section NN pobj
         +-- 5.1 CD num

7
Input: In Section 5.2 , we bound its approximation guarantee and prove that it satisfies cycle monotonicity
Parse:
bound VBD ROOT
 +-- In IN prep
 |   +-- Section NN pobj
 |       +-- 5.2 CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- guarantee NN dobj
 |   +-- its PRP$ poss
 |   +-- approximation NN nn
 +-- and CC cc
 +-- prove VB conj
     +-- satisfies VBZ ccomp
         +-- that IN mark
         +-- it PRP nsubj
         +-- monotonicity NN dobj
             +-- cycle NN nn

8
Input: In Section 5.3 , we compute explicit payments giving a truthful mechanism
Parse:
compute VBP ROOT
 +-- In IN prep
 |   +-- Section NN pobj
 |       +-- 5.3 CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- payments NNS dobj
     +-- explicit JJ amod
     +-- giving VBG partmod
         +-- mechanism NN dobj
             +-- a DT det
             +-- truthful JJ amod

9
Input: Finally , in Section 5.4 we show that no deterministic mechanism can achieve the optimum makespan
Parse:
show VBP ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- Section NN pobj
 |       +-- 5.4 CD num
 +-- we PRP nsubj
 +-- achieve VB ccomp
     +-- that IN mark
     +-- mechanism NN nsubj
     |   +-- no DT det
     |   +-- deterministic JJ amod
     +-- can MD aux
     +-- makespan NN dobj
         +-- the DT det
         +-- optimum JJ amod

10
Input: Define nk , H = ? ? -LRB- j
Parse:
Define NNP ROOT
 +-- nk NNP dep
 |   +-- , , punct
 |   +-- H NNP appos
 |   +-- = , punct
 +-- ? . punct
 +-- -LRB- -LRB- punct
 +-- j NFP punct
