
1
Input: In this section , we characterize equilibrium properties of contagion games .
Parse:
characterize VBP ROOT
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- properties NNS dobj
 |   +-- equilibrium NN nn
 |   +-- of IN prep
 |       +-- games NNS pobj
 |           +-- contagion NN nn
 +-- . . punct

2
Input: To this end , we must first argue that contagion games in fact have well defined and stable equilibria .
Parse:
argue VB ROOT
 +-- To IN prep
 |   +-- end NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- must MD aux
 +-- first RB advmod
 +-- have VBP ccomp
 |   +-- that IN mark
 |   +-- games NNS nsubj
 |   |   +-- contagion NN nn
 |   |   +-- in IN prep
 |   |       +-- fact NN pobj
 |   +-- equilibria NNS dobj
 |       +-- defined VBN amod
 |           +-- well RB advmod
 |           +-- and CC cc
 |           +-- stable JJ conj
 +-- . . punct

3
Input: We then discuss some respects in which the equilibrium reached from an initial state is essentially independent of the order in which best response updates are performed .
Parse:
discuss VB ROOT
 +-- We PRP nsubj
 +-- then RB advmod
 +-- respects NNS dobj
 |   +-- some DT det
 |   +-- independent JJ rcmod
 |       +-- in IN prep
 |       |   +-- which WDT pobj
 |       +-- equilibrium NN nsubj
 |       |   +-- the DT det
 |       |   +-- reached VBD partmod
 |       |       +-- from IN prep
 |       |           +-- state NN pobj
 |       |               +-- an DT det
 |       |               +-- initial JJ amod
 |       +-- is VBZ cop
 |       +-- essentially RB advmod
 |       +-- of IN prep
 |           +-- order NN pobj
 |               +-- the DT det
 |               +-- performed VBN rcmod
 |                   +-- in IN prep
 |                   |   +-- which WDT pobj
 |                   +-- updates NNS nsubjpass
 |                   |   +-- best JJS amod
 |                   |   +-- response NN nn
 |                   +-- are VBP auxpass
 +-- . . punct

4
Input: We begin with the following lemma , which proves that agents eventually converge to a fixed strategy , and so the final state of a game is well defined by its initial state and an infinite sequence of moves .
Parse:
begin VBP ROOT
 +-- We PRP nsubj
 +-- with IN prep
 |   +-- lemma NN pobj
 |       +-- the DT det
 |       +-- following VBG amod
 |       +-- , , punct
 |       +-- proves VBZ rcmod
 |           +-- which WDT nsubj
 |           +-- converge VBP ccomp
 |               +-- that IN mark
 |               +-- agents NNS nsubj
 |               +-- eventually RB advmod
 |               +-- to IN prep
 |               |   +-- strategy NN pobj
 |               |       +-- a DT det
 |               |       +-- fixed VBN amod
 |               +-- , , punct
 |               +-- and CC cc
 |               +-- defined VBN conj
 |                   +-- so IN mark
 |                   +-- state NN nsubjpass
 |                   |   +-- the DT det
 |                   |   +-- final JJ amod
 |                   |   +-- of IN prep
 |                   |       +-- game NN pobj
 |                   |           +-- a DT det
 |                   +-- is VBZ auxpass
 |                   +-- well RB advmod
 |                   +-- by IN prep
 |                       +-- state NN pobj
 |                           +-- its PRP$ poss
 |                           +-- initial JJ amod
 |                           +-- and CC cc
 |                           +-- sequence NN conj
 |                               +-- an DT det
 |                               +-- infinite JJ amod
 |                               +-- of IN prep
 |                                   +-- moves NNS pobj
 +-- . . punct

5
Input: Specifically , we prove that once an agent decides to adopt technology A , she never discards it , and once she decides to discard technology B , she never re adopts it .
Parse:
prove VBP ROOT
 +-- Specifically RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- discards VBZ ccomp
 |   +-- that IN mark
 |   +-- decides VBZ advcl
 |   |   +-- once IN mark
 |   |   +-- agent NN nsubj
 |   |   |   +-- an DT det
 |   |   +-- adopt VB xcomp
 |   |       +-- to TO aux
 |   |       +-- A NNP dobj
 |   |           +-- technology NN nn
 |   +-- , , punct
 |   +-- she PRP nsubj
 |   +-- never RB neg
 |   +-- it PRP dobj
 |   +-- and CC cc
 |   +-- re VBP conj
 |       +-- decides VBZ advcl
 |       |   +-- once IN mark
 |       |   +-- she PRP nsubj
 |       |   +-- discard VB xcomp
 |       |       +-- to TO aux
 |       |       +-- B NNP dobj
 |       |           +-- technology NN nn
 |       +-- , , punct
 |       +-- she PRP nsubj
 |       +-- never RB neg
 |       +-- adopts NNS xcomp
 |           +-- it PRP dobj
 +-- . . punct

6
Input: Thus , after an infinite number of best response moves , each agent converges to a single strategy .
Parse:
converges VBZ ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- after IN prep
 |   +-- number NN pobj
 |       +-- an DT det
 |       +-- infinite JJ amod
 |       +-- of IN prep
 |           +-- moves NNS pobj
 |               +-- response NN nn
 |                   +-- best JJS amod
 +-- agent NN nsubj
 |   +-- each DT det
 +-- to IN prep
 |   +-- strategy NN pobj
 |       +-- a DT det
 |       +-- single JJ amod
 +-- . . punct

7
Input: LEMMA 4.1 .
Parse:
LEMMA NNP ROOT
 +-- 4.1 CD dep
 +-- . . punct

8
Input: Consider a contagion game -LRB- G , q , r -RRB- and a -LRB- possibly infinite -RRB- subset T ? V of agents .
Parse:
Consider VB ROOT
 +-- game NN dobj
 |   +-- a DT det
 |   +-- contagion NN nn
 |   +-- -LRB- -LRB- punct
 |   +-- q NNP dep
 |   |   +-- G NNP nn
 |   |   +-- , , punct
 |   |   +-- r VB appos
 |   +-- -RRB- -RRB- punct
 |   +-- and CC cc
 |   +-- V NN conj
 |       +-- a DT det
 |       |   +-- infinite VB dep
 |       |       +-- -LRB- -LRB- punct
 |       |       +-- possibly RB advmod
 |       |       +-- -RRB- -RRB- punct
 |       +-- T NNP nn
 |       |   +-- subset VBN amod
 |       +-- ? , punct
 |       +-- of IN prep
 |           +-- agents NNS pobj
 +-- . . punct

9
Input: Let sT be the strategy profile assigning A to every agent in T and B to every agent in V \ T .
Parse:
Let VB ROOT
 +-- profile VBP ccomp
 |   +-- sT PRP nsubj
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- strategy NN nn
 |   +-- assigning VBG xcomp
 |       +-- A DT dobj
 |       +-- to IN prep
 |           +-- agent NN pobj
 |               +-- every DT det
 |               +-- in IN prep
 |                   +-- T NNP pobj
 |                       +-- V NNP nn
 |                       +-- \ NNP nn
 +-- . . punct

10
Input: Let S = v1 , v2 , .
Parse:
Let VB ROOT
 +-- = VB ccomp
 |   +-- S NNP nsubj
 |   +-- v1 CD dobj
 |       +-- , , punct
 |       +-- v2 CD appos
 +-- . . punct

11
Input: .
Parse:
. . ROOT

12
Input: .
Parse:
. . ROOT

13
Input: be a -LRB- possibly infinite -RRB- sequence of number of copies of each vertex of V \ T can be turned into an equivalent schedule of moves .
Parse:
turned VBN ROOT
 +-- sequence NN nsubjpass
 |   +-- be VB cop
 |   +-- a DT det
 |   +-- -LRB- -LRB- punct
 |   +-- infinite JJ amod
 |   |   +-- possibly RB advmod
 |   +-- -RRB- -RRB- punct
 |   +-- of IN prep
 |       +-- number NN pobj
 |           +-- of IN prep
 |               +-- copies NNS pobj
 |                   +-- of IN prep
 |                       +-- vertex NN pobj
 |                           +-- each DT det
 |                           +-- of IN prep
 |                               +-- T NN pobj
 |                                   +-- V NNP nn
 |                                   +-- \ , nn
 +-- can MD aux
 +-- be VB auxpass
 +-- into IN prep
 |   +-- schedule NN pobj
 |       +-- an DT det
 |       +-- equivalent JJ amod
 |       +-- of IN prep
 |           +-- moves NNS pobj
 +-- . . punct

14
Input: For example , the sequence 1 , ? 1 , 2 , ? 2 , 1 , ? 1 , 3 , ? 3 , 2 , ? 2 , .
Parse:
sequence NN ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- the DT det
 +-- 1 CD num
 +-- ? . punct
 +-- 1 CD dep
 |   +-- , , punct
 |   +-- 2 CD amod
 |   +-- ? , punct
 |   +-- 2 CD num
 |   +-- 1 CD num
 |   +-- ? . punct
 |   +-- 3 CD num
 |   +-- 2 CD dep
 +-- . . punct

15
Input: .
Parse:
. . ROOT

16
Input: .
Parse:
. . ROOT

17
Input: gives the same outcome as 1 , ? 1 , 2 , ? 2 , .
Parse:
gives VBZ ROOT
 +-- outcome NN dobj
 |   +-- the DT det
 |   +-- same JJ amod
 +-- as IN prep
 |   +-- 1 CD pobj
 +-- , , punct
 +-- ? . punct
 +-- 2 CD dobj
 |   +-- 1 CD dep
 |       +-- , , punct
 |       +-- 2 CD num
 |       +-- ? , punct
 +-- . . punct

18
Input: .
Parse:
. . ROOT

19
Input: .
Parse:
. . ROOT

20
Input: , 1 , ? 1 , 2 , ? 2 , .
Parse:
1 CD ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- 2 CD num
 +-- ? , punct
 +-- . . punct

21
Input: .
Parse:
. . ROOT

22
Input: .
Parse:
. . ROOT

23
Input: in the thick line example .
Parse:
in IN ROOT
 +-- example NN pobj
 |   +-- the DT det
 |   +-- thick JJ amod
 |   +-- line NN nn
 +-- . . punct

24
Input: agents in V \ T and consider the sequence of states s1 , s2 , .
Parse:
agents NNS ROOT
 +-- in IN prep
 |   +-- T NNP pobj
 |       +-- V NN nn
 |       +-- \ , nn
 +-- and CC cc
 +-- consider VB conj
 |   +-- s1 CD xcomp
 |       +-- sequence NN nsubj
 |       |   +-- the DT det
 |       |   +-- of IN prep
 |       |       +-- states NNS pobj
 |       +-- , , punct
 |       +-- s2 CD appos
 +-- . . punct

25
Input: .
Parse:
. . ROOT

26
Input: .
Parse:
. . ROOT
