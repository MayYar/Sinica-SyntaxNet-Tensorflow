
1
Input: Let n denote the number of agents , and let m denote the number of units .
Parse:
Let VB ROOT
 +-- denote VB ccomp
 |   +-- n PRP nsubj
 |   +-- number NN dobj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- agents NNS pobj
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- let VB conj
 |       +-- denote VB ccomp
 |           +-- m PRP nsubj
 |           +-- number NN dobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- units NNS pobj
 +-- . . punct

2
Input: We only consider the case where m < n -LRB- otherwise the problem becomes trivial -RRB- .
Parse:
consider VBP ROOT
 +-- We PRP nsubj
 +-- only RB advmod
 +-- case NN dobj
     +-- the DT det
     +-- where WRB prep
         +-- m NN pobj
             +-- n CC dep
                 +-- < -LRB- punct
                 +-- trivial JJ dep
                 |   +-- -LRB- -LRB- punct
                 |   +-- otherwise RB advmod
                 |   +-- problem NN nsubj
                 |   |   +-- the DT det
                 |   +-- becomes VBZ cop
                 |   +-- -RRB- -RRB- punct
                 +-- . . punct

3
Input: We also assume that m and n are always known .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- known VBN ccomp
 |   +-- that IN mark
 |   +-- m NN nsubjpass
 |   |   +-- and CC cc
 |   |   +-- n NNP conj
 |   +-- are VBP auxpass
 |   +-- always RB advmod
 +-- . . punct

4
Input: -LRB- This assumption is not harmful
Parse:
harmful JJ ROOT
 +-- -LRB- -LRB- punct
 +-- assumption NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- not RB neg

5
Input: .
Parse:
. . ROOT

6
Input: .
Parse:
. . ROOT

7
Input: , an -RRB- , where ai is the agent with ith highest report value ? vi that is , we have ? v1 ? ? v2 ? .
Parse:
agent NN ROOT
 +-- an DT dep
 |   +-- , , punct
 |   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- where WRB advmod
 +-- ai NNP nsubj
 +-- is VBZ cop
 +-- the DT det
 +-- with IN prep
 |   +-- value NN pobj
 |       +-- ith PRP nn
 |       +-- highest JJS amod
 |       +-- report NN nn
 +-- ? . punct
 +-- have VBP dep
 |   +-- vi NN nsubj
 |   |   +-- is VBZ rcmod
 |   |       +-- that WDT nsubj
 |   +-- , , punct
 |   +-- we PRP nsubj
 |   +-- ? . punct
 |   +-- v1 CD dobj
 |   +-- v2 CD dobj
 +-- . . punct

8
Input: .
Parse:
. . ROOT

9
Input: .
Parse:
. . ROOT

10
Input: ? ? vn ? 0 .
Parse:
? . ROOT
 +-- ? . punct
 +-- vn UH dep
 +-- 0 NFP punct
 +-- . . punct

11
Input: Let vi denote the true value of ai .
Parse:
Let VB ROOT
 +-- denote VB ccomp
 |   +-- vi PRP nsubj
 |   +-- value NN dobj
 |       +-- the DT det
 |       +-- true JJ amod
 |       +-- of IN prep
 |           +-- ai NN pobj
 +-- . . punct

12
Input: Given that the mechanism is strategy proof , we can assume vi = ? vi .
Parse:
assume VB ROOT
 +-- Given VBN prep
 |   +-- proof NN pcomp
 |       +-- that IN mark
 |       +-- mechanism NN nsubj
 |       |   +-- the DT det
 |       +-- is VBZ cop
 |       +-- strategy NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- = NNP dobj
 |   +-- vi NNP nn
 |   +-- ? . punct
 |   +-- vi NN dep
 +-- . . punct

13
Input: Under the VCG mechanism , each agent among a1 , .
Parse:
agent NN ROOT
 +-- Under IN prep
 |   +-- mechanism NN pobj
 |       +-- the DT det
 |       +-- VCG NNP nn
 +-- , , punct
 +-- each DT det
 +-- among IN prep
 |   +-- a1 CD pobj
 +-- . . punct

14
Input: .
Parse:
. . ROOT

15
Input: .
Parse:
. . ROOT

16
Input: , am wins a unit , and pays ? vm+1 for this unit .
Parse:
wins VBZ ROOT
 +-- , , punct
 +-- am VBP auxpass
 +-- unit NN dobj
 |   +-- a DT det
 +-- and CC cc
 +-- pays VBZ conj
 |   +-- ? . punct
 |   +-- vm+1 CD dobj
 |   +-- for IN prep
 |       +-- unit NN pobj
 |           +-- this DT det
 +-- . . punct

17
Input: Thus , the total VCG payment equals m ? vm+1 .
Parse:
equals VBZ ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- payment NN nsubj
 |   +-- the DT det
 |   +-- total JJ amod
 |   +-- VCG JJ amod
 +-- m NNP dobj
 |   +-- ? . punct
 |   +-- vm+1 CD num
 +-- . . punct

18
Input: When m = 1 , this is the second price or Vickrey auction .
Parse:
price NN ROOT
 +-- m NN advcl
 |   +-- When WRB advmod
 |   +-- = SYM dep
 |       +-- 1 CD num
 +-- , , punct
 +-- this DT nsubj
 +-- is VBZ cop
 +-- the DT det
 +-- second JJ amod
 +-- or CC cc
 +-- auction NN conj
 |   +-- Vickrey NNP nn
 +-- . . punct

19
Input: We modify the mechanism as follows .
Parse:
modify VBP ROOT
 +-- We PRP nsubj
 +-- mechanism NN dobj
 |   +-- the DT det
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct

20
Input: After running the original VCG mechanism , the center returns to each agent ai some amount zi , agent ai '' s redistribution payment .
Parse:
returns VBZ ROOT
 +-- After IN prep
 |   +-- running VBG pcomp
 |       +-- mechanism NN dobj
 |           +-- the DT det
 |           +-- original JJ amod
 |           +-- VCG NNP nn
 +-- , , punct
 +-- center NN nsubj
 |   +-- the DT det
 +-- to IN prep
 |   +-- agent NN pobj
 |       +-- each DT det
 +-- ai VBP prep
 |   +-- payment NN ccomp
 |       +-- agent NN nsubj
 |       |   +-- some DT det
 |       |   +-- amount NN nn
 |       |   +-- zi NN nn
 |       |   +-- , , punct
 |       +-- ai VBP cop
 |       +-- '' '' poss
 |       |   +-- s POS possessive
 |       +-- redistribution NN nn
 +-- . . punct

21
Input: We do not allow zi to depend on ? vi ; because of this , ai '' s incentives are unaffected by this redistribution payment , and the mechanism remains strategy proof. .
Parse:
allow VB ROOT
 +-- We PRP nsubj
 +-- do VBP aux
 +-- not RB neg
 +-- depend VB xcomp
 |   +-- zi NN nsubj
 |   +-- to TO aux
 |   +-- on RP prep
 |       +-- ? . punct
 |       +-- vi NN pobj
 +-- ; : punct
 +-- unaffected JJ parataxis
 |   +-- of IN prep
 |   |   +-- because IN mwe
 |   |   +-- this DT pobj
 |   +-- , , punct
 |   +-- incentives NNS nsubj
 |   |   +-- ai NNP poss
 |   |       +-- '' '' punct
 |   |       +-- s POS possessive
 |   +-- are VBP cop
 |   +-- by IN prep
 |   |   +-- payment NN pobj
 |   |       +-- this DT det
 |   |       +-- redistribution NN nn
 |   +-- and CC cc
 |   +-- proof. NN conj
 |       +-- mechanism NN nsubj
 |       |   +-- the DT det
 |       +-- remains VBZ cop
 |       +-- strategy NN nn
 +-- . . punct
