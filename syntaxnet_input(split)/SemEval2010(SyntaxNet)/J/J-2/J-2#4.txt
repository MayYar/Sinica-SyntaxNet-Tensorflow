
1
Input: MECHANISMS We are now ready to introduce the family of linear VCG redistribution mechanisms .
Parse:
ready JJ ROOT
 +-- MECHANISMS LS dep
 +-- We PRP nsubj
 +-- are VBP cop
 +-- now RB advmod
 +-- introduce VB xcomp
 |   +-- to TO aux
 |   +-- family NN dobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- mechanisms NNS pobj
 |               +-- linear JJ amod
 |               +-- VCG NNP nn
 |               +-- redistribution NN nn
 +-- . . punct

2
Input: Such a mechanism is defined by a vector of constants c0 , c1 , .
Parse:
defined VBN ROOT
 +-- mechanism NN nsubjpass
 |   +-- Such PDT predet
 |   +-- a DT det
 +-- is VBZ auxpass
 +-- by IN prep
 |   +-- vector NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- constants NNS pobj
 |               +-- c0 CD num
 |               +-- , , punct
 |               +-- c1 CD appos
 +-- . . punct

3
Input: .
Parse:
. . ROOT

4
Input: .
Parse:
. . ROOT

5
Input: , cn ? 1 .
Parse:
cn NNP ROOT
 +-- , , punct
 +-- ? . punct
 +-- 1 CD num
 +-- . . punct

6
Input: The amount that the mechanism returns to agent ai is zi = c0 + c1 ? v1 + c2 ? v2 + .
Parse:
c1 CD ROOT
 +-- amount NN nsubj
 |   +-- The DT det
 |   +-- returns VBZ rcmod
 |       +-- that WDT dobj
 |       +-- mechanism NN nsubj
 |       |   +-- the DT det
 |       +-- to IN prep
 |           +-- ai NNP pobj
 |               +-- agent NN nn
 +-- is VBZ cop
 +-- c0 CD dep
 |   +-- zi JJ amod
 |   +-- = SYM dep
 +-- + SYM dep
 +-- ? . punct
 +-- v1 CD dep
 |   +-- + SYM prep
 |       +-- c2 CD pobj
 +-- v2 CD dep
 |   +-- + SYM advmod
 +-- . . punct

7
Input: .
Parse:
. . ROOT

8
Input: .
Parse:
. . ROOT

9
Input: + ci ? 1 ? vi ? 1 + ci ? vi+1 + .
Parse:
ci NN ROOT
 +-- + SYM amod
 +-- ? . punct
 +-- vi NN dep
 |   +-- 1 CD dep
 |       +-- ? . punct
 +-- ci NN dep
 |   +-- + SYM dep
 |       +-- 1 CD number
 +-- vi+1 NN dep
 +-- + SYM dep
 +-- . . punct

10
Input: .
Parse:
. . ROOT

11
Input: .
Parse:
. . ROOT

12
Input: + cn ? 1 ? vn .
Parse:
cn NN ROOT
 +-- + SYM amod
 +-- ? . punct
 +-- 1 CD num
 +-- vn UH dep
 +-- . . punct

13
Input: That is , an agent receives c0 , plus c1 times the highest bid other than the agent '' s own bid , plus c2 times the second highest other bid , etc .
Parse:
receives VBZ ROOT
 +-- is VBZ advmod
 |   +-- That DT advmod
 +-- , , punct
 +-- agent NN nsubj
 |   +-- an DT det
 +-- c0 CD dobj
 |   +-- , , punct
 |   +-- plus CC cc
 |   +-- bid NN conj
 |   |   +-- times VBZ num
 |   |   |   +-- c2 CD number
 |   |   +-- the DT det
 |   |   +-- second JJ amod
 |   |   +-- highest JJS amod
 |   |   +-- other JJ amod
 |   +-- etc FW advmod
 +-- . . punct

14
Input: The mechanism is strategy proof , because for all i , zi is independent of ? vi .
Parse:
proof JJ ROOT
 +-- mechanism NN nsubj
 |   +-- The DT det
 +-- is VBZ cop
 +-- strategy NN npadvmod
 +-- , , punct
 +-- independent JJ advcl
 |   +-- because IN mark
 |   +-- for IN prep
 |   |   +-- all DT pobj
 |   +-- i PRP nsubj
 |   +-- , , punct
 |   +-- zi NNS nsubj
 |   +-- is VBZ cop
 |   +-- of IN prep
 |       +-- ? . punct
 |       +-- vi NN pobj
 +-- . . punct

15
Input: Also , the mechanism is anonymous .
Parse:
anonymous JJ ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 +-- is VBZ cop
 +-- . . punct

16
Input: It is helpful to see the entire list of redistribution payments
Parse:
helpful JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- see VB xcomp
     +-- to TO aux
     +-- list NN dobj
         +-- the DT det
         +-- entire JJ amod
         +-- of IN prep
             +-- payments NNS pobj
                 +-- redistribution NN nn

17
Input: .
Parse:
. . ROOT

18
Input: .
Parse:
. . ROOT

19
Input: + cn ? 2 ? vn ? 1 + cn ? 1 ? vn z2 = c0 + c1 ? v1 + c2 ? v3 + c3 ? v4 + .
Parse:
cn NN ROOT
 +-- + SYM amod
 +-- ? . punct
 +-- 2 CD dep
 +-- vn SYM dep
 +-- cn NN dep
 |   +-- + SYM nn
 |       +-- 1 CD number
 +-- 1 CD dep
 +-- z2 CD dep
 +-- = SYM dep
 +-- c0 CD dep
 +-- + SYM dep
 +-- c1 CD dep
 +-- v1 CD dep
 +-- c2 CD dep
 +-- v3 CD dep
 +-- c3 CD dep
 +-- v4 CD dep
 +-- . . punct

20
Input: .
Parse:
. . ROOT

21
Input: .
Parse:
. . ROOT

22
Input: + cn ? 2 ? vn ? 1 + cn ? 1 ? vn z3 = c0 + c1 ? v1 + c2 ? v2 + c3 ? v4 + .
Parse:
cn NN ROOT
 +-- + SYM amod
 +-- ? . punct
 +-- 2 CD dep
 +-- vn SYM dep
 +-- cn NN dep
 |   +-- + SYM nn
 |       +-- 1 CD number
 +-- 1 CD dep
 +-- z3 CD dep
 +-- = SYM dep
 +-- c0 CD dep
 +-- + SYM dep
 +-- c1 CD dep
 +-- v1 CD dep
 +-- c2 CD dep
 +-- v2 CD dep
 +-- c3 CD dep
 +-- v4 CD dep
 +-- . . punct

23
Input: .
Parse:
. . ROOT

24
Input: .
Parse:
. . ROOT

25
Input: + cn ? 2 ? vn ? 1 + cn ? 1 ? vn z4 = c0 + c1 ? v1 + c2 ? v2 + c3 ? v3 + .
Parse:
cn NN ROOT
 +-- + SYM amod
 +-- ? . punct
 +-- 2 CD dep
 +-- vn SYM dep
 +-- cn NN dep
 |   +-- + SYM nn
 |       +-- 1 CD number
 +-- 1 CD dep
 +-- z4 CD dep
 +-- = SYM dep
 +-- c0 CD dep
 +-- + SYM dep
 +-- c1 CD dep
 +-- v1 CD dep
 +-- c2 CD dep
 +-- v2 CD dep
 +-- c3 CD dep
 +-- v3 CD dep
 +-- . . punct

26
Input: .
Parse:
. . ROOT

27
Input: .
Parse:
. . ROOT

28
Input: + cn ? 2 ? vn ? 1 + cn ? 1 ? vn .
Parse:
cn NN ROOT
 +-- + SYM nn
 +-- ? . punct
 +-- 2 CD dep
 +-- vn SYM dep
 +-- cn NN dep
 |   +-- + SYM nn
 |       +-- 1 CD number
 +-- 1 CD dep
 +-- vn UH dep
 +-- . . punct

29
Input: .
Parse:
. . ROOT

30
Input: .
Parse:
. . ROOT

31
Input: zi = c0 + c1 ? v1 + c2 ? v2 + .
Parse:
zi NNP ROOT
 +-- = SYM dep
 +-- c0 CD dep
 +-- + SYM dep
 +-- c1 CD dep
 +-- ? . punct
 +-- v1 CD dep
 |   +-- + SYM prep
 |       +-- c2 CD pobj
 +-- v2 CD dep
 +-- . . punct

32
Input: .
Parse:
. . ROOT

33
Input: .
Parse:
. . ROOT

34
Input: + ci ? 1 ? vi ? 1 + ci ? vi+1 + .
Parse:
ci NN ROOT
 +-- + SYM amod
 +-- ? . punct
 +-- vi NN dep
 |   +-- 1 CD dep
 |       +-- ? . punct
 +-- ci NN dep
 |   +-- + SYM dep
 |       +-- 1 CD number
 +-- vi+1 NN dep
 +-- + SYM dep
 +-- . . punct

35
Input: .
Parse:
. . ROOT

36
Input: .
Parse:
. . ROOT

37
Input: + cn ? 1 ? vn .
Parse:
cn NN ROOT
 +-- + SYM amod
 +-- ? . punct
 +-- 1 CD num
 +-- vn UH dep
 +-- . . punct

38
Input: .
Parse:
. . ROOT

39
Input: .
Parse:
. . ROOT

40
Input: zn ? 2 = c0 + c1 ? v1 + c2 ? v2 + c3 ? v3 + .
Parse:
zn UH ROOT
 +-- ? . punct
 +-- c1 CD dep
 |   +-- 2 CD dep
 |   |   +-- = SYM prep
 |   |       +-- c0 CD dep
 |   +-- + SYM dep
 |   +-- ? . punct
 |   +-- c2 CD dep
 |   |   +-- v1 CD num
 |   |   +-- + SYM dep
 |   +-- c3 CD dep
 |       +-- v2 CD num
 |       +-- + SYM dep
 +-- v3 CD dep
 +-- + SYM dep
 +-- . . punct

41
Input: .
Parse:
. . ROOT

42
Input: .
Parse:
. . ROOT

43
Input: + cn ? 2 ? vn ? 1 + cn ? 1 ? vn zn ? 1 = c0 + c1 ? v1 + c2 ? v2 + c3 ? v3 + .
Parse:
cn NN ROOT
 +-- + SYM nn
 +-- ? . punct
 +-- 2 CD dep
 +-- vn SYM dep
 +-- cn NN dep
 |   +-- + SYM nn
 |       +-- 1 CD number
 +-- 1 CD dep
 +-- vn UH dep
 +-- zn SYM dep
 +-- = SYM dep
 +-- c0 CD dep
 +-- + SYM dep
 +-- c1 CD dep
 +-- v1 CD dep
 |   +-- + SYM cc
 |   +-- c2 CD conj
 +-- v2 CD dep
 +-- c3 CD dep
 +-- v3 CD dep
 +-- . . punct

44
Input: .
Parse:
. . ROOT

45
Input: .
Parse:
. . ROOT

46
Input: + cn ? 2 ? vn ? 2 + cn ? 1 ? vn zn = c0 + c1 ? v1 + c2 ? v2 + c3 ? v3 + .
Parse:
cn NN ROOT
 +-- + SYM nn
 +-- ? . punct
 +-- 2 CD num
 +-- vn SYM dep
 +-- ? , punct
 +-- cn NN dep
 |   +-- + SYM nn
 |       +-- 2 CD number
 +-- 1 CD dep
 +-- zn , punct
 +-- = SYM dep
 +-- c0 CD dep
 +-- + SYM dep
 +-- c1 CD dep
 +-- v1 CD dep
 |   +-- + SYM cc
 |   +-- c2 CD conj
 +-- v2 CD dep
 +-- c3 CD dep
 +-- v3 CD dep
 +-- . . punct

47
Input: .
Parse:
. . ROOT

48
Input: .
Parse:
. . ROOT

49
Input: + cn ? 2 ? vn ? 2 + cn ? 1 ? vn ? 1 1 We thank Rakesh Vohra for pointing us to Moulin '' s working paper .
Parse:
cn NN ROOT
 +-- + SYM nn
 +-- ? . punct
 +-- 2 CD num
 +-- vn SYM dep
 +-- ? , punct
 +-- cn NN dep
 |   +-- + SYM nn
 |       +-- 2 CD number
 +-- 1 CD dep
 |   +-- 1 CD num
 +-- thank VBP dep
 |   +-- We PRP nsubj
 |   +-- Vohra NNP dobj
 |   |   +-- Rakesh NNP nn
 |   +-- for IN prep
 |       +-- pointing VBG pcomp
 |           +-- us PRP dobj
 |           +-- to IN prep
 |               +-- Moulin NNP pobj
 +-- '' '' punct
 +-- s POS punct
 +-- paper NN dep
 |   +-- working VBG nn
 +-- . . punct

50
Input: 31 Not all choices of the constants c0 , .
Parse:
choices NNS ROOT
 +-- 31 CD nsubj
 +-- Not RB neg
 +-- all DT det
 +-- of IN prep
 |   +-- constants NNS pobj
 |       +-- the DT det
 |       +-- c0 CD dep
 +-- , , punct
 +-- . . punct

51
Input: .
Parse:
. . ROOT

52
Input: .
Parse:
. . ROOT

53
Input: , cn ? 1 produce a mechanism that is individually rational , and not all choices of the constants produce a mechanism that never incurs a deficit .
Parse:
produce VBP ROOT
 +-- , , punct
 +-- cn NNP nsubj
 |   +-- ? . punct
 |   +-- 1 CD num
 +-- mechanism NN dobj
 |   +-- a DT det
 |   +-- rational JJ rcmod
 |       +-- that WDT nsubj
 |       +-- is VBZ cop
 |       +-- individually RB advmod
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- produce VBP conj
 |           +-- choices NNS nsubj
 |           |   +-- not RB neg
 |           |   +-- all DT det
 |           |   +-- of IN prep
 |           |       +-- constants NNS pobj
 |           |           +-- the DT det
 |           +-- mechanism NN dobj
 |               +-- a DT det
 |               +-- incurs VBZ rcmod
 |                   +-- that WDT nsubj
 |                   +-- never RB neg
 |                   +-- deficit NN dobj
 |                       +-- a DT det
 +-- . . punct

54
Input: Hence , to obtain these properties , we need to place some constraints on the constants .
Parse:
need VBP ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- obtain VB advcl
 |   +-- to TO aux
 |   +-- properties NNS dobj
 |       +-- these DT det
 +-- we PRP nsubj
 +-- place VB xcomp
 |   +-- to TO aux
 |   +-- constraints NNS dobj
 |   |   +-- some DT det
 |   +-- on IN prep
 |       +-- constants NNS pobj
 |           +-- the DT det
 +-- . . punct

55
Input: To satisfy the individual rationality criterion , each agent '' s utility should always be non negative .
Parse:
negative JJ ROOT
 +-- satisfy VB advcl
 |   +-- To TO aux
 |   +-- criterion NN dobj
 |       +-- the DT det
 |       +-- individual JJ amod
 |       +-- rationality NN nn
 +-- , , punct
 +-- utility NN nsubj
 |   +-- agent NN poss
 |       +-- each DT det
 |       +-- '' '' punct
 |       +-- s POS possessive
 +-- should MD aux
 +-- always RB advmod
 +-- be VB cop
 +-- non RB advmod
 +-- . . punct

56
Input: An agent that does not win a unit obtains a utility that is equal to the agent '' s redistribution payment .
Parse:
obtains VBZ ROOT
 +-- agent NN nsubj
 |   +-- An DT det
 |   +-- win VB rcmod
 |       +-- that WDT nsubj
 |       +-- does VBZ aux
 |       +-- not RB neg
 |       +-- unit NN dobj
 |           +-- a DT det
 +-- utility NN dobj
 |   +-- a DT det
 |   +-- equal JJ rcmod
 |       +-- that WDT nsubj
 |       +-- is VBZ cop
 |       +-- to IN prep
 |           +-- payment NN pobj
 |               +-- agent NN poss
 |               |   +-- the DT det
 |               |   +-- '' '' punct
 |               |   +-- s POS possessive
 |               +-- redistribution NN nn
 +-- . . punct

57
Input: An agent that wins a unit obtains a utility that is equal to the agent '' s valuation for the unit , minus the VCG payment ? vm+1 , plus the agent '' s redistribution payment .
Parse:
obtains VBZ ROOT
 +-- agent NN nsubj
 |   +-- An DT det
 |   +-- wins VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- unit NN dobj
 |           +-- a DT det
 +-- utility NN dobj
 |   +-- a DT det
 |   +-- equal JJ rcmod
 |       +-- that WDT nsubj
 |       +-- is VBZ cop
 |       +-- to IN prep
 |           +-- valuation NN pobj
 |               +-- agent NN poss
 |               |   +-- the DT det
 |               |   +-- '' '' punct
 |               |   +-- s POS possessive
 |               +-- for IN prep
 |               |   +-- unit NN pobj
 |               |       +-- the DT det
 |               +-- , , punct
 |               +-- minus CC cc
 |               +-- payment NN conj
 |               |   +-- agent NN poss
 |               |   |   +-- the DT det
 |               |   |   +-- '' '' punct
 |               |   |   +-- s POS possessive
 |               |   +-- redistribution NN nn
 |               +-- plus CC cc
 +-- . . punct

58
Input: Consider agent an , the agent with the lowest bid .
Parse:
Consider VB ROOT
 +-- agent NN iobj
 +-- agent NN dobj
 |   +-- an DT det
 |   +-- , , punct
 |   +-- the DT det
 |   +-- with IN prep
 |       +-- bid NN pobj
 |           +-- the DT det
 |           +-- lowest JJS amod
 +-- . . punct

59
Input: Since this agent does not win an item -LRB- m < n -RRB- , her utility is just her redistribution payment zn .
Parse:
zn NN ROOT
 +-- win VB advcl
 |   +-- Since IN mark
 |   +-- agent NN nsubj
 |   |   +-- this DT det
 |   +-- does VBZ aux
 |   +-- not RB neg
 |   +-- item NN dobj
 |       +-- an DT det
 |       +-- m NNP appos
 |           +-- -LRB- -LRB- punct
 |           +-- < -LRB- punct
 |           +-- n RB advmod
 |           +-- -RRB- -RRB- punct
 +-- , , punct
 +-- utility NN nsubj
 |   +-- her PRP$ poss
 +-- is VBZ cop
 +-- just RB advmod
 +-- her PRP$ poss
 +-- payment NN nn
 |   +-- redistribution NN amod
 +-- . . punct

60
Input: Hence , for the mechanism to be individually rational , the ci must be such that zn is always nonnegative .
Parse:
such JJ ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- rational JJ advcl
 |   +-- for IN mark
 |   +-- mechanism NN nsubj
 |   |   +-- the DT det
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- individually RB advmod
 +-- ci NN nsubj
 |   +-- the DT det
 +-- must MD aux
 +-- be VB cop
 +-- nonnegative JJ ccomp
 |   +-- that IN mark
 |   +-- zn NN nsubj
 |   +-- is VBZ cop
 |   +-- always RB advmod
 +-- . . punct

61
Input: If the ci have this property , then it actually follows that zi is nonnegative for every i , for the following reason .
Parse:
follows VBZ ROOT
 +-- have VBP advcl
 |   +-- If IN mark
 |   +-- ci NN nsubj
 |   |   +-- the DT det
 |   +-- property NN dobj
 |       +-- this DT det
 +-- , , punct
 +-- then RB advmod
 +-- it PRP nsubj
 +-- actually RB advmod
 +-- nonnegative JJ ccomp
 |   +-- that IN mark
 |   +-- zi NN nsubj
 |   +-- is VBZ cop
 |   +-- for IN prep
 |   |   +-- reason NN pobj
 |   |       +-- the DT det
 |   |       +-- following VBG amod
 |   +-- , , punct
 +-- . . punct

62
Input: Suppose there exists some i < n and some vector of bids ? v1 ? ? v2 ? .
Parse:
exists VBZ ROOT
 +-- Suppose VB advmod
 +-- there EX expl
 +-- i PRP nsubj
 |   +-- some DT det
 |   +-- < -LRB- punct
 |   +-- n RB advmod
 |   +-- and CC cc
 |   +-- vector NN conj
 |       +-- some DT det
 |       +-- of IN prep
 |       |   +-- bids NNS pobj
 |       +-- ? . punct
 |       +-- v1 NNP dep
 +-- ? . punct
 +-- v2 CD nsubj
 +-- . . punct

63
Input: .
Parse:
. . ROOT

64
Input: .
Parse:
. . ROOT

65
Input: ? ? vn ? 0 such that zi < 0 .
Parse:
vn NFP ROOT
 +-- ? . punct
 +-- 0 NFP punct
 +-- zi NN dep
 |   +-- such JJ amod
 |   +-- that IN amod
 |   +-- < -LRB- punct
 |   +-- 0 NFP punct
 +-- . . punct

66
Input: Then , consider the bid vector that results from replacing ? vj by ? vj+1 for all j ? i , and letting ? vn = 0 .
Parse:
consider VB ROOT
 +-- Then RB advmod
 +-- , , punct
 +-- vector NN dobj
 |   +-- the DT det
 |   +-- bid NN nn
 |   +-- results NNS rcmod
 |   |   +-- that WDT nsubj
 |   |   +-- from IN prep
 |   |       +-- replacing VBG pcomp
 |   |           +-- ? . punct
 |   |           +-- vj , dobj
 |   |           +-- by IN prep
 |   |           |   +-- ? . punct
 |   |           |   +-- vj+1 CD pobj
 |   |           +-- for IN prep
 |   |           |   +-- j NN pobj
 |   |           |       +-- all DT det
 |   |           +-- i PRP dobj
 |   |           +-- , , punct
 |   |           +-- and CC cc
 |   |           +-- letting VBG conj
 |   +-- ? . punct
 |   +-- 0 CD dep
 |       +-- vn FW nn
 |       +-- = SYM dep
 +-- . . punct

67
Input: If we omit ? vn from this vector , the same vector results that results from omitting ? vi from the original vector .
Parse:
omit VBP ROOT
 +-- If IN mark
 +-- we PRP nsubj
 +-- ? . punct
 +-- vn NFP punct
 +-- from IN prep
 |   +-- vector NN pobj
 |       +-- this DT det
 |       +-- , , punct
 |       +-- results NNS appos
 |           +-- the DT det
 |           +-- same JJ amod
 |           +-- vector NN nn
 |           +-- results VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- from IN prep
 |                   +-- omitting VBG pobj
 |                       +-- ? , punct
 |                       +-- vi NN appos
 |                           +-- from IN prep
 |                               +-- vector NN pobj
 |                                   +-- the DT det
 |                                   +-- original JJ amod
 +-- . . punct

68
Input: Therefore , an '' s redistribution payment under the new vector should be the same as ai '' s redistribution payment under the old vector but this payment is negative .
Parse:
same JJ ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- payment NN nsubj
 |   +-- an DT det
 |   +-- '' '' poss
 |   |   +-- s POS possessive
 |   +-- redistribution NN nn
 |   +-- under IN prep
 |       +-- vector NN pobj
 |           +-- the DT det
 |           +-- new JJ amod
 +-- should MD aux
 +-- be VB cop
 +-- the DT det
 +-- as IN prep
 |   +-- payment NN pobj
 |       +-- ai NNP poss
 |       |   +-- '' '' punct
 |       |   +-- s POS possessive
 |       +-- redistribution NN nn
 |       +-- under IN prep
 |           +-- vector NN pobj
 |               +-- the DT det
 |               +-- old JJ amod
 +-- but CC cc
 +-- negative JJ conj
 |   +-- payment NN nsubj
 |   |   +-- this DT det
 |   +-- is VBZ cop
 +-- . . punct

69
Input: If all redistribution payments are always nonnegative , then the mechanism must be individually rational -LRB- because the VCG mechanism is individually rational , and the redistribution payment only increases an agent '' s utility -RRB- .
Parse:
rational JJ ROOT
 +-- nonnegative JJ advcl
 |   +-- If IN mark
 |   +-- payments NNS nsubj
 |   |   +-- all DT det
 |   |   +-- redistribution NN nn
 |   +-- are VBP cop
 |   +-- always RB advmod
 +-- , , punct
 +-- then RB advmod
 +-- mechanism NN nsubj
 |   +-- the DT det
 +-- must MD aux
 +-- be VB cop
 +-- individually RB advmod
 +-- -LRB- -LRB- punct
 +-- rational JJ advcl
 |   +-- because IN mark
 |   +-- mechanism NN nsubj
 |   |   +-- the DT det
 |   |   +-- VCG NNP nn
 |   +-- is VBZ cop
 |   +-- individually RB advmod
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- increases VBZ conj
 |       +-- payment NN nsubj
 |       |   +-- the DT det
 |       |   +-- redistribution NN nn
 |       +-- only RB advmod
 |       +-- agent NN dobj
 |           +-- an DT det
 |           +-- '' '' punct
 |           +-- utility NN dep
 |           |   +-- s POS nn
 |           +-- -RRB- -RRB- punct
 +-- . . punct

70
Input: Therefore , the mechanism is individually rational if and only if for any bid vector , zn ? 0 .
Parse:
rational JJ ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 +-- is VBZ cop
 +-- individually RB advmod
 +-- if IN conj
 +-- and CC cc
 +-- for IN conj
 |   +-- only RB advmod
 |   +-- if IN mark
 |   +-- vector NN pobj
 |       +-- any DT det
 |       +-- bid NN nn
 |       +-- , , punct
 |       +-- zn UH appos
 +-- ? . punct
 +-- 0 NFP punct
 +-- . . punct

71
Input: To satisfy the non deficit criterion , the sum of the redistribution payments should be less than or equal to the total VCG payment .
Parse:
less JJR ROOT
 +-- satisfy VB advcl
 |   +-- To TO aux
 |   +-- criterion NN dobj
 |       +-- the DT det
 |       +-- deficit NN nn
 |           +-- non JJ nn
 +-- , , punct
 +-- sum NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- payments NNS pobj
 |           +-- the DT det
 |           +-- redistribution NN nn
 +-- should MD aux
 +-- be VB cop
 +-- than IN prep
 |   +-- or CC cc
 |   +-- equal JJ conj
 |   +-- to IN prep
 |       +-- payment NN pobj
 |           +-- the DT det
 |           +-- total JJ amod
 |           +-- VCG JJ amod
 +-- . . punct

72
Input: So for any bid vector ? v1 ? ? v2 ? .
Parse:
v2 CD ROOT
 +-- So RB dep
 |   +-- for IN prep
 |   |   +-- vector NN pobj
 |   |       +-- any DT det
 |   |       +-- bid NN nn
 |   +-- ? . punct
 |   +-- v1 CD dep
 +-- ? . punct
 +-- . . punct

73
Input: .
Parse:
. . ROOT

74
Input: .
Parse:
. . ROOT

75
Input: ? ? vn ? 0 , the constants ci should make z1 + z2 + .
Parse:
make VB ROOT
 +-- ? . dep
 |   +-- ? . punct
 |   +-- vn UH discourse
 +-- 0 NFP punct
 +-- , , punct
 +-- ci NN nsubj
 |   +-- the DT det
 |   +-- constants NNS amod
 +-- should MD aux
 +-- z1 CD dobj
 |   +-- + SYM prep
 |       +-- z2 CD dep
 +-- + SYM dep
 +-- . . punct

76
Input: .
Parse:
. . ROOT

77
Input: .
Parse:
. . ROOT

78
Input: + zn ? m ? vm+1 .
Parse:
zn UH ROOT
 +-- + SYM dep
 +-- ? . punct
 +-- m NN discourse
 +-- vm+1 CD dep
 +-- . . punct

79
Input: We define the family of linear VCG redistribution mechanisms to be the set of all redistribution mechanisms corresponding to constants ci that satisfy the above constraints -LRB- so that the mechanisms will be individually rational and have the no deficit property -RRB- .
Parse:
define VBP ROOT
 +-- We PRP nsubj
 +-- family NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- mechanisms NNS pobj
 |           +-- linear JJ amod
 |           +-- VCG CD num
 |           +-- redistribution NN nn
 +-- set NN xcomp
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- mechanisms NNS pobj
 |           +-- all DT det
 |           +-- redistribution NN nn
 |           +-- corresponding VBG partmod
 |               +-- to IN prep
 |                   +-- constants NNS pobj
 |                       +-- ci NN nsubj
 |                           +-- satisfy VBP rcmod
 |                               +-- that WDT nsubj
 |                               +-- constraints NNS dobj
 |                               |   +-- the DT det
 |                               |   +-- above JJ amod
 |                               +-- rational JJ advcl
 |                                   +-- so IN mark
 |                                   |   +-- -LRB- -LRB- punct
 |                                   +-- that IN mark
 |                                   +-- mechanisms NNS nsubj
 |                                   |   +-- the DT det
 |                                   +-- will MD aux
 |                                   +-- be VB cop
 |                                   +-- individually RB advmod
 |                                   +-- and CC cc
 |                                   +-- have VBP conj
 |                                   |   +-- property NN dobj
 |                                   |       +-- the DT det
 |                                   |       +-- no DT det
 |                                   |       +-- deficit NN nn
 |                                   +-- -RRB- -RRB- punct
 +-- . . punct

80
Input: We now give two examples of mechanisms in this family .
Parse:
give VBP ROOT
 +-- We PRP nsubj
 +-- now RB advmod
 +-- examples NNS dobj
 |   +-- two CD num
 |   +-- of IN prep
 |       +-- mechanisms NNS pobj
 |           +-- in IN prep
 |               +-- family NN pobj
 |                   +-- this DT det
 +-- . . punct

81
Input: Example 1 -LRB- Bailey Cavallo mechanism -RRB-
Parse:
Example NNP ROOT
 +-- 1 CD num
 +-- mechanism NN appos
     +-- -LRB- -LRB- punct
     +-- Bailey NNP nn
     +-- Cavallo NNP nn
     +-- -RRB- -RRB- punct

82
Input: Under this mechanism , each agent receives a redistribution payment of m n times the -LRB- m+1 -RRB- th highest bid from another agent .
Parse:
receives VBZ ROOT
 +-- Under IN prep
 |   +-- mechanism NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- agent NN nsubj
 |   +-- each DT det
 +-- payment NN dobj
 |   +-- a DT det
 |   +-- redistribution NN nn
 |   +-- of IN prep
 |   |   +-- m NNP pobj
 |   +-- times NNS dep
 |       +-- n NNP amod
 |       +-- m+1 CD dep
 |           +-- the DT det
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- th RB prep
 |   +-- bid NN pobj
 |       +-- highest JJS amod
 |       +-- from IN prep
 |           +-- agent NN pobj
 |               +-- another DT det
 +-- . . punct

83
Input: Hence , a1 , .
Parse:
Hence RB ROOT
 +-- , , punct
 +-- a1 CD dep
 +-- . . punct

84
Input: .
Parse:
. . ROOT

85
Input: .
Parse:
. . ROOT

86
Input: , am+1 receive a redistribution payment of m n ? vm+2 , and the others receive m n ? vm+1 .
Parse:
receive VB ROOT
 +-- , , punct
 +-- am+1 CD nsubj
 +-- payment NN dobj
 |   +-- a DT det
 |   +-- redistribution NN nn
 |   +-- of IN prep
 |       +-- n NNP pobj
 |           +-- m NNP nn
 |           +-- ? . punct
 |           +-- vm+2 CD num
 +-- and CC cc
 +-- receive VBP conj
 |   +-- others NNS nsubj
 |   |   +-- the DT det
 |   +-- n NNP dobj
 |       +-- m NNP nn
 |       +-- ? . punct
 |       +-- vm+1 CD num
 +-- . . punct

87
Input: Thus , the total redistribution payment is -LRB- m+1 -RRB- m n ? vm+2 + -LRB- n ? m ? 1 -RRB- m n ? vm+1 .
Parse:
m+1 CD ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- payment NN nsubj
 |   +-- the DT det
 |   +-- total JJ amod
 |   +-- redistribution NN nn
 +-- is VBZ cop
 +-- -LRB- -LRB- punct
 +-- -RRB- -RRB- punct
 +-- n NNP dep
 |   +-- m NNP nn
 |   +-- ? . punct
 |   +-- vm+2 NNP dep
 |   +-- + SYM dep
 +-- m NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- n RB advmod
 |   +-- ? . punct
 |   +-- 1 CD num
 |   +-- -RRB- -RRB- punct
 +-- n NN dep
 |   +-- m NNP nn
 |   +-- ? . punct
 |   +-- vm+1 CD dep
 +-- . . punct

88
Input: This redistribution mechanism is individually rational , because all the redistribution payments are nonnegative , and never incurs a deficit , because -LRB- m + 1 -RRB- m n ? vm+2 + -LRB- n ? m ? 1 -RRB- m n ? vm+1 ? nm n ? vm+1 = m ? vm+1 .
Parse:
rational JJ ROOT
 +-- mechanism NN nsubj
 |   +-- This DT det
 |   +-- redistribution NN nn
 +-- is VBZ cop
 +-- individually RB advmod
 +-- , , punct
 +-- nonnegative JJ advcl
 |   +-- because IN mark
 |   +-- payments NNS nsubj
 |   |   +-- all PDT predet
 |   |   +-- the DT det
 |   |   +-- redistribution NN nn
 |   +-- are VBP cop
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- incurs VBZ conj
 |       +-- never RB neg
 |       +-- deficit NN dobj
 |           +-- a DT det
 +-- vm+2 NNP advcl
 |   +-- because IN mark
 |   +-- m NNP dep
 |   |   +-- 1 CD num
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- n NN advmod
 |   +-- n NN dep
 |   |   +-- m NNP nn
 |   |   +-- ? . punct
 |   +-- + SYM dep
 |   +-- -LRB- -LRB- punct
 |   +-- n RB advmod
 |   +-- m NN dep
 |   |   +-- ? . punct
 |   +-- ? . punct
 |   +-- vm+1 CD dep
 |   |   +-- ? . punct
 |   |   +-- nm NNP appos
 |   +-- n CC cc
 |   +-- m NN conj
 |       +-- vm+1 CD num
 |       +-- = SYM nn
 |       +-- ? . punct
 |       +-- vm+1 CD amod
 +-- . . punct

89
Input: -LRB- We note that for this mechanism to make sense , we need n ? m + 2. -RRB- Example 2
Parse:
note VBP ROOT
 +-- -LRB- -LRB- punct
 +-- We PRP nsubj
 +-- need VBP ccomp
 |   +-- that IN mark
 |   +-- make VB advcl
 |   |   +-- for IN mark
 |   |   +-- mechanism NN nsubj
 |   |   |   +-- this DT det
 |   |   +-- to TO aux
 |   |   +-- sense NN dobj
 |   +-- , , punct
 |   +-- we PRP nsubj
 |   +-- n RB advmod
 +-- ? . punct
 +-- Example NN dep
     +-- m NNP dep
     +-- + SYM dep
     +-- 2. LS dep
     |   +-- -RRB- -RRB- punct
     +-- 2 CD num

90
Input: In this mechanism , each agent receives a redistribution payment of m n ? m ? 1 times the -LRB- m + 1 -RRB- th highest reported value from other agents , minus m -LRB- m+1 -RRB- -LRB- n ? m ? 1 -RRB- -LRB- n ? m ? 2 -RRB- times the -LRB- m+2 -RRB- th highest reported value from other agents .
Parse:
receives VBZ ROOT
 +-- In IN prep
 |   +-- mechanism NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- agent NN nsubj
 |   +-- each DT det
 +-- payment NN dobj
 |   +-- a DT det
 |   +-- redistribution NN nn
 |   +-- of IN prep
 |       +-- n NNP pobj
 |           +-- m NNP nn
 |           +-- ? . punct
 |           +-- m NN dep
 +-- ? . punct
 +-- m NNP dobj
 |   +-- times NNS num
 |   |   +-- 1 CD number
 |   +-- the DT det
 |   +-- -LRB- -LRB- punct
 |   +-- + SYM prep
 |   |   +-- 1 CD pobj
 |   +-- -RRB- -RRB- punct
 |   +-- value NN dep
 |   |   +-- reported JJ amod
 |   |   |   +-- highest RBS advmod
 |   |   |       +-- th RB advmod
 |   |   +-- from IN prep
 |   |       +-- agents NNS pobj
 |   |           +-- other JJ amod
 |   +-- , , punct
 |   +-- m NN dep
 |   |   +-- m NN dep
 |   |   |   +-- m NNP dep
 |   |   |   |   +-- minus CC nn
 |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   |   +-- m+1 CD dep
 |   |   |   |   +-- -RRB- -RRB- punct
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- n RB dep
 |   |   |   +-- ? . punct
 |   |   |   +-- 1 CD num
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- n RB amod
 |   |   +-- ? . punct
 |   +-- ? . punct
 |   +-- 2 CD num
 |   +-- times NNS dep
 |       +-- reported VBN rcmod
 |           +-- m+2 CD nsubj
 |           |   +-- the DT det
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- -RRB- -RRB- punct
 |           +-- highest RBS advmod
 |           |   +-- th RB advmod
 |           +-- value NN dobj
 |           +-- from IN prep
 |               +-- agents NNS pobj
 |                   +-- other JJ amod
 +-- . . punct

91
Input: Thus , the total redistribution payment is m ? vm+1 ? m -LRB- m+1 -RRB- -LRB- m+2 -RRB- -LRB- n ? m ? 1 -RRB- -LRB- n ? m ? 2 -RRB- ? vm+3 .
Parse:
vm+1 CD ROOT
 +-- m VBN dep
 |   +-- Thus RB advmod
 |   +-- , , punct
 |   +-- payment NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- total JJ amod
 |   |   +-- redistribution NN nn
 |   +-- is VBZ auxpass
 |   +-- ? . punct
 +-- ? . punct
 +-- m NN dep
 |   +-- -LRB- -LRB- punct
 |   +-- n RB amod
 |   +-- ? . punct
 |   +-- 2 CD num
 |   +-- -RRB- -RRB- punct
 +-- -RRB- -RRB- punct
 +-- -LRB- -LRB- punct
 +-- m+2 CD dep
 +-- vm+3 CD dep
 +-- . . punct

92
Input: If n ? 2m+3 -LRB- which is equivalent to m n ? m ? 1 ? m -LRB- m+1 -RRB- -LRB- n ? m ? 1 -RRB- -LRB- n ? m ? 2 -RRB- -RRB- , then each agent always receives a nonnegative redistribution payment , thus the mechanism is individually rational .
Parse:
rational JJ ROOT
 +-- receives VBZ advcl
 |   +-- If IN mark
 |   +-- n NNP nsubj
 |   |   +-- ? . prep
 |   |   |   +-- 2m+3 NNP pobj
 |   |   +-- equivalent JJ dep
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- which WDT nsubj
 |   |   |   +-- is VBZ cop
 |   |   |   +-- to IN prep
 |   |   |   |   +-- n NNP pobj
 |   |   |   |       +-- m VB nn
 |   |   |   +-- ? . punct
 |   |   |   +-- m NN dobj
 |   |   |   +-- 1 CD dobj
 |   |   |   |   +-- ? . punct
 |   |   |   |   +-- m NN prep
 |   |   |   |       +-- m+1 CD dep
 |   |   |   |           +-- -LRB- -LRB- punct
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- m NN dep
 |   |   |   +-- n RB amod
 |   |   |   +-- ? . punct
 |   |   |   +-- 1 CD num
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- m NN appos
 |   |       +-- -LRB- -LRB- punct
 |   |       +-- n RB amod
 |   |       +-- ? . punct
 |   |       +-- 2 CD num
 |   |       +-- -RRB- -RRB- punct
 |   +-- , , punct
 |   +-- then RB advmod
 |   +-- agent NN nsubj
 |   |   +-- each DT det
 |   +-- always RB advmod
 |   +-- payment NN dobj
 |       +-- a DT det
 |       +-- nonnegative JJ amod
 |       +-- redistribution NN nn
 +-- , , punct
 +-- thus RB advmod
 +-- mechanism NN nsubj
 |   +-- the DT det
 +-- is VBZ cop
 +-- individually RB advmod
 +-- . . punct

93
Input: Also , the mechanism never incurs a deficit , because the total VCG payment is m ? vm+1 , which is greater than the amount m ? vm+1 ? m -LRB- m+1 -RRB- -LRB- m+2 -RRB- -LRB- n ? m ? 1 -RRB- -LRB- n ? m ? 2 -RRB- ? vm+3 that is redistributed .
Parse:
incurs VBZ ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- mechanism NN nsubj
 |   +-- the DT det
 +-- never RB neg
 +-- deficit NN dobj
 |   +-- a DT det
 +-- m NNP advcl
 |   +-- because IN mark
 |   +-- payment NN nsubj
 |   |   +-- the DT det
 |   |   +-- total JJ amod
 |   |   +-- VCG JJ amod
 |   +-- is VBZ cop
 |   +-- ? . punct
 |   +-- vm+1 CD num
 |   +-- , , punct
 |   +-- greater JJR rcmod
 |       +-- which WDT nsubj
 |       +-- is VBZ cop
 |       +-- than IN prep
 |           +-- m NN pobj
 |               +-- the DT det
 |               +-- amount NN nn
 |               +-- ? . prep
 |                   +-- vm+1 CD pobj
 +-- ? . punct
 +-- m NN dobj
 |   +-- -LRB- -LRB- punct
 |   +-- m+1 CD dep
 |   +-- -RRB- -RRB- punct
 |   +-- m+2 CD dep
 |   +-- m NN dep
 |   |   +-- n RB amod
 |   |   +-- ? . punct
 |   |   +-- 2 CD num
 |   +-- ? . punct
 |   +-- vm+3 CD dep
 |       +-- redistributed VBN rcmod
 |           +-- that WDT nsubj
 |           +-- is VBZ cop
 +-- . . punct

94
Input: Which of these two mechanisms is better ? Is there another mechanism that is even better ? This is what we study in the next section. .
Parse:
Is VBZ ROOT
 +-- better JJR dep
 |   +-- Which WDT nsubj
 |   |   +-- of IN prep
 |   |       +-- mechanisms NNS pobj
 |   |           +-- these DT det
 |   |           +-- two CD num
 |   +-- is VBZ cop
 +-- ? . punct
 +-- there EX expl
 +-- mechanism NN nsubj
 |   +-- another DT det
 |   +-- better JJR rcmod
 |       +-- that WDT nsubj
 |       +-- is VBZ cop
 |       +-- even RB advmod
 +-- is VBZ dep
 |   +-- This DT nsubj
 |   +-- study VBP ccomp
 |       +-- what WP dobj
 |       +-- we PRP nsubj
 |       +-- in IN prep
 |           +-- section. NN pobj
 |               +-- the DT det
 |               +-- next JJ amod
 +-- . . punct
