
1
Input: OPTIMAL NASH EQUILIBRIUM We have seen that the Nash equilibrium that maximizes the social welfare may involve strategies that are not in Q .
Parse:
seen VBN ROOT
 +-- NASH NNP nsubj
 |   +-- OPTIMAL NNP nn
 +-- EQUILIBRIUM FW advmod
 +-- We PRP nsubj
 +-- have VBP aux
 +-- involve VB ccomp
 |   +-- that IN mark
 |   +-- equilibrium NN nsubj
 |   |   +-- the DT det
 |   |   +-- Nash NNP nn
 |   |   +-- maximizes VBZ rcmod
 |   |       +-- that WDT nsubj
 |   |       +-- welfare NN dobj
 |   |           +-- the DT det
 |   |           +-- social JJ amod
 |   +-- may MD aux
 |   +-- strategies NNS dobj
 |       +-- are VBP rcmod
 |           +-- that WDT nsubj
 |           +-- not RB neg
 |           +-- in IN prep
 |               +-- Q NN pobj
 +-- . . punct

2
Input: Hence , in this section we focus on finding a Nash equilibrium that is almost optimal from the social welfare perspective .
Parse:
focus VBP ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- we PRP nsubj
 +-- on IN prep
 |   +-- finding VBG pcomp
 |       +-- equilibrium NN dobj
 |           +-- a DT det
 |           +-- Nash NN nn
 |           +-- optimal JJ rcmod
 |               +-- that WDT nsubj
 |               +-- is VBZ cop
 |               +-- almost RB advmod
 |               +-- from IN prep
 |                   +-- perspective NN pobj
 |                       +-- the DT det
 |                       +-- welfare NN nn
 |                           +-- social JJ amod
 +-- . . punct

3
Input: We propose an algorithm that for any > 0 finds a Nash equilibrium whose total payoff is within from optimal .
Parse:
propose VBP ROOT
 +-- We PRP nsubj
 +-- algorithm NN dobj
 |   +-- an DT det
 |   +-- finds VBZ rcmod
 |       +-- that IN nsubj
 |       +-- for IN prep
 |       |   +-- > NNS pobj
 |       |       +-- any DT det
 |       |       +-- 0 CD num
 |       +-- equilibrium NN dobj
 |           +-- a DT det
 |           +-- Nash NNP nn
 |           +-- is VBZ rcmod
 |               +-- payoff NN nsubj
 |               |   +-- whose WP$ poss
 |               |   +-- total JJ amod
 |               +-- within IN prep
 |                   +-- from IN pcomp
 |                       +-- optimal NN pobj
 +-- . . punct

4
Input: The running time of this algorithm is polynomial in 1 , n and |Pmax| -LRB- recall that Pmax is the maximum absolute value of an entry of a payoff matrix -RRB- .
Parse:
polynomial JJ ROOT
 +-- time NN nsubj
 |   +-- The DT det
 |   +-- running VBG nn
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- this DT det
 +-- is VBZ cop
 +-- in IN prep
 |   +-- 1 CD pobj
 +-- , , punct
 +-- n CC advmod
 |   +-- and CC cc
 |   +-- |Pmax| NN conj
 +-- recall VB ccomp
 |   +-- -LRB- -LRB- punct
 |   +-- value NN ccomp
 |   |   +-- that IN mark
 |   |   +-- Pmax NNP nsubj
 |   |   +-- is VBZ cop
 |   |   +-- the DT det
 |   |   +-- maximum JJ amod
 |   |   +-- absolute JJ amod
 |   |   +-- of IN prep
 |   |       +-- entry NN pobj
 |   |           +-- an DT det
 |   |           +-- of IN prep
 |   |               +-- matrix NN pobj
 |   |                   +-- a DT det
 |   |                   +-- payoff NN nn
 |   +-- -RRB- -RRB- punct
 +-- . . punct

5
Input: While the negative result of the previous section is for graphical games on paths , our algorithm applies to a wider range of scenarios .
Parse:
applies VBZ ROOT
 +-- is VBZ advcl
 |   +-- While IN mark
 |   +-- result NN nsubj
 |   |   +-- the DT det
 |   |   +-- negative JJ amod
 |   |   +-- of IN prep
 |   |       +-- section NN pobj
 |   |           +-- the DT det
 |   |           +-- previous JJ amod
 |   +-- for IN prep
 |       +-- games NNS pobj
 |           +-- graphical JJ amod
 |           +-- on IN prep
 |               +-- paths NNS pobj
 +-- , , punct
 +-- algorithm NN nsubj
 |   +-- our PRP$ poss
 +-- to IN prep
 |   +-- range NN pobj
 |       +-- a DT det
 |       +-- wider JJR amod
 |       +-- of IN prep
 |           +-- scenarios NNS pobj
 +-- . . punct

6
Input: Namely , it runs in polynomial time on bounded degree trees 166 as long as the best response policy of each vertex , given its parent , can be represented as a union of a polynomial number of rectangles .
Parse:
represented VBN ROOT
 +-- runs VBZ nsubjpass
 |   +-- Namely RB advmod
 |   +-- , , punct
 |   +-- it PRP nsubj
 |   +-- in IN prep
 |   |   +-- time NN pobj
 |   |       +-- polynomial JJ amod
 |   +-- on IN prep
 |   |   +-- trees NNS pobj
 |   |       +-- bounded VBN amod
 |   |       +-- degree NN nn
 |   |       +-- 166 CD num
 |   +-- long RB advmod
 |   |   +-- as RB advmod
 |   |   +-- as IN prep
 |   |       +-- policy NN pobj
 |   |           +-- the DT det
 |   |           +-- response NN nn
 |   |           |   +-- best JJS amod
 |   |           +-- of IN prep
 |   |               +-- vertex NN pobj
 |   |                   +-- each DT det
 |   +-- given VBN prep
 |       +-- parent NN dep
 |           +-- its PRP$ poss
 +-- can MD aux
 +-- be VB auxpass
 +-- as IN prep
 |   +-- union NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- number NN pobj
 |               +-- a DT det
 |               +-- polynomial JJ amod
 |               +-- of IN prep
 |                   +-- rectangles NNS pobj
 +-- . . punct

7
Input: Note that path graphs always satisfy this condition
Parse:
Note VB ROOT
 +-- satisfy VB ccomp
     +-- that DT mark
     +-- graphs NNS nsubj
     |   +-- path NN nn
     +-- always RB advmod
     +-- condition NN dobj
         +-- this DT det

8
Input: Consequently , for path graphs the running time of our algorithm is guaranteed to be polynomial .
Parse:
guaranteed VBN ROOT
 +-- Consequently RB advmod
 +-- , , punct
 +-- for IN prep
 |   +-- graphs NNS pobj
 |       +-- path NN nn
 +-- time NN nsubjpass
 |   +-- the DT det
 |   +-- running VBG nn
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- our PRP$ poss
 +-- is VBZ auxpass
 +-- polynomial JJ xcomp
 |   +-- to TO aux
 |   +-- be VB cop
 +-- . . punct

9
Input: -LRB- Note that -LRB- 9 -RRB- exhibits a family of graphical games on bounded degree trees for which the best response policies of some of the vertices , given their parents , have exponential size , when represented as unions of rectangles. -RRB- Due to space restrictions , in this version of the paper we present the algorithm for the case where the graph underlying the graphical game is a path .
Parse:
Note VB ROOT
 +-- -LRB- -LRB- punct
 +-- that IN dobj
     +-- exhibits VBZ appos
         +-- -LRB- -LRB- punct
         +-- 9 CD num
         +-- -RRB- -RRB- punct
         +-- family NN dobj
         |   +-- a DT det
         |   +-- of IN prep
         |       +-- games NNS pobj
         |           +-- graphical JJ amod
         |           +-- on IN prep
         |           |   +-- trees NNS pobj
         |           |       +-- bounded JJ amod
         |           |       +-- degree NN nn
         |           +-- have VBP rcmod
         |               +-- for IN prep
         |               |   +-- which WDT pobj
         |               +-- policies NNS nsubj
         |               |   +-- the DT det
         |               |   +-- best JJS amod
         |               |   +-- response NN nn
         |               |   +-- of IN prep
         |               |   |   +-- some DT pobj
         |               |   |       +-- of IN prep
         |               |   |           +-- vertices NNS pobj
         |               |   |               +-- the DT det
         |               |   +-- , , punct
         |               |   +-- given VBN partmod
         |               |       +-- parents NNS dep
         |               |           +-- their PRP$ poss
         |               +-- size NN dobj
         |               |   +-- exponential JJ amod
         |               +-- , , punct
         |               +-- represented VBN advcl
         |               |   +-- when WRB advmod
         |               |   +-- as IN prep
         |               |       +-- unions NNS pobj
         |               |           +-- of IN prep
         |               |               +-- rectangles. NNS pobj
         |               +-- -RRB- -RRB- punct
         +-- to IN prep
         |   +-- Due IN mwe
         |   +-- restrictions NNS pobj
         |       +-- space NN nn
         +-- , , punct
         +-- in IN prep
         |   +-- version NN pobj
         |       +-- this DT det
         |       +-- of IN prep
         |           +-- paper NN pobj
         |               +-- the DT det
         |               +-- present VBP rcmod
         |                   +-- we PRP nsubj
         |                   +-- algorithm NN dobj
         |                   |   +-- the DT det
         |                   +-- for IN prep
         |                       +-- case NN pobj
         |                           +-- the DT det
         |                           +-- path NN rcmod
         |                               +-- where WRB advmod
         |                               +-- graph NN nsubj
         |                               |   +-- the DT det
         |                               |   +-- underlying VBG partmod
         |                               |       +-- game NN dobj
         |                               |           +-- the DT det
         |                               |           +-- graphical JJ amod
         |                               +-- is VBZ cop
         |                               +-- a DT det
         +-- . . punct

10
Input: We then state our result for the general case ; the proof can be found in the full version of this paper -LRB- 10 -RRB- .
Parse:
state VBP ROOT
 +-- We PRP nsubj
 +-- then RB advmod
 +-- result NN dobj
 |   +-- our PRP$ poss
 +-- for IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- general JJ amod
 +-- ; : punct
 +-- found VBN parataxis
 |   +-- proof NN nsubjpass
 |   |   +-- the DT det
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- in IN prep
 |       +-- version NN pobj
 |           +-- the DT det
 |           +-- full JJ amod
 |           +-- of IN prep
 |               +-- paper NN pobj
 |                   +-- this DT det
 |                   +-- 10 CD appos
 |                       +-- -LRB- -LRB- punct
 |                       +-- -RRB- -RRB- punct
 +-- . . punct

11
Input: Suppose that s is a strategy profile for a graphical game G .
Parse:
profile NN ROOT
 +-- Suppose VB csubj
 |   +-- s VBZ dobj
 |       +-- that DT det
 +-- is VBZ cop
 +-- a DT det
 +-- strategy NN nn
 +-- for IN prep
 |   +-- G NNP pobj
 |       +-- a DT det
 |       +-- game NN nn
 |           +-- graphical JJ amod
 +-- . . punct

12
Input: That is , s assigns a mixed strategy to each vertex of G .
Parse:
is VBZ ROOT
 +-- That DT nsubj
 +-- , , punct
 +-- assigns VBZ ccomp
 |   +-- s POS nsubj
 |   +-- strategy NN dobj
 |       +-- a DT det
 |       +-- mixed JJ amod
 |       +-- to IN prep
 |           +-- vertex NN pobj
 |               +-- each DT det
 |               +-- of IN prep
 |                   +-- G NNP pobj
 +-- . . punct

13
Input: let EPV -LRB- s -RRB- be the expected payoff of player V under s and let EP -LRB- s -RRB- =P V EPV -LRB- s -RRB- .
Parse:
let VB ROOT
 +-- payoff NN ccomp
 |   +-- EPV NNP nsubj
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- s VB dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- expected VBN amod
 |   +-- of IN prep
 |   |   +-- V NNP pobj
 |   |       +-- player NN nn
 |   +-- under IN prep
 |       +-- s POS pobj
 +-- and CC cc
 +-- let VB conj
 |   +-- EP NNP dobj
 |       +-- -LRB- -LRB- punct
 |       +-- s VB dep
 |       +-- -RRB- -RRB- punct
 |       +-- EPV NNP dep
 |           +-- =P SYM nn
 |           +-- V NN nn
 |           +-- s VBZ appos
 |               +-- -LRB- -LRB- punct
 |               +-- -RRB- -RRB- punct
 +-- . . punct

14
Input: Let M -LRB- G -RRB- = max -LRB- EP -LRB- s -RRB- | s is a Nash equilibrium for G -RRB- .
Parse:
Let VB ROOT
 +-- equilibrium NN ccomp
 |   +-- M NNP nsubj
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- G NNP dep
 |   |   +-- -RRB- -RRB- punct
 |   |   +-- max NN dep
 |   |   |   +-- = FW nn
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- s NNP dep
 |   |   |   |   +-- EP NNP nn
 |   |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- | , punct
 |   |   +-- s POS possessive
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- Nash NNP nn
 |   +-- for IN prep
 |       +-- G NNP pobj
 +-- -RRB- -RRB- punct
 +-- . . punct

15
Input: THEOREM 3 .
Parse:
THEOREM UH ROOT
 +-- 3 CD num
 +-- . . punct

16
Input: Suppose that G is a graphical game on an nvertex path .
Parse:
Suppose VB ROOT
 +-- game NN ccomp
 |   +-- that IN mark
 |   +-- G NNP nsubj
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- graphical JJ amod
 |   +-- on IN prep
 |       +-- path NN pobj
 |           +-- an DT det
 |           +-- nvertex NN nn
 +-- . . punct

17
Input: Then for any > 0 there is an algorithm that constructs a Nash equilibrium s for G that satisfies EP -LRB- s -RRB- ? M -LRB- G -RRB- ? .
Parse:
is VBZ ROOT
 +-- Then RB advmod
 +-- for IN prep
 |   +-- > NNS pobj
 |       +-- any DT det
 |       +-- 0 CD punct
 +-- there EX expl
 +-- algorithm NN nsubj
 |   +-- an DT det
 |   +-- constructs VBZ rcmod
 |       +-- that WDT nsubj
 |       +-- equilibrium NN dobj
 |           +-- a DT det
 |           +-- Nash NNP nn
 |           +-- s POS possessive
 |           +-- for IN prep
 |           |   +-- G NNP pobj
 |           +-- satisfies VBZ rcmod
 |               +-- that WDT nsubj
 |               +-- EP NNP dobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- s NNP dep
 |                   +-- -RRB- -RRB- punct
 |                   +-- ? , punct
 |                   +-- G NNP appos
 |                       +-- M NNP nn
 |                       +-- -LRB- -LRB- punct
 |                       +-- -RRB- -RRB- punct
 +-- ? . punct
 +-- . . punct

18
Input: The running time of the algorithm is O -LRB- n4 P3 max 3 -RRB- PROOF .
Parse:
O FW ROOT
 +-- time NN nsubj
 |   +-- The DT det
 |   +-- running VBG nn
 |   +-- of IN prep
 |       +-- algorithm NN pobj
 |           +-- the DT det
 +-- is VBZ cop
 +-- -LRB- -LRB- punct
 +-- max NN dep
 |   +-- n4 CD num
 |   +-- P3 CD num
 |   +-- 3 CD num
 +-- -RRB- -RRB- punct
 +-- PROOF NN dep
 +-- . . punct

19
Input: Let -LRB- V1 , .
Parse:
Let VB ROOT
 +-- -LRB- -LRB- punct
 +-- V1 CD dobj
 +-- , , punct
 +-- . . punct

20
Input: .
Parse:
. . ROOT

21
Input: .
Parse:
. . ROOT

22
Input: , Vn -RRB- be the set of all players .
Parse:
set NN ROOT
 +-- , , punct
 +-- Vn NNP nsubj
 |   +-- -RRB- -RRB- punct
 +-- be VB cop
 +-- the DT det
 +-- of IN prep
 |   +-- players NNS pobj
 |       +-- all DT det
 +-- . . punct

23
Input: We start by constructing the best response policies for all Vi , i = 1 , .
Parse:
start VBP ROOT
 +-- We PRP nsubj
 +-- by IN prep
 |   +-- constructing VBG pcomp
 |       +-- policies NNS dobj
 |           +-- the DT det
 |           +-- best JJS amod
 |           +-- response NN nn
 |           +-- for IN prep
 |               +-- Vi NNP pobj
 |                   +-- all PDT det
 +-- , , punct
 +-- = VBD ccomp
 |   +-- i PRP nsubj
 |   +-- 1 CD dobj
 +-- . . punct

24
Input: .
Parse:
. . ROOT

25
Input: .
Parse:
. . ROOT

26
Input: , n ? 1 .
Parse:
1 CD ROOT
 +-- , , punct
 +-- n CC advmod
 +-- ? . punct
 +-- . . punct

27
Input: As shown in -LRB- 9 -RRB- , this can be done in time O -LRB- n3 -RRB- .
Parse:
done VBN ROOT
 +-- shown VBN advcl
 |   +-- As IN mark
 |   +-- in IN prep
 |       +-- 9 CD pobj
 |           +-- -LRB- -LRB- punct
 |           +-- -RRB- -RRB- punct
 +-- , , punct
 +-- this DT nsubjpass
 +-- can MD aux
 +-- be VB auxpass
 +-- in IN prep
 |   +-- time NN pobj
 +-- O NNP dobj
 |   +-- -LRB- -LRB- punct
 |   +-- n3 CD dep
 |   +-- -RRB- -RRB- punct
 +-- . . punct
