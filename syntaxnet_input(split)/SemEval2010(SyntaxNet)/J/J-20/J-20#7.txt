
1
Input: All our experiments were performed in Linux -LRB- Red Hat 9.0 -RRB- , using a Dell PC with a 3GHz Intel Pentium 4 processor , and 1GB of RAM .
Parse:
performed VBN ROOT
 +-- experiments NNS nsubjpass
 |   +-- All PDT predet
 |   +-- our PRP$ poss
 +-- were VBD auxpass
 +-- in IN prep
 |   +-- Linux NNP pobj
 |       +-- -LRB- -LRB- punct
 |       +-- Hat NNP dep
 |       |   +-- Red NNP nn
 |       |   +-- 9.0 CD dep
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- using VBG xcomp
 |   +-- PC NN dobj
 |   |   +-- a DT det
 |   |   +-- Dell NNP nn
 |   +-- with IN prep
 |       +-- processor NN pobj
 |           +-- a DT det
 |           +-- 3GHz CD num
 |           +-- Intel NNP nn
 |           +-- Pentium NNP nn
 |               +-- 4 CD num
 +-- and CC cc
 +-- 1GB CD conj
 |   +-- of IN prep
 |       +-- RAM NN pobj
 +-- . . punct

2
Input: Wherever we used CPLEX -LRB- e.g. , in solving the LP and as a primal heuristic , as discussed in the previous sections -RRB- , we used CPLEX 10.010 .
Parse:
used VBD ROOT
 +-- used VBD advcl
 |   +-- Wherever WRB advmod
 |   +-- we PRP nsubj
 |   +-- CPLEX NNP dobj
 |   +-- e.g. JJ parataxis
 |       +-- -LRB- -LRB- punct
 |       +-- , , punct
 |       +-- in IN prep
 |       |   +-- solving VBG pcomp
 |       |   |   +-- LP NN dobj
 |       |   |       +-- the DT det
 |       |   +-- and CC cc
 |       |   +-- as IN conj
 |       |       +-- heuristic NN pobj
 |       |           +-- a DT det
 |       |           +-- primal JJ amod
 |       +-- discussed VBN advcl
 |       |   +-- as IN mark
 |       |   +-- in IN prep
 |       |       +-- sections NNS pobj
 |       |           +-- the DT det
 |       |           +-- previous JJ amod
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- we PRP nsubj
 +-- 10.010 CD dobj
 |   +-- CPLEX NNP nn
 +-- . . punct

3
Input: Figure 6 shows the runtime performance of four clearing algorithms .
Parse:
shows VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 6 CD num
 +-- performance NN dobj
 |   +-- the DT det
 |   +-- runtime JJ amod
 |   +-- of IN prep
 |       +-- algorithms NNS pobj
 |           +-- four CD num
 |           +-- clearing NN nn
 +-- . . punct

4
Input: For each market size listed , we randomly generated 10 markets , and attempted to clear them using each of the algorithms .
Parse:
generated VBD ROOT
 +-- For IN prep
 |   +-- size NN pobj
 |       +-- each DT det
 |       +-- market NN nn
 |       +-- listed VBN partmod
 +-- , , punct
 +-- we PRP nsubj
 +-- randomly RB advmod
 +-- markets NNS dobj
 |   +-- 10 CD num
 +-- and CC cc
 +-- attempted VBD conj
 |   +-- clear VB xcomp
 |       +-- to TO aux
 |       +-- them PRP dobj
 |       +-- using VBG xcomp
 |           +-- each DT dobj
 |               +-- of IN prep
 |                   +-- algorithms NNS pobj
 |                       +-- the DT det
 +-- . . punct

5
Input: The first algorithm is CPLEX on the full cycle formulation .
Parse:
CPLEX VBN ROOT
 +-- algorithm NN nsubj
 |   +-- The DT det
 |   +-- first JJ amod
 +-- is VBZ cop
 +-- on IN prep
 |   +-- formulation NN pobj
 |       +-- the DT det
 |       +-- full JJ amod
 |       +-- cycle NN nn
 +-- . . punct

6
Input: This algorithm fails to clear any markets with 1000 patients or more .
Parse:
fails VBZ ROOT
 +-- algorithm NN nsubj
 |   +-- This DT det
 +-- clear VB xcomp
 |   +-- to TO aux
 |   +-- markets NNS dobj
 |       +-- any DT det
 |       +-- with IN prep
 |           +-- patients NNS pobj
 |               +-- 1000 CD num
 |               +-- or CC cc
 |               +-- more JJR conj
 +-- . . punct

7
Input: Also , its running time on markets smaller than this is significantly worse than the other algorithms .
Parse:
worse JJR ROOT
 +-- Also RB advmod
 +-- , , punct
 +-- time NN nsubj
 |   +-- its PRP$ poss
 |   +-- running VBG nn
 |   +-- on IN prep
 |       +-- markets NNS pobj
 |           +-- smaller JJR amod
 |               +-- than IN prep
 |                   +-- this DT pobj
 +-- is VBZ cop
 +-- significantly RB advmod
 +-- than IN prep
 |   +-- algorithms NNS pobj
 |       +-- the DT det
 |       +-- other JJ amod
 +-- . . punct

8
Input: The other algorithms are variations of the incremental column generation approach described in Section 5 .
Parse:
variations NNS ROOT
 +-- algorithms NNS nsubj
 |   +-- The DT det
 |   +-- other JJ amod
 +-- are VBP cop
 +-- of IN prep
 |   +-- approach NN pobj
 |       +-- the DT det
 |       +-- generation NN nn
 |       |   +-- incremental JJ amod
 |       |   +-- column NN nn
 |       +-- described VBN partmod
 |           +-- in IN prep
 |               +-- Section NN pobj
 |                   +-- 5 CD num
 +-- . . punct

9
Input: We begin with the following settings -LRB- all optimizations are switched on -RRB-
Parse:
begin VBP ROOT
 +-- We PRP nsubj
 +-- with IN prep
 |   +-- settings NNS pobj
 |       +-- the DT det
 |       +-- following VBG amod
 +-- switched VBN parataxis
     +-- -LRB- -LRB- punct
     +-- optimizations NNS nsubjpass
     |   +-- all DT det
     +-- are VBP auxpass
     +-- on IN prt
     +-- -RRB- -RRB- punct

10
Input: Column Generation One column at a time .
Parse:
column NN ROOT
 +-- Generation NNP nsubj
 |   +-- Column NNP nn
 |   +-- One CD num
 +-- at IN prep
 |   +-- time NN pobj
 |       +-- a DT det
 +-- . . punct

11
Input: Column Management On , with 400 , 000 column limit .
Parse:
Management NNP ROOT
 +-- Column NNP nn
 +-- On IN advmod
 +-- , , punct
 +-- with IN prep
 |   +-- limit NN pobj
 |       +-- 000 CD nn
 |       |   +-- 400 CD num
 |       |   +-- , , punct
 |       +-- column NN nn
 +-- . . punct

12
Input: Optimality Prover On .
Parse:
Optimality NN ROOT
 +-- Prover NNP dobj
 +-- On RB advmod
 +-- . . punct

13
Input: Primal Heuristic Rounding & CPLEX tree search .
Parse:
Rounding NNP ROOT
 +-- Primal NNP nn
 +-- Heuristic NNP nn
 +-- & CC cc
 +-- search NN conj
 |   +-- CPLEX NNP nn
 |   +-- tree NN nn
 +-- . . punct

14
Input: Branching Rule Uncertainty .
Parse:
Rule NNP ROOT
 +-- Branching NNP nsubj
 +-- Uncertainty NNP dobj
 +-- . . punct

15
Input: 302 The combination of these optimizations allows us to easily clear markets with over 10 , 000 patients .
Parse:
allows VBZ ROOT
 +-- 302 CD dep
 +-- combination NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- optimizations NNS pobj
 |           +-- these DT det
 +-- clear JJ xcomp
 |   +-- us PRP nsubj
 |   +-- to TO aux
 |   +-- easily RB advmod
 |   +-- markets NNS dobj
 |   +-- with IN prep
 |       +-- 10 CD pobj
 |           +-- over IN quantmod
 |           +-- , , punct
 |           +-- patients NNS appos
 |               +-- 000 CD num
 +-- . . punct

16
Input: In each of the next two algorithms , we turn one of these optimizations off to highlight its effectiveness .
Parse:
turn VBP ROOT
 +-- In IN prep
 |   +-- each DT pobj
 |       +-- of IN prep
 |           +-- algorithms NNS pobj
 |               +-- the DT det
 |               +-- next JJ amod
 |               +-- two CD num
 +-- , , punct
 +-- we PRP nsubj
 +-- one CD dobj
 |   +-- of IN prep
 |       +-- optimizations NNS pobj
 |           +-- these DT det
 +-- off RP prt
 +-- highlight VB xcomp
 |   +-- to TO aux
 |   +-- effectiveness NN dobj
 |       +-- its PRP$ poss
 +-- . . punct

17
Input: First , we restrict the seeder so that it only begins with 10 , 000 cycles .
Parse:
restrict VBP ROOT
 +-- First RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- seeder NN dobj
 |   +-- the DT det
 +-- begins VBZ advcl
 |   +-- so IN mark
 |   +-- that IN mark
 |   +-- it PRP nsubj
 |   +-- only RB advmod
 |   +-- with IN prep
 |       +-- 10 CD pobj
 |           +-- , , punct
 |           +-- cycles NNS appos
 |               +-- 000 CD num
 +-- . . punct

18
Input: This setting is faster for smaller instances , since the LP relaxations are smaller , and faster to solve .
Parse:
faster JJR ROOT
 +-- setting NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- for IN prep
 |   +-- instances NNS pobj
 |       +-- smaller JJR amod
 +-- , , punct
 +-- smaller JJR advcl
 |   +-- since IN mark
 |   +-- relaxations NNS nsubj
 |   |   +-- the DT det
 |   |   +-- LP NN nn
 |   +-- are VBP cop
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- faster JJR conj
 |       +-- solve VB ccomp
 |           +-- to TO aux
 +-- . . punct

19
Input: However , at 5000 vertices , this effect starts to be offset by the additional column generation that must be performed .
Parse:
starts VBZ ROOT
 +-- However RB advmod
 +-- , , punct
 +-- at IN prep
 |   +-- vertices NNS pobj
 |       +-- 5000 CD num
 +-- effect NN nsubj
 |   +-- this DT det
 +-- offset VBN xcomp
 |   +-- to TO aux
 |   +-- be VB auxpass
 |   +-- by IN prep
 |       +-- generation NN pobj
 |           +-- the DT det
 |           +-- additional JJ amod
 |           +-- column NN nn
 |           +-- performed VBN rcmod
 |               +-- that WDT nsubjpass
 |               +-- must MD aux
 |               +-- be VB auxpass
 +-- . . punct

20
Input: For larger instance , this restricted seeder is clearly worse .
Parse:
worse JJR ROOT
 +-- For IN prep
 |   +-- instance NN pobj
 |       +-- larger JJR amod
 +-- , , punct
 +-- seeder NN nsubj
 |   +-- this DT det
 |   +-- restricted VBN amod
 +-- is VBZ cop
 +-- clearly RB advmod
 +-- . . punct

21
Input: Finally , we restore the seeder to its optimized setting , but this time , remove the optimality prover described in Section 5.2.3 .
Parse:
restore VBP ROOT
 +-- Finally RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- seeder NN dobj
 |   +-- the DT det
 +-- to IN prep
 |   +-- setting NN pobj
 |       +-- its PRP$ poss
 |       +-- optimized VBN amod
 +-- but CC cc
 +-- remove VB conj
 |   +-- time NN nsubj
 |   |   +-- this DT det
 |   +-- , , punct
 |   +-- prover NN dobj
 |       +-- the DT det
 |       +-- optimality NN nn
 |       +-- described VBN partmod
 |           +-- in IN prep
 |               +-- Section NNP pobj
 |                   +-- 5.2.3 CD num
 +-- . . punct

22
Input: As in many column generation problems , the tailing off effect is substantial .
Parse:
substantial JJ ROOT
 +-- As IN prep
 |   +-- in IN pcomp
 |       +-- problems NNS pobj
 |           +-- many JJ amod
 |           +-- generation NN nn
 |               +-- column NN nn
 +-- , , punct
 +-- effect NN nsubj
 |   +-- the DT det
 |   +-- tailing NN amod
 |       +-- off RP prt
 +-- is VBZ cop
 +-- . . punct

23
Input: By taking advantage of the properties of our problem , we manage to clear a market with 10 , 000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. .
Parse:
manage VBP ROOT
 +-- By IN prep
 |   +-- taking VBG pcomp
 |       +-- advantage NN dobj
 |       +-- of IN prep
 |           +-- properties NNS pobj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- problem NN pobj
 |                       +-- our PRP$ poss
 +-- , , punct
 +-- we PRP nsubj
 +-- clear VB xcomp
 |   +-- to TO aux
 |   +-- market NN dobj
 |   |   +-- a DT det
 |   +-- with IN prep
 |       +-- 10 CD pobj
 |           +-- , , punct
 |           +-- patients NNS appos
 |               +-- 000 CD num
 |               +-- in IN prep
 |                   +-- time NN pobj
 |                       +-- about RB advmod
 |                       +-- the DT det
 |                       +-- same JJ amod
 |                       +-- taken VBN rcmod
 |                           +-- it PRP nsubj
 |                           +-- would MD aux
 |                           +-- otherwise RB advmod
 |                           +-- have VB aux
 |                           +-- clear VB xcomp
 |                               +-- to TO aux
 |                               +-- market. NN dobj
 |                                   +-- a DT det
 |                                   +-- 6000 CD num
 |                                   +-- patient NN nn
 +-- . . punct
