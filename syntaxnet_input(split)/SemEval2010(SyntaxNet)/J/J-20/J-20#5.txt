
1
Input: AN EDGE FORMULATION In this section , we consider a formulation of the clearing problem as an ILP with one variable for each edge .
Parse:
consider VBP ROOT
 +-- FORMULATION NN nsubj
 |   +-- AN DT det
 |   +-- EDGE NN nn
 +-- In IN prep
 |   +-- section NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- formulation NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- problem NN pobj
 |   |       +-- the DT det
 |   |       +-- clearing NN nn
 |   +-- as IN prep
 |       +-- ILP NNP pobj
 |           +-- an DT det
 |           +-- with IN prep
 |               +-- variable NN pobj
 |                   +-- one CD num
 |                   +-- for IN prep
 |                       +-- edge NN pobj
 |                           +-- each DT det
 +-- . . punct

2
Input: This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle length constraints .
Parse:
based VBN ROOT
 +-- encoding NN nsubjpass
 |   +-- This DT det
 +-- is VBZ auxpass
 +-- on IN prep
 |   +-- algorithm NN pobj
 |       +-- the DT det
 |       +-- following VBG amod
 |       +-- classical JJ amod
 |       +-- for IN prep
 |           +-- solving VBG pcomp
 |               +-- problem NN dobj
 |               |   +-- the DT det
 |               |   +-- directed VBN amod
 |               |   +-- cover NN nn
 |               |       +-- cycle NN nn
 |               +-- with IN prep
 |                   +-- constraints NNS pobj
 |                       +-- no DT det
 |                       +-- length NN nn
 |                           +-- cycle NN nn
 +-- . . punct

3
Input: Given a market G = -LRB- V , E -RRB- , construct a bipartite graph with one vertex for each agent , and one vertex for each item .
Parse:
construct VB ROOT
 +-- Given VBN prep
 |   +-- G NNP dep
 |       +-- a DT det
 |       +-- market NN nn
 |       +-- = SYM punct
 |       +-- -LRB- -LRB- punct
 |       +-- V NNP dep
 |       |   +-- , , punct
 |       |   +-- E NNP appos
 |       +-- -RRB- -RRB- punct
 +-- , , punct
 +-- graph NN dobj
 |   +-- a DT det
 |   +-- bipartite JJ amod
 |   +-- with IN prep
 |       +-- vertex NN pobj
 |           +-- one CD num
 |           +-- for IN prep
 |           |   +-- agent NN pobj
 |           |       +-- each DT det
 |           +-- , , punct
 |           +-- and CC cc
 |           +-- vertex NN conj
 |               +-- one CD num
 |               +-- for IN prep
 |                   +-- item NN pobj
 |                       +-- each DT det
 +-- . . punct

4
Input: Add an edge ev with weight 0 between each agent v and its own item .
Parse:
Add VB ROOT
 +-- ev NN dobj
 |   +-- an DT det
 |   +-- edge NN nn
 |   +-- with IN prep
 |   |   +-- 0 CD pobj
 |   |       +-- weight NN nn
 |   +-- between IN prep
 |       +-- agent NN pobj
 |           +-- each DT det
 |           +-- v NN amod
 |           +-- and CC cc
 |           +-- item NN conj
 |               +-- its PRP$ poss
 |               +-- own JJ amod
 +-- . . punct

5
Input: At this point , the encoding is a perfect matching .
Parse:
matching NN ROOT
 +-- At IN prep
 |   +-- point NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- encoding NN nsubj
 |   +-- the DT det
 +-- is VBZ cop
 +-- a DT det
 +-- perfect JJ amod
 +-- . . punct

6
Input: Now , for each edge e = -LRB- vi , vj -RRB- in the original market , add an edge e with weight we between agent vi and the item of vj .
Parse:
add VB ROOT
 +-- Now RB advmod
 +-- , , punct
 +-- for IN prep
 |   +-- edge NN pobj
 |       +-- each DT det
 +-- e , punct
 +-- = , punct
 +-- -LRB- -LRB- punct
 +-- vi UH discourse
 +-- vj NFP punct
 +-- -RRB- -RRB- punct
 +-- in IN prep
 |   +-- market NN pobj
 |       +-- the DT det
 |       +-- original JJ amod
 +-- e NN dobj
 |   +-- an DT det
 |   +-- edge NN nn
 |   +-- with IN prep
 |   |   +-- we PRP pobj
 |   |       +-- weight NN nn
 |   +-- between IN prep
 |       +-- vi NN pobj
 |           +-- agent NN nn
 |           +-- and CC cc
 |           +-- item NN conj
 |               +-- the DT det
 |               +-- of IN prep
 |                   +-- vj NNP pobj
 +-- . . punct

7
Input: Perfect matchings in this encoding correspond exactly with cycle covers , since whenever an agent '' s item is taken , it must receive some other agent '' s item .
Parse:
correspond VBP ROOT
 +-- matchings NNS nsubj
 |   +-- Perfect JJ amod
 |   +-- in IN prep
 |       +-- encoding VBG pobj
 |           +-- this DT det
 +-- with IN prep
 |   +-- exactly RB advmod
 |   +-- covers NNS pobj
 |       +-- cycle NN nn
 +-- , , punct
 +-- receive VB ccomp
 |   +-- since IN prep
 |   |   +-- taken VBN pcomp
 |   |       +-- whenever WRB advmod
 |   |       +-- item NN nsubjpass
 |   |       |   +-- agent NN poss
 |   |       |       +-- an DT det
 |   |       |       +-- '' '' punct
 |   |       |       +-- s POS possessive
 |   |       +-- is VBZ auxpass
 |   +-- , , punct
 |   +-- it PRP nsubj
 |   +-- must MD aux
 |   +-- item NN dobj
 |       +-- agent NN poss
 |           +-- some DT det
 |           +-- other JJ amod
 |           +-- '' '' punct
 |           +-- s POS possessive
 +-- . . punct

8
Input: It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum weight perfect matching .
Parse:
follows VBZ ROOT
 +-- It PRP nsubj
 +-- solved VBN ccomp
 |   +-- that IN mark
 |   +-- problem NN nsubjpass
 |   |   +-- the DT det
 |   |   +-- unrestricted JJ amod
 |   |   +-- clearing NN nn
 |   +-- can MD aux
 |   +-- be VB auxpass
 |   +-- in IN prep
 |   |   +-- time NN pobj
 |   |       +-- polynomial JJ amod
 |   +-- by IN prep
 |       +-- finding VBG pcomp
 |           +-- matching NN dobj
 |               +-- a DT det
 |               +-- maximum JJ amod
 |               +-- perfect JJ amod
 |                   +-- weight NN npadvmod
 +-- . . punct

9
Input: Figure 3 contains the bipartite graph encoding of the example market from Figure 1 .
Parse:
contains VBZ ROOT
 +-- Figure NN nsubj
 |   +-- 3 CD num
 +-- encoding NN dobj
 |   +-- the DT det
 |   +-- bipartite NN nn
 |   +-- graph NN nn
 |   +-- of IN prep
 |   |   +-- market NN pobj
 |   |       +-- the DT det
 |   |       +-- example NN amod
 |   +-- from IN prep
 |       +-- Figure NNP pobj
 |           +-- 1 CD num
 +-- . . punct

10
Input: The weight 0 edges are encoded by dashed lines , while the market edges are in bold .
Parse:
encoded VBN ROOT
 +-- edges NNS nsubjpass
 |   +-- The DT det
 |   +-- weight NN nn
 |       +-- 0 CD num
 +-- are VBP auxpass
 +-- by IN prep
 |   +-- lines NNS pobj
 |       +-- dashed VBN amod
 +-- , , punct
 +-- are VBP advcl
 |   +-- while IN mark
 |   +-- edges NNS nsubj
 |   |   +-- the DT det
 |   |   +-- market NN nn
 |   +-- in IN prep
 |       +-- bold JJ pobj
 +-- . . punct

11
Input: Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3
Parse:
Agents NNS ROOT
 +-- Items NNS nn
 +-- v1 CD dep
 +-- v2 CD dep
 +-- Figure NN dep
     +-- v3 CD num
     +-- v4 CD num
     +-- v5 CD num
     +-- e1 CD num
     +-- e3 CD num
     +-- e8 CD num
     +-- e2 CD num
     +-- v1 CD num
     +-- v2 CD num
     +-- e7e6 CD num
     +-- e5 CD num
     +-- e4 CD num
     +-- 3 CD num

12
Input: Alternatively , we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G .
Parse:
solve VB ROOT
 +-- Alternatively RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- can MD aux
 +-- problem NN dobj
 |   +-- the DT det
 +-- by IN prep
 |   +-- encoding VBG pcomp
 |       +-- it PRP dobj
 |       +-- as IN prep
 |           +-- ILP NN pobj
 |               +-- an DT det
 |               +-- with IN prep
 |                   +-- variable NN pobj
 |                       +-- one CD num
 |                       +-- for IN prep
 |                       |   +-- edge NN pobj
 |                       |       +-- each DT det
 |                       +-- in IN prep
 |                           +-- G NNP pobj
 |                               +-- the DT det
 |                               +-- original JJ amod
 |                               +-- graph NN nn
 |                                   +-- market NN nn
 +-- . . punct

13
Input: This ILP , given below , has the advantage that it can be extended naturally to deal with cycle length constraints .
Parse:
has VBZ ROOT
 +-- ILP NNP nsubj
 |   +-- This DT det
 +-- , , punct
 +-- given VBN partmod
 |   +-- below RB advmod
 +-- advantage NN dobj
 |   +-- the DT det
 |   +-- extended VBN ccomp
 |       +-- that IN mark
 |       +-- it PRP nsubjpass
 |       +-- can MD aux
 |       +-- be VB auxpass
 |       +-- naturally RB advmod
 |       +-- deal VB xcomp
 |           +-- to TO aux
 |           +-- with IN prep
 |               +-- constraints NNS pobj
 |                   +-- length NN nn
 |                       +-- cycle NN nn
 +-- . . punct

14
Input: Therefore , for the rest of this section , this is the approach we will pursue .
Parse:
approach NN ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- for IN prep
 |   +-- rest NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- section NN pobj
 |               +-- this DT det
 +-- this DT nsubj
 +-- is VBZ cop
 +-- the DT det
 +-- pursue VB rcmod
 |   +-- we PRP nsubj
 |   +-- will MD aux
 +-- . . punct

15
Input: max e ? E wee such that for all vi ? V , the conservation constraint eout= -LRB- vi , vj -RRB- eout ? ein= -LRB- vj , vi -RRB- ein = 0 and capacity constraint eout= -LRB- vi , vj -RRB- eout ? 1 are satisfied .
Parse:
e NNP ROOT
 +-- max NNP nn
 +-- ? . punct
 +-- satisfied JJ dep
 |   +-- E SYM dep
 |   +-- wee NN dep
 |   +-- such JJ dep
 |   +-- that IN mark
 |   +-- for IN prep
 |   |   +-- vi NN pobj
 |   |       +-- all DT det
 |   +-- ? . punct
 |   +-- 0 CD dep
 |   |   +-- V NNP dep
 |   |   |   +-- , , punct
 |   |   |   +-- eout NN dep
 |   |   |   |   +-- eout= NNP nsubj
 |   |   |   |   |   +-- the DT det
 |   |   |   |   |   +-- constraint NN nn
 |   |   |   |   |   |   +-- conservation NN nn
 |   |   |   |   |   +-- vi UH appos
 |   |   |   |   |       +-- -LRB- -LRB- punct
 |   |   |   |   |       +-- , , punct
 |   |   |   |   |       +-- vj NFP appos
 |   |   |   |   |       +-- -RRB- -RRB- punct
 |   |   |   |   +-- ? . punct
 |   |   |   +-- ein= NFP punct
 |   |   |   +-- -LRB- -LRB- punct
 |   |   |   +-- vj UH dep
 |   |   |   |   +-- , , punct
 |   |   |   |   +-- vi NNP appos
 |   |   |   +-- -RRB- -RRB- punct
 |   |   +-- ein CD num
 |   |   +-- = SYM dep
 |   |   +-- and CC cc
 |   |   +-- eout NN conj
 |   |   |   +-- eout= NNP nsubj
 |   |   |       +-- constraint NN nn
 |   |   |       |   +-- capacity NN nn
 |   |   |       +-- vi UH appos
 |   |   |           +-- -LRB- -LRB- punct
 |   |   |           +-- , , punct
 |   |   |           +-- vj NFP appos
 |   |   |           +-- -RRB- -RRB- punct
 |   |   +-- ? . punct
 |   +-- 1 CD nsubj
 |   +-- are VBP cop
 +-- . . punct

16
Input: If cycles are allowed to have length at most L , it is easy to see that we only need to make the following changes to the ILP .
Parse:
easy JJ ROOT
 +-- allowed VBN advcl
 |   +-- If IN mark
 |   +-- cycles NNS nsubjpass
 |   +-- are VBP auxpass
 |   +-- have VB xcomp
 |       +-- to TO aux
 |       +-- length NN dobj
 |       +-- at IN prep
 |           +-- L NNP pobj
 |               +-- most RBS amod
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- see VB xcomp
 |   +-- to TO aux
 |   +-- need VBP ccomp
 |       +-- that IN mark
 |       +-- we PRP nsubj
 |       +-- only RB advmod
 |       +-- make VB xcomp
 |           +-- to TO aux
 |           +-- changes NNS dobj
 |               +-- the DT det
 |               +-- following VBG amod
 |               +-- to IN prep
 |                   +-- ILP NNP pobj
 |                       +-- the DT det
 +-- . . punct

17
Input: For each length L path -LRB- throughout the paper , we do not include cycles in the definition of path -RRB- p = ep1 , ep2 , .
Parse:
include VB ROOT
 +-- For IN prep
 |   +-- path NN pobj
 |       +-- each DT det
 |       +-- L NN nn
 |       |   +-- length NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- throughout IN prep
 |           +-- paper NN pobj
 |               +-- the DT det
 +-- , , punct
 +-- we PRP nsubj
 +-- do VBP aux
 +-- not RB neg
 +-- cycles NNS dobj
 |   +-- in IN prep
 |       +-- definition NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- path NN pobj
 +-- -RRB- -RRB- punct
 +-- p NN dobj
 |   +-- = SYM dep
 |   +-- ep1 CD num
 |   +-- , , punct
 |   +-- ep2 CD appos
 +-- . . punct

18
Input: .
Parse:
. . ROOT

19
Input: .
Parse:
. . ROOT

20
Input: , epL , add a constraint ep1 + ep2 + .
Parse:
add VB ROOT
 +-- , , punct
 +-- epL UH nsubj
 +-- ep2 CD dobj
 |   +-- a DT det
 |   +-- constraint NN amod
 |   +-- ep1 CD num
 |   +-- + SYM dep
 |   +-- + SYM amod
 +-- . . punct

21
Input: .
Parse:
. . ROOT

22
Input: .
Parse:
. . ROOT

23
Input: + epL ? L ? 1 , which precludes path p from being in any feasible solution .
Parse:
+ SYM ROOT
 +-- epL UH dep
 +-- ? . punct
 +-- L NNP dep
 |   +-- ? . punct
 |   +-- 1 CD num
 |   +-- , , punct
 |   +-- precludes VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- path NN dobj
 |           +-- p , punct
 |           +-- from IN prep
 |               +-- being VBG pcomp
 |                   +-- in IN prep
 |                       +-- solution NN pobj
 |                           +-- any DT det
 |                           +-- feasible JJ amod
 +-- . . punct

24
Input: Unfortunately , in a market with only 1000 patients , the number of length 3 paths is in excess of 400 million , and so we can not even construct this ILP without running out of memory .
Parse:
is VBZ ROOT
 +-- Unfortunately RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- excess NN pobj
 |       +-- of IN prep
 |           +-- million CD pobj
 |               +-- 400 CD number
 +-- number NN nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- paths NNS pobj
 |           +-- length NN nn
 |               +-- 3 CD num
 +-- and CC cc
 +-- construct VB conj
 |   +-- so IN mark
 |   +-- we PRP nsubj
 |   +-- can MD aux
 |   +-- not RB neg
 |   +-- even RB advmod
 |   +-- ILP NN dobj
 |   |   +-- this DT det
 |   +-- without IN prep
 |       +-- running VBG pcomp
 |           +-- out IN prep
 |               +-- of IN pcomp
 |                   +-- memory NN pobj
 +-- . . punct

25
Input: Therefore , we use a tree search with an incremental formulation approach .
Parse:
use VBP ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- search NN dobj
 |   +-- a DT det
 |   +-- tree NN nn
 +-- with IN prep
 |   +-- approach NN pobj
 |       +-- an DT det
 |       +-- incremental JJ amod
 |       +-- formulation NN nn
 +-- . . punct

26
Input: Specifically , we use CPLEX , though 298 we add constraints as cutting planes during the tree search process .
Parse:
use VBP ROOT
 +-- Specifically RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- CPLEX NNP dobj
 +-- add VBP advcl
 |   +-- though IN mark
 |   +-- we PRP nsubj
 |   |   +-- 298 CD num
 |   +-- constraints NNS dobj
 |   +-- as IN prep
 |       +-- cutting VBG pcomp
 |           +-- planes NNS dobj
 |           +-- during IN prep
 |               +-- process NN pobj
 |                   +-- the DT det
 |                   +-- search NN nn
 |                       +-- tree NN nn
 +-- . . punct

27
Input: We begin with only a small subset of the constraints in the ILP .
Parse:
begin VBP ROOT
 +-- We PRP nsubj
 +-- with IN prep
 |   +-- subset NN pobj
 |       +-- only RB advmod
 |       +-- a DT det
 |       +-- small JJ amod
 |       +-- of IN prep
 |           +-- constraints NNS pobj
 |               +-- the DT det
 |               +-- in IN prep
 |                   +-- ILP NNP pobj
 |                       +-- the DT det
 +-- . . punct

28
Input: Since this ILP is small , CPLEX can solve its LP relaxation .
Parse:
solve VB ROOT
 +-- small JJ advcl
 |   +-- Since IN mark
 |   +-- ILP NN nsubj
 |   |   +-- this DT det
 |   +-- is VBZ cop
 +-- , , punct
 +-- CPLEX NNP nsubj
 +-- can MD aux
 +-- relaxation NN dobj
 |   +-- its PRP$ poss
 |   +-- LP JJ nn
 +-- . . punct

29
Input: We then check whether any of the missing constraints are violated by the fractional solution .
Parse:
check VB ROOT
 +-- We PRP nsubj
 +-- then RB advmod
 +-- violated VBN ccomp
 |   +-- whether IN mark
 |   +-- any DT nsubjpass
 |   |   +-- of IN prep
 |   |       +-- constraints NNS pobj
 |   |           +-- the DT det
 |   |           +-- missing VBG amod
 |   +-- are VBP auxpass
 |   +-- by IN prep
 |       +-- solution NN pobj
 |           +-- the DT det
 |           +-- fractional JJ amod
 +-- . . punct

30
Input: If so , we generate a set of these constraints , add them to the ILP , and repeat .
Parse:
generate VBP ROOT
 +-- so RB advcl
 |   +-- If IN mark
 +-- , , punct
 +-- we PRP nsubj
 +-- set NN dobj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- constraints NNS pobj
 |           +-- these DT det
 +-- add VB conj
 |   +-- them PRP dobj
 |   +-- to IN prep
 |       +-- ILP NNP pobj
 |           +-- the DT det
 +-- and CC cc
 +-- repeat VB conj
 +-- . . punct

31
Input: Even once all constraints are satisfied , there may be no integral solution matching the fractional upper bound , and even if there were , the LP solver might not find it .
Parse:
solution NN ROOT
 +-- satisfied JJ advcl
 |   +-- Even RB advmod
 |   +-- once RB mark
 |   +-- constraints NNS nsubj
 |   |   +-- all DT det
 |   +-- are VBP cop
 +-- , , punct
 +-- there EX expl
 +-- may MD aux
 +-- be VB cop
 +-- no DT det
 +-- integral JJ amod
 +-- matching VBG partmod
 |   +-- upper JJ dobj
 |       +-- the DT det
 |       +-- fractional JJ amod
 |       +-- bound VBN partmod
 +-- and CC cc
 +-- find VB conj
 |   +-- were VBD advcl
 |   |   +-- even RB advmod
 |   |   +-- if IN mark
 |   |   +-- there EX expl
 |   +-- , , punct
 |   +-- solver NN nsubj
 |   |   +-- the DT det
 |   |   +-- LP NN nn
 |   +-- might MD aux
 |   +-- not RB neg
 |   +-- it PRP dobj
 +-- . . punct

32
Input: In these cases , CPLEX branches on a variable -LRB- we used CPLEX '' s default branching strategy -RRB- , and generates one new search node corresponding to each of the children .
Parse:
branches NNS ROOT
 +-- In IN prep
 |   +-- cases NNS pobj
 |       +-- these DT det
 +-- , , punct
 +-- CPLEX NNP nsubj
 +-- on IN prep
 |   +-- variable NN pobj
 |       +-- a DT det
 +-- used VBD dep
 |   +-- -LRB- -LRB- punct
 |   +-- we PRP nsubj
 |   +-- CPLEX NNP dobj
 |   +-- '' '' punct
 |   +-- s POS punct
 |   +-- strategy NN dobj
 |   |   +-- default NN nn
 |   |   +-- branching VBG nn
 |   +-- -RRB- -RRB- punct
 +-- and CC cc
 +-- generates VBZ conj
 |   +-- node NN dobj
 |       +-- one CD num
 |       +-- new JJ amod
 |       +-- search NN nn
 |       +-- corresponding VBG partmod
 |           +-- to IN prep
 |               +-- each DT pobj
 |                   +-- of IN prep
 |                       +-- children NNS pobj
 |                           +-- the DT det
 +-- . . punct

33
Input: At each node of the search tree that is visited , this process of solving the LP and adding constraints is repeated .
Parse:
repeated VBN ROOT
 +-- At IN prep
 |   +-- node NN pobj
 |       +-- each DT det
 |       +-- of IN prep
 |           +-- tree NN pobj
 |               +-- the DT det
 |               +-- search NN nn
 |               +-- visited VBN rcmod
 |                   +-- that WDT nsubjpass
 |                   +-- is VBZ auxpass
 +-- , , punct
 +-- process NN nsubjpass
 |   +-- this DT det
 |   +-- of IN prep
 |       +-- solving VBG pcomp
 |           +-- LP NN dobj
 |           |   +-- the DT det
 |           +-- and CC cc
 |           +-- adding VBG conj
 |               +-- constraints NNS dobj
 +-- is VBZ auxpass
 +-- . . punct

34
Input: Clearly , this approach yields an optimal solution once the tree search finishes .
Parse:
yields VBZ ROOT
 +-- Clearly RB advmod
 +-- , , punct
 +-- approach NN nsubj
 |   +-- this DT det
 +-- solution NN dobj
 |   +-- an DT det
 |   +-- optimal JJ amod
 +-- finishes NNS advcl
 |   +-- once IN mark
 |   +-- search NN nsubj
 |       +-- the DT det
 |       +-- tree NN nn
 +-- . . punct

35
Input: We still need to explain the details of the constraint seeder -LRB- i.e. , selecting which constraints to begin with -RRB- and the constraint generation -LRB- i.e. , selecting which violated constraints to include -RRB- .
Parse:
need VBP ROOT
 +-- We PRP nsubj
 +-- still RB advmod
 +-- explain VB xcomp
 |   +-- to TO aux
 |   +-- details NNS dobj
 |       +-- the DT det
 |       +-- of IN prep
 |       |   +-- seeder NN pobj
 |       |       +-- the DT det
 |       |       +-- constraint NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- selecting VBG dep
 |       |   +-- i.e. FW advmod
 |       |   +-- , , punct
 |       |   +-- constraints VBZ ccomp
 |       |       +-- which WDT nsubj
 |       |       +-- begin VB xcomp
 |       |           +-- to TO aux
 |       |           +-- with IN prep
 |       +-- -RRB- -RRB- punct
 |       +-- and CC cc
 |       +-- generation NN conj
 |           +-- the DT det
 |           +-- constraint NN nn
 |           +-- -LRB- -LRB- punct
 |           +-- selecting VBG dep
 |           |   +-- i.e. FW advmod
 |           |   +-- , , punct
 |           |   +-- violated VBD ccomp
 |           |       +-- which WDT nsubj
 |           |       +-- constraints NNS dobj
 |           |           +-- include VB infmod
 |           |               +-- to TO aux
 |           +-- -RRB- -RRB- punct
 +-- . . punct

36
Input: We describe these briefly in the next two subsections , respectively .
Parse:
describe VBP ROOT
 +-- We PRP nsubj
 +-- briefly NN dobj
 |   +-- these DT det
 +-- in IN prep
 |   +-- subsections NNS pobj
 |       +-- the DT det
 |       +-- next JJ amod
 |       +-- two CD num
 +-- , , punct
 +-- respectively RB advmod
 +-- . . punct

37
Input: 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L ? 1 that does not have an edge closing the cycle from its head to its tail .
Parse:
have VB ROOT
 +-- Seeder NNP nsubj
 |   +-- 4.1 CD num
 |   +-- Constraint NNP nn
 |   +-- forbids VBZ dep
 |   |   +-- seeder NN nsubj
 |   |   |   +-- The DT det
 |   |   |   +-- main JJ amod
 |   |   |   +-- constraint NN amod
 |   |   |   +-- developed VBD rcmod
 |   |   |       +-- we PRP nsubj
 |   |   +-- path NN dobj
 |   |       +-- any DT det
 |   |       +-- of IN prep
 |   |           +-- L NNP pobj
 |   |               +-- length NN nn
 |   +-- ? . punct
 |   +-- 1 CD num
 |   +-- that DT dep
 +-- does VBZ aux
 +-- not RB neg
 +-- edge NN dobj
 |   +-- an DT det
 |   +-- closing VBG partmod
 |       +-- cycle NN dobj
 |       |   +-- the DT det
 |       +-- from IN prep
 |       |   +-- head NN pobj
 |       |       +-- its PRP$ poss
 |       +-- to IN prep
 |           +-- tail NN pobj
 |               +-- its PRP$ poss
 +-- . . punct

38
Input: While it is computationally expensive to find these constraints , their addition focuses the search away from paths that can not be in the final solution .
Parse:
focuses VBZ ROOT
 +-- expensive JJ advcl
 |   +-- While IN mark
 |   +-- it PRP nsubj
 |   +-- is VBZ cop
 |   +-- computationally RB advmod
 |   +-- find VB xcomp
 |       +-- to TO aux
 |       +-- constraints NNS dobj
 |           +-- these DT det
 +-- , , punct
 +-- addition NN nsubj
 |   +-- their PRP$ poss
 +-- search NN dobj
 |   +-- the DT det
 +-- away RB advmod
 |   +-- from IN prep
 |       +-- paths NNS pobj
 |           +-- be VB rcmod
 |               +-- that WDT nsubj
 |               +-- can MD aux
 |               +-- not RB neg
 |               +-- in IN prep
 |                   +-- solution NN pobj
 |                       +-- the DT det
 |                       +-- final JJ amod
 +-- . . punct

39
Input: We also tried seeding the LP with a random collection of constraints from the ILP .
Parse:
tried VBD ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- seeding VBG xcomp
 |   +-- LP NN dobj
 |   |   +-- the DT det
 |   +-- with IN prep
 |       +-- collection NN pobj
 |           +-- a DT det
 |           +-- random JJ amod
 |           +-- of IN prep
 |               +-- constraints NNS pobj
 |                   +-- from IN prep
 |                       +-- ILP NNP pobj
 |                           +-- the DT det
 +-- . . punct

40
Input: 4.2 Constraint Generation We experimented with several constraint generators .
Parse:
Generation NNP ROOT
 +-- 4.2 LS num
 +-- Constraint NNP nn
 +-- experimented VBD rcmod
 |   +-- We PRP nsubj
 |   +-- with IN prep
 |       +-- generators NNS pobj
 |           +-- several JJ amod
 |           +-- constraint NN amod
 +-- . . punct

41
Input: In each , given a fractional solution , we construct the subgraph of edges with positive value .
Parse:
construct VBP ROOT
 +-- In IN prep
 |   +-- each DT pobj
 +-- , , punct
 +-- given VBN prep
 |   +-- solution NN dep
 |       +-- a DT det
 |       +-- fractional JJ amod
 +-- we PRP nsubj
 +-- subgraph NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- edges NNS pobj
 |           +-- with IN prep
 |               +-- value NN pobj
 |                   +-- positive JJ amod
 +-- . . punct

42
Input: This graph is much smaller than the original graph , so we can perform the following computations efficiently .
Parse:
smaller JJR ROOT
 +-- graph NN nsubj
 |   +-- This DT det
 +-- is VBZ cop
 +-- much RB advmod
 +-- than IN prep
 |   +-- graph NN pobj
 |       +-- the DT det
 |       +-- original JJ amod
 +-- , , punct
 +-- perform VB advcl
 |   +-- so IN mark
 |   +-- we PRP nsubj
 |   +-- can MD aux
 |   +-- computations NNS dobj
 |   |   +-- the DT det
 |   |   +-- following VBG amod
 |   +-- efficiently RB advmod
 +-- . . punct

43
Input: In our first constraint generator , we simply search for length L paths with value sum more than L ? 1 .
Parse:
search VB ROOT
 +-- In IN prep
 |   +-- generator NN pobj
 |       +-- our PRP$ poss
 |       +-- first JJ amod
 |       +-- constraint NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- simply RB advmod
 +-- for IN prep
 |   +-- paths NNS pobj
 |       +-- length NN amod
 |       +-- L NN nn
 |       +-- with IN prep
 |       |   +-- sum NN pobj
 |       |       +-- value NN nn
 |       +-- more JJR amod
 |           +-- than IN prep
 |               +-- L NNP pobj
 |                   +-- ? . punct
 |                   +-- 1 CD num
 +-- . . punct

44
Input: For any such path , we restrict its sum to be at most L ? 1 .
Parse:
restrict VBP ROOT
 +-- For IN prep
 |   +-- path NN pobj
 |       +-- any DT det
 |       +-- such JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- sum NN dobj
 |   +-- its PRP$ poss
 +-- be VB xcomp
 |   +-- to TO aux
 |   +-- at RB prep
 |       +-- L NNP pobj
 |           +-- most RBS amod
 |           +-- ? . punct
 |           +-- 1 CD num
 +-- . . punct

45
Input: Note that if there is a cycle c with length |c| > L , it could contain as many as |c| violating paths .
Parse:
Note VB ROOT
 +-- contain VB ccomp
 |   +-- that IN mark
 |   +-- is VBZ advcl
 |   |   +-- if IN mark
 |   |   +-- there EX expl
 |   |   +-- c NN nsubj
 |   |   |   +-- a DT det
 |   |   |   +-- cycle NN nn
 |   |   |   +-- with IN prep
 |   |   |       +-- length NN pobj
 |   |   +-- L NNP nsubj
 |   |       +-- |c| . nn
 |   |       +-- > -RRB- punct
 |   +-- , , punct
 |   +-- it PRP nsubj
 |   +-- could MD aux
 |   +-- many JJ dobj
 |   |   +-- as RB advmod
 |   |   +-- as IN prep
 |   |       +-- |c| NNP pobj
 |   +-- violating VBG xcomp
 |       +-- paths NNS dobj
 +-- . . punct

46
Input: In our second constraint generator , we only add one constraint for such cycles
Parse:
add VB ROOT
 +-- In IN prep
 |   +-- generator NN pobj
 |       +-- our PRP$ poss
 |       +-- second JJ amod
 |       +-- constraint NN nn
 +-- , , punct
 +-- we PRP nsubj
 +-- only RB advmod
 +-- constraint NN dobj
     +-- one CD num
     +-- for IN prep
         +-- cycles NNS pobj
             +-- such JJ amod

47
Input: This generator made the algorithm slower , so we went in the other direction in developing our final generator .
Parse:
made VBD ROOT
 +-- generator NN nsubj
 |   +-- This DT det
 +-- slower JJR xcomp
 |   +-- algorithm NN nsubj
 |       +-- the DT det
 +-- , , punct
 +-- went VBD advcl
 |   +-- so CC mark
 |   +-- we PRP nsubj
 |   +-- in IN prep
 |       +-- developing VBG pcomp
 |           +-- generator NN dobj
 |               +-- our PRP$ poss
 |               +-- final JJ amod
 +-- . . punct

48
Input: It adds one constraint per violating path p , and furthermore , it adds a constraint for each path with the same interior vertices -LRB- not counting the endpoints -RRB- as p .
Parse:
adds VBZ ROOT
 +-- It PRP nsubj
 +-- constraint NN dobj
 |   +-- one CD num
 |   +-- per IN prep
 |       +-- violating VBG pcomp
 |           +-- p NN dobj
 |               +-- path NN nn
 +-- , , punct
 +-- and CC cc
 +-- adds VBZ conj
 |   +-- furthermore RB advmod
 |   +-- , , punct
 |   +-- it PRP nsubj
 |   +-- constraint NN dobj
 |   |   +-- a DT det
 |   +-- for IN prep
 |       +-- path NN pobj
 |           +-- each DT det
 |           +-- with IN prep
 |           |   +-- vertices NNS pobj
 |           |       +-- the DT det
 |           |       +-- same JJ amod
 |           |       +-- interior NNP amod
 |           |       +-- -LRB- -LRB- punct
 |           |       +-- counting VBG dep
 |           |       |   +-- not RB neg
 |           |       |   +-- endpoints NNS dobj
 |           |       |       +-- the DT det
 |           |       +-- -RRB- -RRB- punct
 |           +-- as IN prep
 |               +-- p NN pobj
 +-- . . punct

49
Input: This improved the overall speed .
Parse:
improved VBD ROOT
 +-- This DT nsubj
 +-- speed NN dobj
 |   +-- the DT det
 |   +-- overall JJ amod
 +-- . . punct

50
Input: 4.3 Experimental performance It turned out that even with these improvements , the edge formulation approach can not clear a kidney exchange with 100 vertices in the time the cycle formulation -LRB- described later in Section 5 -RRB- can clear one with 10 , 000 vertices .
Parse:
performance NN ROOT
 +-- 4.3 LS num
 +-- Experimental JJ amod
 +-- turned VBD rcmod
 |   +-- It PRP nsubj
 |   +-- out RP prt
 |   +-- clear VB ccomp
 |       +-- that IN mark
 |       +-- with IN prep
 |       |   +-- even RB advmod
 |       |   +-- improvements NNS pobj
 |       |       +-- these DT det
 |       +-- , , punct
 |       +-- approach NN nsubj
 |       |   +-- the DT det
 |       |   +-- edge NN nn
 |       |   +-- formulation NN nn
 |       +-- can MD aux
 |       +-- not RB neg
 |       +-- exchange NN dobj
 |       |   +-- a DT det
 |       |   +-- kidney NN nn
 |       |   +-- with IN prep
 |       |       +-- vertices NNS pobj
 |       |           +-- 100 CD num
 |       +-- clear VB ccomp
 |           +-- in IN prep
 |           |   +-- time NN pobj
 |           |       +-- the DT det
 |           +-- formulation NN nsubj
 |           |   +-- the DT det
 |           |   +-- cycle NN nn
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- described VBN partmod
 |           |   |   +-- later RB advmod
 |           |   |   +-- in IN prep
 |           |   |       +-- Section NN pobj
 |           |   |           +-- 5 CD num
 |           |   +-- -RRB- -RRB- punct
 |           +-- can MD aux
 |           +-- one CD dobj
 |               +-- with IN prep
 |                   +-- 10 CD pobj
 |                       +-- , , punct
 |                       +-- vertices NNS appos
 |                           +-- 000 CD num
 +-- . . punct

51
Input: In other words , column generation based approaches turned out to be drastically better than constraint generation based approaches .
Parse:
turned VBD ROOT
 +-- In IN prep
 |   +-- words NNS pobj
 |       +-- other JJ amod
 +-- , , punct
 +-- approaches NNS nsubj
 |   +-- based VBN amod
 |       +-- generation NN dep
 |           +-- column NN nn
 +-- out RP prt
 +-- better JJR xcomp
 |   +-- to TO aux
 |   +-- be VB cop
 |   +-- drastically RB advmod
 |   +-- than IN prep
 |       +-- approaches NNS pobj
 |           +-- generation NN nn
 |           |   +-- constraint NN amod
 |           +-- based VBN amod
 +-- . . punct

52
Input: Therefore , in the rest of the paper , we will focus on the cycle formulation and the column generation based approaches. .
Parse:
focus VB ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- in IN prep
 |   +-- rest NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- paper NN pobj
 |               +-- the DT det
 +-- we PRP nsubj
 +-- will MD aux
 +-- on IN prep
 |   +-- formulation NN pobj
 |       +-- the DT det
 |       +-- cycle NN nn
 |       +-- and CC cc
 |       +-- approaches. NNS conj
 |           +-- the DT det
 |           +-- based VBN amod
 |               +-- generation NN dep
 |                   +-- column NN nn
 +-- . . punct
