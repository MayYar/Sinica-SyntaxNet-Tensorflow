
1
Input: FLOW GAMES We now define the problem of calculating the Banzhaf index in the network flow game .
Parse:
define VBP ROOT
 +-- GAMES NNPS nsubj
 |   +-- FLOW NNP nn
 +-- We PRP nsubj
 +-- now RB advmod
 +-- problem NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- calculating VBG pcomp
 |           +-- index NN dobj
 |           |   +-- the DT det
 |           |   +-- Banzhaf NNP nn
 |           +-- in IN prep
 |               +-- game NN pobj
 |                   +-- the DT det
 |                   +-- network NN nn
 |                   +-- flow NN nn
 +-- . . punct

2
Input: DEFINITION 1 .
Parse:
DEFINITION NN ROOT
 +-- 1 CD num
 +-- . . punct

3
Input: NETWORK FLOW BANZHAF
Parse:
BANZHAF NNP ROOT
 +-- NETWORK NFP punct
 +-- FLOW NNP nn

4
Input: We consider the network flow game , as defined above in Section 3 .
Parse:
consider VBP ROOT
 +-- We PRP nsubj
 +-- game NN dobj
 |   +-- the DT det
 |   +-- flow NN nn
 |       +-- network NN nn
 +-- , , punct
 +-- defined VBN advcl
 |   +-- as IN mark
 |   +-- above IN advmod
 |   +-- in IN prep
 |       +-- Section NN pobj
 |           +-- 3 CD num
 +-- . . punct

5
Input: We are given an agent i , controlling the edge ei , and are asked to calculate the Banzhaf index for that agent .
Parse:
given VBN ROOT
 +-- We PRP nsubjpass
 +-- are VBP auxpass
 +-- agent NN dobj
 |   +-- an DT det
 |   +-- i PRP appos
 +-- , , punct
 +-- controlling VBG partmod
 |   +-- edge NN dobj
 |       +-- the DT det
 |       +-- ei NNP appos
 +-- and CC cc
 +-- asked VBN conj
 |   +-- are VBP auxpass
 |   +-- calculate VB xcomp
 |       +-- to TO aux
 |       +-- index NN dobj
 |       |   +-- the DT det
 |       |   +-- Banzhaf NNP nn
 |       +-- for IN prep
 |           +-- agent NN pobj
 |               +-- that DT det
 +-- . . punct

6
Input: In the network 3 When each ordering of edges is equiprobable , the appropriate index is the Shapley Shubik index .
Parse:
index NN ROOT
 +-- In IN prep
 |   +-- network NN pobj
 |       +-- the DT det
 |       +-- 3 CD num
 +-- equiprobable JJ advcl
 |   +-- When WRB advmod
 |   +-- ordering NN nsubj
 |   |   +-- each DT det
 |   |   +-- of IN prep
 |   |       +-- edges NNS pobj
 |   +-- is VBZ cop
 +-- , , punct
 +-- index NN nsubj
 |   +-- the DT det
 |   +-- appropriate JJ amod
 +-- is VBZ cop
 +-- the DT det
 +-- Shubik NNP nn
 |   +-- Shapley NNP nn
 +-- . . punct

7
Input: 336 The Sixth Intl .
Parse:
Intl NNP ROOT
 +-- 336 CD num
 +-- The DT det
 +-- Sixth NNP nn
 +-- . . punct

8
Input: Joint Conf .
Parse:
Conf NNP ROOT
 +-- Joint NNP nn
 +-- . . punct

9
Input: on Autonomous Agents and Multi Agent Systems -LRB- AAMAS 07 -RRB- flow game , let Cei be the set of all subsets of E that contain ei
Parse:
let VB ROOT
 +-- on IN prep
 |   +-- Agents NNS pobj
 |       +-- Autonomous JJ amod
 |       +-- and CC cc
 |       +-- game NN conj
 |           +-- 07 CD nn
 |           |   +-- Systems NNPS dep
 |           |   |   +-- Multi NNP nn
 |           |   |   +-- Agent NNP nn
 |           |   +-- -LRB- -LRB- punct
 |           |   +-- AAMAS RB nn
 |           |   +-- -RRB- -RRB- punct
 |           +-- flow NN nn
 +-- , , punct
 +-- set NN ccomp
 |   +-- Cei PRP nsubj
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- subsets NNS pobj
 |           +-- all DT det
 |           +-- of IN prep
 |           |   +-- E NNP pobj
 |           +-- contain VBP rcmod
 |               +-- that WDT nsubj
 +-- ei . punct

10
Input: In this game , the Banzhaf index of ei is
Parse:
is VBZ ROOT
 +-- In IN prep
 |   +-- game NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- index NN nsubj
     +-- the DT det
     +-- Banzhaf NNP nn
     +-- of IN prep
         +-- ei NNP pobj

11
Input: Let W -LRB- Cei -RRB- be the set of winning subsets of edges in Cei , i.e. , the subsets E ? Cei where a flow of at least k can be sent from s to t using only the edges in E .
Parse:
Let VB ROOT
 +-- set NN ccomp
 |   +-- W NNP nsubj
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- Cei NNP dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- be VB cop
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- winning VBG pcomp
 |   |       +-- subsets NNS dobj
 |   |       |   +-- of IN prep
 |   |       |       +-- edges NNS pobj
 |   |       +-- in IN prep
 |   |           +-- Cei NNP pobj
 |   +-- , , punct
 |   +-- i.e. FW advmod
 |   +-- subsets NNS appos
 |   |   +-- the DT det
 |   |   +-- E NNP appos
 |   +-- ? . punct
 |   +-- Cei NNP appos
 |       +-- where WRB prep
 |           +-- flow NN pobj
 |               +-- a DT det
 |               +-- of IN prep
 |                   +-- sent VBN pcomp
 |                       +-- least RBS advmod
 |                       |   +-- at RB advmod
 |                       +-- k PRP nsubjpass
 |                       +-- can MD aux
 |                       +-- be VB auxpass
 |                       +-- from IN prep
 |                       |   +-- s POS pobj
 |                       +-- to IN prep
 |                       |   +-- t NNP pobj
 |                       +-- using VBG xcomp
 |                           +-- edges NNS dobj
 |                               +-- only RB advmod
 |                               +-- the DT det
 |                               +-- in IN prep
 |                                   +-- E NNP pobj
 +-- . . punct

12
Input: The Banzhaf index of ei is the proportion of subsets in W -LRB- Cei -RRB- where ei is crucial to maintaining the k flow .
Parse:
proportion NN ROOT
 +-- index NN nsubj
 |   +-- The DT det
 |   +-- Banzhaf NNP nn
 |   +-- of IN prep
 |       +-- ei PRP pobj
 +-- is VBZ cop
 +-- the DT det
 +-- of IN prep
 |   +-- subsets NNS pobj
 |       +-- in IN prep
 |           +-- Cei NNP pobj
 |               +-- W NNP nn
 |               +-- -LRB- -LRB- punct
 |               +-- -RRB- -RRB- punct
 |               +-- crucial JJ rcmod
 |                   +-- where WRB advmod
 |                   +-- ei PRP nsubj
 |                   +-- is VBZ cop
 |                   +-- to IN prep
 |                       +-- maintaining VBG pcomp
 |                           +-- flow NN dobj
 |                               +-- the DT det
 |                               +-- k CD num
 +-- . . punct

13
Input: All the edge subsets in W -LRB- Cei -RRB- contain ei and are winning , but only for some of them , E ? W -LRB- Cei -RRB- , do we have that v -LRB- E \ -LRB- ei -RRB- -RRB- = 0 -LRB- i.e. , E is no longer winning if we remove ei -RRB- .
Parse:
contain VB ROOT
 +-- subsets NNS nsubj
 |   +-- All PDT predet
 |   +-- the DT det
 |   +-- edge NN nn
 |   +-- in IN prep
 |       +-- W NNP pobj
 |           +-- Cei NNP appos
 |               +-- -LRB- -LRB- punct
 |               +-- -RRB- -RRB- punct
 +-- ei PRP dobj
 +-- and CC cc
 +-- winning VBG conj
 |   +-- are VBP aux
 +-- , , punct
 +-- but CC cc
 +-- have VB conj
 |   +-- for IN prep
 |   |   +-- only RB advmod
 |   |   +-- some DT pobj
 |   |       +-- of IN prep
 |   |       |   +-- them PRP pobj
 |   |       +-- , , punct
 |   |       +-- E NNP appos
 |   |           +-- ? . punct
 |   |           +-- Cei NNP appos
 |   |               +-- W NNP nn
 |   |               +-- -LRB- -LRB- punct
 |   |               +-- -RRB- -RRB- punct
 |   +-- , , punct
 |   +-- do VBP aux
 |   +-- we PRP nsubj
 |   +-- v NN dobj
 |       +-- that DT det
 |       +-- -LRB- -LRB- punct
 |       +-- \ UH dep
 |       |   +-- E NNP nn
 |       |   +-- ei FW appos
 |       |       +-- -LRB- -LRB- punct
 |       |       +-- -RRB- -RRB- punct
 |       +-- -RRB- -RRB- punct
 |       +-- = SYM prep
 |           +-- 0 NFP punct
 |           +-- winning VBG dep
 |               +-- -LRB- -LRB- punct
 |               +-- i.e. FW advmod
 |               +-- , , punct
 |               +-- E NNP nsubj
 |               +-- is VBZ aux
 |               +-- longer RBR advmod
 |               |   +-- no RB advmod
 |               +-- remove VBP advcl
 |               |   +-- if IN mark
 |               |   +-- we PRP nsubj
 |               |   +-- ei NNP dobj
 |               +-- -RRB- -RRB- punct
 +-- . . punct

14
Input: The Banzhaf index of ei is the proportion of such subsets .
Parse:
proportion NN ROOT
 +-- index NN nsubj
 |   +-- The DT det
 |   +-- Banzhaf NNP nn
 |   +-- of IN prep
 |       +-- ei PRP pobj
 +-- is VBZ cop
 +-- the DT det
 +-- of IN prep
 |   +-- subsets NNS pobj
 |       +-- such JJ amod
 +-- . . punct

15
Input: 4.1 # P Completeness of Calculating the Banzhaf Index in the Network Flow Game We now show that the general case of NETWORK FLOW BANZHAF is # P complete , by a reduction from # MATCHING .
Parse:
P NN ROOT
 +-- # NN nsubj
 |   +-- 4.1 CD num
 +-- Completeness NNP dobj
 |   +-- of IN prep
 |       +-- Calculating VBG pcomp
 |           +-- Index NNP dobj
 |               +-- the DT det
 |               +-- Banzhaf NNP nn
 |               +-- in IN prep
 |                   +-- Game NNP pobj
 |                       +-- the DT det
 |                       +-- Network NNP nn
 |                       +-- Flow NNP nn
 +-- show VBP dep
 |   +-- We PRP nsubj
 |   +-- now RB advmod
 |   +-- # $ ccomp
 |       +-- that IN mark
 |       +-- case NN nsubj
 |       |   +-- the DT det
 |       |   +-- general JJ amod
 |       |   +-- of IN prep
 |       |       +-- BANZHAF NNP pobj
 |       |           +-- NETWORK NNP nn
 |       |           +-- FLOW NNP nn
 |       +-- is VBZ cop
 |       +-- P NN dep
 |       +-- complete JJ amod
 |       +-- , , punct
 |       +-- by IN prep
 |           +-- reduction NN pobj
 |               +-- a DT det
 |               +-- from IN prep
 |                   +-- MATCHING NN pobj
 |                       +-- # $ nn
 +-- . . punct

16
Input: First , we note that NETWORK FLOW BANZHAF is in # P .
Parse:
note VBP ROOT
 +-- First RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- is VBZ ccomp
 |   +-- that IN mark
 |   +-- BANZHAF NNP nsubj
 |   |   +-- NETWORK NNP nn
 |   |   +-- FLOW NNP nn
 |   +-- in IN prep
 |       +-- P NN pobj
 |           +-- # NN nn
 +-- . . punct

17
Input: There are several polynomial algorithms to calculate the maximal network flow , so it is easy to check if a certain subset of edges E ? E contains ei and allows a flow of at least k from s to t .
Parse:
are VBP ROOT
 +-- There EX expl
 +-- algorithms NNS nsubj
 |   +-- several JJ amod
 |   +-- polynomial JJ amod
 |   +-- calculate VB infmod
 |       +-- to TO aux
 |       +-- flow NN dobj
 |           +-- the DT det
 |           +-- maximal JJ amod
 |           +-- network NN nn
 +-- , , punct
 +-- so CC cc
 +-- easy JJ conj
 |   +-- it PRP nsubj
 |   +-- is VBZ cop
 |   +-- check VB xcomp
 |   |   +-- to TO aux
 |   |   +-- if IN prep
 |   |       +-- subset NN pobj
 |   |           +-- a DT det
 |   |           +-- certain JJ amod
 |   |           +-- of IN prep
 |   |               +-- E NNP pobj
 |   |                   +-- edges NNS amod
 |   +-- ? . punct
 |   +-- contains VBZ parataxis
 |       +-- E NNP nsubj
 |       +-- ei NNP dobj
 |       +-- and CC cc
 |       +-- allows VBZ conj
 |           +-- flow NN dobj
 |               +-- a DT det
 |               +-- of IN prep
 |               |   +-- k CD pobj
 |               |       +-- least RBS dep
 |               |           +-- at RB advmod
 |               +-- from IN prep
 |               |   +-- s POS pobj
 |               +-- to IN prep
 |                   +-- t NN pobj
 +-- . . punct

18
Input: It is also easy to check if a flow of at least k is no longer possible when we remove ei from E -LRB- again , by running a polynomial algorithm for calculating the maximal flow -RRB- .
Parse:
easy JJ ROOT
 +-- It PRP nsubj
 +-- is VBZ cop
 +-- also RB advmod
 +-- check VB xcomp
 |   +-- to TO aux
 |   +-- if IN prep
 |       +-- flow NN pobj
 |           +-- a DT det
 |           +-- of IN prep
 |           |   +-- possible JJ pobj
 |           |       +-- least RBS advmod
 |           |       |   +-- at RB advmod
 |           |       +-- k PRP nsubj
 |           |       +-- is VBZ cop
 |           |       +-- longer RBR advmod
 |           |           +-- no RB advmod
 |           +-- remove VBP rcmod
 |               +-- when WRB advmod
 |               +-- we PRP nsubj
 |               +-- ei UH dobj
 |               +-- from IN prep
 |               |   +-- E NNP pobj
 |               +-- -LRB- -LRB- punct
 |               +-- again RB advmod
 |               +-- , , punct
 |               +-- by IN prep
 |                   +-- running VBG pcomp
 |                       +-- algorithm NN dobj
 |                           +-- a DT det
 |                           +-- polynomial JJ amod
 |                           +-- for IN prep
 |                               +-- calculating VBG pcomp
 |                                   +-- flow NN dobj
 |                                       +-- the DT det
 |                                       +-- maximal JJ amod
 +-- -RRB- -RRB- punct
 +-- . . punct

19
Input: The Banzhaf index of ei is exactly the number of such subsets E ? E , so NETWORK FLOWBANZHAF is in # P .
Parse:
number NN ROOT
 +-- index NN nsubj
 |   +-- The DT det
 |   +-- Banzhaf NNP nn
 |   +-- of IN prep
 |       +-- ei NNP pobj
 +-- is VBZ cop
 +-- exactly RB advmod
 +-- the DT det
 +-- of IN prep
 |   +-- subsets NNS pobj
 |       +-- such JJ amod
 |       +-- is VBZ rcmod
 |           +-- E NNP nsubj
 |           +-- ? . punct
 |           +-- E UH discourse
 |           +-- , , punct
 |           +-- so RB advmod
 |           +-- FLOWBANZHAF NNP nsubj
 |           |   +-- NETWORK NNP nn
 |           +-- in IN prep
 |               +-- P NN pobj
 |                   +-- # NN nn
 +-- . . punct

20
Input: To show that NETWORK FLOW BANZHAF is # P complete , we reduce a # MATCHING problem4 to a NETWORKFLOW BANZHAF problem .
Parse:
reduce VBP ROOT
 +-- show VB advcl
 |   +-- To TO aux
 |   +-- P NN ccomp
 |       +-- that IN mark
 |       +-- BANZHAF NNP nsubj
 |       |   +-- NETWORK $ nn
 |       |   +-- FLOW NNP nn
 |       +-- is VBZ cop
 |       +-- # $ nn
 |       +-- complete JJ amod
 +-- , , punct
 +-- we PRP nsubj
 +-- problem4 CD dobj
 |   +-- a DT det
 |   +-- MATCHING NN nn
 |       +-- # NN nn
 +-- to IN prep
 |   +-- problem NN pobj
 |       +-- a DT det
 |       +-- BANZHAF NNP nn
 |           +-- NETWORKFLOW NNP nn
 +-- . . punct

21
Input: DEFINITION 2 .
Parse:
DEFINITION NN ROOT
 +-- 2 CD num
 +-- . . punct

22
Input: # MATCHING
Parse:
MATCHING NN ROOT
 +-- # NN nn

23
Input: 4.2 The Overall Reduction Approach The reduction is done as follows .
Parse:
done VBN ROOT
 +-- 4.2 LS prep
 |   +-- Approach NNP pobj
 |       +-- The DT det
 |       +-- Overall NNP nn
 |       +-- Reduction NNP nn
 +-- reduction NN nsubjpass
 |   +-- The DT det
 +-- is VBZ auxpass
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct

24
Input: From the # MATCHING input , G = < U , V , E > , we build two inputs for the NETWORKFLOW BANZHAF problem .
Parse:
build VBP ROOT
 +-- From IN prep
 |   +-- input NN pobj
 |   |   +-- the DT det
 |   |   +-- MATCHING NN nn
 |   |       +-- # NN nn
 |   +-- , , punct
 |   +-- G NNP dep
 |   +-- V NNP pobj
 |       +-- = SYM dep
 |       +-- < -LRB- punct
 |       +-- U NNP nn
 |       +-- , , punct
 |       +-- E NNP appos
 |           +-- > -RRB- punct
 +-- , , punct
 +-- we PRP nsubj
 +-- inputs NNS dobj
 |   +-- two CD num
 |   +-- for IN prep
 |       +-- problem NN pobj
 |           +-- the DT det
 |           +-- NETWORKFLOW NNP nn
 |           +-- BANZHAF NNP nn
 +-- . . punct

25
Input: The difference between the answers obtained from the NETWORK FLOW BANZHAF runs is the answer to the # MATCHING problem .
Parse:
answer NN ROOT
 +-- difference NN nsubj
 |   +-- The DT det
 |   +-- between IN prep
 |       +-- answers NNS pobj
 |           +-- the DT det
 |           +-- obtained VBN partmod
 |               +-- from IN prep
 |                   +-- runs VBZ pobj
 |                       +-- the DT det
 |                       +-- NETWORK NNP nn
 |                       +-- BANZHAF NNP nn
 |                           +-- FLOW NNP nn
 +-- is VBZ cop
 +-- the DT det
 +-- to IN prep
 |   +-- problem NN pobj
 |       +-- the DT det
 |       +-- MATCHING NN nn
 |           +-- # NN nn
 +-- . . punct

26
Input: Both runs of the NETWORKFLOW BANZHAF problem are constructed with the same graph G = < V , E > , with the same source vertex s and target vertex t , and with the same edge ef for which to compute the Banzhaf index .
Parse:
constructed VBN ROOT
 +-- runs NNS nsubjpass
 |   +-- Both DT det
 |   +-- of IN prep
 |       +-- problem NN pobj
 |           +-- the DT det
 |           +-- NETWORKFLOW NNP nn
 |           +-- BANZHAF NNP nn
 +-- are VBP auxpass
 +-- with IN prep
 |   +-- t NN pobj
 |   |   +-- the DT det
 |   |   +-- same JJ amod
 |   |   +-- source NN nn
 |   |   +-- vertex NN nn
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- with IN conj
 |       +-- ef NN pobj
 |           +-- the DT det
 |           +-- same JJ amod
 |           +-- edge NN nn
 |           +-- compute VB infmod
 |               +-- for IN prep
 |               |   +-- which WDT pobj
 |               +-- to TO aux
 |               +-- index NN dobj
 |                   +-- the DT det
 |                   +-- Banzhaf NNP nn
 +-- , , punct
 +-- . . punct

27
Input: They differ only in the target flow value .
Parse:
differ VBP ROOT
 +-- They PRP nsubj
 +-- in IN prep
 |   +-- only RB advmod
 |   +-- value NN pobj
 |       +-- the DT det
 |       +-- target NN nn
 |       +-- flow NN nn
 +-- . . punct

28
Input: The first run is with a target flow of k , and the second run is with a target flow of k + .
Parse:
is VBZ ROOT
 +-- run NN nsubj
 |   +-- The DT det
 |   +-- first JJ amod
 +-- with IN prep
 |   +-- flow NN pobj
 |       +-- a DT det
 |       +-- target NN nn
 |       +-- of IN prep
 |           +-- k NN pobj
 +-- , , punct
 +-- and CC cc
 +-- is VBZ conj
 |   +-- run NN nsubj
 |   |   +-- the DT det
 |   |   +-- second JJ amod
 |   +-- with IN prep
 |       +-- flow NN pobj
 |           +-- a DT det
 |           +-- target NN nn
 |           +-- of IN prep
 |               +-- + SYM pobj
 |                   +-- k CD num
 +-- . . punct

29
Input: A choice of subset Ec ? E reflects a possible matching in the original graph .
Parse:
reflects VBZ ROOT
 +-- choice NN nsubj
 |   +-- A DT det
 |   +-- of IN prep
 |   |   +-- Ec NNP pobj
 |   |       +-- subset NN amod
 |   +-- ? . punct
 |   +-- E NNP appos
 +-- matching NN dobj
 |   +-- a DT det
 |   +-- possible JJ amod
 |   +-- in IN prep
 |       +-- graph NN pobj
 |           +-- the DT det
 |           +-- original JJ amod
 +-- . . punct

30
Input: G is a subgraph of the constructed G .
Parse:
subgraph NN ROOT
 +-- G NNP nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- of IN prep
 |   +-- G NNP pobj
 |       +-- the DT det
 |       +-- constructed VBN amod
 +-- . . punct

31
Input: We identify an edge in G , e ? E , with the same edge in G .
Parse:
identify VBP ROOT
 +-- We PRP nsubj
 +-- edge NN dobj
 |   +-- an DT det
 |   +-- in IN prep
 |       +-- G NNP pobj
 |           +-- , , punct
 |           +-- e NNP appos
 +-- ? . punct
 +-- E UH discourse
 +-- , , punct
 +-- with IN prep
 |   +-- edge NN pobj
 |       +-- the DT det
 |       +-- same JJ amod
 |       +-- in IN prep
 |           +-- G NNP pobj
 +-- . . punct

32
Input: This edge indicates a particular match between some vertex u ? U and another vertex v ? V .
Parse:
indicates VBZ ROOT
 +-- edge NN nsubj
 |   +-- This DT det
 +-- match NN dobj
 |   +-- a DT det
 |   +-- particular JJ amod
 |   +-- between IN prep
 |       +-- u NNP pobj
 |           +-- some DT det
 |           +-- vertex NN nn
 |           +-- ? , punct
 |           +-- U NNP conj
 |           +-- and CC cc
 |           +-- vertex NN conj
 |               +-- another DT det
 |               +-- v NN amod
 |               +-- ? . punct
 |               +-- V NNP appos
 +-- . . punct

33
Input: Thus , if Ec ? E is a subset of edges in G which contains only edges in the subgraph of G , we identify it with a subset of edges in G , or with some candidate of a matching .
Parse:
identify VBP ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- subset NN advcl
 |   +-- if IN mark
 |   +-- E NNP nsubj
 |   |   +-- Ec NNP nn
 |   |   +-- ? . punct
 |   +-- is VBZ cop
 |   +-- a DT det
 |   +-- of IN prep
 |   |   +-- edges NNS pobj
 |   +-- in IN prep
 |   |   +-- G NNP pobj
 |   +-- contains VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- edges NNS dobj
 |           +-- only RB advmod
 |           +-- in IN prep
 |               +-- subgraph NN pobj
 |                   +-- the DT det
 |                   +-- of IN prep
 |                       +-- G NNP pobj
 +-- we PRP nsubj
 +-- it PRP dobj
 +-- with IN prep
 |   +-- subset NN pobj
 |   |   +-- a DT det
 |   |   +-- of IN prep
 |   |       +-- edges NNS pobj
 |   |           +-- in IN prep
 |   |               +-- G NNP pobj
 |   +-- , , punct
 |   +-- or CC cc
 |   +-- with IN conj
 |       +-- candidate NN pobj
 |           +-- some DT det
 |           +-- of IN prep
 |               +-- matching NN pobj
 |                   +-- a DT det
 +-- . . punct

34
Input: We say Ec ? E matches some vertex v ? V , if Ec contains some edge that connects to v , i.e. , for some u ? U we have -LRB- u , v -RRB- ? Ec .
Parse:
say VBP ROOT
 +-- We PRP nsubj
 +-- matches VBZ dep
 |   +-- E NNP nsubj
 |   |   +-- Ec NNP nn
 |   |   +-- ? . punct
 |   +-- v NN dobj
 |   |   +-- some DT det
 |   |   +-- vertex NN nn
 |   |   +-- ? , punct
 |   |   +-- V UH discourse
 |   |   +-- , , punct
 |   |   +-- contains VBZ dep
 |   |   |   +-- if IN mark
 |   |   |   +-- Ec NNP nsubj
 |   |   |   +-- edge NN dobj
 |   |   |       +-- some DT det
 |   |   |       +-- connects VBZ rcmod
 |   |   |           +-- that WDT nsubj
 |   |   |           +-- to IN prep
 |   |   |               +-- v VB pobj
 |   |   +-- i.e. FW advmod
 |   +-- , , punct
 |   +-- for IN prep
 |   |   +-- u NNP pobj
 |   |       +-- some DT det
 |   +-- ? . punct
 |   +-- have VBP parataxis
 |       +-- U NNP nsubj
 |       +-- we PRP nsubj
 |       +-- -LRB- -LRB- punct
 |       +-- u UH dobj
 |       |   +-- , , punct
 |       |   +-- v NN dep
 |       +-- -RRB- -RRB- punct
 |       +-- ? . punct
 |       +-- Ec NNP dobj
 +-- . . punct

35
Input: Ec is a possible matching if it does not match a vertex v ? V with more than one vertex in U , i.e. , there are not two vertices u1 = u2 in U that both -LRB- u1 , v -RRB- ? Ec and -LRB- u2 , v -RRB- ? Ec .
Parse:
matching NN ROOT
 +-- Ec NNP nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- possible JJ amod
 +-- are VBP ccomp
 |   +-- match VB advcl
 |   |   +-- if IN mark
 |   |   +-- it PRP nsubj
 |   |   +-- does VBZ aux
 |   |   +-- not RB neg
 |   |   +-- v NN dobj
 |   |       +-- a DT det
 |   |       +-- vertex NN nn
 |   |       +-- ? . punct
 |   |       +-- V NN dep
 |   |           +-- with IN prep
 |   |               +-- vertex NN pobj
 |   |                   +-- one CD num
 |   |                   |   +-- than IN quantmod
 |   |                   |       +-- more JJR mwe
 |   |                   +-- in IN prep
 |   |                       +-- U NNP pobj
 |   +-- , , punct
 |   +-- i.e. FW advmod
 |   +-- there EX expl
 |   +-- not RB neg
 |   +-- vertices NNS nsubj
 |       +-- two CD num
 |       +-- u1 CD num
 |       +-- u2 CD dep
 |           +-- = SYM dep
 |           +-- in IN prep
 |           |   +-- U NNP pobj
 |           +-- Ec NNP dep
 |               +-- that IN mark
 |               +-- both DT dep
 |                   +-- v NN dep
 |                   |   +-- -LRB- -LRB- punct
 |                   |   +-- u1 CD dep
 |                   |   +-- , , punct
 |                   |   +-- -RRB- -RRB- punct
 |                   +-- ? . punct
 |                   +-- Ec FW dep
 |                       +-- and CC cc
 |                       +-- u2 CD conj
 |                           +-- -LRB- -LRB- punct
 |                           +-- , , punct
 |                           +-- v NN appos
 |                           +-- -RRB- -RRB- punct
 +-- . . punct

36
Input: A perfect matching matches all the vertices in V .
Parse:
matches NNS ROOT
 +-- matching NN nsubj
 |   +-- A DT det
 |   +-- perfect JJ amod
 +-- vertices NNS dobj
 |   +-- all PDT predet
 |   +-- the DT det
 +-- in IN prep
 |   +-- V NNP pobj
 +-- . . punct

37
Input: If Ec fails to match a vertex in V -LRB- the right side of the partition -RRB- , the maximal possible flow that Ec allows in G is less than k .
Parse:
less JJR ROOT
 +-- fails VBZ advcl
 |   +-- If IN mark
 |   +-- Ec NNP nsubj
 |   +-- match VB xcomp
 |       +-- to TO aux
 |       +-- vertex NN dobj
 |           +-- a DT det
 |           +-- in IN prep
 |               +-- V NNP pobj
 |                   +-- -LRB- -LRB- punct
 |                   +-- side NN dep
 |                   |   +-- the DT det
 |                   |   +-- right JJ amod
 |                   |   +-- of IN prep
 |                   |       +-- partition NN pobj
 |                   |           +-- the DT det
 |                   +-- -RRB- -RRB- punct
 +-- , , punct
 +-- flow NN nsubj
 |   +-- the DT det
 |   +-- maximal JJ amod
 |   +-- possible JJ amod
 |   +-- allows VBZ rcmod
 |       +-- that WDT dobj
 |       +-- Ec NNP nsubj
 |       +-- in IN prep
 |           +-- G NNP pobj
 +-- is VBZ cop
 +-- than IN prep
 |   +-- k CD pobj
 +-- . . punct

38
Input: If it matches all the vertices in V , a flow of k is possible .
Parse:
possible JJ ROOT
 +-- matches VBZ advcl
 |   +-- If IN mark
 |   +-- it PRP nsubj
 |   +-- vertices NNS dobj
 |       +-- all PDT predet
 |       +-- the DT det
 |       +-- in IN prep
 |           +-- V NNP pobj
 +-- , , punct
 +-- flow NN nsubj
 |   +-- a DT det
 |   +-- of IN prep
 |       +-- k CD pobj
 +-- is VBZ cop
 +-- . . punct

39
Input: If it matches 4 This is one of the most well known # P complete problems .
Parse:
one CD ROOT
 +-- matches VBZ advcl
 |   +-- If IN mark
 |   +-- it PRP nsubj
 |   +-- 4 CD dobj
 +-- This DT nsubj
 +-- is VBZ cop
 +-- of IN prep
 |   +-- # NN pobj
 |       +-- the DT det
 |       +-- known VBN amod
 |       |   +-- well RB advmod
 |       |       +-- most RBS advmod
 |       +-- P , punct
 |       +-- problems NNS appos
 |           +-- complete JJ amod
 +-- . . punct

40
Input: all the vertices in V , but matches some vertex in V more than once -LRB- which means this is not a true matching -RRB- , a flow of k+ is possible .
Parse:
vertices NNS ROOT
 +-- all PDT predet
 +-- the DT det
 +-- in IN prep
 |   +-- V NNP pobj
 +-- , , punct
 +-- but CC cc
 +-- matches VBZ conj
 |   +-- vertex NN dobj
 |   |   +-- some DT det
 |   +-- in IN prep
 |   |   +-- V NN pobj
 |   +-- than IN advmod
 |   |   +-- more JJR advmod
 |   |   +-- once RB advmod
 |   +-- -LRB- -LRB- punct
 |   +-- means VBZ rcmod
 |       +-- which WDT nsubj
 |       +-- matching NN ccomp
 |           +-- this DT nsubj
 |           +-- is VBZ cop
 |           +-- not RB neg
 |           +-- a DT det
 |           +-- true JJ amod
 |           +-- -RRB- -RRB- punct
 |           +-- , , punct
 |           +-- possible JJ ccomp
 |               +-- flow NN nsubj
 |               |   +-- a DT det
 |               |   +-- of IN prep
 |               |       +-- k+ NN pobj
 |               +-- is VBZ cop
 +-- . . punct

41
Input: is chosen so that if a single vertex v ? V is unmatched , the maximal possible flow would be less than |V | , even if all the other vertices are matched more than once .
Parse:
chosen VBN ROOT
 +-- is VBZ auxpass
 +-- unmatched JJ advcl
 |   +-- so IN mark
 |   +-- that IN mark
 |   +-- v NN advcl
 |   |   +-- if IN mark
 |   |   +-- vertex NN nsubj
 |   |       +-- a DT det
 |   |       +-- single JJ amod
 |   +-- ? . punct
 |   +-- V NN nsubj
 |   +-- is VBZ cop
 +-- , , punct
 +-- less JJR ccomp
 |   +-- flow NN nsubj
 |   |   +-- the DT det
 |   |   +-- maximal JJ amod
 |   |   +-- possible JJ amod
 |   +-- would MD aux
 |   +-- be VB cop
 |   +-- than IN prep
 |   |   +-- | NN pobj
 |   |       +-- |V FW nn
 |   +-- , , punct
 |   +-- matched VBN advcl
 |       +-- even RB advmod
 |       +-- if IN mark
 |       +-- vertices NNS nsubjpass
 |       |   +-- all PDT predet
 |       |   +-- the DT det
 |       |   +-- other JJ amod
 |       +-- are VBP auxpass
 |       +-- more JJR dobj
 |           +-- than IN prep
 |               +-- once RB pcomp
 +-- . . punct

42
Input: In other words , is chosen so that matching several vertices in V more than once can never compensate for not matching some vertex in V , in terms of the maximal possible flow .
Parse:
chosen VBN ROOT
 +-- In IN prep
 |   +-- words NNS pobj
 |       +-- other JJ amod
 +-- , , punct
 +-- is VBZ auxpass
 +-- compensate VB advcl
 |   +-- so IN mark
 |   +-- that IN mark
 |   +-- matching VBG csubj
 |   |   +-- vertices NNS dobj
 |   |   |   +-- several JJ amod
 |   |   +-- in IN prep
 |   |   |   +-- V NN pobj
 |   |   +-- than IN advmod
 |   |       +-- more JJR advmod
 |   |       +-- once RB advmod
 |   +-- can MD aux
 |   +-- never RB neg
 |   +-- for IN prep
 |   |   +-- matching VBG pcomp
 |   |       +-- not RB neg
 |   |       +-- vertex NN dobj
 |   |       |   +-- some DT det
 |   |       +-- in IN prep
 |   |           +-- V NN pobj
 |   +-- , , punct
 |   +-- in IN prep
 |       +-- terms NNS pobj
 |           +-- of IN prep
 |               +-- flow NN pobj
 |                   +-- the DT det
 |                   +-- maximal JJ amod
 |                   +-- possible JJ amod
 +-- . . punct

43
Input: Thus , when we check the Banzhaf index of ef when the required flow is at least k , we get the number of subsets E ? E that match all the vertices in V at least once .
Parse:
get VBP ROOT
 +-- Thus RB advmod
 +-- , , punct
 +-- check VBP advcl
 |   +-- when WRB advmod
 |   +-- we PRP nsubj
 |   +-- index NN dobj
 |   |   +-- the DT det
 |   |   +-- Banzhaf NNP nn
 |   |   +-- of IN prep
 |   |       +-- ef NN pobj
 |   +-- k CD advcl
 |       +-- when WRB advmod
 |       +-- flow NN nsubj
 |       |   +-- the DT det
 |       |   +-- required VBN amod
 |       +-- is VBZ cop
 |       +-- least RBS advmod
 |           +-- at RB advmod
 +-- we PRP nsubj
 +-- number NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- E NNP pobj
 |   |       +-- subsets NNS nn
 |   |       +-- ? . punct
 |   |       +-- E NNP num
 |   +-- match VBP rcmod
 |       +-- that WDT nsubj
 |       +-- vertices NNS dobj
 |       |   +-- all PDT predet
 |       |   +-- the DT det
 |       +-- in IN prep
 |       |   +-- V NN pobj
 |       +-- once RB advmod
 |           +-- at RB advmod
 |           +-- least RBS advmod
 +-- . . punct

44
Input: When we check the Banzhaf index of ef with a required flow of at least k+ , we get the number of subsets E ? E that match all the vertices in V at least once , and match at least one vertex v ? V more than once .
Parse:
get VBP ROOT
 +-- check VBP advcl
 |   +-- When WRB advmod
 |   +-- we PRP nsubj
 |   +-- index NN dobj
 |   |   +-- the DT det
 |   |   +-- Banzhaf NNP nn
 |   |   +-- of IN prep
 |   |       +-- ef NN pobj
 |   +-- with IN prep
 |       +-- flow NN pobj
 |           +-- a DT det
 |           +-- required VBN amod
 |           +-- of IN prep
 |               +-- k+ NNP pobj
 |                   +-- least RBS advmod
 |                       +-- at RB advmod
 +-- , , punct
 +-- we PRP nsubj
 +-- number NN dobj
 |   +-- the DT det
 |   +-- of IN prep
 |   |   +-- E NNP pobj
 |   |       +-- subsets NNS nn
 |   |       +-- ? . punct
 |   |       +-- E NNP num
 |   +-- match VBP rcmod
 |       +-- that WDT nsubj
 |       +-- vertices NNS dobj
 |       |   +-- all PDT predet
 |       |   +-- the DT det
 |       +-- in IN prep
 |       |   +-- V NN pobj
 |       +-- least RBS advmod
 |           +-- at RB advmod
 |           +-- once RB advmod
 +-- and CC cc
 +-- match VB conj
 |   +-- v NN dobj
 |       +-- one CD num
 |       |   +-- least RBS dep
 |       |       +-- at RB advmod
 |       +-- vertex NN nn
 |       +-- ? . punct
 |       +-- more JJR amod
 |           +-- V RB advmod
 |           +-- than IN prep
 |               +-- once RB pcomp
 +-- . . punct

45
Input: The difference between the two is exactly the number of perfect matchings in G .
Parse:
number NN ROOT
 +-- difference NN nsubj
 |   +-- The DT det
 |   +-- between IN prep
 |       +-- two CD pobj
 |           +-- the DT det
 +-- is VBZ cop
 +-- exactly RB advmod
 +-- the DT det
 +-- of IN prep
 |   +-- matchings NNS pobj
 |       +-- perfect JJ amod
 |       +-- in IN prep
 |           +-- G NNP pobj
 +-- . . punct

46
Input: Therefore , if there existed a polynomial algorithm for NETWORKFLOW BANZHAF , we could use it to build a polynomial algorithm for # MATCHING , so NETWORK FLOW BANZHAF is # Pcomplete .
Parse:
use VB ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- existed VBD advcl
 |   +-- if IN mark
 |   +-- there EX expl
 |   +-- algorithm NN dobj
 |       +-- a DT det
 |       +-- polynomial NN nn
 |       +-- for IN prep
 |           +-- BANZHAF NNP pobj
 |               +-- NETWORKFLOW NNP nn
 +-- we PRP nsubj
 +-- could MD aux
 +-- it PRP dobj
 +-- build VB xcomp
 |   +-- to TO aux
 |   +-- algorithm NN dobj
 |   |   +-- a DT det
 |   |   +-- polynomial NN nn
 |   +-- for IN prep
 |   |   +-- MATCHING NN pobj
 |   |       +-- # NN nn
 |   +-- , , punct
 |   +-- Pcomplete JJ advcl
 |       +-- so RB mark
 |       +-- BANZHAF NNP nsubj
 |       |   +-- NETWORK HYPH nn
 |       |   +-- FLOW NNP nn
 |       +-- is VBZ cop
 |       +-- # $ dep
 +-- . . punct

47
Input: 4.3 Reduction Details The reduction takes the # MATCHING input , the bipartite graph G = < U , V , E > , where |U| = |V | = k .
Parse:
takes VBZ ROOT
 +-- Details NNP nsubj
 |   +-- 4.3 LS num
 |   +-- Reduction NN nn
 |   +-- reduction NN dep
 |       +-- The DT det
 +-- input NN dobj
 |   +-- the DT det
 |   +-- MATCHING VBG nn
 |   |   +-- # NN nn
 |   +-- , , punct
 |   +-- G NNP appos
 |       +-- the DT det
 |       +-- bipartite JJ nn
 |       +-- graph NN nn
 |       +-- = SYM dep
 |       +-- < -LRB- punct
 |       +-- U NNP dep
 |       |   +-- , , punct
 |       |   +-- V NNP appos
 |       |   +-- E NNP appos
 |       +-- > -RRB- punct
 |       +-- , , punct
 |       +-- |U| FW rcmod
 |           +-- where WRB dep
 |           +-- = SYM dep
 |           +-- |V , dep
 |           +-- | , punct
 |           +-- k CD dep
 |               +-- = SYM dep
 +-- . . punct

48
Input: It then generates a network flow graph G as follows .
Parse:
generates VBZ ROOT
 +-- It PRP nsubj
 +-- then RB advmod
 +-- G NNP dobj
 |   +-- a DT det
 |   +-- graph NN nn
 |       +-- flow NN nn
 |           +-- network NN nn
 +-- follows VBZ advcl
 |   +-- as IN mark
 +-- . . punct

49
Input: The graph G is kept as a subgraph of G , and each edge in G is given a capacity of 1 .
Parse:
kept VBN ROOT
 +-- G NNP nsubjpass
 |   +-- The DT det
 |   +-- graph NN nn
 +-- is VBZ auxpass
 +-- as IN prep
 |   +-- subgraph NN pobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- G NNP pobj
 +-- , , punct
 +-- and CC cc
 +-- given VBN conj
 |   +-- edge NN nsubjpass
 |   |   +-- each DT det
 |   |   +-- in IN prep
 |   |       +-- G NNP pobj
 |   +-- is VBZ auxpass
 |   +-- capacity NN dobj
 |       +-- a DT det
 |       +-- of IN prep
 |           +-- 1 CD pobj
 +-- . . punct

50
Input: A new source vertex s is added , along with a new vertex t and a new target vertex t .
Parse:
added VBN ROOT
 +-- vertex NN nsubjpass
 |   +-- A DT det
 |   +-- source NN nn
 |   |   +-- new JJ amod
 |   +-- s POS possessive
 +-- is VBZ auxpass
 +-- , , punct
 +-- along IN prep
 |   +-- with IN pcomp
 |       +-- t NN pobj
 |           +-- a DT det
 |           +-- new JJ amod
 |           +-- vertex NN nn
 |           +-- and CC cc
 |           +-- t NN conj
 |               +-- a DT det
 |               +-- new JJ amod
 |               +-- target NN nn
 |               +-- vertex NN nn
 +-- . . punct
