
1
Input: As we have alluded to , failure and aborting are related concepts .
Parse:
concepts NNS ROOT
 +-- alluded VBN advcl
 |   +-- As IN mark
 |   +-- we PRP nsubj
 |   +-- have VBP aux
 |   +-- to IN prep
 +-- , , punct
 +-- failure NN nsubj
 |   +-- and CC cc
 |   +-- aborting NN conj
 +-- are VBP cop
 +-- related VBN amod
 +-- . . punct

2
Input: They both cause the execution of existing plans to cease and , consequentially , the agent to reflect over its current tasks and intentions .
Parse:
cause VBP ROOT
 +-- They PRP nsubj
 |   +-- both DT det
 +-- cease VB xcomp
 |   +-- execution NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- plans NNS pobj
 |   |           +-- existing VBG amod
 |   +-- to TO aux
 +-- and CC cc
 +-- , , punct
 +-- consequentially RB advmod
 +-- reflect VB xcomp
 |   +-- agent NN nsubj
 |   |   +-- the DT det
 |   +-- to TO aux
 |   +-- over IN prep
 |       +-- tasks NNS pobj
 |           +-- its PRP$ poss
 |           +-- current JJ amod
 |           +-- and CC cc
 |           +-- intentions NNS conj
 +-- . . punct

3
Input: Failure and aborting , however , differ in the way they arise .
Parse:
differ VBP ROOT
 +-- Failure NN nsubj
 |   +-- and CC cc
 |   +-- aborting NN conj
 +-- , , punct
 +-- however RB advmod
 +-- in IN prep
 |   +-- way NN pobj
 |       +-- the DT det
 |       +-- arise VBP rcmod
 |           +-- they PRP nsubj
 +-- . . punct

4
Input: In the case of failure , the trigger to cease execution of a task or plan comes from below , that is , the failure of sub tasks or lower level plans .
Parse:
comes VBZ ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- failure NN pobj
 +-- , , punct
 +-- trigger NN nsubj
 |   +-- the DT det
 |   +-- cease VB infmod
 |       +-- to TO aux
 |       +-- execution NN dobj
 |           +-- of IN prep
 |               +-- task NN pobj
 |                   +-- a DT det
 |                   +-- or CC cc
 |                   +-- plan NN conj
 +-- from IN prep
 |   +-- below RB pcomp
 +-- failure NN ccomp
 |   +-- that DT nsubj
 |   +-- is VBZ cop
 |   +-- , , punct
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- tasks NNS pobj
 |           +-- sub NN nn
 |           +-- or CC cc
 |           +-- plans NNS conj
 |               +-- level NN nn
 |                   +-- lower JJR amod
 +-- . . punct

5
Input: In the case of aborting , the trigger comes from above , that is , the tasks and the parent plans that initiated a plan .
Parse:
comes VBZ ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- aborting NN pobj
 +-- , , punct
 +-- trigger NN nsubj
 |   +-- the DT det
 +-- from IN prep
 |   +-- above RB pcomp
 +-- is VBZ ccomp
 |   +-- that DT nsubj
 +-- plans VBZ ccomp
 |   +-- tasks NNS nsubj
 |   |   +-- the DT det
 |   |   +-- and CC cc
 |   |   +-- parent NN conj
 |   |       +-- the DT det
 |   +-- initiated VBD ccomp
 |       +-- that WDT nsubj
 |       +-- plan NN dobj
 |           +-- a DT det
 +-- . . punct

6
Input: In BDI style systems such as JACK and SPARK , an agent '' s domain knowledge includes a pre defined plan library of plan clauses .
Parse:
includes VBZ ROOT
 +-- In IN prep
 |   +-- systems NNS pobj
 |       +-- style NN nn
 |       |   +-- BDI NN nn
 |       +-- as IN prep
 |           +-- such JJ mwe
 |           +-- JACK NNP pobj
 |               +-- and CC cc
 |               +-- SPARK NNP conj
 +-- , , punct
 +-- knowledge NN nsubj
 |   +-- agent NN poss
 |   |   +-- an DT det
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- domain NN nn
 +-- library NN dobj
 |   +-- a DT det
 |   +-- plan NN nn
 |   |   +-- defined VBN amod
 |   |       +-- pre NN dep
 |   +-- of IN prep
 |       +-- clauses NNS pobj
 |           +-- plan NN nn
 +-- . . punct

7
Input: Each plan clause has a plan body , which is a program -LRB- i.e. , combination of primitive actions , sub tasks , etc. -RRB- that can be executed in response to a task or other event should the plan clause '' s context condition be satisfied .
Parse:
has VBZ ROOT
 +-- clause NN nsubj
 |   +-- Each DT det
 |   +-- plan NN nn
 +-- body NN dobj
 |   +-- a DT det
 |   +-- plan NN nn
 |   +-- , , punct
 |   +-- program NN rcmod
 |   |   +-- which WDT nsubj
 |   |   +-- is VBZ cop
 |   |   +-- a DT det
 |   +-- -LRB- -LRB- punct
 |   +-- combination NN dep
 |   |   +-- i.e. FW advmod
 |   |   +-- , , punct
 |   |   +-- of IN prep
 |   |       +-- actions NNS pobj
 |   |           +-- primitive JJ amod
 |   |           +-- , , punct
 |   |           +-- tasks NNS appos
 |   |           |   +-- sub NN nn
 |   |           +-- etc. FW appos
 |   +-- -RRB- -RRB- punct
 |   +-- executed VBN rcmod
 |       +-- that WDT nsubjpass
 |       +-- can MD aux
 |       +-- be VB auxpass
 |       +-- in IN prep
 |       |   +-- response NN pobj
 |       |       +-- to IN prep
 |       |           +-- task NN pobj
 |       |               +-- a DT det
 |       |               +-- or CC cc
 |       |               +-- event NN conj
 |       |                   +-- other JJ amod
 |       +-- satisfied JJ advcl
 |           +-- should MD aux
 |           +-- condition NN nsubj
 |           |   +-- clause NN poss
 |           |   |   +-- the DT det
 |           |   |   +-- plan NN nn
 |           |   |   +-- '' '' punct
 |           |   |   +-- s POS possessive
 |           |   +-- context NN nn
 |           +-- be VB cop
 +-- . . punct

8
Input: The agent selects and executes instances of plan clauses to perform its tasks .
Parse:
selects NNS ROOT
 +-- agent NN nsubj
 |   +-- The DT det
 +-- and CC cc
 +-- executes NNS conj
 +-- instances NNS dobj
 |   +-- of IN prep
 |       +-- clauses VBZ pobj
 |           +-- plan NN nn
 +-- perform VB xcomp
 |   +-- to TO aux
 |   +-- tasks NNS dobj
 |       +-- its PRP$ poss
 +-- . . punct

9
Input: There can be more than one applicable plan clause and , in the event that one fails , another applicable one may be attempted .
Parse:
clause NN ROOT
 +-- There EX expl
 +-- can MD aux
 +-- be VB cop
 +-- one CD num
 |   +-- than IN quantmod
 |       +-- more JJR mwe
 +-- applicable JJ amod
 +-- plan NN nn
 +-- and CC cc
 +-- , , punct
 +-- attempted VBN conj
 |   +-- fails VBZ advcl
 |   |   +-- in IN dep
 |   |   |   +-- event NN pobj
 |   |   |       +-- the DT det
 |   |   +-- that IN mark
 |   |   +-- one CD nsubj
 |   +-- , , punct
 |   +-- one NN nsubjpass
 |   |   +-- another DT det
 |   |   +-- applicable JJ amod
 |   +-- may MD aux
 |   +-- be VB auxpass
 +-- . . punct

10
Input: Plans may have sub tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them
Parse:
have VB ROOT
 +-- Plans NNS nsubj
 +-- may MD aux
 +-- needs VBZ ccomp
 |   +-- tasks NNS nsubj
 |   |   +-- sub NN nn
 |   |   +-- succeed VB rcmod
 |   |       +-- that WDT nsubj
 |   |       +-- must MD aux
 |   |       +-- CALO NNP dobj
 |   |           +-- 2 CD num
 |   +-- drop VB ccomp
 |       +-- only RB advmod
 |       +-- tasks NNS dobj
 |           +-- the DT det
 |           +-- TWA NNP nn
 |               +-- and CC cc
 |               +-- TWP NNP conj
 +-- abort VB xcomp
     +-- to TO aux
     +-- them PRP dobj

11
Input: The Sixth Intl .
Parse:
Intl NNP ROOT
 +-- The DT det
 +-- Sixth NNP nn
 +-- . . punct

12
Input: Joint Conf .
Parse:
Conf NNP ROOT
 +-- Joint NNP nn
 +-- . . punct

13
Input: on Autonomous Agents and Multi Agent Systems -LRB- AAMAS 07 -RRB- 9 for the plan to succeed .
Parse:
on IN ROOT
 +-- Agents NNS pobj
 |   +-- Autonomous JJ amod
 |   +-- and CC cc
 |   +-- Systems NNPS conj
 |   |   +-- Multi NNP nn
 |   |   +-- Agent NNP nn
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- 07 CD dep
 |   |   |   +-- AAMAS NNP nn
 |   |   +-- -RRB- -RRB- punct
 |   +-- 9 CD dep
 |   +-- for IN prep
 |       +-- plan NN pobj
 |           +-- the DT det
 |           +-- succeed VB infmod
 |               +-- to TO aux
 +-- . . punct

14
Input: In such systems , a plan failure occurs if one of the actions or sub tasks within the plan fails .
Parse:
occurs VBZ ROOT
 +-- In IN prep
 |   +-- systems NNS pobj
 |       +-- such JJ amod
 +-- , , punct
 +-- failure NN nsubj
 |   +-- a DT det
 |   +-- plan NN nn
 +-- fails VBZ advcl
 |   +-- if IN mark
 |   +-- one CD nsubj
 |       +-- of IN prep
 |           +-- actions NNS pobj
 |               +-- the DT det
 |               +-- or CC cc
 |               +-- tasks NNS conj
 |               |   +-- sub NN nn
 |               +-- within IN prep
 |                   +-- plan NN pobj
 |                       +-- the DT det
 +-- . . punct

15
Input: The agent '' s action upon plan failure depends on its nature
Parse:
depends VBZ ROOT
 +-- action NN nsubj
 |   +-- agent NN poss
 |   |   +-- The DT det
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- upon IN prep
 |       +-- failure NN pobj
 |           +-- plan NN nn
 +-- on IN prep
     +-- nature NN pobj
         +-- its PRP$ poss

16
Input: Observe that , while task failure can follow from plan failure or a sequence of plan failures , plan failure need not lead to task failure provided the agent can successfully complete an alternate plan .
Parse:
complete VB ROOT
 +-- Observe VB csubj
 |   +-- lead VB ccomp
 |       +-- that DT mark
 |       +-- , , punct
 |       +-- follow VB advcl
 |       |   +-- while IN mark
 |       |   +-- failure NN nsubj
 |       |   |   +-- task NN nn
 |       |   +-- can MD aux
 |       |   +-- from IN prep
 |       |       +-- failure NN pobj
 |       |           +-- plan NN nn
 |       |           +-- or CC cc
 |       |           +-- sequence NN conj
 |       |               +-- a DT det
 |       |               +-- of IN prep
 |       |                   +-- failures NNS pobj
 |       |                       +-- plan NN nn
 |       +-- failure NN nsubj
 |       |   +-- plan NN nn
 |       +-- need VBP aux
 |       +-- not RB neg
 |       +-- to IN prep
 |           +-- failure NN pobj
 |               +-- task NN nn
 |               +-- provided VBD prep
 |                   +-- agent NN pobj
 |                       +-- the DT det
 +-- can MD aux
 +-- successfully RB advmod
 +-- plan NN dobj
 |   +-- an DT det
 |   +-- alternate JJ amod
 +-- . . punct

17
Input: Moreover , task failure can also arise separately from plan failure , if the agent decides to abort the task .
Parse:
arise VB ROOT
 +-- Moreover RB advmod
 +-- , , punct
 +-- failure NN nsubj
 |   +-- task NN nn
 +-- can MD aux
 +-- also RB advmod
 +-- separately RB advmod
 +-- from IN prep
 |   +-- failure NN pobj
 |       +-- plan NN nn
 +-- decides VBZ advcl
 |   +-- if IN mark
 |   +-- agent NN nsubj
 |   |   +-- the DT det
 |   +-- abort VB xcomp
 |       +-- to TO aux
 |       +-- task NN dobj
 |           +-- the DT det
 +-- . . punct

18
Input: Our approach associates an abort method with each plan .
Parse:
associates VBZ ROOT
 +-- approach NN nsubj
 |   +-- Our PRP$ poss
 +-- method NN dobj
 |   +-- an DT det
 |   +-- abort JJ amod
 |   +-- with IN prep
 |       +-- plan NN pobj
 |           +-- each DT det
 +-- . . punct

19
Input: This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task .
Parse:
enables VBZ ROOT
 +-- This DT nsubj
 +-- programmer NN dobj
 |   +-- the DT det
 +-- specify VB xcomp
 |   +-- to TO aux
 |   +-- actions NNS dobj
 |   |   +-- dedicated JJ amod
 |   |   +-- compensation NN nn
 |   +-- according VBG prep
 |       +-- to IN pcomp
 |           +-- attempting VBG pcomp
 |               +-- how WRB advmod
 |               +-- agent NN nsubj
 |               |   +-- the DT det
 |               +-- is VBZ aux
 |               +-- perform VB xcomp
 |                   +-- to TO aux
 |                   +-- task NN dobj
 |                       +-- the DT det
 +-- . . punct

20
Input: Note that our abort methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion , i.e. , the clean up is not limited to executing a predetermined set of actions .
Parse:
Note VB ROOT
 +-- programs NNS ccomp
 |   +-- that IN mark
 |   +-- methods NNS nsubj
 |   |   +-- our PRP$ poss
 |   |   +-- abort JJ amod
 |   +-- can MD aux
 |   +-- be VB cop
 |   +-- arbitrary JJ amod
 +-- and CC cc
 +-- so RB advmod
 +-- invoke VB conj
 |   +-- can MD aux
 |   +-- tasks NNS dobj
 |   |   +-- performed VBN rcmod
 |   |       +-- that WDT nsubjpass
 |   |       +-- may MD aux
 |   |       +-- be VB auxpass
 |   |       +-- dynamically RB advmod
 |   |       +-- in IN prep
 |   |           +-- fashion NN pobj
 |   |               +-- the DT det
 |   |               +-- usual JJ amod
 |   |               +-- BDI NNP nn
 |   +-- , , punct
 |   +-- i.e. FW advmod
 |   +-- limited JJ ccomp
 |       +-- up RP nsubj
 |       |   +-- the DT det
 |       |   +-- clean JJ nn
 |       +-- is VBZ cop
 |       +-- not RB neg
 |       +-- to IN prep
 |           +-- executing VBG pcomp
 |               +-- set NN dobj
 |                   +-- a DT det
 |                   +-- predetermined JJ amod
 |                   +-- of IN prep
 |                       +-- actions NNS pobj
 +-- . . punct

21
Input: The question remains which abort method should be invoked , and in what manner .
Parse:
remains VBZ ROOT
 +-- question NN nsubj
 |   +-- The DT det
 +-- invoked VBN dep
 |   +-- method NN nsubjpass
 |   |   +-- which WDT det
 |   |   +-- abort RB nn
 |   +-- should MD aux
 |   +-- be VB auxpass
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- in IN conj
 |       +-- manner NN pobj
 |           +-- what WP det
 +-- . . punct

22
Input: Given the complexity of agent action spaces , it is not possible nor desirable to enumerate a static set of rules .
Parse:
possible JJ ROOT
 +-- Given VBN prep
 |   +-- complexity NN dep
 |       +-- the DT det
 |       +-- of IN prep
 |           +-- spaces NNS pobj
 |               +-- action NN nn
 |                   +-- agent NN nn
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- not RB neg
 +-- nor CC cc
 +-- desirable JJ conj
 |   +-- enumerate VB xcomp
 |       +-- to TO aux
 |       +-- set NN dobj
 |           +-- a DT det
 |           +-- static NN amod
 |           +-- of IN prep
 |               +-- rules NNS pobj
 +-- . . punct

23
Input: Rather , the agent will invoke its abort methods dynamically according to the state of execution and its own internal events .
Parse:
invoke VB ROOT
 +-- Rather RB advmod
 +-- , , punct
 +-- agent NN nsubj
 |   +-- the DT det
 +-- will MD aux
 +-- methods NNS dobj
 |   +-- its PRP$ poss
 |   +-- abort JJ nn
 +-- dynamically RB advmod
 +-- according VBG prep
 |   +-- to IN pcomp
 |       +-- state NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |           |   +-- execution NN pobj
 |           +-- and CC cc
 |           +-- events NNS conj
 |               +-- its PRP$ poss
 |               +-- own JJ amod
 |               +-- internal JJ amod
 +-- . . punct

24
Input: An alternative to attaching an abort method to each plan is to attach such methods to each atomic action .
Parse:
is VBZ ROOT
 +-- alternative NN nsubj
 |   +-- An DT det
 |   +-- to IN prep
 |       +-- attaching VBG pcomp
 |           +-- method NN dobj
 |           |   +-- an DT det
 |           |   +-- abort JJ amod
 |           +-- to IN prep
 |               +-- plan NN pobj
 |                   +-- each DT det
 +-- attach VB xcomp
 |   +-- to TO aux
 |   +-- methods NNS dobj
 |   |   +-- such JJ amod
 |   +-- to IN prep
 |       +-- action NN pobj
 |           +-- each DT det
 |           +-- atomic JJ amod
 +-- . . punct

25
Input: We choose the former because
Parse:
choose VBP ROOT
 +-- We PRP nsubj
 +-- former JJ dobj
 |   +-- the DT det
 +-- because IN punct

26
Input: In order to understand how the agent '' s abort processing should function , we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans
Parse:
consider VBP ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- understand VB infmod
 |           +-- to TO aux
 |           +-- function VB ccomp
 |               +-- how WRB advmod
 |               +-- processing NN nsubj
 |               |   +-- agent NN poss
 |               |   |   +-- the DT det
 |               |   |   +-- '' '' punct
 |               |   |   +-- s POS possessive
 |               |   +-- abort JJ nn
 |               +-- should MD aux
 +-- , , punct
 +-- we PRP nsubj
 +-- situations NNS dobj
     +-- three CD num
     +-- sensible JJ rcmod
         +-- where WRB advmod
         +-- it PRP nsubj
         +-- is VBZ cop
         +-- consider VB advcl
             +-- for IN mark
             +-- agent NN nsubj
             |   +-- an DT det
             +-- to TO aux
             +-- aborting VBG xcomp
                 +-- some DT dobj
                     +-- of IN prep
                         +-- tasks NNS pobj
                             +-- its PRP$ poss
                             +-- and CC cc
                             +-- plans NNS conj

27
Input: For example , suppose company policy changes so that employees of Alice '' s seniority automatically have clearance for publishing papers .
Parse:
suppose VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- changes NNS dobj
 |   +-- company NN nn
 |   +-- policy NN nn
 +-- have VBP advcl
 |   +-- so IN mark
 |   +-- that IN mark
 |   +-- employees NNS nsubj
 |   |   +-- of IN prep
 |   |       +-- seniority NN pobj
 |   |           +-- Alice NNP poss
 |   |               +-- '' '' punct
 |   |               +-- s POS possessive
 |   +-- automatically RB advmod
 |   +-- clearance NN dobj
 |       +-- for IN prep
 |           +-- papers NNS pobj
 |               +-- publishing VBG nn
 +-- . . punct

28
Input: Since Alice now has clearance for publishing her paper , CALO can abort the plan for Apply For Clearance .
Parse:
abort VB ROOT
 +-- has VBZ advcl
 |   +-- Since IN mark
 |   +-- Alice NNP nsubj
 |   +-- now RB advmod
 |   +-- clearance NN dobj
 |       +-- for IN prep
 |           +-- publishing VBG pcomp
 |               +-- paper NN dobj
 |                   +-- her PRP$ poss
 +-- , , punct
 +-- CALO NNP nsubj
 +-- can MD aux
 +-- plan NN dobj
 |   +-- the DT det
 |   +-- for IN prep
 |       +-- Apply NNP pobj
 |           +-- For IN prep
 |               +-- Clearance NNP pobj
 +-- . . punct

29
Input: In doing so it must invoke the abort method , in this case thus performing Cancel Clearance Request.3 one fails then the others should be aborted , given that the failure of one branch leads to the failure of the overall task .
Parse:
invoke VB ROOT
 +-- In IN prep
 |   +-- doing VBG pcomp
 |       +-- so RB advmod
 +-- it PRP nsubj
 +-- must MD aux
 +-- method NN dobj
 |   +-- the DT det
 |   +-- abort NN nn
 +-- , , punct
 +-- performing VBG partmod
 |   +-- in IN prep
 |   |   +-- case NN pobj
 |   |       +-- this DT det
 |   +-- thus RB advmod
 |   +-- fails VBZ ccomp
 |       +-- one CD nsubj
 |       |   +-- Clearance NNP nn
 |       |   |   +-- Cancel NNP nn
 |       |   +-- Request.3 CD num
 |       +-- then RB advmod
 |       +-- aborted VBN ccomp
 |       |   +-- others NNS nsubjpass
 |       |   |   +-- the DT det
 |       |   +-- should MD aux
 |       |   +-- be VB auxpass
 |       +-- , , punct
 |       +-- given VBN prep
 |           +-- leads VBZ pcomp
 |               +-- that IN mark
 |               +-- failure NN nsubj
 |               |   +-- the DT det
 |               |   +-- of IN prep
 |               |       +-- branch NN pobj
 |               |           +-- one CD num
 |               +-- to IN prep
 |                   +-- failure NN pobj
 |                       +-- the DT det
 |                       +-- of IN prep
 |                           +-- task NN pobj
 |                               +-- the DT det
 |                               +-- overall JJ amod
 +-- . . punct

30
Input: For example , suppose that part way through writing the paper , Alice realizes that there is a fatal flaw in her results , and so notifies CALO that she will not be able to complete the paper by the deadline .
Parse:
suppose VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- realizes VBZ ccomp
 |   +-- that IN mark
 |   +-- way NN nsubj
 |   |   +-- part NN amod
 |   |   +-- through IN prep
 |   |       +-- writing VBG pcomp
 |   |           +-- paper NN dobj
 |   |               +-- the DT det
 |   +-- , , punct
 |   +-- Alice NNP nsubj
 |   +-- is VBZ ccomp
 |       +-- that IN mark
 |       +-- there EX expl
 |       +-- flaw NN nsubj
 |       |   +-- a DT det
 |       |   +-- fatal JJ amod
 |       |   +-- in IN prep
 |       |       +-- results NNS pobj
 |       |           +-- her PRP$ poss
 |       +-- , , punct
 |       +-- and CC cc
 |       +-- CALO NNP conj
 |           +-- so RB advmod
 |           +-- notifies NNS nn
 |           +-- able JJ ccomp
 |               +-- that IN mark
 |               +-- she PRP nsubj
 |               +-- will MD aux
 |               +-- not RB neg
 |               +-- be VB cop
 |               +-- complete VB xcomp
 |                   +-- to TO aux
 |                   +-- paper NN dobj
 |                   |   +-- the DT det
 |                   +-- by IN prep
 |                       +-- deadline NN pobj
 |                           +-- the DT det
 +-- . . punct

31
Input: The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted .
Parse:
cause VB ROOT
 +-- failure NN nsubj
 |   +-- The DT det
 |   +-- of IN prep
 |       +-- task NN pobj
 |           +-- the DT det
 |           +-- Paper NNP nn
 |               +-- Track NNP nn
 |               +-- Writing NNP nn
 +-- should MD aux
 +-- executed VBN dep
 |   +-- Apply NNP nsubjpass
 |   |   +-- the DT det
 |   |   +-- For IN prep
 |   |       +-- task NN pobj
 |   |           +-- Clearance NNP nn
 |   +-- being VBG auxpass
 |   +-- in IN prep
 |       +-- parallel NN pobj
 |           +-- aborted VBN infmod
 |               +-- to TO aux
 |               +-- be VB auxpass
 +-- . . punct

32
Input: task or intention , the agent should deliberate over whether the existing plan -LRB- s -RRB- should continue .
Parse:
deliberate VB ROOT
 +-- task NN nsubj
 |   +-- or CC cc
 |   +-- intention NN conj
 +-- , , punct
 +-- agent NN nsubj
 |   +-- the DT det
 +-- should MD aux
 +-- over RP prt
 +-- continue VB ccomp
 |   +-- whether IN mark
 |   +-- plan NN nsubj
 |   |   +-- the DT det
 |   |   +-- existing VBG amod
 |   |   +-- -LRB- -LRB- punct
 |   |   +-- s VBZ dep
 |   |   +-- -RRB- -RRB- punct
 |   +-- should MD aux
 +-- . . punct

33
Input: For example , suppose that Alice tasks CALO with a new , high priority task to purchase a replacement laptop , but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI .
Parse:
suppose VB ROOT
 +-- For IN prep
 |   +-- example NN pobj
 +-- , , punct
 +-- tasks NNS ccomp
 |   +-- that IN mark
 |   +-- Alice NNP nsubj
 |   +-- CALO NNP dobj
 |   +-- with IN prep
 |       +-- task NN pobj
 |           +-- a DT det
 |           +-- new JJ amod
 |           +-- , , punct
 |           +-- priority NN nn
 |           |   +-- high JJ amod
 |           +-- purchase VB infmod
 |               +-- to TO aux
 |               +-- laptop NN dobj
 |                   +-- a DT det
 |                   +-- replacement NN nn
 +-- but CC cc
 +-- lacks VBZ conj
 |   +-- that IN mark
 |   +-- Alice NNP nsubj
 |   +-- funds NNS dobj
 |       +-- enough JJ amod
 |       +-- purchase VB infmod
 |           +-- to IN aux
 |           +-- both DT preconj
 |           +-- laptop NN dobj
 |           |   +-- the DT det
 |           +-- and CC cc
 |           +-- attend VB conj
 |               +-- to TO aux
 |               +-- IJCAI NNP dobj
 +-- . . punct

34
Input: Reasoning over resource requirements -LRB- 20 , 10 -RRB- will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible , the abort method can detect the circumstances and handle the situation as appropriate .
Parse:
cause VB ROOT
 +-- Reasoning VBG csubj
 |   +-- over IN prep
 |       +-- requirements NNS pobj
 |           +-- resource NN nn
 |           +-- -LRB- -LRB- punct
 |           +-- 20 CD dep
 |           |   +-- , , punct
 |           |   +-- 10 CD num
 |           +-- -RRB- -RRB- punct
 +-- will MD aux
 +-- realize VB xcomp
 |   +-- agent NN nsubj
 |   |   +-- the DT det
 |   +-- to TO aux
 |   +-- 3 CD dobj
 |   +-- is VBZ advcl
 |       +-- If IN mark
 |       +-- there EX expl
 |       +-- difference NN nsubj
 |           +-- any DT det
 |           +-- between IN prep
 |               +-- abort VB pcomp
 |                   +-- how WRB advmod
 |                   +-- to TO aux
 |                   +-- task NN dobj
 |                       +-- a DT det
 |                       +-- performed VBN rcmod
 |                           +-- that WDT nsubjpass
 |                           +-- is VBZ auxpass
 |                           +-- externally RB advmod
 |                           +-- versus IN prep
 |                               +-- abort VB pcomp
 |                                   +-- how WRB advmod
 |                                   +-- to TO aux
 |                                   +-- one CD dobj
 |                                       +-- known VBN rcmod
 |                                       |   +-- that WDT nsubjpass
 |                                       |   +-- is VBZ auxpass
 |                                       |   +-- now RB advmod
 |                                       |   +-- impossible JJ xcomp
 |                                       |       +-- to TO aux
 |                                       |       +-- be VB cop
 |                                       +-- , , punct
 |                                       +-- detect VB rcmod
 |                                           +-- method NN nsubj
 |                                           |   +-- the DT det
 |                                           |   +-- abort NN nn
 |                                           +-- can MD aux
 |                                           +-- circumstances NNS dobj
 |                                           |   +-- the DT det
 |                                           +-- and CC cc
 |                                           +-- handle VB conj
 |                                               +-- situation NN dobj
 |                                               |   +-- the DT det
 |                                               +-- as IN prep
 |                                                   +-- appropriate JJ pobj
 +-- . . punct

35
Input: that it can not successfully complete both tasks .
Parse:
complete VB ROOT
 +-- that IN mark
 +-- it PRP nsubj
 +-- can MD aux
 +-- not RB neg
 +-- successfully RB advmod
 +-- tasks NNS dobj
 |   +-- both DT det
 +-- . . punct

36
Input: Given that the new task has greater importance , a rational agent will evaluate its best course of action and may decide to abortor at least suspend the existing task of submitting a paper and intentions derived from it -LRB- 12 -RRB- .
Parse:
evaluate VB ROOT
 +-- Given VBN prep
 |   +-- has VBZ pcomp
 |       +-- that IN mark
 |       +-- task NN nsubj
 |       |   +-- the DT det
 |       |   +-- new JJ amod
 |       +-- importance NN dobj
 |           +-- greater JJR amod
 +-- , , punct
 +-- agent NN nsubj
 |   +-- a DT det
 |   +-- rational JJ amod
 +-- will MD aux
 +-- course NN dobj
 |   +-- its PRP$ poss
 |   +-- best JJS amod
 |   +-- of IN prep
 |       +-- action NN pobj
 +-- and CC cc
 +-- decide VB conj
 |   +-- may MD aux
 |   +-- abortor VB xcomp
 |       +-- to TO aux
 |       +-- suspend VB xcomp
 |           +-- least RBS advmod
 |           |   +-- at RB advmod
 |           +-- task NN dobj
 |               +-- the DT det
 |               +-- existing VBG amod
 |               +-- of IN prep
 |                   +-- submitting VBG pcomp
 |                       +-- paper NN dobj
 |                           +-- a DT det
 |                           +-- and CC cc
 |                           +-- intentions NNS conj
 |                           +-- derived VBN partmod
 |                           |   +-- from IN prep
 |                           |       +-- it PRP pobj
 |                           +-- 12 CD appos
 |                               +-- -LRB- -LRB- punct
 |                               +-- -RRB- -RRB- punct
 +-- . . punct

37
Input: The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above .
Parse:
captures VBZ ROOT
 +-- semantics NNS nsubj
 |   +-- The DT det
 |   +-- operational JJ amod
 |   +-- provide VBP rcmod
 |       +-- we PRP nsubj
 |       +-- in IN prep
 |       |   +-- Section NN pobj
 |       |       +-- 4 CD num
 |       +-- for IN prep
 |           +-- tasks NNS pobj
 |               +-- aborting VBG amod
 |               +-- and CC cc
 |               +-- plans NNS conj
 +-- situations NNS dobj
 |   +-- the DT det
 |   +-- first JJ amod
 |   +-- two CD num
 |   +-- above RB advmod
 +-- . . punct

38
Input: The third situation involves deliberating over the importance of a task , which depends on various factors such as task priority .
Parse:
involves VBZ ROOT
 +-- situation NN nsubj
 |   +-- The DT det
 |   +-- third JJ amod
 +-- deliberating VBG xcomp
 |   +-- over IN prep
 |       +-- importance NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- task NN pobj
 |                   +-- a DT det
 |                   +-- , , punct
 |                   +-- depends VBZ rcmod
 |                       +-- which WDT nsubj
 |                       +-- on IN prep
 |                           +-- factors NNS pobj
 |                               +-- various JJ amod
 |                               +-- as IN prep
 |                                   +-- such JJ mwe
 |                                   +-- priority NN pobj
 |                                       +-- task NN nn
 +-- . . punct

39
Input: Although this deliberation is beyond the scope of this paper , it is a complementary topic of our future work .
Parse:
topic NN ROOT
 +-- is VBZ advcl
 |   +-- Although IN mark
 |   +-- deliberation NN nsubj
 |   |   +-- this DT det
 |   +-- beyond IN prep
 |       +-- scope NN pobj
 |           +-- the DT det
 |           +-- of IN prep
 |               +-- paper NN pobj
 |                   +-- this DT det
 +-- , , punct
 +-- it PRP nsubj
 +-- is VBZ cop
 +-- a DT det
 +-- complementary JJ amod
 +-- of IN prep
 |   +-- work NN pobj
 |       +-- our PRP$ poss
 |       +-- future JJ amod
 +-- . . punct

40
Input: Note that the above situations apply to achievement goals , for which the task is completed when a particular state of the world is brought about -LRB- e.g. , ensure we have clearance -RRB- .
Parse:
Note VB ROOT
 +-- apply VBP ccomp
 |   +-- that IN mark
 |   +-- situations NNS nsubj
 |   |   +-- the DT det
 |   |   +-- above JJ amod
 |   +-- to IN prep
 |   |   +-- goals NNS pobj
 |   |       +-- achievement NN nn
 |   |       +-- , , punct
 |   |       +-- completed VBN rcmod
 |   |           +-- for IN prep
 |   |           |   +-- which WDT pobj
 |   |           +-- task NN nsubjpass
 |   |           |   +-- the DT det
 |   |           +-- is VBZ auxpass
 |   |           +-- brought VBN advcl
 |   |               +-- when WRB advmod
 |   |               +-- state NN nsubjpass
 |   |               |   +-- a DT det
 |   |               |   +-- particular JJ amod
 |   |               |   +-- of IN prep
 |   |               |       +-- world NN pobj
 |   |               |           +-- the DT det
 |   |               +-- is VBZ auxpass
 |   |               +-- about RP prt
 |   +-- -LRB- -LRB- punct
 |   +-- e.g. JJ dep
 |   +-- , , punct
 |   +-- ensure VB dep
 |   |   +-- have VBP ccomp
 |   |       +-- we PRP nsubj
 |   |       +-- clearance NN dobj
 |   +-- -RRB- -RRB- punct
 +-- . . punct

41
Input: Different forms of reasoning apply to other goal types -LRB- 4 -RRB- such as maintenance goals -LRB- 1 -RRB- , where the goal is satisfied by maintaining a state of the world for some period of time -LRB- e.g. , maintain $ 100 in cash -RRB- .
Parse:
apply VBP ROOT
 +-- forms NNS nsubj
 |   +-- Different JJ amod
 |   +-- of IN prep
 |       +-- reasoning NN pobj
 +-- to IN prep
 |   +-- types NNS pobj
 |       +-- other JJ amod
 |       +-- goal NN nn
 |       +-- -LRB- -LRB- punct
 |       +-- 4 CD dep
 |       +-- -RRB- -RRB- punct
 |       +-- as IN prep
 |       |   +-- such JJ mwe
 |       |   +-- goals NNS pobj
 |       |       +-- maintenance NN nn
 |       |       +-- 1 CD appos
 |       |           +-- -LRB- -LRB- punct
 |       |           +-- -RRB- -RRB- punct
 |       +-- , , punct
 |       +-- satisfied VBN rcmod
 |           +-- where WRB advmod
 |           +-- goal NN nsubjpass
 |           |   +-- the DT det
 |           +-- is VBZ auxpass
 |           +-- by IN prep
 |               +-- maintaining VBG pcomp
 |                   +-- state NN dobj
 |                   |   +-- a DT det
 |                   |   +-- of IN prep
 |                   |       +-- world NN pobj
 |                   |           +-- the DT det
 |                   +-- for IN prep
 |                   |   +-- period NN pobj
 |                   |       +-- some DT det
 |                   |       +-- of IN prep
 |                   |           +-- time NN pobj
 |                   +-- e.g. NN dobj
 |                       +-- -LRB- -LRB- punct
 |                       +-- , , punct
 |                       +-- maintain VB dep
 |                       |   +-- $ $ dobj
 |                       |       +-- 100 CD num
 |                       |       +-- in IN prep
 |                       |           +-- cash NN pobj
 |                       +-- -RRB- -RRB- punct
 +-- . . punct

42
Input: Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute , and that appropriate clean up methods are performed as required .
Parse:
is VBZ ROOT
 +-- Representation NNP nsubj
 |   +-- Abort NNP nn
 |   +-- Method NNP nn
 |   +-- intent NN dep
 |       +-- The DT det
 |       +-- of IN prep
 |           +-- aborting VBG pcomp
 |               +-- task NN dobj
 |                   +-- a DT det
 |                   +-- or CC cc
 |                   +-- plan NN conj
 +-- cease VBP ccomp
 |   +-- that IN mark
 |   +-- task NN nsubj
 |   |   +-- the DT det
 |   |   +-- or CC cc
 |   |   +-- plan NN conj
 |   |   +-- and CC cc
 |   |   +-- children NNS conj
 |   |       +-- all PDT predet
 |   |       +-- its PRP$ poss
 |   +-- execute VB xcomp
 |   |   +-- to TO aux
 |   +-- , , punct
 |   +-- and CC cc
 |   +-- performed VBN conj
 |       +-- that DT mark
 |       +-- methods NNS nsubjpass
 |       |   +-- appropriate JJ amod
 |       |   +-- clean JJ amod
 |       |       +-- up RP prt
 |       +-- are VBP auxpass
 |       +-- required VBN advcl
 |           +-- as IN mark
 +-- . . punct

43
Input: In contrast to offline planning systems , BDI agents are situated
Parse:
situated VBN ROOT
 +-- In IN prep
 |   +-- contrast NN pobj
 |       +-- to IN prep
 |           +-- systems NNS pobj
 |               +-- offline VB amod
 |               +-- planning NN nn
 +-- , , punct
 +-- agents NNS nsubjpass
 |   +-- BDI NNP nn
 +-- are VBP auxpass

44
Input: As a result , the effects of many actions can not be simply undone .
Parse:
undone JJ ROOT
 +-- As IN prep
 |   +-- result NN pobj
 |       +-- a DT det
 +-- , , punct
 +-- effects NNS nsubj
 |   +-- the DT det
 |   +-- of IN prep
 |       +-- actions NNS pobj
 |           +-- many JJ amod
 +-- can MD aux
 +-- not RB neg
 +-- be VB cop
 +-- simply RB advmod
 +-- . . punct

45
Input: Moreover , the undo process may cause adverse effects .
Parse:
cause VB ROOT
 +-- Moreover RB advmod
 +-- , , punct
 +-- process NN nsubj
 |   +-- the DT det
 |   +-- undo JJ amod
 +-- may MD aux
 +-- effects NNS dobj
 |   +-- adverse JJ amod
 +-- . . punct

46
Input: Therefore , the clean up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may , if possible , recover resources .
Parse:
procedures NNS ROOT
 +-- Therefore RB advmod
 +-- , , punct
 +-- methods NNS nsubj
 |   +-- the DT det
 |   +-- clean JJ amod
 |   |   +-- up RP prt
 |   +-- specify VBP rcmod
 |       +-- that WDT dobj
 |       +-- we PRP nsubj
 +-- are VBP cop
 +-- forward RB amod
 +-- recovery NN nn
 +-- attempt VBP rcmod
 |   +-- that WDT nsubj
 |   +-- ensure VB xcomp
 |   |   +-- to TO aux
 |   |   +-- state NN dobj
 |   |       +-- a DT det
 |   |       +-- stable JJ amod
 |   +-- and CC cc
 |   +-- recover VB conj
 |       +-- that DT nsubj
 |       +-- also RB advmod
 |       +-- may MD aux
 |       +-- , , punct
 |       +-- possible JJ advcl
 |       |   +-- if IN mark
 |       +-- resources NNS dobj
 +-- . . punct

47
Input: The common plan representation in BDI style systems such as JACK and SPARK includes a failure method , which is the designated clean up method invoked when the plan fails .
Parse:
includes VBZ ROOT
 +-- representation NN nsubj
 |   +-- The DT det
 |   +-- plan NN nn
 |   |   +-- common JJ amod
 |   +-- in IN prep
 |       +-- systems NNS pobj
 |           +-- BDI NNP nn
 |           +-- style NN nn
 |           +-- as IN prep
 |               +-- such JJ mwe
 |               +-- JACK NNP pobj
 |                   +-- and CC cc
 |                   +-- SPARK NNP conj
 +-- method NN dobj
 |   +-- a DT det
 |   +-- failure NN nn
 |   +-- , , punct
 |   +-- method NN rcmod
 |       +-- which WDT nsubj
 |       +-- is VBZ cop
 |       +-- the DT det
 |       +-- designated VBN amod
 |       +-- clean JJ amod
 |       |   +-- up RP prt
 |       +-- invoked VBN partmod
 |           +-- fails VBZ advcl
 |               +-- when WRB advmod
 |               +-- plan NN nsubj
 |                   +-- the DT det
 +-- . . punct

48
Input: To this , we add the abort method , which is invoked if the plan is to be aborted .
Parse:
add VBP ROOT
 +-- To IN prep
 |   +-- this DT pobj
 +-- , , punct
 +-- we PRP nsubj
 +-- method NN dobj
 |   +-- the DT det
 |   +-- abort NN nn
 |   +-- , , punct
 |   +-- invoked VBN rcmod
 |       +-- which WDT nsubjpass
 |       +-- is VBZ auxpass
 |       +-- is VBZ advcl
 |           +-- if IN mark
 |           +-- plan NN nsubj
 |           |   +-- the DT det
 |           +-- aborted VBN xcomp
 |               +-- to TO aux
 |               +-- be VB auxpass
 +-- . . punct

49
Input: In our example , the abort method for the plan for Support Meeting Submission consists of invoking the sub task Cancel Paper Number .
Parse:
consists VBZ ROOT
 +-- In IN prep
 |   +-- example NN pobj
 |       +-- our PRP$ poss
 +-- , , punct
 +-- method NN nsubj
 |   +-- the DT det
 |   +-- abort NN nn
 |   +-- for IN prep
 |       +-- plan NN pobj
 |           +-- the DT det
 |           +-- for IN prep
 |               +-- Submission NNP pobj
 |                   +-- Meeting NNP nn
 |                       +-- Support NNP nn
 +-- of IN prep
 |   +-- invoking VBG pcomp
 |       +-- task NN dobj
 |           +-- the DT det
 |           +-- sub NN nn
 |           +-- Number NNP dep
 |               +-- Cancel NNP nn
 |               +-- Paper NNP nn
 +-- . . punct

50
Input: The abort method need not explicitly abort Apply For Clearance , because the agent will invoke the abort method for the subtask appropriately , as we outline below .
Parse:
need VBP ROOT
 +-- method NN nsubj
 |   +-- The DT det
 |   +-- abort NN nn
 +-- abort JJ xcomp
 |   +-- not RB neg
 |   +-- explicitly RB advmod
 |   +-- Apply NNP dobj
 |   +-- For IN prep
 |       +-- Clearance NNP pobj
 +-- , , punct
 +-- invoke VB advcl
 |   +-- because IN mark
 |   +-- agent NN nsubj
 |   |   +-- the DT det
 |   +-- will MD aux
 |   +-- method NN dobj
 |   |   +-- the DT det
 |   |   +-- abort NN nn
 |   |   +-- for IN prep
 |   |       +-- subtask NN pobj
 |   |           +-- the DT det
 |   +-- appropriately RB advmod
 |   +-- , , punct
 |   +-- outline VBP advcl
 |       +-- as IN mark
 |       +-- we PRP nsubj
 |       +-- below RB advmod
 +-- . . punct

51
Input: The assumption here is that , like the failure method , the programmer of the agent system has the opportunity to specify a sensible abort method that takes into consideration the point in the plan at which the abort is to be executed .
Parse:
is VBZ ROOT
 +-- assumption NN nsubj
 |   +-- The DT det
 |   +-- here RB advmod
 +-- has VBZ ccomp
 |   +-- that IN mark
 |   +-- , , punct
 |   +-- like IN prep
 |   |   +-- method NN pobj
 |   |       +-- the DT det
 |   |       +-- failure NN nn
 |   +-- programmer NN nsubj
 |   |   +-- the DT det
 |   |   +-- of IN prep
 |   |       +-- system NN pobj
 |   |           +-- the DT det
 |   |           +-- agent NN nn
 |   +-- opportunity NN dobj
 |       +-- the DT det
 |       +-- specify VB infmod
 |           +-- to TO aux
 |           +-- method NN dobj
 |               +-- a DT det
 |               +-- sensible JJ amod
 |               +-- abort NN nn
 |               +-- takes VBZ rcmod
 |                   +-- that WDT nsubj
 |                   +-- into IN prep
 |                   |   +-- consideration NN pobj
 |                   +-- point NN dobj
 |                       +-- the DT det
 |                       +-- in IN prep
 |                           +-- plan NN pobj
 |                               +-- the DT det
 |                               +-- is VBZ rcmod
 |                                   +-- at IN prep
 |                                   |   +-- which WDT pobj
 |                                   +-- abort NN nsubj
 |                                   |   +-- the DT det
 |                                   +-- executed VBN xcomp
 |                                       +-- to TO aux
 |                                       +-- be VB auxpass
 +-- . . punct

52
Input: For any plan , the abort method is optional
Parse:
optional JJ ROOT
 +-- For IN prep
 |   +-- plan NN pobj
 |       +-- any DT det
 +-- , , punct
 +-- method NN nsubj
 |   +-- the DT det
 |   +-- abort NN nn
 +-- is VBZ cop

53
Input: However , the agent '' s default behavioural rules still apply , for example , whether to retry an alternate plan for the parent task .
Parse:
apply VBP ROOT
 +-- However RB advmod
 +-- , , punct
 +-- rules NNS nsubj
 |   +-- agent NN poss
 |   |   +-- the DT det
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- default NN nn
 |   +-- behavioural JJ amod
 +-- still RB advmod
 +-- for IN prep
 |   +-- example NN pobj
 +-- retry VB ccomp
 |   +-- whether IN mark
 |   +-- to TO aux
 |   +-- plan NN dobj
 |       +-- an DT det
 |       +-- alternate JJ amod
 |       +-- for IN prep
 |           +-- task NN pobj
 |               +-- the DT det
 |               +-- parent NN nn
 +-- . . punct

54
Input: Note that an explicit representation of the clean up methods for tasks is not required , since tasks are performed by executing some plan or plans .
Parse:
Note VB ROOT
 +-- required VBN ccomp
 |   +-- that IN mark
 |   +-- representation NN nsubjpass
 |   |   +-- an DT det
 |   |   +-- explicit JJ amod
 |   |   +-- of IN prep
 |   |       +-- methods NNS pobj
 |   |           +-- the DT det
 |   |           +-- clean JJ amod
 |   |           |   +-- up RP prt
 |   |           +-- for IN prep
 |   |               +-- tasks NNS pobj
 |   +-- is VBZ auxpass
 |   +-- not RB neg
 |   +-- , , punct
 |   +-- performed VBN advcl
 |       +-- since IN mark
 |       +-- tasks NNS nsubjpass
 |       +-- are VBP auxpass
 |       +-- by IN prep
 |           +-- executing VBG pcomp
 |               +-- plan NN dobj
 |                   +-- some DT det
 |                   +-- or CC cc
 |                   +-- plans NNS conj
 +-- . . punct

55
Input: Hence , aborting a task means aborting the current plan that is executed to perform that task , as we next describe .
Parse:
means VBZ ROOT
 +-- Hence RB advmod
 +-- , , punct
 +-- aborting VBG csubj
 |   +-- task NN dobj
 |       +-- a DT det
 +-- aborting VBG xcomp
 |   +-- plan NN dobj
 |       +-- the DT det
 |       +-- current JJ amod
 |       +-- executed VBN rcmod
 |           +-- that WDT nsubjpass
 |           +-- is VBZ auxpass
 |           +-- perform VB xcomp
 |               +-- to TO aux
 |               +-- task NN dobj
 |               |   +-- that DT det
 |               +-- , , punct
 |               +-- describe VBP advcl
 |                   +-- as IN mark
 |                   +-- we PRP nsubj
 |                   +-- next VBP advmod
 +-- . . punct

56
Input: Abort Method Invocation We now informally lay out the agent '' s action upon aborting plans and tasks .
Parse:
lay VBD ROOT
 +-- We PRP nsubj
 |   +-- Invocation NNP nn
 |       +-- Abort NNP nn
 |       +-- Method NNP nn
 +-- now RB advmod
 +-- informally RB advmod
 +-- out RP prt
 +-- action NN dobj
 |   +-- agent NN poss
 |   |   +-- the DT det
 |   |   +-- '' '' punct
 |   |   +-- s POS possessive
 |   +-- upon IN prep
 |       +-- plans NNS pobj
 |           +-- aborting VBG nn
 |           +-- and CC cc
 |           +-- tasks NNS conj
 +-- . . punct

57
Input: When a plan P is aborted
Parse:
aborted VBN ROOT
 +-- When WRB advmod
 +-- P NN nsubjpass
 |   +-- a DT det
 |   +-- plan NN nn
 +-- is VBZ auxpass

58
Input: method of plan P .
Parse:
P NN ROOT
 +-- method NN nsubj
 |   +-- of IN prep
 |       +-- plan NN pobj
 +-- . . punct

59
Input: here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP .
Parse:
choose VB ROOT
 +-- here RB advmod
 |   +-- is VBZ ccomp
 |       +-- that IN mark
 |       +-- task NN advcl
 |       |   +-- if IN mark
 |       |   +-- parent NN nsubj
 |       |       +-- the DT det
 |       +-- TP NNP nsubj
 |       +-- aborted VBN xcomp
 |           +-- not RB neg
 |           +-- to TO aux
 |           +-- be VB auxpass
 +-- then RB advmod
 +-- agent NN nsubj
 |   +-- the DT det
 +-- may MD aux
 +-- plan NN dobj
 |   +-- another DT det
 |   +-- applicable JJ amod
 |   +-- satisfy VB infmod
 |       +-- to TO aux
 |       +-- TP NNP dobj
 +-- . . punct

60
Input: 10 The Sixth Intl .
Parse:
Intl NNP ROOT
 +-- 10 CD num
 +-- The DT det
 +-- Sixth NNP nn
 +-- . . punct

61
Input: Joint Conf .
Parse:
Conf NNP ROOT
 +-- Joint NNP nn
 +-- . . punct

62
Input: on Autonomous Agents and Multi Agent Systems -LRB- AAMAS 07 -RRB- When a task -LRB- or sub task -RRB- T is aborted
Parse:
on IN ROOT
 +-- Agents NNS pobj
 |   +-- Autonomous JJ amod
 |   +-- and CC cc
 |   +-- Systems NNPS conj
 |       +-- Multi NNP nn
 |       +-- Agent NNP nn
 |       +-- -LRB- -LRB- punct
 |       +-- 07 CD dep
 |       |   +-- AAMAS NNP nn
 |       +-- -RRB- -RRB- punct
 +-- aborted VBN advcl
     +-- When WRB advmod
     +-- task NN nsubjpass
     |   +-- a DT det
     |   +-- -LRB- -LRB- punct
     |   +-- or CC cc
     |   +-- task NN conj
     |   |   +-- sub NN nn
     |   +-- -RRB- -RRB- punct
     |   +-- T NNP appos
     +-- is VBZ auxpass

63
Input: is aborted , no other applicable plans to perform T should be tried as it is the task that is to be aborted .
Parse:
aborted VBN ROOT
 +-- is VBZ auxpass
 +-- , , punct
 +-- tried VBN ccomp
 |   +-- plans NNS nsubjpass
 |   |   +-- no DT det
 |   |   +-- other JJ amod
 |   |   +-- applicable JJ amod
 |   |   +-- perform VB infmod
 |   |       +-- to TO aux
 |   |       +-- T NN dobj
 |   +-- should MD aux
 |   +-- be VB auxpass
 |   +-- task NN advcl
 |       +-- as IN mark
 |       +-- it PRP nsubj
 |       +-- is VBZ cop
 |       +-- the DT det
 |       +-- is VBZ rcmod
 |           +-- that WDT nsubj
 |           +-- aborted VBN xcomp
 |               +-- to TO aux
 |               +-- be VB auxpass
 +-- . . punct

64
Input: In order to prevent infinitely cascading clean up efforts , we assume that abort methods will never be aborted nor fail .
Parse:
assume VBP ROOT
 +-- In IN prep
 |   +-- order NN pobj
 |       +-- prevent VB infmod
 |           +-- to TO aux
 |           +-- efforts NNS dobj
 |               +-- cascading VBG amod
 |               |   +-- infinitely RB advmod
 |               +-- clean VB amod
 |                   +-- up RP prt
 +-- , , punct
 +-- we PRP nsubj
 +-- aborted VBN ccomp
 |   +-- that IN mark
 |   +-- methods NNS nsubjpass
 |   |   +-- abort NN nn
 |   +-- will MD aux
 |   +-- never RB neg
 |   +-- be VB auxpass
 |   +-- nor CC cc
 |   +-- fail VB conj
 +-- . . punct

65
Input: In reality , however , an abort method may fail .
Parse:
fail VB ROOT
 +-- In IN prep
 |   +-- reality NN pobj
 +-- , , punct
 +-- however RB advmod
 +-- method NN nsubj
 |   +-- an DT det
 |   +-- abort JJ nn
 +-- may MD aux
 +-- . . punct

66
Input: In this case , lacking a more sophisticated handling mechanism , the agent simply stops executing the failed abort method with no further deliberation .
Parse:
stops VBZ ROOT
 +-- In IN prep
 |   +-- case NN pobj
 |       +-- this DT det
 +-- , , punct
 +-- lacking VBG partmod
 |   +-- mechanism NN dobj
 |       +-- a DT det
 |       +-- sophisticated JJ amod
 |       |   +-- more RBR advmod
 |       +-- handling NN nn
 +-- agent NN nsubj
 |   +-- the DT det
 +-- simply RB advmod
 +-- executing VBG xcomp
 |   +-- method NN dobj
 |   |   +-- the DT det
 |   |   +-- failed JJ amod
 |   |   +-- abort NN nn
 |   +-- with IN prep
 |       +-- deliberation NN pobj
 |           +-- no DT det
 |           +-- further JJ amod
 +-- . . punct

67
Input: The assumption we make is thus not a reflection of the full complexity of reality , but one that is pragmatic in terms of the agent execution cycle ; the approach to failure handling of -LRB- 21 -RRB- makes the same assumption .
Parse:
reflection NN ROOT
 +-- assumption NN nsubj
 |   +-- The DT det
 |   +-- make VBP rcmod
 |       +-- we PRP nsubj
 +-- is VBZ cop
 +-- thus RB advmod
 +-- not RB neg
 +-- a DT det
 +-- of IN prep
 |   +-- complexity NN pobj
 |       +-- the DT det
 |       +-- full JJ amod
 |       +-- of IN prep
 |           +-- reality NN pobj
 +-- , , punct
 +-- but CC cc
 +-- one CD conj
 |   +-- pragmatic JJ rcmod
 |   |   +-- that WDT nsubj
 |   |   +-- is VBZ cop
 |   |   +-- in IN prep
 |   |       +-- terms NNS pobj
 |   |           +-- of IN prep
 |   |               +-- cycle NN pobj
 |   |                   +-- the DT det
 |   |                   +-- agent NN nn
 |   |                   +-- execution NN nn
 |   +-- ; : punct
 |   +-- makes VBZ parataxis
 |       +-- approach NN nsubj
 |       |   +-- the DT det
 |       |   +-- to IN prep
 |       |       +-- handling NN pobj
 |       |           +-- failure NN nn
 |       |           +-- of IN prep
 |       |               +-- 21 CD pobj
 |       |                   +-- -LRB- -LRB- punct
 |       |                   +-- -RRB- -RRB- punct
 |       +-- assumption NN dobj
 |           +-- the DT det
 |           +-- same JJ amod
 +-- . . punct

68
Input: In systems such as SPARK , the programmer can specify an alternative behaviour for a failed failure or abort method by means of meta level procedures .
Parse:
specify VB ROOT
 +-- In IN prep
 |   +-- systems NNS pobj
 |       +-- as IN prep
 |           +-- such JJ mwe
 |           +-- SPARK NNP pobj
 +-- , , punct
 +-- programmer NN nsubj
 |   +-- the DT det
 +-- can MD aux
 +-- behaviour NN dobj
 |   +-- an DT det
 |   +-- alternative JJ amod
 |   +-- for IN prep
 |       +-- failure NN pobj
 |           +-- a DT det
 |           +-- failed JJ amod
 |           +-- or CC cc
 |           +-- method NN conj
 |           |   +-- abort NN nn
 |           +-- by IN prep
 |               +-- means NNS pobj
 |                   +-- of IN prep
 |                       +-- procedures NNS pobj
 |                           +-- level NN nn
 |                               +-- meta NN amod
 +-- . . punct

69
Input: We also assume that failure and abort methods terminate in finite time. .
Parse:
assume VBP ROOT
 +-- We PRP nsubj
 +-- also RB advmod
 +-- terminate VBP ccomp
 |   +-- that IN mark
 |   +-- methods NNS nsubj
 |   |   +-- failure NN nn
 |   |       +-- and CC cc
 |   |       +-- abort JJ conj
 |   +-- in IN prep
 |       +-- time. NN pobj
 |           +-- finite NN nn
 +-- . . punct
